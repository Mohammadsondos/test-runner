{"uid":"66b7742de7a8d43c","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1686773077440,"stop":1686773077805,"duration":365},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 14 Jun 2023 20:04:37 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 14 Jun 2023 20:04:37 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 14 Jun 2023 20:04:37 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 14 Jun 2023 20:04:37 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f3cb7be8a3535822","name":"stdout","source":"f3cb7be8a3535822.txt","type":"text/plain","size":1134}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az408-204"},{"name":"thread","value":"1912-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5160363277773b3f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 14 Jun 2023 20:04:22 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1686773061987,"stop":1686773062353,"duration":366}},{"uid":"d87dc6a7e322e27a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 14 Jun 2023 20:04:06 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1686773046341,"stop":1686773046855,"duration":514}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":245,"unknown":0,"total":249},"items":[{"uid":"3a8fb4fc52c22637","reportUrl":"https://novasamatech.github.io/test-runner/3207//#testresult/3a8fb4fc52c22637","status":"passed","time":{"start":1686758668968,"stop":1686758669269,"duration":301}},{"uid":"51f46abe8fe02a91","reportUrl":"https://novasamatech.github.io/test-runner/3206//#testresult/51f46abe8fe02a91","status":"passed","time":{"start":1686744314023,"stop":1686744314662,"duration":639}},{"uid":"ff96bc3ef59ba32d","reportUrl":"https://novasamatech.github.io/test-runner/3205//#testresult/ff96bc3ef59ba32d","status":"passed","time":{"start":1686729849346,"stop":1686729849713,"duration":367}},{"uid":"3651ef02cd0e47d4","reportUrl":"https://novasamatech.github.io/test-runner/3204//#testresult/3651ef02cd0e47d4","status":"passed","time":{"start":1686715431431,"stop":1686715431752,"duration":321}},{"uid":"ec1a958534078bc1","reportUrl":"https://novasamatech.github.io/test-runner/3203//#testresult/ec1a958534078bc1","status":"passed","time":{"start":1686701594070,"stop":1686701594512,"duration":442}},{"uid":"46e789e4852c9f48","reportUrl":"https://novasamatech.github.io/test-runner/3202//#testresult/46e789e4852c9f48","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 13 Jun 2023 20:04:42 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1686686682156,"stop":1686686682412,"duration":256}},{"uid":"8191f19b4d22d2ae","reportUrl":"https://novasamatech.github.io/test-runner/3201//#testresult/8191f19b4d22d2ae","status":"passed","time":{"start":1686672250987,"stop":1686672251443,"duration":456}},{"uid":"2cc4a4b76244acda","reportUrl":"https://novasamatech.github.io/test-runner/3200//#testresult/2cc4a4b76244acda","status":"passed","time":{"start":1686657895856,"stop":1686657896424,"duration":568}},{"uid":"959b50f2d0fc53dd","reportUrl":"https://novasamatech.github.io/test-runner/3199//#testresult/959b50f2d0fc53dd","status":"passed","time":{"start":1686643462608,"stop":1686643463061,"duration":453}},{"uid":"3b49888f9243a76e","reportUrl":"https://novasamatech.github.io/test-runner/3198//#testresult/3b49888f9243a76e","status":"passed","time":{"start":1686629046044,"stop":1686629046391,"duration":347}},{"uid":"5449255cdee8894d","reportUrl":"https://novasamatech.github.io/test-runner/3197//#testresult/5449255cdee8894d","status":"passed","time":{"start":1686615262531,"stop":1686615262995,"duration":464}},{"uid":"6a1a6031d683d67","reportUrl":"https://novasamatech.github.io/test-runner/3196//#testresult/6a1a6031d683d67","status":"passed","time":{"start":1686600244556,"stop":1686600245177,"duration":621}},{"uid":"7e97dd5a01cca80c","reportUrl":"https://novasamatech.github.io/test-runner/3195//#testresult/7e97dd5a01cca80c","status":"passed","time":{"start":1686585830822,"stop":1686585831167,"duration":345}},{"uid":"8ac2d46a740b792c","reportUrl":"https://novasamatech.github.io/test-runner/3194//#testresult/8ac2d46a740b792c","status":"passed","time":{"start":1686571503487,"stop":1686571503804,"duration":317}},{"uid":"ed3e50194e92a480","reportUrl":"https://novasamatech.github.io/test-runner/3193//#testresult/ed3e50194e92a480","status":"passed","time":{"start":1686557067343,"stop":1686557067675,"duration":332}},{"uid":"89b6030a14aedc28","reportUrl":"https://novasamatech.github.io/test-runner/3192//#testresult/89b6030a14aedc28","status":"passed","time":{"start":1686542644319,"stop":1686542644635,"duration":316}},{"uid":"da3ac310535a6692","reportUrl":"https://novasamatech.github.io/test-runner/3191//#testresult/da3ac310535a6692","status":"passed","time":{"start":1686528891472,"stop":1686528891784,"duration":312}},{"uid":"460cb60506b3325a","reportUrl":"https://novasamatech.github.io/test-runner/3190//#testresult/460cb60506b3325a","status":"passed","time":{"start":1686513851458,"stop":1686513851847,"duration":389}},{"uid":"2126b070264cf576","reportUrl":"https://novasamatech.github.io/test-runner/3189//#testresult/2126b070264cf576","status":"passed","time":{"start":1686499448300,"stop":1686499448775,"duration":475}},{"uid":"6c5a6342f9e93e89","reportUrl":"https://novasamatech.github.io/test-runner/3188//#testresult/6c5a6342f9e93e89","status":"passed","time":{"start":1686485097183,"stop":1686485097803,"duration":620}}]},"tags":[]},"source":"66b7742de7a8d43c.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}