{"uid":"c3a188f70a5e4021","name":"test_can_create_connection[Test for Zeitgeist, url: wss://zeitgeist.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"4e4bafe18ecd3560f8865fceae8e0c9e","time":{"start":1678550668832,"stop":1678550684180,"duration":15348},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK","statusTrace":"data = {'name': 'Zeitgeist', 'url': 'wss://zeitgeist.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK","statusTrace":"data = {'name': 'Zeitgeist', 'url': 'wss://zeitgeist.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"dcb842f21cfdd2f6","name":"stdout","source":"dcb842f21cfdd2f6.txt","type":"text/plain","size":236}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az341-266"},{"name":"thread","value":"1766-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://zeitgeist.api.onfinality.io/public-ws', 'name': 'Zeitgeist'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6724f0011d18ab37","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK","time":{"start":1678550643331,"stop":1678550658690,"duration":15359}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":59,"skipped":0,"passed":793,"unknown":0,"total":852},"items":[{"uid":"ca6a7fe84c64e5","reportUrl":"https://nova-wallet.github.io/test-runner/2615//#testresult/ca6a7fe84c64e5","status":"passed","time":{"start":1678536282972,"stop":1678536283442,"duration":470}},{"uid":"c6667616e5970996","reportUrl":"https://nova-wallet.github.io/test-runner/2614//#testresult/c6667616e5970996","status":"passed","time":{"start":1678521864317,"stop":1678521865159,"duration":842}},{"uid":"30b3668eaa9618b0","reportUrl":"https://nova-wallet.github.io/test-runner/2613//#testresult/30b3668eaa9618b0","status":"passed","time":{"start":1678507458293,"stop":1678507458790,"duration":497}},{"uid":"31b84d09718d60d1","reportUrl":"https://nova-wallet.github.io/test-runner/2612//#testresult/31b84d09718d60d1","status":"passed","time":{"start":1678493607303,"stop":1678493607772,"duration":469}},{"uid":"b44ef9432515d1e","reportUrl":"https://nova-wallet.github.io/test-runner/2611//#testresult/b44ef9432515d1e","status":"passed","time":{"start":1678478672718,"stop":1678478673377,"duration":659}},{"uid":"d433bbb46618d1","reportUrl":"https://nova-wallet.github.io/test-runner/2610//#testresult/d433bbb46618d1","status":"passed","time":{"start":1678464259110,"stop":1678464262592,"duration":3482}},{"uid":"1bbe354654950b90","reportUrl":"https://nova-wallet.github.io/test-runner/2609//#testresult/1bbe354654950b90","status":"passed","time":{"start":1678449926970,"stop":1678449927593,"duration":623}},{"uid":"75988a4339fbc488","reportUrl":"https://nova-wallet.github.io/test-runner/2608//#testresult/75988a4339fbc488","status":"passed","time":{"start":1678435475695,"stop":1678435476499,"duration":804}},{"uid":"8e7309d963aa6336","reportUrl":"https://nova-wallet.github.io/test-runner/2607//#testresult/8e7309d963aa6336","status":"passed","time":{"start":1678421056570,"stop":1678421057160,"duration":590}},{"uid":"dc5e2035d4fbc948","reportUrl":"https://nova-wallet.github.io/test-runner/2606//#testresult/dc5e2035d4fbc948","status":"passed","time":{"start":1678407274982,"stop":1678407275476,"duration":494}},{"uid":"4827b08991557f8b","reportUrl":"https://nova-wallet.github.io/test-runner/2605//#testresult/4827b08991557f8b","status":"passed","time":{"start":1678392258760,"stop":1678392259365,"duration":605}},{"uid":"574d06fb76bb2ac1","reportUrl":"https://nova-wallet.github.io/test-runner/2604//#testresult/574d06fb76bb2ac1","status":"passed","time":{"start":1678377875599,"stop":1678377876076,"duration":477}},{"uid":"5bdcb37fdd9811ba","reportUrl":"https://nova-wallet.github.io/test-runner/2603//#testresult/5bdcb37fdd9811ba","status":"passed","time":{"start":1678363535434,"stop":1678363536028,"duration":594}},{"uid":"4e1060bcacca1385","reportUrl":"https://nova-wallet.github.io/test-runner/2602//#testresult/4e1060bcacca1385","status":"passed","time":{"start":1678349093702,"stop":1678349094207,"duration":505}},{"uid":"a8a30ef2e81c09af","reportUrl":"https://nova-wallet.github.io/test-runner/2601//#testresult/a8a30ef2e81c09af","status":"passed","time":{"start":1678334654356,"stop":1678334654855,"duration":499}},{"uid":"f5f6c0b8b59995d2","reportUrl":"https://nova-wallet.github.io/test-runner/2600//#testresult/f5f6c0b8b59995d2","status":"passed","time":{"start":1678320893421,"stop":1678320894038,"duration":617}},{"uid":"a5679bbd666f8c76","reportUrl":"https://nova-wallet.github.io/test-runner/2599//#testresult/a5679bbd666f8c76","status":"passed","time":{"start":1678305857769,"stop":1678305858393,"duration":624}},{"uid":"c2ab9dd8deb9ca50","reportUrl":"https://nova-wallet.github.io/test-runner/2598//#testresult/c2ab9dd8deb9ca50","status":"passed","time":{"start":1678291452340,"stop":1678291452970,"duration":630}},{"uid":"214ea68d4ecba8e4","reportUrl":"https://nova-wallet.github.io/test-runner/2597//#testresult/214ea68d4ecba8e4","status":"passed","time":{"start":1678277131648,"stop":1678277132227,"duration":579}},{"uid":"5f92a291392995f8","reportUrl":"https://nova-wallet.github.io/test-runner/2596//#testresult/5f92a291392995f8","status":"passed","time":{"start":1678262697009,"stop":1678262697488,"duration":479}}]},"tags":[]},"source":"c3a188f70a5e4021.json","parameterValues":["{'url': 'wss://zeitgeist.api.onfinality.io/public-ws', 'name': 'Zeitgeist'}"]}