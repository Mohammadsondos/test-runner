{"uid":"685b051108f43941","name":"test_can_create_connection[Test for Composable Finance, url: wss://composable-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"b77da89cccf378f4709812ed85c1eaaf","time":{"start":1665561950250,"stop":1665561950289,"duration":39},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'composable-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f9608d1c4f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.8/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'composable-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.8/socket.py:918: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Composable Finance', 'url': 'wss://composable-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/create_type_file.py:231: in create_connection_by_url\n    substrate = SubstrateInterface(url=url, use_remote_preset=True)\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:550: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:588: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:605: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:246: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.8/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'composable-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f9608d1c4f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.8/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az203-757"},{"name":"thread","value":"1649-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://composable-rpc.dwellir.com', 'name': 'Composable Finance'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cdf0415d65a1d956","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665561939982,"stop":1665561940095,"duration":113}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":19,"skipped":0,"passed":0,"unknown":0,"total":19},"items":[{"uid":"12426cfa4ff7d723","reportUrl":"https://nova-wallet.github.io/test-runner/1696//#testresult/12426cfa4ff7d723","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665549097584,"stop":1665549097666,"duration":82}},{"uid":"4670d2b67a7c732","reportUrl":"https://nova-wallet.github.io/test-runner/1695//#testresult/4670d2b67a7c732","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665534203817,"stop":1665534203916,"duration":99}},{"uid":"ff8288e65ece87ba","reportUrl":"https://nova-wallet.github.io/test-runner/1694//#testresult/ff8288e65ece87ba","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665518753777,"stop":1665518753929,"duration":152}},{"uid":"33667063f5fee5d3","reportUrl":"https://nova-wallet.github.io/test-runner/1693//#testresult/33667063f5fee5d3","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665504447118,"stop":1665504447228,"duration":110}},{"uid":"f03b1cc3930b00a9","reportUrl":"https://nova-wallet.github.io/test-runner/1692//#testresult/f03b1cc3930b00a9","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665489992492,"stop":1665489992588,"duration":96}},{"uid":"eafd4b3687b39e49","reportUrl":"https://nova-wallet.github.io/test-runner/1691//#testresult/eafd4b3687b39e49","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665475767569,"stop":1665475767597,"duration":28}},{"uid":"c5ea4aa41da966c3","reportUrl":"https://nova-wallet.github.io/test-runner/1690//#testresult/c5ea4aa41da966c3","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665462882178,"stop":1665462882209,"duration":31}},{"uid":"fc50e0a0b2db4920","reportUrl":"https://nova-wallet.github.io/test-runner/1689//#testresult/fc50e0a0b2db4920","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665447685154,"stop":1665447685223,"duration":69}},{"uid":"603acf3722acee8e","reportUrl":"https://nova-wallet.github.io/test-runner/1688//#testresult/603acf3722acee8e","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665432307277,"stop":1665432307346,"duration":69}},{"uid":"be930de3460efb2","reportUrl":"https://nova-wallet.github.io/test-runner/1687//#testresult/be930de3460efb2","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665418031105,"stop":1665418031195,"duration":90}},{"uid":"e586ecb3500bd357","reportUrl":"https://nova-wallet.github.io/test-runner/1686//#testresult/e586ecb3500bd357","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665403614933,"stop":1665403615044,"duration":111}},{"uid":"ca0cdb89e48bd2e3","reportUrl":"https://nova-wallet.github.io/test-runner/1685//#testresult/ca0cdb89e48bd2e3","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665389296328,"stop":1665389296500,"duration":172}},{"uid":"4b2c4f1bd138ee2e","reportUrl":"https://nova-wallet.github.io/test-runner/1684//#testresult/4b2c4f1bd138ee2e","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665387035787,"stop":1665387035863,"duration":76}},{"uid":"1880494d35c2c186","reportUrl":"https://nova-wallet.github.io/test-runner/1683//#testresult/1880494d35c2c186","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665385348107,"stop":1665385348218,"duration":111}},{"uid":"add41761c4c4ce29","reportUrl":"https://nova-wallet.github.io/test-runner/1682//#testresult/add41761c4c4ce29","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665383607824,"stop":1665383607904,"duration":80}},{"uid":"111a8f470a57a40a","reportUrl":"https://nova-wallet.github.io/test-runner/22//#testresult/111a8f470a57a40a","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665381999585,"stop":1665381999723,"duration":138}},{"uid":"a682f99a13f120c9","reportUrl":"https://nova-wallet.github.io/test-runner/22//#testresult/a682f99a13f120c9","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665380833007,"stop":1665380833059,"duration":52}},{"uid":"d5ea5e5bf92314d7","reportUrl":"https://nova-wallet.github.io/test-runner/21//#testresult/d5ea5e5bf92314d7","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1665378305123,"stop":1665378305216,"duration":93}}]},"tags":[]},"source":"685b051108f43941.json","parameterValues":["{'url': 'wss://composable-rpc.dwellir.com', 'name': 'Composable Finance'}"]}