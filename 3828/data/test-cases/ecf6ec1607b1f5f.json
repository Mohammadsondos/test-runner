{"uid":"ecf6ec1607b1f5f","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1695571355973,"stop":1695571356030,"duration":57},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 24 Sep 2023 16:02:36 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 24 Sep 2023 16:02:36 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 24 Sep 2023 16:02:36 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 24 Sep 2023 16:02:36 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f9b4c50bdb00a1c8","name":"stdout","source":"f9b4c50bdb00a1c8.txt","type":"text/plain","size":1098}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az411-842"},{"name":"thread","value":"2162-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b52ef6b2c4ab7064","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 24 Sep 2023 16:02:20 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695571340808,"stop":1695571340835,"duration":27}},{"uid":"8b7347fb0326484b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 24 Sep 2023 16:02:05 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695571325660,"stop":1695571325715,"duration":55}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":186,"unknown":0,"total":188},"items":[{"uid":"76008a7dafe95301","reportUrl":"https://novasamatech.github.io/test-runner/3827//#testresult/76008a7dafe95301","status":"passed","time":{"start":1695556922052,"stop":1695556922112,"duration":60}},{"uid":"b4ee2e89309158ad","reportUrl":"https://novasamatech.github.io/test-runner/3826//#testresult/b4ee2e89309158ad","status":"passed","time":{"start":1695542531308,"stop":1695542531712,"duration":404}},{"uid":"66e069db8fcdeda9","reportUrl":"https://novasamatech.github.io/test-runner/3825//#testresult/66e069db8fcdeda9","status":"passed","time":{"start":1695528114081,"stop":1695528114138,"duration":57}},{"uid":"74092bea59b0b021","reportUrl":"https://novasamatech.github.io/test-runner/3824//#testresult/74092bea59b0b021","status":"passed","time":{"start":1695513768263,"stop":1695513768344,"duration":81}},{"uid":"e738bd0bfde2165c","reportUrl":"https://novasamatech.github.io/test-runner/3823//#testresult/e738bd0bfde2165c","status":"passed","time":{"start":1695499315414,"stop":1695499315469,"duration":55}},{"uid":"823ac0cf5d61be17","reportUrl":"https://novasamatech.github.io/test-runner/3822//#testresult/823ac0cf5d61be17","status":"passed","time":{"start":1695484927260,"stop":1695484927345,"duration":85}},{"uid":"4326b0dbe309060b","reportUrl":"https://novasamatech.github.io/test-runner/3821//#testresult/4326b0dbe309060b","status":"passed","time":{"start":1695470534333,"stop":1695470534542,"duration":209}},{"uid":"54abcc53d63ed6ad","reportUrl":"https://novasamatech.github.io/test-runner/3820//#testresult/54abcc53d63ed6ad","status":"passed","time":{"start":1695456101589,"stop":1695456101652,"duration":63}},{"uid":"df1a87e53d50bd99","reportUrl":"https://novasamatech.github.io/test-runner/3819//#testresult/df1a87e53d50bd99","status":"passed","time":{"start":1695441713007,"stop":1695441713092,"duration":85}},{"uid":"add3b8685ff760e","reportUrl":"https://novasamatech.github.io/test-runner/3818//#testresult/add3b8685ff760e","status":"passed","time":{"start":1695427364445,"stop":1695427364637,"duration":192}},{"uid":"1e442486424ebf92","reportUrl":"https://novasamatech.github.io/test-runner/3817//#testresult/1e442486424ebf92","status":"passed","time":{"start":1695412921049,"stop":1695412921124,"duration":75}},{"uid":"9bc8f5fab8477034","reportUrl":"https://novasamatech.github.io/test-runner/3816//#testresult/9bc8f5fab8477034","status":"passed","time":{"start":1695398527646,"stop":1695398527728,"duration":82}},{"uid":"add99c4a836c6e40","reportUrl":"https://novasamatech.github.io/test-runner/3815//#testresult/add99c4a836c6e40","status":"passed","time":{"start":1695384132982,"stop":1695384133222,"duration":240}},{"uid":"b961d6298a053cb0","reportUrl":"https://novasamatech.github.io/test-runner/3814//#testresult/b961d6298a053cb0","status":"passed","time":{"start":1695369748990,"stop":1695369749443,"duration":453}},{"uid":"5ee5e4af16548b62","reportUrl":"https://novasamatech.github.io/test-runner/3813//#testresult/5ee5e4af16548b62","status":"passed","time":{"start":1695355359544,"stop":1695355359875,"duration":331}},{"uid":"6611a3bad8565a33","reportUrl":"https://novasamatech.github.io/test-runner/3812//#testresult/6611a3bad8565a33","status":"passed","time":{"start":1695340981704,"stop":1695340981934,"duration":230}},{"uid":"54b6ab8cd8d7c8bb","reportUrl":"https://novasamatech.github.io/test-runner/3810//#testresult/54b6ab8cd8d7c8bb","status":"passed","time":{"start":1695312133224,"stop":1695312133306,"duration":82}},{"uid":"5b1feeb382f6577d","reportUrl":"https://novasamatech.github.io/test-runner/3809//#testresult/5b1feeb382f6577d","status":"passed","time":{"start":1695297765563,"stop":1695297765893,"duration":330}},{"uid":"32885d7da31840d0","reportUrl":"https://novasamatech.github.io/test-runner/3808//#testresult/32885d7da31840d0","status":"passed","time":{"start":1695283330462,"stop":1695283330530,"duration":68}},{"uid":"5d4a004aba5c39e0","reportUrl":"https://novasamatech.github.io/test-runner/3807//#testresult/5d4a004aba5c39e0","status":"passed","time":{"start":1695268939859,"stop":1695268940253,"duration":394}}]},"tags":[]},"source":"ecf6ec1607b1f5f.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}