{"uid":"3e986a2d9417caf","name":"test_can_create_connection[Test for Ajuna, url: wss://rpc-parachain.ajuna.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9e45091b8d9f46b64ef77b6ae354ace8","time":{"start":1699790544938,"stop":1699790545170,"duration":232},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 12:02:25 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 12:02:25 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 12:02:25 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 12:02:25 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"3ebd6bf574d4f504","name":"stdout","source":"3ebd6bf574d4f504.txt","type":"text/plain","size":1166}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1116-853"},{"name":"thread","value":"2326-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b187ada1ecbe5e4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 12:02:09 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699790529637,"stop":1699790529870,"duration":233}},{"uid":"82a42d8bcd590de0","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1699790514244,"stop":1699790514524,"duration":280}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":21,"skipped":0,"passed":462,"unknown":0,"total":483},"items":[{"uid":"faecc5ff3609e6b1","reportUrl":"https://novasamatech.github.io/test-runner/4122//#testresult/faecc5ff3609e6b1","status":"passed","time":{"start":1699776191889,"stop":1699776192403,"duration":514}},{"uid":"cfb481501f9640d8","reportUrl":"https://novasamatech.github.io/test-runner/4121//#testresult/cfb481501f9640d8","status":"passed","time":{"start":1699761725770,"stop":1699761726363,"duration":593}},{"uid":"e29fc6222ffebf94","reportUrl":"https://novasamatech.github.io/test-runner/4120//#testresult/e29fc6222ffebf94","status":"passed","time":{"start":1699747404428,"stop":1699747404955,"duration":527}},{"uid":"de12fd6ce366ec94","reportUrl":"https://novasamatech.github.io/test-runner/4119//#testresult/de12fd6ce366ec94","status":"passed","time":{"start":1699732932403,"stop":1699732932969,"duration":566}},{"uid":"5f27fc6f74a87561","reportUrl":"https://novasamatech.github.io/test-runner/4118//#testresult/5f27fc6f74a87561","status":"passed","time":{"start":1699718535582,"stop":1699718535909,"duration":327}},{"uid":"c9cfc9033ab6af93","reportUrl":"https://novasamatech.github.io/test-runner/4117//#testresult/c9cfc9033ab6af93","status":"passed","time":{"start":1699704101696,"stop":1699704102256,"duration":560}},{"uid":"dcb26bd2f1f8edbc","reportUrl":"https://novasamatech.github.io/test-runner/4116//#testresult/dcb26bd2f1f8edbc","status":"passed","time":{"start":1699689706815,"stop":1699689707225,"duration":410}},{"uid":"a45b69d500a4d13b","reportUrl":"https://novasamatech.github.io/test-runner/4115//#testresult/a45b69d500a4d13b","status":"passed","time":{"start":1699675304384,"stop":1699675304812,"duration":428}},{"uid":"7a890d539b9285db","reportUrl":"https://novasamatech.github.io/test-runner/4114//#testresult/7a890d539b9285db","status":"passed","time":{"start":1699660957604,"stop":1699660958220,"duration":616}},{"uid":"98432fef745ace37","reportUrl":"https://novasamatech.github.io/test-runner/4113//#testresult/98432fef745ace37","status":"passed","time":{"start":1699646661798,"stop":1699646662263,"duration":465}},{"uid":"1b03c8a4b4199b7","reportUrl":"https://novasamatech.github.io/test-runner/4112//#testresult/1b03c8a4b4199b7","status":"passed","time":{"start":1699632136415,"stop":1699632137040,"duration":625}},{"uid":"578a8c6c28de3aca","reportUrl":"https://novasamatech.github.io/test-runner/4111//#testresult/578a8c6c28de3aca","status":"passed","time":{"start":1699617721437,"stop":1699617721769,"duration":332}},{"uid":"851c3d18f3e91231","reportUrl":"https://novasamatech.github.io/test-runner/4110//#testresult/851c3d18f3e91231","status":"passed","time":{"start":1699603372105,"stop":1699603372893,"duration":788}},{"uid":"dd1926b332c0ec82","reportUrl":"https://novasamatech.github.io/test-runner/4109//#testresult/dd1926b332c0ec82","status":"passed","time":{"start":1699588970421,"stop":1699588970776,"duration":355}},{"uid":"c953a817caceb45","reportUrl":"https://novasamatech.github.io/test-runner/4108//#testresult/c953a817caceb45","status":"passed","time":{"start":1699574549908,"stop":1699574550259,"duration":351}},{"uid":"8b7effb5eeaf4abc","reportUrl":"https://novasamatech.github.io/test-runner/4107//#testresult/8b7effb5eeaf4abc","status":"passed","time":{"start":1699560136977,"stop":1699560137523,"duration":546}},{"uid":"e598165f7889b6c7","reportUrl":"https://novasamatech.github.io/test-runner/4106//#testresult/e598165f7889b6c7","status":"passed","time":{"start":1699545721908,"stop":1699545722341,"duration":433}},{"uid":"3b650dd9394fbbe5","reportUrl":"https://novasamatech.github.io/test-runner/4105//#testresult/3b650dd9394fbbe5","status":"passed","time":{"start":1699531392701,"stop":1699531393080,"duration":379}},{"uid":"c23cc6d16f26f006","reportUrl":"https://novasamatech.github.io/test-runner/4104//#testresult/c23cc6d16f26f006","status":"passed","time":{"start":1699516917298,"stop":1699516917716,"duration":418}},{"uid":"af2fe570586b90cb","reportUrl":"https://novasamatech.github.io/test-runner/4103//#testresult/af2fe570586b90cb","status":"passed","time":{"start":1699502497136,"stop":1699502497557,"duration":421}}]},"tags":[]},"source":"3e986a2d9417caf.json","parameterValues":["{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"]}