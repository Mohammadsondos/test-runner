{"uid":"3e2b12428df0a053","name":"test_can_create_connection[Test for Aleph Zero, url: wss://ws.azero.dev]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"5294a3ed40726bd707bf03637593143b","time":{"start":1689581140751,"stop":1689581140940,"duration":189},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Mon, 17 Jul 2023 08:05:40 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Aleph Zero', 'url': 'wss://ws.azero.dev'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Mon, 17 Jul 2023 08:05:40 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Mon, 17 Jul 2023 08:05:40 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Aleph Zero', 'url': 'wss://ws.azero.dev'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Mon, 17 Jul 2023 08:05:40 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"d7fb391e7b1770e5","name":"stdout","source":"d7fb391e7b1770e5.txt","type":"text/plain","size":1602}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az162-832"},{"name":"thread","value":"1926-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://ws.azero.dev', 'name': 'Aleph Zero'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5fc04e533be90ba8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Mon, 17 Jul 2023 08:05:25 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1689581125519,"stop":1689581125675,"duration":156}},{"uid":"818368235580b784","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Mon, 17 Jul 2023 08:05:10 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1689581110193,"stop":1689581110404,"duration":211}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":407,"unknown":0,"total":408},"items":[{"uid":"3f3d6a56b48e21d3","reportUrl":"https://novasamatech.github.io/test-runner/3402//#testresult/3f3d6a56b48e21d3","status":"passed","time":{"start":1689566670398,"stop":1689566670630,"duration":232}},{"uid":"d2b6ad6440325d85","reportUrl":"https://novasamatech.github.io/test-runner/3401//#testresult/d2b6ad6440325d85","status":"passed","time":{"start":1689553047962,"stop":1689553048231,"duration":269}},{"uid":"1bf6ab7d323ee2f5","reportUrl":"https://novasamatech.github.io/test-runner/3400//#testresult/1bf6ab7d323ee2f5","status":"passed","time":{"start":1689537828595,"stop":1689537828843,"duration":248}},{"uid":"2229dac0be0fcc7","reportUrl":"https://novasamatech.github.io/test-runner/3399//#testresult/2229dac0be0fcc7","status":"passed","time":{"start":1689523451577,"stop":1689523452002,"duration":425}},{"uid":"d824e2ceb9a6734d","reportUrl":"https://novasamatech.github.io/test-runner/3398//#testresult/d824e2ceb9a6734d","status":"passed","time":{"start":1689509098534,"stop":1689509098633,"duration":99}},{"uid":"1b9794ada0bc2cde","reportUrl":"https://novasamatech.github.io/test-runner/3397//#testresult/1b9794ada0bc2cde","status":"passed","time":{"start":1689494641835,"stop":1689494641917,"duration":82}},{"uid":"cc859f75f4dfbd86","reportUrl":"https://novasamatech.github.io/test-runner/3396//#testresult/cc859f75f4dfbd86","status":"passed","time":{"start":1689480237925,"stop":1689480238012,"duration":87}},{"uid":"fe63266b5a504867","reportUrl":"https://novasamatech.github.io/test-runner/3395//#testresult/fe63266b5a504867","status":"passed","time":{"start":1689466677748,"stop":1689466678098,"duration":350}},{"uid":"d62e97c3521e33b8","reportUrl":"https://novasamatech.github.io/test-runner/3394//#testresult/d62e97c3521e33b8","status":"passed","time":{"start":1689451445951,"stop":1689451446207,"duration":256}},{"uid":"cce104925ac6e011","reportUrl":"https://novasamatech.github.io/test-runner/3393//#testresult/cce104925ac6e011","status":"passed","time":{"start":1689437048506,"stop":1689437048585,"duration":79}},{"uid":"2292f8d8027f9b51","reportUrl":"https://novasamatech.github.io/test-runner/3392//#testresult/2292f8d8027f9b51","status":"passed","time":{"start":1689422695720,"stop":1689422695984,"duration":264}},{"uid":"e92497f782d889f5","reportUrl":"https://novasamatech.github.io/test-runner/3391//#testresult/e92497f782d889f5","status":"passed","time":{"start":1689408245220,"stop":1689408245623,"duration":403}},{"uid":"e59cabd95b8082ea","reportUrl":"https://novasamatech.github.io/test-runner/3390//#testresult/e59cabd95b8082ea","status":"passed","time":{"start":1689393843530,"stop":1689393843607,"duration":77}},{"uid":"4e93030324bcf311","reportUrl":"https://novasamatech.github.io/test-runner/3389//#testresult/4e93030324bcf311","status":"passed","time":{"start":1689380134219,"stop":1689380134603,"duration":384}},{"uid":"75697172f55787fe","reportUrl":"https://novasamatech.github.io/test-runner/3388//#testresult/75697172f55787fe","status":"passed","time":{"start":1689365046770,"stop":1689365047136,"duration":366}},{"uid":"2550793fff7a6879","reportUrl":"https://novasamatech.github.io/test-runner/3387//#testresult/2550793fff7a6879","status":"passed","time":{"start":1689350660005,"stop":1689350660101,"duration":96}},{"uid":"a329d41f8166e6f3","reportUrl":"https://novasamatech.github.io/test-runner/3386//#testresult/a329d41f8166e6f3","status":"passed","time":{"start":1689336317564,"stop":1689336317658,"duration":94}},{"uid":"4f3a3695324a2d9d","reportUrl":"https://novasamatech.github.io/test-runner/3385//#testresult/4f3a3695324a2d9d","status":"passed","time":{"start":1689321868957,"stop":1689321869315,"duration":358}},{"uid":"79d449add20f71ab","reportUrl":"https://novasamatech.github.io/test-runner/3384//#testresult/79d449add20f71ab","status":"passed","time":{"start":1689307458885,"stop":1689307459154,"duration":269}},{"uid":"b601ba30958f675e","reportUrl":"https://novasamatech.github.io/test-runner/3383//#testresult/b601ba30958f675e","status":"passed","time":{"start":1689293748346,"stop":1689293748424,"duration":78}}]},"tags":[]},"source":"3e2b12428df0a053.json","parameterValues":["{'url': 'wss://ws.azero.dev', 'name': 'Aleph Zero'}"]}