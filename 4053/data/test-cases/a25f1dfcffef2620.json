{"uid":"a25f1dfcffef2620","name":"test_can_create_connection[Test for Westend, url: wss://westend.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"069699d857f75062eec2c2e7a6900f83","time":{"start":1698782637029,"stop":1698782697575,"duration":60546},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Westend', 'url': 'wss://westend.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Westend', 'url': 'wss://westend.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"7fdedaccf624e54b","name":"stdout","source":"7fdedaccf624e54b.txt","type":"text/plain","size":384}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1232-199"},{"name":"thread","value":"2216-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1d69d8398098926b","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1698782561310,"stop":1698782621859,"duration":60549}},{"uid":"6394285570339692","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1698782485510,"stop":1698782546057,"duration":60547}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":411,"unknown":0,"total":413},"items":[{"uid":"5694d65ee47be63d","reportUrl":"https://novasamatech.github.io/test-runner/4052//#testresult/5694d65ee47be63d","status":"passed","time":{"start":1698768080139,"stop":1698768088196,"duration":8057}},{"uid":"9ca84816b2cd9e32","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/9ca84816b2cd9e32","status":"passed","time":{"start":1698753685700,"stop":1698753686471,"duration":771}},{"uid":"1aef7420c9600184","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/1aef7420c9600184","status":"passed","time":{"start":1698739292306,"stop":1698739293315,"duration":1009}},{"uid":"a1fd4924486ff67c","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/a1fd4924486ff67c","status":"passed","time":{"start":1698724888596,"stop":1698724889536,"duration":940}},{"uid":"3ddab5ab6754fa59","reportUrl":"https://novasamatech.github.io/test-runner/4048//#testresult/3ddab5ab6754fa59","status":"passed","time":{"start":1698710527380,"stop":1698710528488,"duration":1108}},{"uid":"65f83643a1e14ba6","reportUrl":"https://novasamatech.github.io/test-runner/4047//#testresult/65f83643a1e14ba6","status":"passed","time":{"start":1698696076731,"stop":1698696077482,"duration":751}},{"uid":"ba8c1cab4f373a80","reportUrl":"https://novasamatech.github.io/test-runner/4046//#testresult/ba8c1cab4f373a80","status":"passed","time":{"start":1698681687136,"stop":1698681687940,"duration":804}},{"uid":"66d793dea7b5981b","reportUrl":"https://novasamatech.github.io/test-runner/4045//#testresult/66d793dea7b5981b","status":"passed","time":{"start":1698667296613,"stop":1698667297363,"duration":750}},{"uid":"145e040a63b29c71","reportUrl":"https://novasamatech.github.io/test-runner/4044//#testresult/145e040a63b29c71","status":"passed","time":{"start":1698652873414,"stop":1698652874451,"duration":1037}},{"uid":"882aadf130b1494b","reportUrl":"https://novasamatech.github.io/test-runner/4043//#testresult/882aadf130b1494b","status":"passed","time":{"start":1698638478029,"stop":1698638479140,"duration":1111}},{"uid":"e009678473923589","reportUrl":"https://novasamatech.github.io/test-runner/4042//#testresult/e009678473923589","status":"passed","time":{"start":1698624118387,"stop":1698624119312,"duration":925}},{"uid":"bfde94eb7bdbd4f7","reportUrl":"https://novasamatech.github.io/test-runner/4041//#testresult/bfde94eb7bdbd4f7","status":"passed","time":{"start":1698609683018,"stop":1698609683981,"duration":963}},{"uid":"23ef3455b0d85e0c","reportUrl":"https://novasamatech.github.io/test-runner/4040//#testresult/23ef3455b0d85e0c","status":"passed","time":{"start":1698595281015,"stop":1698595281871,"duration":856}},{"uid":"3f4961a87c0dd007","reportUrl":"https://novasamatech.github.io/test-runner/4039//#testresult/3f4961a87c0dd007","status":"passed","time":{"start":1698580882430,"stop":1698580883484,"duration":1054}},{"uid":"33f012005025dcb6","reportUrl":"https://novasamatech.github.io/test-runner/4038//#testresult/33f012005025dcb6","status":"passed","time":{"start":1698566485954,"stop":1698566486767,"duration":813}},{"uid":"3d014a46f49934ec","reportUrl":"https://novasamatech.github.io/test-runner/4037//#testresult/3d014a46f49934ec","status":"passed","time":{"start":1698552089685,"stop":1698552090599,"duration":914}},{"uid":"530d669f9d6e7947","reportUrl":"https://novasamatech.github.io/test-runner/4036//#testresult/530d669f9d6e7947","status":"passed","time":{"start":1698537728314,"stop":1698537729428,"duration":1114}},{"uid":"9e65933907bec164","reportUrl":"https://novasamatech.github.io/test-runner/4035//#testresult/9e65933907bec164","status":"passed","time":{"start":1698523277887,"stop":1698523278618,"duration":731}},{"uid":"d2feda1cf7a52a5f","reportUrl":"https://novasamatech.github.io/test-runner/4034//#testresult/d2feda1cf7a52a5f","status":"passed","time":{"start":1698508882440,"stop":1698508883308,"duration":868}},{"uid":"7fe4a5cfd5393851","reportUrl":"https://novasamatech.github.io/test-runner/4033//#testresult/7fe4a5cfd5393851","status":"passed","time":{"start":1698494480583,"stop":1698494481533,"duration":950}}]},"tags":[]},"source":"a25f1dfcffef2620.json","parameterValues":["{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"]}