{"uid":"638cb7ccd482a505","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1698149321200,"stop":1698149322024,"duration":824},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 24 Oct 2023 12:08:41 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 24 Oct 2023 12:08:41 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 24 Oct 2023 12:08:41 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 24 Oct 2023 12:08:41 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"a12ab74e336444f7","name":"stdout","source":"a12ab74e336444f7.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az563-689"},{"name":"thread","value":"2124-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b885302b33b64b5c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 24 Oct 2023 12:08:25 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698149305720,"stop":1698149306104,"duration":384}},{"uid":"786720db4c5d9c3f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 24 Oct 2023 12:08:10 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698149289982,"stop":1698149290617,"duration":635}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":17,"skipped":0,"passed":347,"unknown":0,"total":364},"items":[{"uid":"dd08fa4e61de34d5","reportUrl":"https://novasamatech.github.io/test-runner/4008//#testresult/dd08fa4e61de34d5","status":"passed","time":{"start":1698134498062,"stop":1698134498700,"duration":638}},{"uid":"a0f98acffcebc13c","reportUrl":"https://novasamatech.github.io/test-runner/4002//#testresult/a0f98acffcebc13c","status":"passed","time":{"start":1698048099168,"stop":1698048099683,"duration":515}},{"uid":"eec18f548158a44c","reportUrl":"https://novasamatech.github.io/test-runner/4001//#testresult/eec18f548158a44c","status":"passed","time":{"start":1698033699361,"stop":1698033700146,"duration":785}},{"uid":"f3e906e6127042bd","reportUrl":"https://novasamatech.github.io/test-runner/4000//#testresult/f3e906e6127042bd","status":"passed","time":{"start":1698019330324,"stop":1698019331200,"duration":876}},{"uid":"171364185302a5f9","reportUrl":"https://novasamatech.github.io/test-runner/3999//#testresult/171364185302a5f9","status":"passed","time":{"start":1698004892684,"stop":1698004893499,"duration":815}},{"uid":"c85b9a1ca34ce073","reportUrl":"https://novasamatech.github.io/test-runner/3998//#testresult/c85b9a1ca34ce073","status":"passed","time":{"start":1697990503523,"stop":1697990504201,"duration":678}},{"uid":"417bb2bc4cf3cc89","reportUrl":"https://novasamatech.github.io/test-runner/3997//#testresult/417bb2bc4cf3cc89","status":"passed","time":{"start":1697976095531,"stop":1697976096390,"duration":859}},{"uid":"5e66ddbbc92eda25","reportUrl":"https://novasamatech.github.io/test-runner/3996//#testresult/5e66ddbbc92eda25","status":"passed","time":{"start":1697961701439,"stop":1697961702463,"duration":1024}},{"uid":"f604a867de25d7d5","reportUrl":"https://novasamatech.github.io/test-runner/3995//#testresult/f604a867de25d7d5","status":"passed","time":{"start":1697947289732,"stop":1697947290478,"duration":746}},{"uid":"2febffc52631373e","reportUrl":"https://novasamatech.github.io/test-runner/3994//#testresult/2febffc52631373e","status":"passed","time":{"start":1697932954789,"stop":1697932955895,"duration":1106}},{"uid":"6ffb0dace9459448","reportUrl":"https://novasamatech.github.io/test-runner/3993//#testresult/6ffb0dace9459448","status":"passed","time":{"start":1697918498295,"stop":1697918499495,"duration":1200}},{"uid":"4965060c90c84e42","reportUrl":"https://novasamatech.github.io/test-runner/3992//#testresult/4965060c90c84e42","status":"passed","time":{"start":1697904089169,"stop":1697904090000,"duration":831}},{"uid":"3bbe83d63deb9bc7","reportUrl":"https://novasamatech.github.io/test-runner/3991//#testresult/3bbe83d63deb9bc7","status":"passed","time":{"start":1697889694448,"stop":1697889695247,"duration":799}},{"uid":"ac618bf3ca0ba2e6","reportUrl":"https://novasamatech.github.io/test-runner/3990//#testresult/ac618bf3ca0ba2e6","status":"passed","time":{"start":1697875290063,"stop":1697875290552,"duration":489}},{"uid":"6514208dd8ad3766","reportUrl":"https://novasamatech.github.io/test-runner/3989//#testresult/6514208dd8ad3766","status":"passed","time":{"start":1697860897514,"stop":1697860897993,"duration":479}},{"uid":"8944081d084a838e","reportUrl":"https://novasamatech.github.io/test-runner/3988//#testresult/8944081d084a838e","status":"passed","time":{"start":1697846578737,"stop":1697846579573,"duration":836}},{"uid":"ca88506428bec8d6","reportUrl":"https://novasamatech.github.io/test-runner/3987//#testresult/ca88506428bec8d6","status":"passed","time":{"start":1697832139235,"stop":1697832140029,"duration":794}},{"uid":"7e9fde0fadb82b51","reportUrl":"https://novasamatech.github.io/test-runner/3986//#testresult/7e9fde0fadb82b51","status":"passed","time":{"start":1697817694514,"stop":1697817695359,"duration":845}},{"uid":"1fa7d70ff0666391","reportUrl":"https://novasamatech.github.io/test-runner/3985//#testresult/1fa7d70ff0666391","status":"passed","time":{"start":1697803295229,"stop":1697803296235,"duration":1006}},{"uid":"811b5ceaedc4343f","reportUrl":"https://novasamatech.github.io/test-runner/3984//#testresult/811b5ceaedc4343f","status":"passed","time":{"start":1697788891095,"stop":1697788891987,"duration":892}}]},"tags":[]},"source":"638cb7ccd482a505.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}