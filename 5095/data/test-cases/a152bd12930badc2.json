{"uid":"a152bd12930badc2","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1713556878769,"stop":1713556878820,"duration":51},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f107ed85930>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f107ec0ba30>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f107ec0bc40>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az702-396"},{"name":"thread","value":"2086-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3fe66c6b2d34bd0","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713556873630,"stop":1713556873734,"duration":104}},{"uid":"9bbc6b08d011e593","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713556868471,"stop":1713556868517,"duration":46}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":48,"skipped":0,"passed":664,"unknown":0,"total":718},"items":[{"uid":"ac8c27e809b32d6","reportUrl":"https://novasamatech.github.io/test-runner/5094//#testresult/ac8c27e809b32d6","status":"passed","time":{"start":1713542474342,"stop":1713542474776,"duration":434}},{"uid":"52555b53d3468837","reportUrl":"https://novasamatech.github.io/test-runner/5093//#testresult/52555b53d3468837","status":"passed","time":{"start":1713528068512,"stop":1713528068714,"duration":202}},{"uid":"54730132675cefd8","reportUrl":"https://novasamatech.github.io/test-runner/5092//#testresult/54730132675cefd8","status":"passed","time":{"start":1713513670893,"stop":1713513671313,"duration":420}},{"uid":"f6d028f7bf28137d","reportUrl":"https://novasamatech.github.io/test-runner/5091//#testresult/f6d028f7bf28137d","status":"passed","time":{"start":1713499260102,"stop":1713499260738,"duration":636}},{"uid":"93d64fd03e3363a9","reportUrl":"https://novasamatech.github.io/test-runner/5090//#testresult/93d64fd03e3363a9","status":"passed","time":{"start":1713484901167,"stop":1713484901515,"duration":348}},{"uid":"6f7e74ae631a1654","reportUrl":"https://novasamatech.github.io/test-runner/5089//#testresult/6f7e74ae631a1654","status":"passed","time":{"start":1713470472911,"stop":1713470473369,"duration":458}},{"uid":"830ca0c940d1b09d","reportUrl":"https://novasamatech.github.io/test-runner/5088//#testresult/830ca0c940d1b09d","status":"passed","time":{"start":1713456082588,"stop":1713456083372,"duration":784}},{"uid":"bafdda2352a479c7","reportUrl":"https://novasamatech.github.io/test-runner/5087//#testresult/bafdda2352a479c7","status":"passed","time":{"start":1713441689259,"stop":1713441689851,"duration":592}},{"uid":"f1309e6be5c61aa","reportUrl":"https://novasamatech.github.io/test-runner/5086//#testresult/f1309e6be5c61aa","status":"passed","time":{"start":1713427265565,"stop":1713427265896,"duration":331}},{"uid":"44b44f231312e261","reportUrl":"https://novasamatech.github.io/test-runner/5085//#testresult/44b44f231312e261","status":"passed","time":{"start":1713412865389,"stop":1713412865987,"duration":598}},{"uid":"6b85b6a81afe2ce4","reportUrl":"https://novasamatech.github.io/test-runner/5084//#testresult/6b85b6a81afe2ce4","status":"passed","time":{"start":1713398509201,"stop":1713398509529,"duration":328}},{"uid":"7cb8aa3fc8e2bb1b","reportUrl":"https://novasamatech.github.io/test-runner/5083//#testresult/7cb8aa3fc8e2bb1b","status":"passed","time":{"start":1713384059569,"stop":1713384060183,"duration":614}},{"uid":"64c69c80fd05b49e","reportUrl":"https://novasamatech.github.io/test-runner/5082//#testresult/64c69c80fd05b49e","status":"passed","time":{"start":1713369673693,"stop":1713369674033,"duration":340}},{"uid":"d3e9d24c6740f409","reportUrl":"https://novasamatech.github.io/test-runner/5081//#testresult/d3e9d24c6740f409","status":"passed","time":{"start":1713355267894,"stop":1713355268089,"duration":195}},{"uid":"a1f23926e5a813e","reportUrl":"https://novasamatech.github.io/test-runner/5080//#testresult/a1f23926e5a813e","status":"passed","time":{"start":1713340865396,"stop":1713340866006,"duration":610}},{"uid":"4865e55c2cec02b4","reportUrl":"https://novasamatech.github.io/test-runner/5079//#testresult/4865e55c2cec02b4","status":"passed","time":{"start":1713326456532,"stop":1713326456743,"duration":211}},{"uid":"404dbb7546876956","reportUrl":"https://novasamatech.github.io/test-runner/5078//#testresult/404dbb7546876956","status":"passed","time":{"start":1713312110332,"stop":1713312110525,"duration":193}},{"uid":"d5caf6ff6f5e94da","reportUrl":"https://novasamatech.github.io/test-runner/5077//#testresult/d5caf6ff6f5e94da","status":"passed","time":{"start":1713297658176,"stop":1713297658365,"duration":189}},{"uid":"b9942f30dc306e4f","reportUrl":"https://novasamatech.github.io/test-runner/5076//#testresult/b9942f30dc306e4f","status":"passed","time":{"start":1713283287676,"stop":1713283288069,"duration":393}},{"uid":"2ba7907e2161f33e","reportUrl":"https://novasamatech.github.io/test-runner/5075//#testresult/2ba7907e2161f33e","status":"passed","time":{"start":1713268867106,"stop":1713268867332,"duration":226}}]},"tags":[]},"source":"a152bd12930badc2.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}