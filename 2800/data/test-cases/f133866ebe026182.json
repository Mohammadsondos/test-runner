{"uid":"f133866ebe026182","name":"test_can_create_connection[Test for Nodle Parachain, url: wss://nodle-parachain.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e25e5e392faa8447ae2b8bca966817b4","time":{"start":1681172071859,"stop":1681172131288,"duration":59429},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Nodle Parachain', 'url': 'wss://nodle-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:145: in _get_resp_headers\n    status, resp_headers, status_message = read_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:312: in read_headers\n    line = recv_line(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:131: in recv_line\n    c = recv(sock, 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 1\n\n    def recv(sock, bufsize):\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Nodle Parachain', 'url': 'wss://nodle-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:145: in _get_resp_headers\n    status, resp_headers, status_message = read_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:312: in read_headers\n    line = recv_line(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:131: in recv_line\n    c = recv(sock, 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 1\n\n    def recv(sock, bufsize):\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"f531cfae96bce461","name":"stdout","source":"f531cfae96bce461.txt","type":"text/plain","size":272}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az482-60"},{"name":"thread","value":"1767-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://nodle-parachain.api.onfinality.io/public-ws', 'name': 'Nodle Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"570d4763af696d2d","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1681172001745,"stop":1681172061718,"duration":59973}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":56,"skipped":0,"passed":923,"unknown":0,"total":979},"items":[{"uid":"9f84ddc5de7a243b","reportUrl":"https://nova-wallet.github.io/test-runner/2799//#testresult/9f84ddc5de7a243b","status":"passed","time":{"start":1681157075395,"stop":1681157075788,"duration":393}},{"uid":"c05392595c763876","reportUrl":"https://nova-wallet.github.io/test-runner/2798//#testresult/c05392595c763876","status":"passed","time":{"start":1681142660139,"stop":1681142660478,"duration":339}},{"uid":"cf4e83de7389ba81","reportUrl":"https://nova-wallet.github.io/test-runner/2797//#testresult/cf4e83de7389ba81","status":"passed","time":{"start":1681128313793,"stop":1681128313889,"duration":96}},{"uid":"e35d6887e9d3c68b","reportUrl":"https://nova-wallet.github.io/test-runner/2796//#testresult/e35d6887e9d3c68b","status":"passed","time":{"start":1681113856987,"stop":1681113857035,"duration":48}},{"uid":"aa8b44599c845bc9","reportUrl":"https://nova-wallet.github.io/test-runner/2795//#testresult/aa8b44599c845bc9","status":"passed","time":{"start":1681099458136,"stop":1681099458388,"duration":252}},{"uid":"d8d4a368f5744e58","reportUrl":"https://nova-wallet.github.io/test-runner/2794//#testresult/d8d4a368f5744e58","status":"passed","time":{"start":1681085584382,"stop":1681085584702,"duration":320}},{"uid":"6a86d77af67f28d0","reportUrl":"https://nova-wallet.github.io/test-runner/2793//#testresult/6a86d77af67f28d0","status":"passed","time":{"start":1681070649003,"stop":1681070649040,"duration":37}},{"uid":"2e4d9c5e8905bbd3","reportUrl":"https://nova-wallet.github.io/test-runner/2792//#testresult/2e4d9c5e8905bbd3","status":"passed","time":{"start":1681056246670,"stop":1681056246720,"duration":50}},{"uid":"4b56d15915a7266d","reportUrl":"https://nova-wallet.github.io/test-runner/2791//#testresult/4b56d15915a7266d","status":"passed","time":{"start":1681041884047,"stop":1681041884307,"duration":260}},{"uid":"cef83027d6439c4c","reportUrl":"https://nova-wallet.github.io/test-runner/2790//#testresult/cef83027d6439c4c","status":"passed","time":{"start":1681027468679,"stop":1681027469014,"duration":335}},{"uid":"1bf4241c3167720a","reportUrl":"https://nova-wallet.github.io/test-runner/2789//#testresult/1bf4241c3167720a","status":"passed","time":{"start":1681013052897,"stop":1681013053029,"duration":132}},{"uid":"7aa191c80526ead7","reportUrl":"https://nova-wallet.github.io/test-runner/2788//#testresult/7aa191c80526ead7","status":"passed","time":{"start":1680999241556,"stop":1680999241767,"duration":211}},{"uid":"bc9f25d4c4ae9670","reportUrl":"https://nova-wallet.github.io/test-runner/2787//#testresult/bc9f25d4c4ae9670","status":"passed","time":{"start":1680984247215,"stop":1680984247536,"duration":321}},{"uid":"17fa12d22f376087","reportUrl":"https://nova-wallet.github.io/test-runner/2786//#testresult/17fa12d22f376087","status":"passed","time":{"start":1680969850941,"stop":1680969850991,"duration":50}},{"uid":"6e58c0ae8e5f5358","reportUrl":"https://nova-wallet.github.io/test-runner/2785//#testresult/6e58c0ae8e5f5358","status":"passed","time":{"start":1680955458282,"stop":1680955458392,"duration":110}},{"uid":"efa543183a07788d","reportUrl":"https://nova-wallet.github.io/test-runner/2784//#testresult/efa543183a07788d","status":"passed","time":{"start":1680941060794,"stop":1680941061133,"duration":339}},{"uid":"aed0a7e4f41337b8","reportUrl":"https://nova-wallet.github.io/test-runner/2783//#testresult/aed0a7e4f41337b8","status":"passed","time":{"start":1680926669047,"stop":1680926669134,"duration":87}},{"uid":"76ebf99d0e120638","reportUrl":"https://nova-wallet.github.io/test-runner/2782//#testresult/76ebf99d0e120638","status":"passed","time":{"start":1680912720759,"stop":1680912720838,"duration":79}},{"uid":"c1f50ce266fb1864","reportUrl":"https://nova-wallet.github.io/test-runner/2781//#testresult/c1f50ce266fb1864","status":"passed","time":{"start":1680897848069,"stop":1680897848120,"duration":51}},{"uid":"6e7610de34d41088","reportUrl":"https://nova-wallet.github.io/test-runner/2780//#testresult/6e7610de34d41088","status":"passed","time":{"start":1680883468846,"stop":1680883468949,"duration":103}}]},"tags":[]},"source":"f133866ebe026182.json","parameterValues":["{'url': 'wss://nodle-parachain.api.onfinality.io/public-ws', 'name': 'Nodle Parachain'}"]}