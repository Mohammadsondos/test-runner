{"uid":"2269aef09cb53f8f","name":"test_can_create_connection[Test for 3DPass, url: wss://rpc2.3dpass.org]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"f5a6d4af0313219dce7fc1642cad31bd","time":{"start":1698912131737,"stop":1698912132254,"duration":517},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 02 Nov 2023 08:02:12 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': '3DPass', 'url': 'wss://rpc2.3dpass.org'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 02 Nov 2023 08:02:12 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 02 Nov 2023 08:02:12 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': '3DPass', 'url': 'wss://rpc2.3dpass.org'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 02 Nov 2023 08:02:12 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"6fc6448dc1f980a6","name":"stdout","source":"6fc6448dc1f980a6.txt","type":"text/plain","size":1428}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az389-850"},{"name":"thread","value":"2256-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc2.3dpass.org', 'name': '3DPass'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3a0bd36222cb48e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 02 Nov 2023 08:01:56 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698912116109,"stop":1698912116616,"duration":507}},{"uid":"d36d406ac8e95dde","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 02 Nov 2023 08:01:40 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698912100451,"stop":1698912100960,"duration":509}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":33,"skipped":0,"passed":389,"unknown":0,"total":422},"items":[{"uid":"40b305af9314c956","reportUrl":"https://novasamatech.github.io/test-runner/4061//#testresult/40b305af9314c956","status":"passed","time":{"start":1698897680977,"stop":1698897681527,"duration":550}},{"uid":"bf13b24cfb8eff7b","reportUrl":"https://novasamatech.github.io/test-runner/4060//#testresult/bf13b24cfb8eff7b","status":"passed","time":{"start":1698883349868,"stop":1698883350675,"duration":807}},{"uid":"b00683ef8768a820","reportUrl":"https://novasamatech.github.io/test-runner/4059//#testresult/b00683ef8768a820","status":"passed","time":{"start":1698868899747,"stop":1698868900289,"duration":542}},{"uid":"b16a06b4ad83fbc1","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/b16a06b4ad83fbc1","status":"passed","time":{"start":1698840110490,"stop":1698840111045,"duration":555}},{"uid":"85ade4e5f9e48f45","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/85ade4e5f9e48f45","status":"passed","time":{"start":1698854516490,"stop":1698854517299,"duration":809}},{"uid":"efc94650ae67590","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/efc94650ae67590","status":"passed","time":{"start":1698825698584,"stop":1698825699128,"duration":544}},{"uid":"6e97e861b8a161b7","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/6e97e861b8a161b7","status":"passed","time":{"start":1698811285565,"stop":1698811286161,"duration":596}},{"uid":"2983f3334ca77541","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/2983f3334ca77541","status":"passed","time":{"start":1698796945235,"stop":1698796945806,"duration":571}},{"uid":"5e83d0202dab9c67","reportUrl":"https://novasamatech.github.io/test-runner/4053//#testresult/5e83d0202dab9c67","status":"passed","time":{"start":1698782510812,"stop":1698782511484,"duration":672}},{"uid":"740090a78e9f6779","reportUrl":"https://novasamatech.github.io/test-runner/4052//#testresult/740090a78e9f6779","status":"passed","time":{"start":1698768169293,"stop":1698768169837,"duration":544}},{"uid":"9d96fdafc7cf1441","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/9d96fdafc7cf1441","status":"passed","time":{"start":1698753715802,"stop":1698753716439,"duration":637}},{"uid":"6c6fc24caeebbb79","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/6c6fc24caeebbb79","status":"passed","time":{"start":1698739310735,"stop":1698739311285,"duration":550}},{"uid":"c0b515e2d1d36afd","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/c0b515e2d1d36afd","status":"passed","time":{"start":1698724905469,"stop":1698724906069,"duration":600}},{"uid":"30f73c4e205d3e9b","reportUrl":"https://novasamatech.github.io/test-runner/4048//#testresult/30f73c4e205d3e9b","status":"passed","time":{"start":1698710545030,"stop":1698710545439,"duration":409}},{"uid":"f2c8676107b2e54f","reportUrl":"https://novasamatech.github.io/test-runner/4047//#testresult/f2c8676107b2e54f","status":"passed","time":{"start":1698696098230,"stop":1698696098877,"duration":647}},{"uid":"c6a7dcf029f06a32","reportUrl":"https://novasamatech.github.io/test-runner/4046//#testresult/c6a7dcf029f06a32","status":"passed","time":{"start":1698681716784,"stop":1698681717361,"duration":577}},{"uid":"5f3c73c659db7d0a","reportUrl":"https://novasamatech.github.io/test-runner/4045//#testresult/5f3c73c659db7d0a","status":"passed","time":{"start":1698667317443,"stop":1698667318132,"duration":689}},{"uid":"1162af8ac70ca82e","reportUrl":"https://novasamatech.github.io/test-runner/4044//#testresult/1162af8ac70ca82e","status":"passed","time":{"start":1698652889528,"stop":1698652890086,"duration":558}},{"uid":"1bd95ab8f7dd9d55","reportUrl":"https://novasamatech.github.io/test-runner/4043//#testresult/1bd95ab8f7dd9d55","status":"passed","time":{"start":1698638505876,"stop":1698638506466,"duration":590}},{"uid":"fee2f211f0610ea8","reportUrl":"https://novasamatech.github.io/test-runner/4042//#testresult/fee2f211f0610ea8","status":"passed","time":{"start":1698624135934,"stop":1698624136524,"duration":590}}]},"tags":[]},"source":"2269aef09cb53f8f.json","parameterValues":["{'url': 'wss://rpc2.3dpass.org', 'name': '3DPass'}"]}