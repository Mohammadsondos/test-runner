{"uid":"f3859b6d82907390","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1714680069535,"stop":1714680069587,"duration":52},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f542d77dcc0>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f542c5b67d0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f542c5b6a70>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1501-768"},{"name":"thread","value":"2070-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"74a1cb8ffefa8657","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1714680064440,"stop":1714680064501,"duration":61}},{"uid":"f53d4206dc841287","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1714680059267,"stop":1714680059314,"duration":47}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":74,"skipped":0,"passed":1173,"unknown":0,"total":1252},"items":[{"uid":"9ed59079e4713997","reportUrl":"https://novasamatech.github.io/test-runner/5175//#testresult/9ed59079e4713997","status":"passed","time":{"start":1714665666188,"stop":1714665667038,"duration":850}},{"uid":"55fbd6b2999cc810","reportUrl":"https://novasamatech.github.io/test-runner/5174//#testresult/55fbd6b2999cc810","status":"passed","time":{"start":1714651277976,"stop":1714651278480,"duration":504}},{"uid":"59e1f714fef05924","reportUrl":"https://novasamatech.github.io/test-runner/5172//#testresult/59e1f714fef05924","status":"passed","time":{"start":1714622460838,"stop":1714622461989,"duration":1151}},{"uid":"e730599dfafad9b5","reportUrl":"https://novasamatech.github.io/test-runner/5173//#testresult/e730599dfafad9b5","status":"passed","time":{"start":1714636863745,"stop":1714636864786,"duration":1041}},{"uid":"292c625e2a252b7","reportUrl":"https://novasamatech.github.io/test-runner/5170//#testresult/292c625e2a252b7","status":"passed","time":{"start":1714593673176,"stop":1714593674929,"duration":1753}},{"uid":"c4c9be467d8639ff","reportUrl":"https://novasamatech.github.io/test-runner/5171//#testresult/c4c9be467d8639ff","status":"passed","time":{"start":1714608103163,"stop":1714608104561,"duration":1398}},{"uid":"22be5e2a7d1e695d","reportUrl":"https://novasamatech.github.io/test-runner/5169//#testresult/22be5e2a7d1e695d","status":"passed","time":{"start":1714579268399,"stop":1714579269725,"duration":1326}},{"uid":"2f78900aebf64c3c","reportUrl":"https://novasamatech.github.io/test-runner/5168//#testresult/2f78900aebf64c3c","status":"passed","time":{"start":1714564862603,"stop":1714564863676,"duration":1073}},{"uid":"387cf67c4c3bed09","reportUrl":"https://novasamatech.github.io/test-runner/5166//#testresult/387cf67c4c3bed09","status":"passed","time":{"start":1714536060986,"stop":1714536061672,"duration":686}},{"uid":"993410c0a78e4942","reportUrl":"https://novasamatech.github.io/test-runner/5167//#testresult/993410c0a78e4942","status":"passed","time":{"start":1714550461234,"stop":1714550462076,"duration":842}},{"uid":"6505e1ea5bd42066","reportUrl":"https://novasamatech.github.io/test-runner/5165//#testresult/6505e1ea5bd42066","status":"passed","time":{"start":1714521716072,"stop":1714521716893,"duration":821}},{"uid":"7da94476e2266152","reportUrl":"https://novasamatech.github.io/test-runner/5164//#testresult/7da94476e2266152","status":"passed","time":{"start":1714507256753,"stop":1714507257732,"duration":979}},{"uid":"f0c77b5b6f3e8ed0","reportUrl":"https://novasamatech.github.io/test-runner/5163//#testresult/f0c77b5b6f3e8ed0","status":"passed","time":{"start":1714492862490,"stop":1714492863080,"duration":590}},{"uid":"7fb1a6055a0bd946","reportUrl":"https://novasamatech.github.io/test-runner/5161//#testresult/7fb1a6055a0bd946","status":"passed","time":{"start":1714464081117,"stop":1714464082042,"duration":925}},{"uid":"5c9ba6a42c67bb19","reportUrl":"https://novasamatech.github.io/test-runner/5162//#testresult/5c9ba6a42c67bb19","status":"passed","time":{"start":1714478464731,"stop":1714478465287,"duration":556}},{"uid":"6b4a25d928a4a728","reportUrl":"https://novasamatech.github.io/test-runner/5160//#testresult/6b4a25d928a4a728","status":"passed","time":{"start":1714449658996,"stop":1714449659777,"duration":781}},{"uid":"e0f48a6b0e3276ec","reportUrl":"https://novasamatech.github.io/test-runner/5159//#testresult/e0f48a6b0e3276ec","status":"passed","time":{"start":1714435313704,"stop":1714435314500,"duration":796}},{"uid":"e74272ec7b60221a","reportUrl":"https://novasamatech.github.io/test-runner/5158//#testresult/e74272ec7b60221a","status":"passed","time":{"start":1714420858827,"stop":1714420859517,"duration":690}},{"uid":"6638879d5965b000","reportUrl":"https://novasamatech.github.io/test-runner/5157//#testresult/6638879d5965b000","status":"passed","time":{"start":1714406469713,"stop":1714406470495,"duration":782}},{"uid":"db6d901186a96e54","reportUrl":"https://novasamatech.github.io/test-runner/5156//#testresult/db6d901186a96e54","status":"passed","time":{"start":1714392062282,"stop":1714392063006,"duration":724}}]},"tags":[]},"source":"f3859b6d82907390.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}