{"uid":"13c68f1974833a4b","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1714680069504,"stop":1714680069624,"duration":120},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f4bf1b59ae0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f4bf0a8cdc0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f4bf0a8df00>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1501-768"},{"name":"thread","value":"2076-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"44fb736f5f6dc105","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1714680064420,"stop":1714680064469,"duration":49}},{"uid":"6778307f9bbd6f5","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1714680059249,"stop":1714680059298,"duration":49}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":54,"skipped":0,"passed":1195,"unknown":0,"total":1252},"items":[{"uid":"a8211259b88bf20b","reportUrl":"https://novasamatech.github.io/test-runner/5175//#testresult/a8211259b88bf20b","status":"passed","time":{"start":1714665665518,"stop":1714665666185,"duration":667}},{"uid":"e1ef037462ce8001","reportUrl":"https://novasamatech.github.io/test-runner/5174//#testresult/e1ef037462ce8001","status":"passed","time":{"start":1714651277757,"stop":1714651277973,"duration":216}},{"uid":"36ad7f0d51b670da","reportUrl":"https://novasamatech.github.io/test-runner/5172//#testresult/36ad7f0d51b670da","status":"passed","time":{"start":1714622460478,"stop":1714622460835,"duration":357}},{"uid":"7c383cdc24fd1156","reportUrl":"https://novasamatech.github.io/test-runner/5173//#testresult/7c383cdc24fd1156","status":"passed","time":{"start":1714636863335,"stop":1714636863742,"duration":407}},{"uid":"b645a6da92b96215","reportUrl":"https://novasamatech.github.io/test-runner/5170//#testresult/b645a6da92b96215","status":"passed","time":{"start":1714593673129,"stop":1714593673766,"duration":637}},{"uid":"a5a053da0c921873","reportUrl":"https://novasamatech.github.io/test-runner/5171//#testresult/a5a053da0c921873","status":"passed","time":{"start":1714608103329,"stop":1714608104111,"duration":782}},{"uid":"5ae8519f3dd52ff6","reportUrl":"https://novasamatech.github.io/test-runner/5169//#testresult/5ae8519f3dd52ff6","status":"passed","time":{"start":1714579268302,"stop":1714579269056,"duration":754}},{"uid":"4cc1ddf0d210a4d3","reportUrl":"https://novasamatech.github.io/test-runner/5168//#testresult/4cc1ddf0d210a4d3","status":"passed","time":{"start":1714564862807,"stop":1714564863177,"duration":370}},{"uid":"82ccdd580cb52bc0","reportUrl":"https://novasamatech.github.io/test-runner/5166//#testresult/82ccdd580cb52bc0","status":"passed","time":{"start":1714536060337,"stop":1714536060768,"duration":431}},{"uid":"5c38f7cf5f523e9d","reportUrl":"https://novasamatech.github.io/test-runner/5167//#testresult/5c38f7cf5f523e9d","status":"passed","time":{"start":1714550461280,"stop":1714550461622,"duration":342}},{"uid":"f036f916048eddc7","reportUrl":"https://novasamatech.github.io/test-runner/5165//#testresult/f036f916048eddc7","status":"passed","time":{"start":1714521716422,"stop":1714521716769,"duration":347}},{"uid":"8c126e0ea034c965","reportUrl":"https://novasamatech.github.io/test-runner/5164//#testresult/8c126e0ea034c965","status":"passed","time":{"start":1714507256571,"stop":1714507256772,"duration":201}},{"uid":"8074622bd0bb563a","reportUrl":"https://novasamatech.github.io/test-runner/5163//#testresult/8074622bd0bb563a","status":"passed","time":{"start":1714492862936,"stop":1714492863223,"duration":287}},{"uid":"1a49e19d1f6a433b","reportUrl":"https://novasamatech.github.io/test-runner/5161//#testresult/1a49e19d1f6a433b","status":"passed","time":{"start":1714464081091,"stop":1714464081688,"duration":597}},{"uid":"4a2b29617efc005d","reportUrl":"https://novasamatech.github.io/test-runner/5162//#testresult/4a2b29617efc005d","status":"passed","time":{"start":1714478465131,"stop":1714478465329,"duration":198}},{"uid":"9694ebf41f2ff0e9","reportUrl":"https://novasamatech.github.io/test-runner/5160//#testresult/9694ebf41f2ff0e9","status":"passed","time":{"start":1714449658250,"stop":1714449658805,"duration":555}},{"uid":"4cdff71554aad724","reportUrl":"https://novasamatech.github.io/test-runner/5159//#testresult/4cdff71554aad724","status":"passed","time":{"start":1714435313381,"stop":1714435313960,"duration":579}},{"uid":"6a7f460f9c5ee4d5","reportUrl":"https://novasamatech.github.io/test-runner/5158//#testresult/6a7f460f9c5ee4d5","status":"passed","time":{"start":1714420858879,"stop":1714420859022,"duration":143}},{"uid":"7dc1dd2e9e4adb0b","reportUrl":"https://novasamatech.github.io/test-runner/5157//#testresult/7dc1dd2e9e4adb0b","status":"passed","time":{"start":1714406469158,"stop":1714406469710,"duration":552}},{"uid":"aefc5f67adcdc6fa","reportUrl":"https://novasamatech.github.io/test-runner/5156//#testresult/aefc5f67adcdc6fa","status":"passed","time":{"start":1714392062453,"stop":1714392062895,"duration":442}}]},"tags":[]},"source":"13c68f1974833a4b.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}