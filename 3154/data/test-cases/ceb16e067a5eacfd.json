{"uid":"ceb16e067a5eacfd","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1685995466115,"stop":1685995466369,"duration":254},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 05 Jun 2023 20:04:26 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 05 Jun 2023 20:04:26 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:148: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 05 Jun 2023 20:04:26 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 05 Jun 2023 20:04:26 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:148: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"5960caf182f94dfc","name":"stdout","source":"5960caf182f94dfc.txt","type":"text/plain","size":1134}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az306-998"},{"name":"thread","value":"1890-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3563fd0b84fcf86c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 05 Jun 2023 20:04:10 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1685995450773,"stop":1685995451029,"duration":256}},{"uid":"6d26e374206e78cd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 05 Jun 2023 20:03:55 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1685995435288,"stop":1685995435639,"duration":351}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":193,"unknown":0,"total":195},"items":[{"uid":"33bc155c10847cb8","reportUrl":"https://novasamatech.github.io/test-runner/3153//#testresult/33bc155c10847cb8","status":"passed","time":{"start":1685981045911,"stop":1685981046633,"duration":722}},{"uid":"8050d8127b4914a6","reportUrl":"https://novasamatech.github.io/test-runner/3152//#testresult/8050d8127b4914a6","status":"passed","time":{"start":1685966708860,"stop":1685966709335,"duration":475}},{"uid":"465729b28ce8a459","reportUrl":"https://novasamatech.github.io/test-runner/3151//#testresult/465729b28ce8a459","status":"passed","time":{"start":1685952241491,"stop":1685952241813,"duration":322}},{"uid":"faf7619542f260ee","reportUrl":"https://novasamatech.github.io/test-runner/3150//#testresult/faf7619542f260ee","status":"passed","time":{"start":1685937849591,"stop":1685937849922,"duration":331}},{"uid":"b1880d584c88fe99","reportUrl":"https://novasamatech.github.io/test-runner/3149//#testresult/b1880d584c88fe99","status":"passed","time":{"start":1685924077136,"stop":1685924077730,"duration":594}},{"uid":"e7280ffac3e4806a","reportUrl":"https://novasamatech.github.io/test-runner/3148//#testresult/e7280ffac3e4806a","status":"passed","time":{"start":1685909029280,"stop":1685909029658,"duration":378}},{"uid":"e48c78306bf9a2aa","reportUrl":"https://novasamatech.github.io/test-runner/3147//#testresult/e48c78306bf9a2aa","status":"passed","time":{"start":1685894649529,"stop":1685894650035,"duration":506}},{"uid":"6fd2a7a5115b22f3","reportUrl":"https://novasamatech.github.io/test-runner/3146//#testresult/6fd2a7a5115b22f3","status":"passed","time":{"start":1685880281625,"stop":1685880282103,"duration":478}},{"uid":"e6a3c4d57ed809a9","reportUrl":"https://novasamatech.github.io/test-runner/3145//#testresult/e6a3c4d57ed809a9","status":"passed","time":{"start":1685865837193,"stop":1685865837673,"duration":480}},{"uid":"8b52b44bd8a13c89","reportUrl":"https://novasamatech.github.io/test-runner/3144//#testresult/8b52b44bd8a13c89","status":"passed","time":{"start":1685851435696,"stop":1685851436018,"duration":322}},{"uid":"beb1aead534b6c90","reportUrl":"https://novasamatech.github.io/test-runner/3143//#testresult/beb1aead534b6c90","status":"passed","time":{"start":1685837742841,"stop":1685837743359,"duration":518}},{"uid":"5ed787be83c87a82","reportUrl":"https://novasamatech.github.io/test-runner/3142//#testresult/5ed787be83c87a82","status":"passed","time":{"start":1685822677888,"stop":1685822678481,"duration":593}},{"uid":"d00ebcccd6e4a0ab","reportUrl":"https://novasamatech.github.io/test-runner/3141//#testresult/d00ebcccd6e4a0ab","status":"passed","time":{"start":1685808263884,"stop":1685808264366,"duration":482}},{"uid":"5fb4d4023e472ca2","reportUrl":"https://novasamatech.github.io/test-runner/3140//#testresult/5fb4d4023e472ca2","status":"passed","time":{"start":1685793894481,"stop":1685793895085,"duration":604}},{"uid":"deb8081f86712dbd","reportUrl":"https://novasamatech.github.io/test-runner/3139//#testresult/deb8081f86712dbd","status":"passed","time":{"start":1685779433095,"stop":1685779433529,"duration":434}},{"uid":"850a50a33b8c3557","reportUrl":"https://novasamatech.github.io/test-runner/3138//#testresult/850a50a33b8c3557","status":"passed","time":{"start":1685765061026,"stop":1685765061501,"duration":475}},{"uid":"f88be9d34cf4c635","reportUrl":"https://novasamatech.github.io/test-runner/3137//#testresult/f88be9d34cf4c635","status":"passed","time":{"start":1685751241297,"stop":1685751241783,"duration":486}},{"uid":"f4c9eac9a5ad42f3","reportUrl":"https://novasamatech.github.io/test-runner/3136//#testresult/f4c9eac9a5ad42f3","status":"passed","time":{"start":1685736225127,"stop":1685736225465,"duration":338}},{"uid":"36b87fc9b9079896","reportUrl":"https://novasamatech.github.io/test-runner/3135//#testresult/36b87fc9b9079896","status":"passed","time":{"start":1685721858058,"stop":1685721858548,"duration":490}},{"uid":"6dbb2b1222873ccf","reportUrl":"https://novasamatech.github.io/test-runner/3134//#testresult/6dbb2b1222873ccf","status":"passed","time":{"start":1685707500271,"stop":1685707500879,"duration":608}}]},"tags":[]},"source":"ceb16e067a5eacfd.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}