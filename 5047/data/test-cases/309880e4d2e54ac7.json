{"uid":"309880e4d2e54ac7","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1712865675539,"stop":1712865675584,"duration":45},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f399b86d5d0>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f399b6fdba0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f399b6fcc70>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1210-631"},{"name":"thread","value":"2109-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1957f10e7a680566","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712865670439,"stop":1712865670504,"duration":65}},{"uid":"365a4395bc8c5ea","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712865665254,"stop":1712865665321,"duration":67}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":51,"skipped":0,"passed":1068,"unknown":0,"total":1122},"items":[{"uid":"34efd0edbf164e97","reportUrl":"https://novasamatech.github.io/test-runner/5046//#testresult/34efd0edbf164e97","status":"passed","time":{"start":1712851263327,"stop":1712851263549,"duration":222}},{"uid":"3d4d8af01eb1560c","reportUrl":"https://novasamatech.github.io/test-runner/5045//#testresult/3d4d8af01eb1560c","status":"passed","time":{"start":1712836873993,"stop":1712836874552,"duration":559}},{"uid":"a2760307ae34427b","reportUrl":"https://novasamatech.github.io/test-runner/5044//#testresult/a2760307ae34427b","status":"passed","time":{"start":1712822471770,"stop":1712822472378,"duration":608}},{"uid":"d7aa4b581fdd524f","reportUrl":"https://novasamatech.github.io/test-runner/5043//#testresult/d7aa4b581fdd524f","status":"passed","time":{"start":1712808066083,"stop":1712808066737,"duration":654}},{"uid":"2d9063558bdea27","reportUrl":"https://novasamatech.github.io/test-runner/5042//#testresult/2d9063558bdea27","status":"passed","time":{"start":1712793716025,"stop":1712793716495,"duration":470}},{"uid":"5990420cac0bc1c0","reportUrl":"https://novasamatech.github.io/test-runner/5041//#testresult/5990420cac0bc1c0","status":"passed","time":{"start":1712779268673,"stop":1712779268934,"duration":261}},{"uid":"25ea97d79ac2cbdf","reportUrl":"https://novasamatech.github.io/test-runner/5040//#testresult/25ea97d79ac2cbdf","status":"passed","time":{"start":1712764868246,"stop":1712764868638,"duration":392}},{"uid":"11106c4af6611dee","reportUrl":"https://novasamatech.github.io/test-runner/5039//#testresult/11106c4af6611dee","status":"passed","time":{"start":1712750463473,"stop":1712750463772,"duration":299}},{"uid":"2009e200343e5d6d","reportUrl":"https://novasamatech.github.io/test-runner/5038//#testresult/2009e200343e5d6d","status":"passed","time":{"start":1712736064557,"stop":1712736065162,"duration":605}},{"uid":"b26d2510f9cc59ae","reportUrl":"https://novasamatech.github.io/test-runner/5037//#testresult/b26d2510f9cc59ae","status":"passed","time":{"start":1712721664457,"stop":1712721665159,"duration":702}},{"uid":"89fa7bb763ad61fc","reportUrl":"https://novasamatech.github.io/test-runner/5036//#testresult/89fa7bb763ad61fc","status":"passed","time":{"start":1712707303755,"stop":1712707304023,"duration":268}},{"uid":"9d9037adbd584caa","reportUrl":"https://novasamatech.github.io/test-runner/5035//#testresult/9d9037adbd584caa","status":"passed","time":{"start":1712692855265,"stop":1712692855555,"duration":290}},{"uid":"f2597cba36d02c32","reportUrl":"https://novasamatech.github.io/test-runner/5034//#testresult/f2597cba36d02c32","status":"passed","time":{"start":1712678461641,"stop":1712678462285,"duration":644}},{"uid":"67dec97f3291cd91","reportUrl":"https://novasamatech.github.io/test-runner/5033//#testresult/67dec97f3291cd91","status":"passed","time":{"start":1712664086623,"stop":1712664087037,"duration":414}},{"uid":"98ebf6514fa9d824","reportUrl":"https://novasamatech.github.io/test-runner/5032//#testresult/98ebf6514fa9d824","status":"passed","time":{"start":1712649670374,"stop":1712649670609,"duration":235}},{"uid":"d169d9f0b9a64f48","reportUrl":"https://novasamatech.github.io/test-runner/5031//#testresult/d169d9f0b9a64f48","status":"passed","time":{"start":1712635263982,"stop":1712635264527,"duration":545}},{"uid":"358a17342fc034f4","reportUrl":"https://novasamatech.github.io/test-runner/5030//#testresult/358a17342fc034f4","status":"passed","time":{"start":1712620904389,"stop":1712620904843,"duration":454}},{"uid":"f6c1b6483f0a0980","reportUrl":"https://novasamatech.github.io/test-runner/5029//#testresult/f6c1b6483f0a0980","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712606466132,"stop":1712606466183,"duration":51}},{"uid":"2c0ea20c924b0200","reportUrl":"https://novasamatech.github.io/test-runner/5028//#testresult/2c0ea20c924b0200","status":"passed","time":{"start":1712592063940,"stop":1712592064239,"duration":299}},{"uid":"6721690e051ce681","reportUrl":"https://novasamatech.github.io/test-runner/5027//#testresult/6721690e051ce681","status":"passed","time":{"start":1712577669210,"stop":1712577669630,"duration":420}}]},"tags":[]},"source":"309880e4d2e54ac7.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}