{"uid":"a5c29ad3e17df5cc","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1695038606434,"stop":1695038606802,"duration":368},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 18 Sep 2023 12:03:26 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 18 Sep 2023 12:03:26 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 18 Sep 2023 12:03:26 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 18 Sep 2023 12:03:26 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"7c11252414584ae6","name":"stdout","source":"7c11252414584ae6.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az617-717"},{"name":"thread","value":"2049-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8e07d611b78507ac","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 18 Sep 2023 12:03:11 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695038590916,"stop":1695038591316,"duration":400}},{"uid":"3f4a016e2f081d60","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 18 Sep 2023 12:02:55 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695038575340,"stop":1695038575728,"duration":388}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":148,"unknown":0,"total":152},"items":[{"uid":"70bbabe47bb46cd6","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/70bbabe47bb46cd6","status":"passed","time":{"start":1695024174683,"stop":1695024175611,"duration":928}},{"uid":"c81a6fc5d08fa66f","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/c81a6fc5d08fa66f","status":"passed","time":{"start":1695009750384,"stop":1695009751006,"duration":622}},{"uid":"336c9790a6a27a3d","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/336c9790a6a27a3d","status":"passed","time":{"start":1694995386456,"stop":1694995387094,"duration":638}},{"uid":"f25f1d5df14ff95c","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/f25f1d5df14ff95c","status":"passed","time":{"start":1694980960438,"stop":1694980960929,"duration":491}},{"uid":"97e8392c9080106a","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/97e8392c9080106a","status":"passed","time":{"start":1694966547872,"stop":1694966548195,"duration":323}},{"uid":"f95632725948fec9","reportUrl":"https://novasamatech.github.io/test-runner/3785//#testresult/f95632725948fec9","status":"passed","time":{"start":1694952137275,"stop":1694952137758,"duration":483}},{"uid":"95bd2849e2b4db93","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/95bd2849e2b4db93","status":"passed","time":{"start":1694937753096,"stop":1694937753721,"duration":625}},{"uid":"c85f5b87d4cc5dec","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/c85f5b87d4cc5dec","status":"passed","time":{"start":1694923326391,"stop":1694923326899,"duration":508}},{"uid":"81e1d7a0ca735445","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/81e1d7a0ca735445","status":"passed","time":{"start":1694908990726,"stop":1694908991364,"duration":638}},{"uid":"9124e082e0851ab7","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/9124e082e0851ab7","status":"passed","time":{"start":1694894529359,"stop":1694894529935,"duration":576}},{"uid":"ea70a25c829a4c6","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/ea70a25c829a4c6","status":"passed","time":{"start":1694880164989,"stop":1694880165306,"duration":317}},{"uid":"1b6feb38bc5ae3f5","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/1b6feb38bc5ae3f5","status":"passed","time":{"start":1694865792923,"stop":1694865793535,"duration":612}},{"uid":"be1fb07f4c42fb4a","reportUrl":"https://novasamatech.github.io/test-runner/3778//#testresult/be1fb07f4c42fb4a","status":"passed","time":{"start":1694851335511,"stop":1694851335837,"duration":326}},{"uid":"718cdb9d32decf2b","reportUrl":"https://novasamatech.github.io/test-runner/3777//#testresult/718cdb9d32decf2b","status":"passed","time":{"start":1694836932012,"stop":1694836932485,"duration":473}},{"uid":"7c9d5174b1c86720","reportUrl":"https://novasamatech.github.io/test-runner/3776//#testresult/7c9d5174b1c86720","status":"passed","time":{"start":1694822576416,"stop":1694822576997,"duration":581}},{"uid":"5cf9276fea2bfb8e","reportUrl":"https://novasamatech.github.io/test-runner/3775//#testresult/5cf9276fea2bfb8e","status":"passed","time":{"start":1694808157129,"stop":1694808157711,"duration":582}},{"uid":"26c182a3a8379b66","reportUrl":"https://novasamatech.github.io/test-runner/3774//#testresult/26c182a3a8379b66","status":"passed","time":{"start":1694793738133,"stop":1694793738475,"duration":342}},{"uid":"c32f228b9196935c","reportUrl":"https://novasamatech.github.io/test-runner/3773//#testresult/c32f228b9196935c","status":"passed","time":{"start":1694779345132,"stop":1694779345584,"duration":452}},{"uid":"62f7c76eca1dea0e","reportUrl":"https://novasamatech.github.io/test-runner/3772//#testresult/62f7c76eca1dea0e","status":"passed","time":{"start":1694764938238,"stop":1694764938906,"duration":668}},{"uid":"8a23f449e4dbe29b","reportUrl":"https://novasamatech.github.io/test-runner/3771//#testresult/8a23f449e4dbe29b","status":"passed","time":{"start":1694750538205,"stop":1694750538960,"duration":755}}]},"tags":[]},"source":"a5c29ad3e17df5cc.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}