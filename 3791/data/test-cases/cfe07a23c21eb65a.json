{"uid":"cfe07a23c21eb65a","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1695038568649,"stop":1695038569287,"duration":638},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 18 Sep 2023 12:02:48 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 18 Sep 2023 12:02:48 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 18 Sep 2023 12:02:48 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 18 Sep 2023 12:02:48 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"550b8b6d564fb3b5","name":"stdout","source":"550b8b6d564fb3b5.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az617-717"},{"name":"thread","value":"2049-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"588e84d6552d1f69","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 18 Sep 2023 12:02:33 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695038552993,"stop":1695038553523,"duration":530}},{"uid":"1c6140ddebbd139","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 18 Sep 2023 12:02:17 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695038537131,"stop":1695038537815,"duration":684}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":144,"unknown":0,"total":152},"items":[{"uid":"d57e2fe75564cbf","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/d57e2fe75564cbf","status":"passed","time":{"start":1695024148966,"stop":1695024149580,"duration":614}},{"uid":"a028dab17dd8473e","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/a028dab17dd8473e","status":"passed","time":{"start":1695009721984,"stop":1695009723041,"duration":1057}},{"uid":"8f4eedd7fe5441b9","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/8f4eedd7fe5441b9","status":"passed","time":{"start":1694995376684,"stop":1694995377563,"duration":879}},{"uid":"8deb35cd04fcc384","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/8deb35cd04fcc384","status":"passed","time":{"start":1694980931357,"stop":1694980932197,"duration":840}},{"uid":"f2f94cf86882b4d0","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/f2f94cf86882b4d0","status":"passed","time":{"start":1694966533410,"stop":1694966534285,"duration":875}},{"uid":"5008395bf1285404","reportUrl":"https://novasamatech.github.io/test-runner/3785//#testresult/5008395bf1285404","status":"passed","time":{"start":1694952119975,"stop":1694952121621,"duration":1646}},{"uid":"b9144b58d966d19b","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/b9144b58d966d19b","status":"passed","time":{"start":1694937710877,"stop":1694937712051,"duration":1174}},{"uid":"d486295cc9ced855","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/d486295cc9ced855","status":"passed","time":{"start":1694923321160,"stop":1694923321839,"duration":679}},{"uid":"238f9860966a72a7","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/238f9860966a72a7","status":"passed","time":{"start":1694908965457,"stop":1694908966501,"duration":1044}},{"uid":"cbbc43d41a1be576","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/cbbc43d41a1be576","status":"passed","time":{"start":1694894511633,"stop":1694894512637,"duration":1004}},{"uid":"76c73195907087e8","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/76c73195907087e8","status":"passed","time":{"start":1694880119249,"stop":1694880119966,"duration":717}},{"uid":"4d2b1ed5427c1014","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/4d2b1ed5427c1014","status":"passed","time":{"start":1694865735658,"stop":1694865736782,"duration":1124}},{"uid":"9f31478b0b2dcc7","reportUrl":"https://novasamatech.github.io/test-runner/3778//#testresult/9f31478b0b2dcc7","status":"passed","time":{"start":1694851326090,"stop":1694851326747,"duration":657}},{"uid":"8384f75fa01e9d78","reportUrl":"https://novasamatech.github.io/test-runner/3777//#testresult/8384f75fa01e9d78","status":"passed","time":{"start":1694836918689,"stop":1694836919383,"duration":694}},{"uid":"bd47d2f6ac32935b","reportUrl":"https://novasamatech.github.io/test-runner/3776//#testresult/bd47d2f6ac32935b","status":"passed","time":{"start":1694822568691,"stop":1694822569720,"duration":1029}},{"uid":"8d4e5f1a193e72a8","reportUrl":"https://novasamatech.github.io/test-runner/3775//#testresult/8d4e5f1a193e72a8","status":"passed","time":{"start":1694808128717,"stop":1694808129380,"duration":663}},{"uid":"f3c29e97c48238ef","reportUrl":"https://novasamatech.github.io/test-runner/3774//#testresult/f3c29e97c48238ef","status":"passed","time":{"start":1694793733219,"stop":1694793733812,"duration":593}},{"uid":"7e5cf1cfb63f1389","reportUrl":"https://novasamatech.github.io/test-runner/3773//#testresult/7e5cf1cfb63f1389","status":"passed","time":{"start":1694779327436,"stop":1694779328289,"duration":853}},{"uid":"37b88199c1db55da","reportUrl":"https://novasamatech.github.io/test-runner/3772//#testresult/37b88199c1db55da","status":"passed","time":{"start":1694764914034,"stop":1694764914824,"duration":790}},{"uid":"3b3dc23cf6ed24cc","reportUrl":"https://novasamatech.github.io/test-runner/3771//#testresult/3b3dc23cf6ed24cc","status":"passed","time":{"start":1694750521761,"stop":1694750522676,"duration":915}}]},"tags":[]},"source":"cfe07a23c21eb65a.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}