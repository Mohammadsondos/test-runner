{"uid":"f55f54a133cd1024","name":"test_can_create_connection[Test for OriginTrail Parachain, url: wss://parachain-rpc.origin-trail.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2f3c2858490b7fe22f1ec62a2cdaccfd","time":{"start":1687075468414,"stop":1687075468717,"duration":303},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 18 Jun 2023 08:04:28 GMT', 'connection': 'close', 'transfer-encoding': 'chunked'} -+-+- None","statusTrace":"data = {'name': 'OriginTrail Parachain', 'url': 'wss://parachain-rpc.origin-trail.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 18 Jun 2023 08:04:28 GMT', 'connection': 'close', 'transfer-encoding': 'chunked'} -+-+- None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 18 Jun 2023 08:04:28 GMT', 'connection': 'close', 'transfer-encoding': 'chunked'} -+-+- None","statusTrace":"data = {'name': 'OriginTrail Parachain', 'url': 'wss://parachain-rpc.origin-trail.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 18 Jun 2023 08:04:28 GMT', 'connection': 'close', 'transfer-encoding': 'chunked'} -+-+- None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"9c91e979409b50d2","name":"stdout","source":"9c91e979409b50d2.txt","type":"text/plain","size":837}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az583-930"},{"name":"thread","value":"1950-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://parachain-rpc.origin-trail.network', 'name': 'OriginTrail Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e3ae0f1a8f4a1c27","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 18 Jun 2023 08:04:13 GMT', 'connection': 'close', 'transfer-encoding': 'chunked'} -+-+- None","time":{"start":1687075453023,"stop":1687075453334,"duration":311}},{"uid":"2217083a81ca9771","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 18 Jun 2023 08:03:57 GMT', 'connection': 'close', 'transfer-encoding': 'chunked'} -+-+- None","time":{"start":1687075437376,"stop":1687075437868,"duration":492}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":269,"unknown":0,"total":270},"items":[{"uid":"fc84804e7160f6a6","reportUrl":"https://novasamatech.github.io/test-runner/3228//#testresult/fc84804e7160f6a6","status":"passed","time":{"start":1687061049747,"stop":1687061050359,"duration":612}},{"uid":"5c5794d9d5a06aed","reportUrl":"https://novasamatech.github.io/test-runner/3227//#testresult/5c5794d9d5a06aed","status":"passed","time":{"start":1687047333741,"stop":1687047334235,"duration":494}},{"uid":"9a37f3da6e7ac4b1","reportUrl":"https://novasamatech.github.io/test-runner/3226//#testresult/9a37f3da6e7ac4b1","status":"passed","time":{"start":1687032233770,"stop":1687032234486,"duration":716}},{"uid":"826e3a83104b2557","reportUrl":"https://novasamatech.github.io/test-runner/3225//#testresult/826e3a83104b2557","status":"passed","time":{"start":1687017862067,"stop":1687017862752,"duration":685}},{"uid":"190e04809e92fbe3","reportUrl":"https://novasamatech.github.io/test-runner/3224//#testresult/190e04809e92fbe3","status":"passed","time":{"start":1687003473227,"stop":1687003473814,"duration":587}},{"uid":"9a42a5f53e21b144","reportUrl":"https://novasamatech.github.io/test-runner/3223//#testresult/9a42a5f53e21b144","status":"passed","time":{"start":1686989049736,"stop":1686989050483,"duration":747}},{"uid":"f3fd1bc5c22d7345","reportUrl":"https://novasamatech.github.io/test-runner/3222//#testresult/f3fd1bc5c22d7345","status":"passed","time":{"start":1686974650093,"stop":1686974650752,"duration":659}},{"uid":"88265233958a39bc","reportUrl":"https://novasamatech.github.io/test-runner/3221//#testresult/88265233958a39bc","status":"passed","time":{"start":1686960814486,"stop":1686960815143,"duration":657}},{"uid":"f737d0d589ad5178","reportUrl":"https://novasamatech.github.io/test-runner/3220//#testresult/f737d0d589ad5178","status":"passed","time":{"start":1686945840505,"stop":1686945841024,"duration":519}},{"uid":"3910eb4cc9b7374c","reportUrl":"https://novasamatech.github.io/test-runner/3219//#testresult/3910eb4cc9b7374c","status":"passed","time":{"start":1686931445496,"stop":1686931446067,"duration":571}},{"uid":"bf20840b00710ee9","reportUrl":"https://novasamatech.github.io/test-runner/3218//#testresult/bf20840b00710ee9","status":"passed","time":{"start":1686917095584,"stop":1686917096167,"duration":583}},{"uid":"660165230cad6582","reportUrl":"https://novasamatech.github.io/test-runner/3217//#testresult/660165230cad6582","status":"passed","time":{"start":1686902646592,"stop":1686902647381,"duration":789}},{"uid":"1665e9a33808e8cd","reportUrl":"https://novasamatech.github.io/test-runner/3216//#testresult/1665e9a33808e8cd","status":"passed","time":{"start":1686888257780,"stop":1686888258498,"duration":718}},{"uid":"f69b64df69139020","reportUrl":"https://novasamatech.github.io/test-runner/3215//#testresult/f69b64df69139020","status":"passed","time":{"start":1686874444751,"stop":1686874445146,"duration":395}},{"uid":"f035a8c5ec7c85ea","reportUrl":"https://novasamatech.github.io/test-runner/3214//#testresult/f035a8c5ec7c85ea","status":"passed","time":{"start":1686859440047,"stop":1686859440441,"duration":394}},{"uid":"15225a1b449fe6e1","reportUrl":"https://novasamatech.github.io/test-runner/3213//#testresult/15225a1b449fe6e1","status":"passed","time":{"start":1686845041243,"stop":1686845041657,"duration":414}},{"uid":"55324d32dd3f1424","reportUrl":"https://novasamatech.github.io/test-runner/3212//#testresult/55324d32dd3f1424","status":"passed","time":{"start":1686830712665,"stop":1686830713555,"duration":890}},{"uid":"d3ade59a720baa12","reportUrl":"https://novasamatech.github.io/test-runner/3211//#testresult/d3ade59a720baa12","status":"passed","time":{"start":1686816251641,"stop":1686816252099,"duration":458}},{"uid":"270e30f8dca3c63e","reportUrl":"https://novasamatech.github.io/test-runner/3210//#testresult/270e30f8dca3c63e","status":"passed","time":{"start":1686801869237,"stop":1686801869822,"duration":585}},{"uid":"8bff0a9c8544c2e8","reportUrl":"https://novasamatech.github.io/test-runner/3209//#testresult/8bff0a9c8544c2e8","status":"passed","time":{"start":1686788047320,"stop":1686788047711,"duration":391}}]},"tags":[]},"source":"f55f54a133cd1024.json","parameterValues":["{'url': 'wss://parachain-rpc.origin-trail.network', 'name': 'OriginTrail Parachain'}"]}