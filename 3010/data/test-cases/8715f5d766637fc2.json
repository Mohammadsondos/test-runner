{"uid":"8715f5d766637fc2","name":"test_can_create_connection[Test for Hashed Network, url: wss://c1.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"82d36aa15e8a5bcf4ff7d8702aa21bfe","time":{"start":1684109657251,"stop":1684109657311,"duration":60},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c1.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c1.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"c0328a716ec49d4c","name":"stdout","source":"c0328a716ec49d4c.txt","type":"text/plain","size":254}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az934-148"},{"name":"thread","value":"1898-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c1.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"430bf2f83ea086ec","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1684109647072,"stop":1684109647125,"duration":53}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":43,"skipped":0,"passed":64,"unknown":0,"total":107},"items":[{"uid":"2128d4e771d368cd","reportUrl":"https://nova-wallet.github.io/test-runner/3009//#testresult/2128d4e771d368cd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1684094773808,"stop":1684094774014,"duration":206}},{"uid":"1307cfd78edb41d2","reportUrl":"https://nova-wallet.github.io/test-runner/3008//#testresult/1307cfd78edb41d2","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1684080339701,"stop":1684080339929,"duration":228}},{"uid":"ebb269916797d82a","reportUrl":"https://nova-wallet.github.io/test-runner/3005//#testresult/ebb269916797d82a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1684037120004,"stop":1684037120259,"duration":255}},{"uid":"38b6360d8fcec549","reportUrl":"https://nova-wallet.github.io/test-runner/3003//#testresult/38b6360d8fcec549","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1684008305355,"stop":1684008305592,"duration":237}},{"uid":"dc218504c3df2d6d","reportUrl":"https://nova-wallet.github.io/test-runner/3002//#testresult/dc218504c3df2d6d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1683993872429,"stop":1683993872479,"duration":50}},{"uid":"61939849fc667246","reportUrl":"https://nova-wallet.github.io/test-runner/3001//#testresult/61939849fc667246","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1683979522458,"stop":1683979522695,"duration":237}},{"uid":"aa62b37b308c32ea","reportUrl":"https://nova-wallet.github.io/test-runner/3000//#testresult/aa62b37b308c32ea","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1683965096870,"stop":1683965097051,"duration":181}},{"uid":"e0d7f1d9831a0fe4","reportUrl":"https://nova-wallet.github.io/test-runner/2999//#testresult/e0d7f1d9831a0fe4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1683950684087,"stop":1683950684246,"duration":159}},{"uid":"1030c4e320a34b2a","reportUrl":"https://nova-wallet.github.io/test-runner/2997//#testresult/1030c4e320a34b2a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1683921877337,"stop":1683921877391,"duration":54}},{"uid":"d51c7195bd99f36c","reportUrl":"https://nova-wallet.github.io/test-runner/2996//#testresult/d51c7195bd99f36c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1683907499665,"stop":1683907500031,"duration":366}},{"uid":"b9640362bf2a66fc","reportUrl":"https://nova-wallet.github.io/test-runner/2995//#testresult/b9640362bf2a66fc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1683893178518,"stop":1683893178739,"duration":221}},{"uid":"cb3a2bd906299fa6","reportUrl":"https://nova-wallet.github.io/test-runner/2994//#testresult/cb3a2bd906299fa6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1683878709716,"stop":1683878709886,"duration":170}},{"uid":"608b1db4379c8595","reportUrl":"https://nova-wallet.github.io/test-runner/2991//#testresult/608b1db4379c8595","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1683835495231,"stop":1683835495465,"duration":234}},{"uid":"9bcb131448141bb8","reportUrl":"https://nova-wallet.github.io/test-runner/2990//#testresult/9bcb131448141bb8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1683821178795,"stop":1683821178930,"duration":135}},{"uid":"786e45c2e644fed8","reportUrl":"https://nova-wallet.github.io/test-runner/2989//#testresult/786e45c2e644fed8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1683806795990,"stop":1683806796155,"duration":165}},{"uid":"55d188a35a25cec7","reportUrl":"https://nova-wallet.github.io/test-runner/2988//#testresult/55d188a35a25cec7","status":"passed","time":{"start":1683792304796,"stop":1683792304864,"duration":68}},{"uid":"af9204f72b24497a","reportUrl":"https://nova-wallet.github.io/test-runner/2987//#testresult/af9204f72b24497a","status":"passed","time":{"start":1683777894350,"stop":1683777894603,"duration":253}},{"uid":"be9fc0ad06784fe4","reportUrl":"https://nova-wallet.github.io/test-runner/2985//#testresult/be9fc0ad06784fe4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1683749165521,"stop":1683749165596,"duration":75}},{"uid":"bfbe60b4d3c37117","reportUrl":"https://nova-wallet.github.io/test-runner/2983//#testresult/bfbe60b4d3c37117","status":"passed","time":{"start":1683720335745,"stop":1683720335826,"duration":81}},{"uid":"175c0c7caeea4808","reportUrl":"https://nova-wallet.github.io/test-runner/2982//#testresult/175c0c7caeea4808","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1683705927246,"stop":1683705927282,"duration":36}}]},"tags":[]},"source":"8715f5d766637fc2.json","parameterValues":["{'url': 'wss://c1.hashed.network', 'name': 'Hashed Network'}"]}