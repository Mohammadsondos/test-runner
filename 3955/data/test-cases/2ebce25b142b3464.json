{"uid":"2ebce25b142b3464","name":"test_can_create_connection[Test for Kylin, url: wss://polkadot.kylin-node.co.uk]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3ee0d191ab7acb2fad9a82a3aa808e89","time":{"start":1697385735656,"stop":1697385735863,"duration":207},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 15 Oct 2023 16:02:15 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 15 Oct 2023 16:02:15 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 15 Oct 2023 16:02:15 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 15 Oct 2023 16:02:15 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"12dca278e8804c8a","name":"stdout","source":"12dca278e8804c8a.txt","type":"text/plain","size":1500}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az799-341"},{"name":"thread","value":"2146-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c7b60ea6ee0f7c9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 15 Oct 2023 16:02:00 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1697385720296,"stop":1697385720502,"duration":206}},{"uid":"875de4750e1a37cf","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 15 Oct 2023 16:01:45 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1697385704942,"stop":1697385705142,"duration":200}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":33,"skipped":0,"passed":282,"unknown":0,"total":315},"items":[{"uid":"220671be8d1868fc","reportUrl":"https://novasamatech.github.io/test-runner/3954//#testresult/220671be8d1868fc","status":"passed","time":{"start":1697371296911,"stop":1697371296976,"duration":65}},{"uid":"be8a1859cca16e05","reportUrl":"https://novasamatech.github.io/test-runner/3953//#testresult/be8a1859cca16e05","status":"passed","time":{"start":1697356891228,"stop":1697356891382,"duration":154}},{"uid":"9bf9e154f4d49a0b","reportUrl":"https://novasamatech.github.io/test-runner/3952//#testresult/9bf9e154f4d49a0b","status":"passed","time":{"start":1697342507919,"stop":1697342508465,"duration":546}},{"uid":"8fee470bf6e0a05e","reportUrl":"https://novasamatech.github.io/test-runner/3951//#testresult/8fee470bf6e0a05e","status":"passed","time":{"start":1697328143564,"stop":1697328143670,"duration":106}},{"uid":"83f98166985db2b5","reportUrl":"https://novasamatech.github.io/test-runner/3950//#testresult/83f98166985db2b5","status":"passed","time":{"start":1697313703212,"stop":1697313703297,"duration":85}},{"uid":"85b9de526284ba3","reportUrl":"https://novasamatech.github.io/test-runner/3949//#testresult/85b9de526284ba3","status":"passed","time":{"start":1697299314765,"stop":1697299314987,"duration":222}},{"uid":"15f84640c9a71224","reportUrl":"https://novasamatech.github.io/test-runner/3948//#testresult/15f84640c9a71224","status":"passed","time":{"start":1697285720755,"stop":1697285720864,"duration":109}},{"uid":"7d84fc4c1fd4e097","reportUrl":"https://novasamatech.github.io/test-runner/3947//#testresult/7d84fc4c1fd4e097","status":"passed","time":{"start":1697270499008,"stop":1697270499364,"duration":356}},{"uid":"38441375f9b36762","reportUrl":"https://novasamatech.github.io/test-runner/3946//#testresult/38441375f9b36762","status":"passed","time":{"start":1697256107214,"stop":1697256107634,"duration":420}},{"uid":"b45eea165c5f7099","reportUrl":"https://novasamatech.github.io/test-runner/3945//#testresult/b45eea165c5f7099","status":"passed","time":{"start":1697242441189,"stop":1697242441332,"duration":143}},{"uid":"f35a43a98a2087d5","reportUrl":"https://novasamatech.github.io/test-runner/3944//#testresult/f35a43a98a2087d5","status":"passed","time":{"start":1697227304096,"stop":1697227304353,"duration":257}},{"uid":"1db6db29dfa070b9","reportUrl":"https://novasamatech.github.io/test-runner/3943//#testresult/1db6db29dfa070b9","status":"passed","time":{"start":1697212911091,"stop":1697212911465,"duration":374}},{"uid":"e379254c91e0bcf3","reportUrl":"https://novasamatech.github.io/test-runner/3942//#testresult/e379254c91e0bcf3","status":"passed","time":{"start":1697198510529,"stop":1697198510698,"duration":169}},{"uid":"750b14ab6660444c","reportUrl":"https://novasamatech.github.io/test-runner/3941//#testresult/750b14ab6660444c","status":"passed","time":{"start":1697184106655,"stop":1697184107003,"duration":348}},{"uid":"ed7cc52d2679ccaa","reportUrl":"https://novasamatech.github.io/test-runner/3940//#testresult/ed7cc52d2679ccaa","status":"passed","time":{"start":1697169705333,"stop":1697169705766,"duration":433}},{"uid":"e1c0345f7005d858","reportUrl":"https://novasamatech.github.io/test-runner/3939//#testresult/e1c0345f7005d858","status":"passed","time":{"start":1697155345967,"stop":1697155346152,"duration":185}},{"uid":"86e5c5c063c7fa83","reportUrl":"https://novasamatech.github.io/test-runner/3938//#testresult/86e5c5c063c7fa83","status":"passed","time":{"start":1697140890916,"stop":1697140891041,"duration":125}},{"uid":"82e26f457fac11c2","reportUrl":"https://novasamatech.github.io/test-runner/3937//#testresult/82e26f457fac11c2","status":"passed","time":{"start":1697126550055,"stop":1697126550144,"duration":89}},{"uid":"550160d70b411a16","reportUrl":"https://novasamatech.github.io/test-runner/3936//#testresult/550160d70b411a16","status":"passed","time":{"start":1697112120118,"stop":1697112120261,"duration":143}},{"uid":"cb0fa1bc6e01fd56","reportUrl":"https://novasamatech.github.io/test-runner/3935//#testresult/cb0fa1bc6e01fd56","status":"passed","time":{"start":1697097716099,"stop":1697097716201,"duration":102}}]},"tags":[]},"source":"2ebce25b142b3464.json","parameterValues":["{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"]}