{"uid":"307a660f1b7758f8","name":"test_can_create_connection[Test for Ajuna, url: wss://rpc-parachain.ajuna.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9e45091b8d9f46b64ef77b6ae354ace8","time":{"start":1697385772507,"stop":1697385772859,"duration":352},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 15 Oct 2023 16:02:52 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 15 Oct 2023 16:02:52 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 15 Oct 2023 16:02:52 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 15 Oct 2023 16:02:52 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"ce8ed26fe12dac1c","name":"stdout","source":"ce8ed26fe12dac1c.txt","type":"text/plain","size":1491}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az799-341"},{"name":"thread","value":"2146-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2e485c4014f324cd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 15 Oct 2023 16:02:37 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1697385757002,"stop":1697385757356,"duration":354}},{"uid":"4f9f995a7b5af7dc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 15 Oct 2023 16:02:21 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1697385741474,"stop":1697385741908,"duration":434}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":19,"skipped":0,"passed":296,"unknown":0,"total":315},"items":[{"uid":"7bd2317f0cf89b61","reportUrl":"https://novasamatech.github.io/test-runner/3954//#testresult/7bd2317f0cf89b61","status":"passed","time":{"start":1697371323781,"stop":1697371324117,"duration":336}},{"uid":"b877edee604a91f8","reportUrl":"https://novasamatech.github.io/test-runner/3953//#testresult/b877edee604a91f8","status":"passed","time":{"start":1697356896414,"stop":1697356896780,"duration":366}},{"uid":"bcb70d6bb96b9192","reportUrl":"https://novasamatech.github.io/test-runner/3952//#testresult/bcb70d6bb96b9192","status":"passed","time":{"start":1697342511655,"stop":1697342512347,"duration":692}},{"uid":"bddc9cc33c9a53e9","reportUrl":"https://novasamatech.github.io/test-runner/3951//#testresult/bddc9cc33c9a53e9","status":"passed","time":{"start":1697328148714,"stop":1697328149255,"duration":541}},{"uid":"a95c6e3efb0e5477","reportUrl":"https://novasamatech.github.io/test-runner/3950//#testresult/a95c6e3efb0e5477","status":"passed","time":{"start":1697313706173,"stop":1697313706586,"duration":413}},{"uid":"38627884c41853af","reportUrl":"https://novasamatech.github.io/test-runner/3949//#testresult/38627884c41853af","status":"passed","time":{"start":1697299323045,"stop":1697299323576,"duration":531}},{"uid":"bca52d74df35062e","reportUrl":"https://novasamatech.github.io/test-runner/3948//#testresult/bca52d74df35062e","status":"passed","time":{"start":1697284905190,"stop":1697284905523,"duration":333}},{"uid":"b21844e44de859a1","reportUrl":"https://novasamatech.github.io/test-runner/3947//#testresult/b21844e44de859a1","status":"passed","time":{"start":1697270502449,"stop":1697270503018,"duration":569}},{"uid":"5433b84877315bfe","reportUrl":"https://novasamatech.github.io/test-runner/3946//#testresult/5433b84877315bfe","status":"passed","time":{"start":1697256111255,"stop":1697256111866,"duration":611}},{"uid":"41ea9069ba64d92c","reportUrl":"https://novasamatech.github.io/test-runner/3945//#testresult/41ea9069ba64d92c","status":"passed","time":{"start":1697241752690,"stop":1697241753115,"duration":425}},{"uid":"a3f57c929b0aea7d","reportUrl":"https://novasamatech.github.io/test-runner/3944//#testresult/a3f57c929b0aea7d","status":"passed","time":{"start":1697227307020,"stop":1697227307538,"duration":518}},{"uid":"ac17184a9f4424f0","reportUrl":"https://novasamatech.github.io/test-runner/3943//#testresult/ac17184a9f4424f0","status":"passed","time":{"start":1697212933876,"stop":1697212934473,"duration":597}},{"uid":"24ad3cf66e84371d","reportUrl":"https://novasamatech.github.io/test-runner/3942//#testresult/24ad3cf66e84371d","status":"passed","time":{"start":1697198515654,"stop":1697198516070,"duration":416}},{"uid":"a5b5f9994f0b1dd0","reportUrl":"https://novasamatech.github.io/test-runner/3941//#testresult/a5b5f9994f0b1dd0","status":"passed","time":{"start":1697184109323,"stop":1697184109854,"duration":531}},{"uid":"ebe9fd26dea03310","reportUrl":"https://novasamatech.github.io/test-runner/3940//#testresult/ebe9fd26dea03310","status":"passed","time":{"start":1697169708436,"stop":1697169709056,"duration":620}},{"uid":"11010fffc02d6f7d","reportUrl":"https://novasamatech.github.io/test-runner/3939//#testresult/11010fffc02d6f7d","status":"passed","time":{"start":1697155348701,"stop":1697155349082,"duration":381}},{"uid":"9b29bf51b4804c18","reportUrl":"https://novasamatech.github.io/test-runner/3938//#testresult/9b29bf51b4804c18","status":"passed","time":{"start":1697140894512,"stop":1697140894931,"duration":419}},{"uid":"1030cd2d7069b9b9","reportUrl":"https://novasamatech.github.io/test-runner/3937//#testresult/1030cd2d7069b9b9","status":"passed","time":{"start":1697126553921,"stop":1697126554360,"duration":439}},{"uid":"9fc976b16787e3a8","reportUrl":"https://novasamatech.github.io/test-runner/3936//#testresult/9fc976b16787e3a8","status":"passed","time":{"start":1697112120727,"stop":1697112121171,"duration":444}},{"uid":"be3b8a38bea7b466","reportUrl":"https://novasamatech.github.io/test-runner/3935//#testresult/be3b8a38bea7b466","status":"passed","time":{"start":1697097719302,"stop":1697097719674,"duration":372}}]},"tags":[]},"source":"307a660f1b7758f8.json","parameterValues":["{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"]}