{"uid":"8478d00483d254ab","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1706904069510,"stop":1706904069639,"duration":129},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f5e046e1c60>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f5e04506500>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f5e04506d70>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1200-380"},{"name":"thread","value":"2246-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5cefa5d1d114d42e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904064362,"stop":1706904064477,"duration":115}},{"uid":"5168ebfbc74ed908","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904059095,"stop":1706904059213,"duration":118}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":818,"unknown":0,"total":819},"items":[{"uid":"365a7eb58ee8c531","reportUrl":"https://novasamatech.github.io/test-runner/4627//#testresult/365a7eb58ee8c531","status":"passed","time":{"start":1706889671529,"stop":1706889672136,"duration":607}},{"uid":"e70beed364172951","reportUrl":"https://novasamatech.github.io/test-runner/4626//#testresult/e70beed364172951","status":"passed","time":{"start":1706875262607,"stop":1706875262960,"duration":353}},{"uid":"2d2e025bddf71cc0","reportUrl":"https://novasamatech.github.io/test-runner/4625//#testresult/2d2e025bddf71cc0","status":"passed","time":{"start":1706860871801,"stop":1706860872610,"duration":809}},{"uid":"137f5abe3881f02c","reportUrl":"https://novasamatech.github.io/test-runner/4624//#testresult/137f5abe3881f02c","status":"passed","time":{"start":1706846466185,"stop":1706846466412,"duration":227}},{"uid":"8c88f69d1a52ea0f","reportUrl":"https://novasamatech.github.io/test-runner/4623//#testresult/8c88f69d1a52ea0f","status":"passed","time":{"start":1706832113677,"stop":1706832113973,"duration":296}},{"uid":"621dd999da906d47","reportUrl":"https://novasamatech.github.io/test-runner/4622//#testresult/621dd999da906d47","status":"passed","time":{"start":1706817664956,"stop":1706817665165,"duration":209}},{"uid":"6af4fa4234c3a220","reportUrl":"https://novasamatech.github.io/test-runner/4621//#testresult/6af4fa4234c3a220","status":"passed","time":{"start":1706803258987,"stop":1706803259464,"duration":477}},{"uid":"571ba29a5b25f86f","reportUrl":"https://novasamatech.github.io/test-runner/4620//#testresult/571ba29a5b25f86f","status":"passed","time":{"start":1706788865384,"stop":1706788865742,"duration":358}},{"uid":"146488f827d7bac4","reportUrl":"https://novasamatech.github.io/test-runner/4619//#testresult/146488f827d7bac4","status":"passed","time":{"start":1706774465023,"stop":1706774465174,"duration":151}},{"uid":"eea902123eff4c03","reportUrl":"https://novasamatech.github.io/test-runner/4618//#testresult/eea902123eff4c03","status":"passed","time":{"start":1706760063320,"stop":1706760063893,"duration":573}},{"uid":"450e9a486c8c9c1f","reportUrl":"https://novasamatech.github.io/test-runner/4617//#testresult/450e9a486c8c9c1f","status":"passed","time":{"start":1706745710207,"stop":1706745710467,"duration":260}},{"uid":"8430ac78d198249a","reportUrl":"https://novasamatech.github.io/test-runner/4616//#testresult/8430ac78d198249a","status":"passed","time":{"start":1706731258813,"stop":1706731259272,"duration":459}},{"uid":"5dc0fd995ae974a0","reportUrl":"https://novasamatech.github.io/test-runner/4615//#testresult/5dc0fd995ae974a0","status":"passed","time":{"start":1706716859413,"stop":1706716860015,"duration":602}},{"uid":"c808163e07e9177d","reportUrl":"https://novasamatech.github.io/test-runner/4614//#testresult/c808163e07e9177d","status":"passed","time":{"start":1706702473525,"stop":1706702474038,"duration":513}},{"uid":"abcaeb85766569cd","reportUrl":"https://novasamatech.github.io/test-runner/4613//#testresult/abcaeb85766569cd","status":"passed","time":{"start":1706688074744,"stop":1706688075335,"duration":591}},{"uid":"c704892c2b82f87e","reportUrl":"https://novasamatech.github.io/test-runner/4612//#testresult/c704892c2b82f87e","status":"passed","time":{"start":1706673662610,"stop":1706673662754,"duration":144}},{"uid":"3e857f00824352b9","reportUrl":"https://novasamatech.github.io/test-runner/4611//#testresult/3e857f00824352b9","status":"passed","time":{"start":1706659308934,"stop":1706659309454,"duration":520}},{"uid":"7e1c29513c56f6f6","reportUrl":"https://novasamatech.github.io/test-runner/4610//#testresult/7e1c29513c56f6f6","status":"passed","time":{"start":1706644861423,"stop":1706644862047,"duration":624}},{"uid":"3fb205e97b2c3793","reportUrl":"https://novasamatech.github.io/test-runner/4609//#testresult/3fb205e97b2c3793","status":"passed","time":{"start":1706630471206,"stop":1706630472384,"duration":1178}},{"uid":"b50834f59d79c67","reportUrl":"https://novasamatech.github.io/test-runner/4608//#testresult/b50834f59d79c67","status":"passed","time":{"start":1706616068756,"stop":1706616069076,"duration":320}}]},"tags":[]},"source":"8478d00483d254ab.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}