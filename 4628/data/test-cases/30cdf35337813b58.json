{"uid":"30cdf35337813b58","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.flashbots.net]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"53f1fa2f4a4225b0df7d282ad6e0c8f4","time":{"start":1706904069454,"stop":1706904069571,"duration":117},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f8467fc1ae0>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.flashbots.net'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f8467b56560>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f8467b57f40>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1200-380"},{"name":"thread","value":"2243-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.flashbots.net', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6a9de05363e5461b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904064284,"stop":1706904064419,"duration":135}},{"uid":"958b03db3608369d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904059022,"stop":1706904059152,"duration":130}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":818,"unknown":0,"total":819},"items":[{"uid":"a9e1cfb6d232b8c2","reportUrl":"https://novasamatech.github.io/test-runner/4627//#testresult/a9e1cfb6d232b8c2","status":"passed","time":{"start":1706889672005,"stop":1706889672785,"duration":780}},{"uid":"e877dd5260a5dcfe","reportUrl":"https://novasamatech.github.io/test-runner/4626//#testresult/e877dd5260a5dcfe","status":"passed","time":{"start":1706875262694,"stop":1706875263041,"duration":347}},{"uid":"5610c9b6bd9efe7b","reportUrl":"https://novasamatech.github.io/test-runner/4625//#testresult/5610c9b6bd9efe7b","status":"passed","time":{"start":1706860871345,"stop":1706860872091,"duration":746}},{"uid":"fb0e1298aaf5204a","reportUrl":"https://novasamatech.github.io/test-runner/4624//#testresult/fb0e1298aaf5204a","status":"passed","time":{"start":1706846466180,"stop":1706846466420,"duration":240}},{"uid":"bd23910c3ee8ec81","reportUrl":"https://novasamatech.github.io/test-runner/4623//#testresult/bd23910c3ee8ec81","status":"passed","time":{"start":1706832113560,"stop":1706832113916,"duration":356}},{"uid":"25828777e305ac19","reportUrl":"https://novasamatech.github.io/test-runner/4622//#testresult/25828777e305ac19","status":"passed","time":{"start":1706817664744,"stop":1706817665085,"duration":341}},{"uid":"f05a526c9a9ee6ee","reportUrl":"https://novasamatech.github.io/test-runner/4621//#testresult/f05a526c9a9ee6ee","status":"passed","time":{"start":1706803259117,"stop":1706803259442,"duration":325}},{"uid":"2ceb9cbdd67882d","reportUrl":"https://novasamatech.github.io/test-runner/4620//#testresult/2ceb9cbdd67882d","status":"passed","time":{"start":1706788865293,"stop":1706788865573,"duration":280}},{"uid":"f8974652df9d2c33","reportUrl":"https://novasamatech.github.io/test-runner/4619//#testresult/f8974652df9d2c33","status":"passed","time":{"start":1706774465030,"stop":1706774465367,"duration":337}},{"uid":"3634a4f3c60dfdb5","reportUrl":"https://novasamatech.github.io/test-runner/4618//#testresult/3634a4f3c60dfdb5","status":"passed","time":{"start":1706760063344,"stop":1706760064114,"duration":770}},{"uid":"4b558e05c1294e13","reportUrl":"https://novasamatech.github.io/test-runner/4617//#testresult/4b558e05c1294e13","status":"passed","time":{"start":1706745710428,"stop":1706745710673,"duration":245}},{"uid":"d828f469a194cf93","reportUrl":"https://novasamatech.github.io/test-runner/4616//#testresult/d828f469a194cf93","status":"passed","time":{"start":1706731258725,"stop":1706731259062,"duration":337}},{"uid":"dac75ba18e6c8d81","reportUrl":"https://novasamatech.github.io/test-runner/4615//#testresult/dac75ba18e6c8d81","status":"passed","time":{"start":1706716859429,"stop":1706716860331,"duration":902}},{"uid":"2b9ecbc10e9a554d","reportUrl":"https://novasamatech.github.io/test-runner/4614//#testresult/2b9ecbc10e9a554d","status":"passed","time":{"start":1706702473462,"stop":1706702474215,"duration":753}},{"uid":"50f5f21311d05445","reportUrl":"https://novasamatech.github.io/test-runner/4613//#testresult/50f5f21311d05445","status":"passed","time":{"start":1706688074187,"stop":1706688074857,"duration":670}},{"uid":"230b1d317a1ec780","reportUrl":"https://novasamatech.github.io/test-runner/4612//#testresult/230b1d317a1ec780","status":"passed","time":{"start":1706673662558,"stop":1706673662820,"duration":262}},{"uid":"db328bb8b9e023bb","reportUrl":"https://novasamatech.github.io/test-runner/4611//#testresult/db328bb8b9e023bb","status":"passed","time":{"start":1706659308820,"stop":1706659309529,"duration":709}},{"uid":"c8f669996c531dcd","reportUrl":"https://novasamatech.github.io/test-runner/4610//#testresult/c8f669996c531dcd","status":"passed","time":{"start":1706644861397,"stop":1706644862109,"duration":712}},{"uid":"83efd6c68975fc8e","reportUrl":"https://novasamatech.github.io/test-runner/4609//#testresult/83efd6c68975fc8e","status":"passed","time":{"start":1706630471370,"stop":1706630472539,"duration":1169}},{"uid":"dff228f89cf32ec8","reportUrl":"https://novasamatech.github.io/test-runner/4608//#testresult/dff228f89cf32ec8","status":"passed","time":{"start":1706616068406,"stop":1706616068753,"duration":347}}]},"tags":[]},"source":"30cdf35337813b58.json","parameterValues":["{'url': 'https://rpc.flashbots.net', 'name': 'Ethereum'}"]}