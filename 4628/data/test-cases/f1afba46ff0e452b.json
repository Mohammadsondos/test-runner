{"uid":"f1afba46ff0e452b","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1706904079964,"stop":1706904080094,"duration":130},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f82ff969c90>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f82ff88af80>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f82ff8889a0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1200-380"},{"name":"thread","value":"2249-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"333560bca8919f9e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904074798,"stop":1706904074929,"duration":131}},{"uid":"1ed499482b7b498","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904069633,"stop":1706904069763,"duration":130}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":815,"unknown":0,"total":819},"items":[{"uid":"c0c81d278f73df2c","reportUrl":"https://novasamatech.github.io/test-runner/4627//#testresult/c0c81d278f73df2c","status":"passed","time":{"start":1706889672139,"stop":1706889672938,"duration":799}},{"uid":"4bde64a6da32d529","reportUrl":"https://novasamatech.github.io/test-runner/4626//#testresult/4bde64a6da32d529","status":"passed","time":{"start":1706875262965,"stop":1706875263404,"duration":439}},{"uid":"720c89d016d313a5","reportUrl":"https://novasamatech.github.io/test-runner/4625//#testresult/720c89d016d313a5","status":"passed","time":{"start":1706860872094,"stop":1706860873066,"duration":972}},{"uid":"1ecfaeff7f5ca7dc","reportUrl":"https://novasamatech.github.io/test-runner/4624//#testresult/1ecfaeff7f5ca7dc","status":"passed","time":{"start":1706846466279,"stop":1706846466446,"duration":167}},{"uid":"12e6f5ec1ce75973","reportUrl":"https://novasamatech.github.io/test-runner/4623//#testresult/12e6f5ec1ce75973","status":"passed","time":{"start":1706832113716,"stop":1706832114001,"duration":285}},{"uid":"729b503baa267f06","reportUrl":"https://novasamatech.github.io/test-runner/4622//#testresult/729b503baa267f06","status":"passed","time":{"start":1706817665073,"stop":1706817665291,"duration":218}},{"uid":"468c1cb53ba20796","reportUrl":"https://novasamatech.github.io/test-runner/4621//#testresult/468c1cb53ba20796","status":"passed","time":{"start":1706803259467,"stop":1706803259890,"duration":423}},{"uid":"f0cdbaed5382bc3a","reportUrl":"https://novasamatech.github.io/test-runner/4620//#testresult/f0cdbaed5382bc3a","status":"passed","time":{"start":1706788865576,"stop":1706788865959,"duration":383}},{"uid":"79ed21b6aa1b959a","reportUrl":"https://novasamatech.github.io/test-runner/4619//#testresult/79ed21b6aa1b959a","status":"passed","time":{"start":1706774465178,"stop":1706774465416,"duration":238}},{"uid":"1c77e11d03d1c269","reportUrl":"https://novasamatech.github.io/test-runner/4618//#testresult/1c77e11d03d1c269","status":"passed","time":{"start":1706760063896,"stop":1706760064803,"duration":907}},{"uid":"f4596c97116a84d2","reportUrl":"https://novasamatech.github.io/test-runner/4617//#testresult/f4596c97116a84d2","status":"passed","time":{"start":1706745710469,"stop":1706745710805,"duration":336}},{"uid":"fc505c1944efb077","reportUrl":"https://novasamatech.github.io/test-runner/4616//#testresult/fc505c1944efb077","status":"passed","time":{"start":1706731259065,"stop":1706731259453,"duration":388}},{"uid":"7498909f457cadd","reportUrl":"https://novasamatech.github.io/test-runner/4615//#testresult/7498909f457cadd","status":"passed","time":{"start":1706716860018,"stop":1706716860757,"duration":739}},{"uid":"68f7bacb3cd8f2df","reportUrl":"https://novasamatech.github.io/test-runner/4614//#testresult/68f7bacb3cd8f2df","status":"passed","time":{"start":1706702474041,"stop":1706702474863,"duration":822}},{"uid":"43ef572e1bdc3335","reportUrl":"https://novasamatech.github.io/test-runner/4613//#testresult/43ef572e1bdc3335","status":"passed","time":{"start":1706688074747,"stop":1706688075615,"duration":868}},{"uid":"defa1a6688c9134e","reportUrl":"https://novasamatech.github.io/test-runner/4612//#testresult/defa1a6688c9134e","status":"passed","time":{"start":1706673662619,"stop":1706673662888,"duration":269}},{"uid":"d73bd8d02300f807","reportUrl":"https://novasamatech.github.io/test-runner/4611//#testresult/d73bd8d02300f807","status":"passed","time":{"start":1706659309532,"stop":1706659310713,"duration":1181}},{"uid":"50849fa3b03945e3","reportUrl":"https://novasamatech.github.io/test-runner/4610//#testresult/50849fa3b03945e3","status":"passed","time":{"start":1706644862112,"stop":1706644863279,"duration":1167}},{"uid":"55182c42aca0a995","reportUrl":"https://novasamatech.github.io/test-runner/4609//#testresult/55182c42aca0a995","status":"passed","time":{"start":1706630472381,"stop":1706630473154,"duration":773}},{"uid":"d11152e7b7f01df5","reportUrl":"https://novasamatech.github.io/test-runner/4608//#testresult/d11152e7b7f01df5","status":"passed","time":{"start":1706616068739,"stop":1706616068917,"duration":178}}]},"tags":[]},"source":"f1afba46ff0e452b.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}