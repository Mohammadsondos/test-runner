{"uid":"e637205d98d71d80","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1706904069258,"stop":1706904069387,"duration":129},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fd8f5b69de0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fd8f5a0a110>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fd8f5a0ae60>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1200-380"},{"name":"thread","value":"2240-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e4b490eeb559705b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904064097,"stop":1706904064227,"duration":130}},{"uid":"cea1149f9ebcb9ce","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904058819,"stop":1706904058971,"duration":152}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":365,"unknown":0,"total":367},"items":[{"uid":"5ac5a45a0e38a9c3","reportUrl":"https://novasamatech.github.io/test-runner/4627//#testresult/5ac5a45a0e38a9c3","status":"passed","time":{"start":1706889671714,"stop":1706889672364,"duration":650}},{"uid":"6a27badfff40b17c","reportUrl":"https://novasamatech.github.io/test-runner/4626//#testresult/6a27badfff40b17c","status":"passed","time":{"start":1706875262424,"stop":1706875262921,"duration":497}},{"uid":"fa23c0a3fa6aa6fc","reportUrl":"https://novasamatech.github.io/test-runner/4625//#testresult/fa23c0a3fa6aa6fc","status":"passed","time":{"start":1706860871620,"stop":1706860872717,"duration":1097}},{"uid":"5609a51ce032b7a5","reportUrl":"https://novasamatech.github.io/test-runner/4624//#testresult/5609a51ce032b7a5","status":"passed","time":{"start":1706846465931,"stop":1706846466079,"duration":148}},{"uid":"7ae8cdf6e4e37b51","reportUrl":"https://novasamatech.github.io/test-runner/4623//#testresult/7ae8cdf6e4e37b51","status":"passed","time":{"start":1706832113371,"stop":1706832113534,"duration":163}},{"uid":"1ee351619fdd39d8","reportUrl":"https://novasamatech.github.io/test-runner/4622//#testresult/1ee351619fdd39d8","status":"passed","time":{"start":1706817664879,"stop":1706817665070,"duration":191}},{"uid":"5da4c6cccb4c225e","reportUrl":"https://novasamatech.github.io/test-runner/4621//#testresult/5da4c6cccb4c225e","status":"passed","time":{"start":1706803258698,"stop":1706803258984,"duration":286}},{"uid":"d5a099401dd0c151","reportUrl":"https://novasamatech.github.io/test-runner/4620//#testresult/d5a099401dd0c151","status":"passed","time":{"start":1706788865096,"stop":1706788865307,"duration":211}},{"uid":"bdc8eac0630bd07a","reportUrl":"https://novasamatech.github.io/test-runner/4619//#testresult/bdc8eac0630bd07a","status":"passed","time":{"start":1706774464791,"stop":1706774465027,"duration":236}},{"uid":"5b4b475bbf57c7c7","reportUrl":"https://novasamatech.github.io/test-runner/4618//#testresult/5b4b475bbf57c7c7","status":"passed","time":{"start":1706760063623,"stop":1706760065379,"duration":1756}},{"uid":"2b62d487d3d5cf1d","reportUrl":"https://novasamatech.github.io/test-runner/4617//#testresult/2b62d487d3d5cf1d","status":"passed","time":{"start":1706745710062,"stop":1706745710204,"duration":142}},{"uid":"859ade29fc2fe810","reportUrl":"https://novasamatech.github.io/test-runner/4616//#testresult/859ade29fc2fe810","status":"passed","time":{"start":1706731258602,"stop":1706731258943,"duration":341}},{"uid":"51b236c8d974a923","reportUrl":"https://novasamatech.github.io/test-runner/4615//#testresult/51b236c8d974a923","status":"passed","time":{"start":1706716859444,"stop":1706716860157,"duration":713}},{"uid":"efceffcbcc0e64de","reportUrl":"https://novasamatech.github.io/test-runner/4614//#testresult/efceffcbcc0e64de","status":"passed","time":{"start":1706702473605,"stop":1706702474289,"duration":684}},{"uid":"a610d5971584e4e8","reportUrl":"https://novasamatech.github.io/test-runner/4613//#testresult/a610d5971584e4e8","status":"passed","time":{"start":1706688074151,"stop":1706688074745,"duration":594}},{"uid":"49f34b5d6f639b8b","reportUrl":"https://novasamatech.github.io/test-runner/4612//#testresult/49f34b5d6f639b8b","status":"passed","time":{"start":1706673662333,"stop":1706673662477,"duration":144}},{"uid":"a4d08a2461bfc715","reportUrl":"https://novasamatech.github.io/test-runner/4611//#testresult/a4d08a2461bfc715","status":"passed","time":{"start":1706659309011,"stop":1706659309798,"duration":787}},{"uid":"8ce41647198be537","reportUrl":"https://novasamatech.github.io/test-runner/4610//#testresult/8ce41647198be537","status":"passed","time":{"start":1706644861536,"stop":1706644862176,"duration":640}},{"uid":"61f72749569cb692","reportUrl":"https://novasamatech.github.io/test-runner/4609//#testresult/61f72749569cb692","status":"passed","time":{"start":1706630471112,"stop":1706630472378,"duration":1266}},{"uid":"10a3d23bcccb5c28","reportUrl":"https://novasamatech.github.io/test-runner/4608//#testresult/10a3d23bcccb5c28","status":"passed","time":{"start":1706616068557,"stop":1706616068736,"duration":179}}]},"tags":[]},"source":"e637205d98d71d80.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}