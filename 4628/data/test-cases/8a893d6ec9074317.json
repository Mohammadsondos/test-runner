{"uid":"8a893d6ec9074317","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1706904069449,"stop":1706904069602,"duration":153},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f82ff9699f0>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f82ff891c30>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f82ff890d90>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1200-380"},{"name":"thread","value":"2249-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c99c3ef979cc2ca1","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904064301,"stop":1706904064416,"duration":115}},{"uid":"3d5775d2bd1051be","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1706904059005,"stop":1706904059153,"duration":148}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":817,"unknown":0,"total":819},"items":[{"uid":"5b3f0b00ff7d6aa1","reportUrl":"https://novasamatech.github.io/test-runner/4627//#testresult/5b3f0b00ff7d6aa1","status":"passed","time":{"start":1706889671153,"stop":1706889672002,"duration":849}},{"uid":"4139be83af793cde","reportUrl":"https://novasamatech.github.io/test-runner/4626//#testresult/4139be83af793cde","status":"passed","time":{"start":1706875262558,"stop":1706875262960,"duration":402}},{"uid":"978c5b72de5bfe26","reportUrl":"https://novasamatech.github.io/test-runner/4625//#testresult/978c5b72de5bfe26","status":"passed","time":{"start":1706860871103,"stop":1706860871797,"duration":694}},{"uid":"8d9bc81503b9ae99","reportUrl":"https://novasamatech.github.io/test-runner/4624//#testresult/8d9bc81503b9ae99","status":"passed","time":{"start":1706846466323,"stop":1706846466502,"duration":179}},{"uid":"bdced0574e831f8c","reportUrl":"https://novasamatech.github.io/test-runner/4623//#testresult/bdced0574e831f8c","status":"passed","time":{"start":1706832113900,"stop":1706832114112,"duration":212}},{"uid":"fc9c7b3fb1c610d8","reportUrl":"https://novasamatech.github.io/test-runner/4622//#testresult/fc9c7b3fb1c610d8","status":"passed","time":{"start":1706817665209,"stop":1706817665386,"duration":177}},{"uid":"ccad46542174bb05","reportUrl":"https://novasamatech.github.io/test-runner/4621//#testresult/ccad46542174bb05","status":"passed","time":{"start":1706803259064,"stop":1706803259342,"duration":278}},{"uid":"1ae61c69852d0611","reportUrl":"https://novasamatech.github.io/test-runner/4620//#testresult/1ae61c69852d0611","status":"passed","time":{"start":1706788865652,"stop":1706788865902,"duration":250}},{"uid":"3c00668c968f09a6","reportUrl":"https://novasamatech.github.io/test-runner/4619//#testresult/3c00668c968f09a6","status":"passed","time":{"start":1706774465235,"stop":1706774465383,"duration":148}},{"uid":"2a57dc1fa3004519","reportUrl":"https://novasamatech.github.io/test-runner/4618//#testresult/2a57dc1fa3004519","status":"passed","time":{"start":1706760063188,"stop":1706760063927,"duration":739}},{"uid":"3df71985956adbe3","reportUrl":"https://novasamatech.github.io/test-runner/4617//#testresult/3df71985956adbe3","status":"passed","time":{"start":1706745710501,"stop":1706745710682,"duration":181}},{"uid":"504017b6f56bb6d7","reportUrl":"https://novasamatech.github.io/test-runner/4616//#testresult/504017b6f56bb6d7","status":"passed","time":{"start":1706731258892,"stop":1706731259200,"duration":308}},{"uid":"3c4540084fcb415f","reportUrl":"https://novasamatech.github.io/test-runner/4615//#testresult/3c4540084fcb415f","status":"passed","time":{"start":1706716859116,"stop":1706716860017,"duration":901}},{"uid":"8fd9460efe328f76","reportUrl":"https://novasamatech.github.io/test-runner/4614//#testresult/8fd9460efe328f76","status":"passed","time":{"start":1706702473892,"stop":1706702474498,"duration":606}},{"uid":"21565ad556ed98af","reportUrl":"https://novasamatech.github.io/test-runner/4613//#testresult/21565ad556ed98af","status":"passed","time":{"start":1706688074001,"stop":1706688074741,"duration":740}},{"uid":"76881521cda9628e","reportUrl":"https://novasamatech.github.io/test-runner/4612//#testresult/76881521cda9628e","status":"passed","time":{"start":1706673662617,"stop":1706673662806,"duration":189}},{"uid":"d227240c84c042af","reportUrl":"https://novasamatech.github.io/test-runner/4611//#testresult/d227240c84c042af","status":"passed","time":{"start":1706659308608,"stop":1706659309408,"duration":800}},{"uid":"707233d962075f5f","reportUrl":"https://novasamatech.github.io/test-runner/4610//#testresult/707233d962075f5f","status":"passed","time":{"start":1706644861272,"stop":1706644861953,"duration":681}},{"uid":"1f3e91d8d63f9115","reportUrl":"https://novasamatech.github.io/test-runner/4609//#testresult/1f3e91d8d63f9115","status":"passed","time":{"start":1706630471010,"stop":1706630472565,"duration":1555}},{"uid":"fcad04eeb168c98b","reportUrl":"https://novasamatech.github.io/test-runner/4608//#testresult/fcad04eeb168c98b","status":"passed","time":{"start":1706616068716,"stop":1706616068947,"duration":231}}]},"tags":[]},"source":"8a893d6ec9074317.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}