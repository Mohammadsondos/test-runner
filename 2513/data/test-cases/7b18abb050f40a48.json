{"uid":"7b18abb050f40a48","name":"test_can_create_connection[Test for XX network, url: wss://rpc.xx.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a8e1ede01a7872066249898c0020cb55","time":{"start":1677067587016,"stop":1677067587046,"duration":30},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'rpc.xx.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f736a4e99c0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'rpc.xx.network', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'XX network', 'url': 'wss://rpc.xx.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'rpc.xx.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f736a4e99c0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'rpc.xx.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f736a4e99c0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'rpc.xx.network', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'XX network', 'url': 'wss://rpc.xx.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'rpc.xx.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f736a4e99c0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"80f91acad2d1d2d9","name":"stdout","source":"80f91acad2d1d2d9.txt","type":"text/plain","size":216}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az436-477"},{"name":"thread","value":"1770-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.xx.network', 'name': 'XX network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e2ac65518b27e14c","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677067576807,"stop":1677067576899,"duration":92}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":67,"skipped":0,"passed":433,"unknown":0,"total":500},"items":[{"uid":"b4fa7bd89bffbd40","reportUrl":"https://nova-wallet.github.io/test-runner/2512//#testresult/b4fa7bd89bffbd40","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677053155987,"stop":1677053156032,"duration":45}},{"uid":"a7db03668bca1585","reportUrl":"https://nova-wallet.github.io/test-runner/2511//#testresult/a7db03668bca1585","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677038721821,"stop":1677038721981,"duration":160}},{"uid":"8f2d8f5896d37deb","reportUrl":"https://nova-wallet.github.io/test-runner/2510//#testresult/8f2d8f5896d37deb","status":"passed","time":{"start":1677024854222,"stop":1677024855487,"duration":1265}},{"uid":"fb08746838237be0","reportUrl":"https://nova-wallet.github.io/test-runner/2509//#testresult/fb08746838237be0","status":"passed","time":{"start":1677009924385,"stop":1677009925403,"duration":1018}},{"uid":"af184803ee9eab2b","reportUrl":"https://nova-wallet.github.io/test-runner/2508//#testresult/af184803ee9eab2b","status":"passed","time":{"start":1676995512797,"stop":1676995513333,"duration":536}},{"uid":"203bdf43324924ad","reportUrl":"https://nova-wallet.github.io/test-runner/2507//#testresult/203bdf43324924ad","status":"passed","time":{"start":1676981211780,"stop":1676981212206,"duration":426}},{"uid":"14b153c06686b6d1","reportUrl":"https://nova-wallet.github.io/test-runner/2506//#testresult/14b153c06686b6d1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676966765556,"stop":1676966766220,"duration":664}},{"uid":"c19527d5a53884ed","reportUrl":"https://nova-wallet.github.io/test-runner/2505//#testresult/c19527d5a53884ed","status":"passed","time":{"start":1676952359768,"stop":1676952360698,"duration":930}},{"uid":"d37c658cb1f751e3","reportUrl":"https://nova-wallet.github.io/test-runner/2504//#testresult/d37c658cb1f751e3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676938557442,"stop":1676938558088,"duration":646}},{"uid":"8c0b326ce9b28836","reportUrl":"https://nova-wallet.github.io/test-runner/2503//#testresult/8c0b326ce9b28836","status":"passed","time":{"start":1676923518863,"stop":1676923519274,"duration":411}},{"uid":"9f1db963705ae709","reportUrl":"https://nova-wallet.github.io/test-runner/2502//#testresult/9f1db963705ae709","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676909142555,"stop":1676909142964,"duration":409}},{"uid":"1c6e51433a66a089","reportUrl":"https://nova-wallet.github.io/test-runner/2501//#testresult/1c6e51433a66a089","status":"passed","time":{"start":1676894819539,"stop":1676894819995,"duration":456}},{"uid":"ccde6913bb759921","reportUrl":"https://nova-wallet.github.io/test-runner/2500//#testresult/ccde6913bb759921","status":"passed","time":{"start":1676880359441,"stop":1676880360606,"duration":1165}},{"uid":"acd57ea36b32548d","reportUrl":"https://nova-wallet.github.io/test-runner/2499//#testresult/acd57ea36b32548d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676877318637,"stop":1676877319201,"duration":564}},{"uid":"ca9ca847084a9e58","reportUrl":"https://nova-wallet.github.io/test-runner/2493//#testresult/ca9ca847084a9e58","status":"passed","time":{"start":1676865923065,"stop":1676865923491,"duration":426}},{"uid":"493b495c39a2340b","reportUrl":"https://nova-wallet.github.io/test-runner/2492//#testresult/493b495c39a2340b","status":"passed","time":{"start":1676852191917,"stop":1676852192532,"duration":615}},{"uid":"6ef2bce7057a08fd","reportUrl":"https://nova-wallet.github.io/test-runner/2491//#testresult/6ef2bce7057a08fd","status":"passed","time":{"start":1676837119321,"stop":1676837120597,"duration":1276}},{"uid":"dba18234435ac18","reportUrl":"https://nova-wallet.github.io/test-runner/2490//#testresult/dba18234435ac18","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676822858145,"stop":1676822858762,"duration":617}},{"uid":"f29fa56a830f4145","reportUrl":"https://nova-wallet.github.io/test-runner/2489//#testresult/f29fa56a830f4145","status":"passed","time":{"start":1676808355122,"stop":1676808355616,"duration":494}},{"uid":"9e7c598bc253944f","reportUrl":"https://nova-wallet.github.io/test-runner/2488//#testresult/9e7c598bc253944f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676793914852,"stop":1676793915479,"duration":627}}]},"tags":[]},"source":"7b18abb050f40a48.json","parameterValues":["{'url': 'wss://rpc.xx.network', 'name': 'XX network'}"]}