{"uid":"abe4a5842ab308d4","name":"test_can_create_connection[Test for Amplitude, url: wss://rpc-amplitude.pendulumchain.tech]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"40dae4de0aa31210b7081501fb1c947c","time":{"start":1694764955140,"stop":1694764955423,"duration":283},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Fri, 15 Sep 2023 08:02:35 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Amplitude', 'url': 'wss://rpc-amplitude.pendulumchain.tech'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Fri, 15 Sep 2023 08:02:35 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Fri, 15 Sep 2023 08:02:35 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Amplitude', 'url': 'wss://rpc-amplitude.pendulumchain.tech'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Fri, 15 Sep 2023 08:02:35 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"63a4d7f9648d97dc","name":"stdout","source":"63a4d7f9648d97dc.txt","type":"text/plain","size":1431}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az168-430"},{"name":"thread","value":"2044-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-amplitude.pendulumchain.tech', 'name': 'Amplitude'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2f83d61e562e9b59","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Fri, 15 Sep 2023 08:02:20 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694764939822,"stop":1694764940035,"duration":213}},{"uid":"50470357cd7db0b5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Fri, 15 Sep 2023 08:02:04 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694764924258,"stop":1694764924597,"duration":339}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":132,"unknown":0,"total":133},"items":[{"uid":"cffc24e80f2771a7","reportUrl":"https://novasamatech.github.io/test-runner/3771//#testresult/cffc24e80f2771a7","status":"passed","time":{"start":1694750531199,"stop":1694750531605,"duration":406}},{"uid":"ba4b8e011791cdb0","reportUrl":"https://novasamatech.github.io/test-runner/3770//#testresult/ba4b8e011791cdb0","status":"passed","time":{"start":1694736158027,"stop":1694736158124,"duration":97}},{"uid":"a9d1a42d55bca8fb","reportUrl":"https://novasamatech.github.io/test-runner/3769//#testresult/a9d1a42d55bca8fb","status":"passed","time":{"start":1694721723581,"stop":1694721723993,"duration":412}},{"uid":"f120fc36b0e1d902","reportUrl":"https://novasamatech.github.io/test-runner/3768//#testresult/f120fc36b0e1d902","status":"passed","time":{"start":1694707319088,"stop":1694707319169,"duration":81}},{"uid":"21d565526aa4a4a8","reportUrl":"https://novasamatech.github.io/test-runner/3767//#testresult/21d565526aa4a4a8","status":"passed","time":{"start":1694692923964,"stop":1694692924184,"duration":220}},{"uid":"e85d40dc9f2fd46e","reportUrl":"https://novasamatech.github.io/test-runner/3766//#testresult/e85d40dc9f2fd46e","status":"passed","time":{"start":1694678508243,"stop":1694678508381,"duration":138}},{"uid":"d7686e136cf12691","reportUrl":"https://novasamatech.github.io/test-runner/3765//#testresult/d7686e136cf12691","status":"passed","time":{"start":1694664105726,"stop":1694664105836,"duration":110}},{"uid":"84b8406bfdad1332","reportUrl":"https://novasamatech.github.io/test-runner/3764//#testresult/84b8406bfdad1332","status":"passed","time":{"start":1694649751711,"stop":1694649751808,"duration":97}},{"uid":"dfe054dacea9f30f","reportUrl":"https://novasamatech.github.io/test-runner/3763//#testresult/dfe054dacea9f30f","status":"passed","time":{"start":1694635310525,"stop":1694635310616,"duration":91}},{"uid":"b0d0365529aff141","reportUrl":"https://novasamatech.github.io/test-runner/3762//#testresult/b0d0365529aff141","status":"passed","time":{"start":1694620928637,"stop":1694620929045,"duration":408}},{"uid":"2572685353d27a09","reportUrl":"https://novasamatech.github.io/test-runner/3761//#testresult/2572685353d27a09","status":"passed","time":{"start":1694606535151,"stop":1694606535363,"duration":212}},{"uid":"195f4f430108a929","reportUrl":"https://novasamatech.github.io/test-runner/3760//#testresult/195f4f430108a929","status":"passed","time":{"start":1694597352146,"stop":1694597352373,"duration":227}},{"uid":"fd3d27be3cc5bde3","reportUrl":"https://novasamatech.github.io/test-runner/3759//#testresult/fd3d27be3cc5bde3","status":"passed","time":{"start":1694592126580,"stop":1694592126925,"duration":345}},{"uid":"5d5c703809060d9c","reportUrl":"https://novasamatech.github.io/test-runner/3758//#testresult/5d5c703809060d9c","status":"passed","time":{"start":1694577720220,"stop":1694577720347,"duration":127}},{"uid":"51296d401237472c","reportUrl":"https://novasamatech.github.io/test-runner/3757//#testresult/51296d401237472c","status":"passed","time":{"start":1694563368546,"stop":1694563368619,"duration":73}},{"uid":"1f1c5f7caf9d5e06","reportUrl":"https://novasamatech.github.io/test-runner/3756//#testresult/1f1c5f7caf9d5e06","status":"passed","time":{"start":1694549037155,"stop":1694549037602,"duration":447}},{"uid":"6ce0256cbc40daab","reportUrl":"https://novasamatech.github.io/test-runner/3755//#testresult/6ce0256cbc40daab","status":"passed","time":{"start":1694534564401,"stop":1694534564647,"duration":246}},{"uid":"2c2b58018536c239","reportUrl":"https://novasamatech.github.io/test-runner/3754//#testresult/2c2b58018536c239","status":"passed","time":{"start":1694520135006,"stop":1694520135093,"duration":87}},{"uid":"2d3a4725b7848267","reportUrl":"https://novasamatech.github.io/test-runner/3753//#testresult/2d3a4725b7848267","status":"passed","time":{"start":1694505716202,"stop":1694505716246,"duration":44}},{"uid":"ad7c9e42d9b161ad","reportUrl":"https://novasamatech.github.io/test-runner/3752//#testresult/ad7c9e42d9b161ad","status":"passed","time":{"start":1694491353795,"stop":1694491354093,"duration":298}}]},"tags":[]},"source":"abe4a5842ab308d4.json","parameterValues":["{'url': 'wss://rpc-amplitude.pendulumchain.tech', 'name': 'Amplitude'}"]}