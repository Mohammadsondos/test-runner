{"uid":"a96f390a0d2a542e","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1682222965424,"stop":1682222965482,"duration":58},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f1afe29b90554deb","name":"stdout","source":"f1afe29b90554deb.txt","type":"text/plain","size":226}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1135-577"},{"name":"thread","value":"1797-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ae906d6f7a8f355c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1682222955121,"stop":1682222955347,"duration":226}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":19,"unknown":0,"total":20},"items":[{"uid":"6dbbb65f3293eda0","reportUrl":"https://nova-wallet.github.io/test-runner/2874//#testresult/6dbbb65f3293eda0","status":"passed","time":{"start":1682209160498,"stop":1682209160549,"duration":51}},{"uid":"fbdd2d4677aa0ebb","reportUrl":"https://nova-wallet.github.io/test-runner/2873//#testresult/fbdd2d4677aa0ebb","status":"passed","time":{"start":1682193886195,"stop":1682193886590,"duration":395}},{"uid":"72c274a03728d54c","reportUrl":"https://nova-wallet.github.io/test-runner/2872//#testresult/72c274a03728d54c","status":"passed","time":{"start":1682179465431,"stop":1682179465747,"duration":316}},{"uid":"6a9ac46da2f12d47","reportUrl":"https://nova-wallet.github.io/test-runner/2871//#testresult/6a9ac46da2f12d47","status":"passed","time":{"start":1682165113500,"stop":1682165113743,"duration":243}},{"uid":"53557c017c22c056","reportUrl":"https://nova-wallet.github.io/test-runner/2870//#testresult/53557c017c22c056","status":"passed","time":{"start":1682150693734,"stop":1682150693970,"duration":236}},{"uid":"e51e674d7824eab7","reportUrl":"https://nova-wallet.github.io/test-runner/2869//#testresult/e51e674d7824eab7","status":"passed","time":{"start":1682136305308,"stop":1682136305546,"duration":238}},{"uid":"50a7e71efb5044e6","reportUrl":"https://nova-wallet.github.io/test-runner/2868//#testresult/50a7e71efb5044e6","status":"passed","time":{"start":1682122417229,"stop":1682122417259,"duration":30}},{"uid":"10a2e4f4b25d7d61","reportUrl":"https://nova-wallet.github.io/test-runner/2867//#testresult/10a2e4f4b25d7d61","status":"passed","time":{"start":1682107467699,"stop":1682107467965,"duration":266}},{"uid":"76cdc85371c14e4d","reportUrl":"https://nova-wallet.github.io/test-runner/2866//#testresult/76cdc85371c14e4d","status":"passed","time":{"start":1682093095651,"stop":1682093095884,"duration":233}},{"uid":"59778be423c2ad39","reportUrl":"https://nova-wallet.github.io/test-runner/2865//#testresult/59778be423c2ad39","status":"passed","time":{"start":1682078742690,"stop":1682078742886,"duration":196}},{"uid":"b4e04f4ade57c0d8","reportUrl":"https://nova-wallet.github.io/test-runner/2864//#testresult/b4e04f4ade57c0d8","status":"passed","time":{"start":1682064277205,"stop":1682064277269,"duration":64}},{"uid":"4ff53ae6213f6447","reportUrl":"https://nova-wallet.github.io/test-runner/2863//#testresult/4ff53ae6213f6447","status":"passed","time":{"start":1682049888582,"stop":1682049888615,"duration":33}},{"uid":"ce3780ae1c716f1f","reportUrl":"https://nova-wallet.github.io/test-runner/2862//#testresult/ce3780ae1c716f1f","status":"passed","time":{"start":1682035977831,"stop":1682035978071,"duration":240}},{"uid":"dca2c3b640addb3d","reportUrl":"https://nova-wallet.github.io/test-runner/2861//#testresult/dca2c3b640addb3d","status":"passed","time":{"start":1682021086764,"stop":1682021086985,"duration":221}},{"uid":"3b3638ed92582cde","reportUrl":"https://nova-wallet.github.io/test-runner/2860//#testresult/3b3638ed92582cde","status":"passed","time":{"start":1682006710314,"stop":1682006710550,"duration":236}},{"uid":"2d82583082c58fb3","reportUrl":"https://nova-wallet.github.io/test-runner/2859//#testresult/2d82583082c58fb3","status":"passed","time":{"start":1681992333886,"stop":1681992333973,"duration":87}},{"uid":"6b532409645e9c0d","reportUrl":"https://nova-wallet.github.io/test-runner/2858//#testresult/6b532409645e9c0d","status":"passed","time":{"start":1681977887739,"stop":1681977887820,"duration":81}},{"uid":"311472a07e96de3e","reportUrl":"https://nova-wallet.github.io/test-runner/2857//#testresult/311472a07e96de3e","status":"passed","time":{"start":1681972266411,"stop":1681972266497,"duration":86}},{"uid":"84f3756ec263fdfc","reportUrl":"https://nova-wallet.github.io/test-runner/2856//#testresult/84f3756ec263fdfc","status":"passed","time":{"start":1681963481787,"stop":1681963482024,"duration":237}}]},"tags":[]},"source":"a96f390a0d2a542e.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}