{"uid":"36b668c316af0035","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1712332870615,"stop":1712332870735,"duration":120},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f8a24efd7b0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f8a24ccace0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f8a24ccb070>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1210-948"},{"name":"thread","value":"2133-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"63c117a9c0cb93c0","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712332865531,"stop":1712332865582,"duration":51}},{"uid":"23443d90093262ba","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0666666666666667}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1712332860147,"stop":1712332860433,"duration":286}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":53,"skipped":0,"passed":1030,"unknown":0,"total":1085},"items":[{"uid":"46e222f0ad661df","reportUrl":"https://novasamatech.github.io/test-runner/5009//#testresult/46e222f0ad661df","status":"passed","time":{"start":1712318467923,"stop":1712318468787,"duration":864}},{"uid":"24cc397cf4fdc9b0","reportUrl":"https://novasamatech.github.io/test-runner/5007//#testresult/24cc397cf4fdc9b0","status":"passed","time":{"start":1712289663255,"stop":1712289663590,"duration":335}},{"uid":"3f05695e65c283a8","reportUrl":"https://novasamatech.github.io/test-runner/5006//#testresult/3f05695e65c283a8","status":"passed","time":{"start":1712275306722,"stop":1712275307084,"duration":362}},{"uid":"fed4d48cb99c33ad","reportUrl":"https://novasamatech.github.io/test-runner/5005//#testresult/fed4d48cb99c33ad","status":"passed","time":{"start":1712260863707,"stop":1712260864415,"duration":708}},{"uid":"bf664745b3c18a77","reportUrl":"https://novasamatech.github.io/test-runner/5004//#testresult/bf664745b3c18a77","status":"passed","time":{"start":1712246458970,"stop":1712246459419,"duration":449}},{"uid":"bf9a8eb30ca6a246","reportUrl":"https://novasamatech.github.io/test-runner/5003//#testresult/bf9a8eb30ca6a246","status":"passed","time":{"start":1712232068559,"stop":1712232069006,"duration":447}},{"uid":"567ec55df68ab301","reportUrl":"https://novasamatech.github.io/test-runner/5002//#testresult/567ec55df68ab301","status":"passed","time":{"start":1712217675706,"stop":1712217676441,"duration":735}},{"uid":"86007e6403dbf0df","reportUrl":"https://novasamatech.github.io/test-runner/5001//#testresult/86007e6403dbf0df","status":"passed","time":{"start":1712203270025,"stop":1712203270755,"duration":730}},{"uid":"e35ecdf67d008874","reportUrl":"https://novasamatech.github.io/test-runner/5000//#testresult/e35ecdf67d008874","status":"passed","time":{"start":1712188906801,"stop":1712188907205,"duration":404}},{"uid":"eff357ebf8c97a85","reportUrl":"https://novasamatech.github.io/test-runner/4999//#testresult/eff357ebf8c97a85","status":"passed","time":{"start":1712174459492,"stop":1712174460241,"duration":749}},{"uid":"f3888c6bea79882d","reportUrl":"https://novasamatech.github.io/test-runner/4998//#testresult/f3888c6bea79882d","status":"passed","time":{"start":1712160072177,"stop":1712160072966,"duration":789}},{"uid":"3b52e7de204cfd14","reportUrl":"https://novasamatech.github.io/test-runner/4997//#testresult/3b52e7de204cfd14","status":"passed","time":{"start":1712145661426,"stop":1712145662334,"duration":908}},{"uid":"defb68e1404bfee3","reportUrl":"https://novasamatech.github.io/test-runner/4996//#testresult/defb68e1404bfee3","status":"passed","time":{"start":1712131273574,"stop":1712131273942,"duration":368}},{"uid":"f2596db88c54ca6c","reportUrl":"https://novasamatech.github.io/test-runner/4995//#testresult/f2596db88c54ca6c","status":"passed","time":{"start":1712116863875,"stop":1712116864568,"duration":693}},{"uid":"2db826f40c737942","reportUrl":"https://novasamatech.github.io/test-runner/4994//#testresult/2db826f40c737942","status":"passed","time":{"start":1712102504645,"stop":1712102504937,"duration":292}},{"uid":"fa897c56b8aa3206","reportUrl":"https://novasamatech.github.io/test-runner/4993//#testresult/fa897c56b8aa3206","status":"passed","time":{"start":1712088062061,"stop":1712088062710,"duration":649}},{"uid":"71e8ce62963f3f0d","reportUrl":"https://novasamatech.github.io/test-runner/4992//#testresult/71e8ce62963f3f0d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712073672870,"stop":1712073673027,"duration":157}},{"uid":"38b317d23d3f4705","reportUrl":"https://novasamatech.github.io/test-runner/4991//#testresult/38b317d23d3f4705","status":"passed","time":{"start":1712059269955,"stop":1712059270426,"duration":471}},{"uid":"2810986f6accd694","reportUrl":"https://novasamatech.github.io/test-runner/4990//#testresult/2810986f6accd694","status":"passed","time":{"start":1712048231339,"stop":1712048232199,"duration":860}},{"uid":"33e3ec3b0f92532","reportUrl":"https://novasamatech.github.io/test-runner/4954//#testresult/33e3ec3b0f92532","status":"passed","time":{"start":1711540872089,"stop":1711540872701,"duration":612}}]},"tags":[]},"source":"36b668c316af0035.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}