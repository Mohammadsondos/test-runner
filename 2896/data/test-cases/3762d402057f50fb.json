{"uid":"3762d402057f50fb","name":"test_can_create_connection[Test for GM, url: wss://intern.gmordie.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"05dfb8111e35c73bd9b89e0d54b4a492","time":{"start":1682525152669,"stop":1682525153294,"duration":625},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'GM', 'url': 'wss://intern.gmordie.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'GM', 'url': 'wss://intern.gmordie.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"455648f834cf41ab","name":"stdout","source":"455648f834cf41ab.txt","type":"text/plain","size":216}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az575-218"},{"name":"thread","value":"1866-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://intern.gmordie.com', 'name': 'GM'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1bfb2cf4c15ff514","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1682525141879,"stop":1682525142532,"duration":653}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":38,"unknown":0,"total":40},"items":[{"uid":"1fd8b73755157ce7","reportUrl":"https://nova-wallet.github.io/test-runner/2895//#testresult/1fd8b73755157ce7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1682510815244,"stop":1682510815643,"duration":399}},{"uid":"ee894aac91fd53a5","reportUrl":"https://nova-wallet.github.io/test-runner/2894//#testresult/ee894aac91fd53a5","status":"passed","time":{"start":1682496354184,"stop":1682496355000,"duration":816}},{"uid":"f68343320ab84bca","reportUrl":"https://nova-wallet.github.io/test-runner/2893//#testresult/f68343320ab84bca","status":"passed","time":{"start":1682481936588,"stop":1682481937440,"duration":852}},{"uid":"8f008662d9e318a2","reportUrl":"https://nova-wallet.github.io/test-runner/2892//#testresult/8f008662d9e318a2","status":"passed","time":{"start":1682468059146,"stop":1682468059798,"duration":652}},{"uid":"f5b3059231a7c4b6","reportUrl":"https://nova-wallet.github.io/test-runner/2891//#testresult/f5b3059231a7c4b6","status":"passed","time":{"start":1682453140216,"stop":1682453141031,"duration":815}},{"uid":"7e8dad9bc50a9996","reportUrl":"https://nova-wallet.github.io/test-runner/2890//#testresult/7e8dad9bc50a9996","status":"passed","time":{"start":1682438723255,"stop":1682438723799,"duration":544}},{"uid":"949914f5dff68310","reportUrl":"https://nova-wallet.github.io/test-runner/2889//#testresult/949914f5dff68310","status":"passed","time":{"start":1682424391895,"stop":1682424392455,"duration":560}},{"uid":"c20ea9765fd897fb","reportUrl":"https://nova-wallet.github.io/test-runner/2888//#testresult/c20ea9765fd897fb","status":"passed","time":{"start":1682409879739,"stop":1682409880235,"duration":496}},{"uid":"5abe36b53883fd59","reportUrl":"https://nova-wallet.github.io/test-runner/2887//#testresult/5abe36b53883fd59","status":"passed","time":{"start":1682395472611,"stop":1682395473115,"duration":504}},{"uid":"621db42d4732c5ef","reportUrl":"https://nova-wallet.github.io/test-runner/2886//#testresult/621db42d4732c5ef","status":"passed","time":{"start":1682381624037,"stop":1682381624585,"duration":548}},{"uid":"88fa91d66364a223","reportUrl":"https://nova-wallet.github.io/test-runner/2885//#testresult/88fa91d66364a223","status":"passed","time":{"start":1682366700008,"stop":1682366700848,"duration":840}},{"uid":"46bc8d48c743e1d0","reportUrl":"https://nova-wallet.github.io/test-runner/2883//#testresult/46bc8d48c743e1d0","status":"passed","time":{"start":1682337965362,"stop":1682337966183,"duration":821}},{"uid":"1b0a765f89d792c1","reportUrl":"https://nova-wallet.github.io/test-runner/2882//#testresult/1b0a765f89d792c1","status":"passed","time":{"start":1682323521084,"stop":1682323521776,"duration":692}},{"uid":"40e260a648888648","reportUrl":"https://nova-wallet.github.io/test-runner/2881//#testresult/40e260a648888648","status":"passed","time":{"start":1682309089083,"stop":1682309089729,"duration":646}},{"uid":"8fb19d504438f6aa","reportUrl":"https://nova-wallet.github.io/test-runner/2880//#testresult/8fb19d504438f6aa","status":"passed","time":{"start":1682295218195,"stop":1682295218844,"duration":649}},{"uid":"c80f845998eab20c","reportUrl":"https://nova-wallet.github.io/test-runner/2879//#testresult/c80f845998eab20c","status":"passed","time":{"start":1682280287088,"stop":1682280287738,"duration":650}},{"uid":"23fb28811d8840f8","reportUrl":"https://nova-wallet.github.io/test-runner/2878//#testresult/23fb28811d8840f8","status":"passed","time":{"start":1682265873857,"stop":1682265874500,"duration":643}},{"uid":"802dc72570b766cf","reportUrl":"https://nova-wallet.github.io/test-runner/2877//#testresult/802dc72570b766cf","status":"passed","time":{"start":1682251754521,"stop":1682251755097,"duration":576}},{"uid":"31be0b4baf7cc524","reportUrl":"https://nova-wallet.github.io/test-runner/2876//#testresult/31be0b4baf7cc524","status":"passed","time":{"start":1682237349124,"stop":1682237349791,"duration":667}},{"uid":"eda0a773e2356b91","reportUrl":"https://nova-wallet.github.io/test-runner/2875//#testresult/eda0a773e2356b91","status":"passed","time":{"start":1682222950048,"stop":1682222950528,"duration":480}}]},"tags":[]},"source":"3762d402057f50fb.json","parameterValues":["{'url': 'wss://intern.gmordie.com', 'name': 'GM'}"]}