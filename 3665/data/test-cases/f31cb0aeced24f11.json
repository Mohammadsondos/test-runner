{"uid":"f31cb0aeced24f11","name":"test_can_create_connection[Test for Jur, url: wss://jur-mainnet-archive-rpc-1.icebergnodes.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"dd04e52265ef77974494aaad2d4c080f","time":{"start":1693238555129,"stop":1693238555438,"duration":309},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 16:02:35 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 16:02:35 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 16:02:35 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 16:02:35 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"17c3fd682b72b51","name":"stdout","source":"17c3fd682b72b51.txt","type":"text/plain","size":1071}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az306-912"},{"name":"thread","value":"2053-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"38b2aaa5b1631ce0","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 16:02:19 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693238539741,"stop":1693238540031,"duration":290}},{"uid":"babff6bd85c73db3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 16:02:04 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693238524263,"stop":1693238524641,"duration":378}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":25,"unknown":0,"total":27},"items":[{"uid":"9b5482880c02795b","reportUrl":"https://novasamatech.github.io/test-runner/3664//#testresult/9b5482880c02795b","status":"passed","time":{"start":1693224138875,"stop":1693224139257,"duration":382}},{"uid":"33777d79d76692eb","reportUrl":"https://novasamatech.github.io/test-runner/3663//#testresult/33777d79d76692eb","status":"passed","time":{"start":1693209735509,"stop":1693209735985,"duration":476}},{"uid":"82c7cfa42af7f8be","reportUrl":"https://novasamatech.github.io/test-runner/3662//#testresult/82c7cfa42af7f8be","status":"passed","time":{"start":1693195312113,"stop":1693195312597,"duration":484}},{"uid":"e0d5d0d14b7d601e","reportUrl":"https://novasamatech.github.io/test-runner/3661//#testresult/e0d5d0d14b7d601e","status":"passed","time":{"start":1693180983484,"stop":1693180984109,"duration":625}},{"uid":"dbf8f1e1fa3d54c8","reportUrl":"https://novasamatech.github.io/test-runner/3660//#testresult/dbf8f1e1fa3d54c8","status":"passed","time":{"start":1693166503765,"stop":1693166504221,"duration":456}},{"uid":"7af152e4a4170f29","reportUrl":"https://novasamatech.github.io/test-runner/3659//#testresult/7af152e4a4170f29","status":"passed","time":{"start":1693152178335,"stop":1693152178981,"duration":646}},{"uid":"fd5f3b448826c5fe","reportUrl":"https://novasamatech.github.io/test-runner/3658//#testresult/fd5f3b448826c5fe","status":"passed","time":{"start":1693137715309,"stop":1693137715803,"duration":494}},{"uid":"a49b474f95dd09da","reportUrl":"https://novasamatech.github.io/test-runner/3657//#testresult/a49b474f95dd09da","status":"passed","time":{"start":1693123322444,"stop":1693123322834,"duration":390}},{"uid":"8793bd1a5598c47d","reportUrl":"https://novasamatech.github.io/test-runner/3656//#testresult/8793bd1a5598c47d","status":"passed","time":{"start":1693108922292,"stop":1693108922885,"duration":593}},{"uid":"eba421ed5c215bff","reportUrl":"https://novasamatech.github.io/test-runner/3655//#testresult/eba421ed5c215bff","status":"passed","time":{"start":1693094593461,"stop":1693094593994,"duration":533}},{"uid":"3bdd66dad95dca99","reportUrl":"https://novasamatech.github.io/test-runner/3654//#testresult/3bdd66dad95dca99","status":"passed","time":{"start":1693080127683,"stop":1693080128167,"duration":484}},{"uid":"79e66884a932596a","reportUrl":"https://novasamatech.github.io/test-runner/3653//#testresult/79e66884a932596a","status":"passed","time":{"start":1693065732690,"stop":1693065733226,"duration":536}},{"uid":"fc4b6ad3900d7876","reportUrl":"https://novasamatech.github.io/test-runner/3652//#testresult/fc4b6ad3900d7876","status":"passed","time":{"start":1693051323843,"stop":1693051324485,"duration":642}},{"uid":"f3342369f2bf31e9","reportUrl":"https://novasamatech.github.io/test-runner/3651//#testresult/f3342369f2bf31e9","status":"passed","time":{"start":1693036913880,"stop":1693036914384,"duration":504}},{"uid":"b5f325e6cc33725","reportUrl":"https://novasamatech.github.io/test-runner/3650//#testresult/b5f325e6cc33725","status":"passed","time":{"start":1693022510794,"stop":1693022511325,"duration":531}},{"uid":"185492fc233a8219","reportUrl":"https://novasamatech.github.io/test-runner/3649//#testresult/185492fc233a8219","status":"passed","time":{"start":1693008166103,"stop":1693008166602,"duration":499}},{"uid":"503aeba0673a0eb8","reportUrl":"https://novasamatech.github.io/test-runner/3648//#testresult/503aeba0673a0eb8","status":"passed","time":{"start":1692993713174,"stop":1692993713565,"duration":391}},{"uid":"210f669c52856e1f","reportUrl":"https://novasamatech.github.io/test-runner/3647//#testresult/210f669c52856e1f","status":"passed","time":{"start":1692979352689,"stop":1692979353031,"duration":342}},{"uid":"2fb010d68734f93","reportUrl":"https://novasamatech.github.io/test-runner/3646//#testresult/2fb010d68734f93","status":"passed","time":{"start":1692964991806,"stop":1692964992448,"duration":642}},{"uid":"a3647f271e5ae657","reportUrl":"https://novasamatech.github.io/test-runner/3645//#testresult/a3647f271e5ae657","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 25 Aug 2023 08:02:39 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1692950559562,"stop":1692950559964,"duration":402}}]},"tags":[]},"source":"f31cb0aeced24f11.json","parameterValues":["{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"]}