{"uid":"5d687aa864ab41cb","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1693238528462,"stop":1693238528874,"duration":412},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 28 Aug 2023 16:02:08 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 28 Aug 2023 16:02:08 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 28 Aug 2023 16:02:08 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 28 Aug 2023 16:02:08 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"652339c47677c773","name":"stdout","source":"652339c47677c773.txt","type":"text/plain","size":825}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az306-912"},{"name":"thread","value":"2044-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4b0a4480d28a7bd9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 28 Aug 2023 16:01:52 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693238512817,"stop":1693238513337,"duration":520}},{"uid":"ee8a8ae93ea8b00","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 28 Aug 2023 16:01:37 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693238497060,"stop":1693238497673,"duration":613}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":26,"unknown":0,"total":27},"items":[{"uid":"94e241268a8278f","reportUrl":"https://novasamatech.github.io/test-runner/3664//#testresult/94e241268a8278f","status":"passed","time":{"start":1693224105638,"stop":1693224106481,"duration":843}},{"uid":"94db3524a7d265af","reportUrl":"https://novasamatech.github.io/test-runner/3663//#testresult/94db3524a7d265af","status":"passed","time":{"start":1693209722250,"stop":1693209722952,"duration":702}},{"uid":"5023683a03702e59","reportUrl":"https://novasamatech.github.io/test-runner/3662//#testresult/5023683a03702e59","status":"passed","time":{"start":1693195294870,"stop":1693195295515,"duration":645}},{"uid":"f315d711672a480b","reportUrl":"https://novasamatech.github.io/test-runner/3661//#testresult/f315d711672a480b","status":"passed","time":{"start":1693180966365,"stop":1693180967172,"duration":807}},{"uid":"98c4356646a12298","reportUrl":"https://novasamatech.github.io/test-runner/3660//#testresult/98c4356646a12298","status":"passed","time":{"start":1693166488958,"stop":1693166489657,"duration":699}},{"uid":"7b5134be8b687346","reportUrl":"https://novasamatech.github.io/test-runner/3659//#testresult/7b5134be8b687346","status":"passed","time":{"start":1693152140120,"stop":1693152140879,"duration":759}},{"uid":"bc5504702fc072fc","reportUrl":"https://novasamatech.github.io/test-runner/3658//#testresult/bc5504702fc072fc","status":"passed","time":{"start":1693137699416,"stop":1693137700175,"duration":759}},{"uid":"105a7d301d52e207","reportUrl":"https://novasamatech.github.io/test-runner/3657//#testresult/105a7d301d52e207","status":"passed","time":{"start":1693123294095,"stop":1693123294875,"duration":780}},{"uid":"a196a5bd30f3505a","reportUrl":"https://novasamatech.github.io/test-runner/3656//#testresult/a196a5bd30f3505a","status":"passed","time":{"start":1693108900970,"stop":1693108901652,"duration":682}},{"uid":"69b2202152811623","reportUrl":"https://novasamatech.github.io/test-runner/3655//#testresult/69b2202152811623","status":"passed","time":{"start":1693094560800,"stop":1693094561653,"duration":853}},{"uid":"abe4c16781e2ed0c","reportUrl":"https://novasamatech.github.io/test-runner/3654//#testresult/abe4c16781e2ed0c","status":"passed","time":{"start":1693080105138,"stop":1693080105804,"duration":666}},{"uid":"3c9d40232bea0bbf","reportUrl":"https://novasamatech.github.io/test-runner/3653//#testresult/3c9d40232bea0bbf","status":"passed","time":{"start":1693065711283,"stop":1693065712144,"duration":861}},{"uid":"ee40947f7693da2f","reportUrl":"https://novasamatech.github.io/test-runner/3652//#testresult/ee40947f7693da2f","status":"passed","time":{"start":1693051312333,"stop":1693051313166,"duration":833}},{"uid":"7f7ad4c40b70b26d","reportUrl":"https://novasamatech.github.io/test-runner/3651//#testresult/7f7ad4c40b70b26d","status":"passed","time":{"start":1693036896311,"stop":1693036897263,"duration":952}},{"uid":"66100abce57a55fc","reportUrl":"https://novasamatech.github.io/test-runner/3650//#testresult/66100abce57a55fc","status":"passed","time":{"start":1693022493988,"stop":1693022494837,"duration":849}},{"uid":"3b0e9f7b6a064236","reportUrl":"https://novasamatech.github.io/test-runner/3649//#testresult/3b0e9f7b6a064236","status":"passed","time":{"start":1693008151332,"stop":1693008152263,"duration":931}},{"uid":"bf566d8ebbf3e005","reportUrl":"https://novasamatech.github.io/test-runner/3648//#testresult/bf566d8ebbf3e005","status":"passed","time":{"start":1692993693976,"stop":1692993694681,"duration":705}},{"uid":"6bfd1e17226672be","reportUrl":"https://novasamatech.github.io/test-runner/3647//#testresult/6bfd1e17226672be","status":"passed","time":{"start":1692979310141,"stop":1692979310749,"duration":608}},{"uid":"5922a10e73cb42e","reportUrl":"https://novasamatech.github.io/test-runner/3646//#testresult/5922a10e73cb42e","status":"passed","time":{"start":1692964943315,"stop":1692964944166,"duration":851}},{"uid":"f5535bd2d50331c","reportUrl":"https://novasamatech.github.io/test-runner/3645//#testresult/f5535bd2d50331c","status":"passed","time":{"start":1692950501759,"stop":1692950502679,"duration":920}}]},"tags":[]},"source":"5d687aa864ab41cb.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}