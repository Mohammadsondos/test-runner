{"uid":"888caeaf52f90ad2","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1697731344711,"stop":1697731345090,"duration":379},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 19 Oct 2023 16:02:25 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 19 Oct 2023 16:02:25 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 19 Oct 2023 16:02:25 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 19 Oct 2023 16:02:25 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"da0a570fbffb2cb5","name":"stdout","source":"da0a570fbffb2cb5.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az339-504"},{"name":"thread","value":"2069-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ad0a05983f2d4326","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 19 Oct 2023 16:02:09 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1697731329198,"stop":1697731329562,"duration":364}},{"uid":"a3332055c7e44e19","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 19 Oct 2023 16:01:54 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1697731313733,"stop":1697731314100,"duration":367}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":332,"unknown":0,"total":339},"items":[{"uid":"8b9afef1fa21d7c4","reportUrl":"https://novasamatech.github.io/test-runner/3978//#testresult/8b9afef1fa21d7c4","status":"passed","time":{"start":1697716938618,"stop":1697716939135,"duration":517}},{"uid":"89fa85e8b184e4ff","reportUrl":"https://novasamatech.github.io/test-runner/3977//#testresult/89fa85e8b184e4ff","status":"passed","time":{"start":1697702501367,"stop":1697702501683,"duration":316}},{"uid":"76ccb5f977c2a7e2","reportUrl":"https://novasamatech.github.io/test-runner/3976//#testresult/76ccb5f977c2a7e2","status":"passed","time":{"start":1697688130598,"stop":1697688131208,"duration":610}},{"uid":"143a8ef25d63f88","reportUrl":"https://novasamatech.github.io/test-runner/3975//#testresult/143a8ef25d63f88","status":"passed","time":{"start":1697673734151,"stop":1697673734656,"duration":505}},{"uid":"b2555daaa65378be","reportUrl":"https://novasamatech.github.io/test-runner/3974//#testresult/b2555daaa65378be","status":"passed","time":{"start":1697659320792,"stop":1697659321191,"duration":399}},{"uid":"c8288c3e5c5edde1","reportUrl":"https://novasamatech.github.io/test-runner/3973//#testresult/c8288c3e5c5edde1","status":"passed","time":{"start":1697644901570,"stop":1697644901878,"duration":308}},{"uid":"7dbec95be125b3da","reportUrl":"https://novasamatech.github.io/test-runner/3972//#testresult/7dbec95be125b3da","status":"passed","time":{"start":1697630525303,"stop":1697630525922,"duration":619}},{"uid":"3b5ece2010838385","reportUrl":"https://novasamatech.github.io/test-runner/3971//#testresult/3b5ece2010838385","status":"passed","time":{"start":1697616099712,"stop":1697616100181,"duration":469}},{"uid":"8cfb6a24c700e1be","reportUrl":"https://novasamatech.github.io/test-runner/3970//#testresult/8cfb6a24c700e1be","status":"passed","time":{"start":1697601703237,"stop":1697601703685,"duration":448}},{"uid":"c2df15c42ac6089b","reportUrl":"https://novasamatech.github.io/test-runner/3969//#testresult/c2df15c42ac6089b","status":"passed","time":{"start":1697587358353,"stop":1697587358971,"duration":618}},{"uid":"813483710ed7bccd","reportUrl":"https://novasamatech.github.io/test-runner/3968//#testresult/813483710ed7bccd","status":"passed","time":{"start":1697572895713,"stop":1697572896080,"duration":367}},{"uid":"3104a913d02cb1ef","reportUrl":"https://novasamatech.github.io/test-runner/3967//#testresult/3104a913d02cb1ef","status":"passed","time":{"start":1697558502669,"stop":1697558502999,"duration":330}},{"uid":"d3decbee6e48838a","reportUrl":"https://novasamatech.github.io/test-runner/3966//#testresult/d3decbee6e48838a","status":"passed","time":{"start":1697544109407,"stop":1697544109878,"duration":471}},{"uid":"eeb3674a906a1c15","reportUrl":"https://novasamatech.github.io/test-runner/3965//#testresult/eeb3674a906a1c15","status":"passed","time":{"start":1697529700983,"stop":1697529701487,"duration":504}},{"uid":"ff823f5442a5a015","reportUrl":"https://novasamatech.github.io/test-runner/3964//#testresult/ff823f5442a5a015","status":"passed","time":{"start":1697515294064,"stop":1697515294402,"duration":338}},{"uid":"c383cd550471b5b","reportUrl":"https://novasamatech.github.io/test-runner/3963//#testresult/c383cd550471b5b","status":"passed","time":{"start":1697500945267,"stop":1697500945841,"duration":574}},{"uid":"bbdfc4e844500487","reportUrl":"https://novasamatech.github.io/test-runner/3962//#testresult/bbdfc4e844500487","status":"passed","time":{"start":1697486503904,"stop":1697486504260,"duration":356}},{"uid":"ac1ae8a4388671a0","reportUrl":"https://novasamatech.github.io/test-runner/3961//#testresult/ac1ae8a4388671a0","status":"passed","time":{"start":1697472123315,"stop":1697472123825,"duration":510}},{"uid":"fefef235bf216124","reportUrl":"https://novasamatech.github.io/test-runner/3960//#testresult/fefef235bf216124","status":"passed","time":{"start":1697457726423,"stop":1697457726911,"duration":488}},{"uid":"372fd8913cc5cdf1","reportUrl":"https://novasamatech.github.io/test-runner/3959//#testresult/372fd8913cc5cdf1","status":"passed","time":{"start":1697443311052,"stop":1697443311537,"duration":485}}]},"tags":[]},"source":"888caeaf52f90ad2.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}