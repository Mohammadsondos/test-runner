{"uid":"465238fb2c7a600e","name":"test_can_create_connection[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"8ec7ec545885fce8c03b681769fe812f","time":{"start":1682582724472,"stop":1682582724629,"duration":157},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","statusTrace":"data = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f151920a110>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n                            raise SubstrateRequestException(message['error'])\n    \n                        # If result handler is set, pass result through and loop until handler return value is set\n                        if callable(result_handler):\n    \n                            # Set subscription ID and only listen to messages containing this ID\n                            subscription_id = message['result']\n                            self.debug_message(f\"Websocket subscription [{subscription_id}] created\")\n    \n                        else:\n                            json_body = message\n    \n                # Process subscription updates\n                for message in self.__rpc_message_queue:\n                    # Check if message is meant for this subscription\n                    if 'params' in message and message['params']['subscription'] == subscription_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        self.debug_message(f\"Websocket result [{subscription_id} #{update_nr}]: {message}\")\n    \n                        # Call result_handler with message for processing\n                        callback_result = result_handler(message, update_nr, subscription_id)\n                        if callback_result is not None:\n                            json_body = callback_result\n    \n                        update_nr += 1\n    \n        else:\n    \n            if result_handler:\n                raise ConfigurationError(\"Result handlers only available for websockets (ws://) connections\")\n    \n            response = self.session.request(\"POST\", self.url, data=json.dumps(payload), headers=self.default_headers)\n    \n            if response.status_code != 200:\n                raise SubstrateRequestException(\n                    \"RPC request failed with HTTP status code {}\".format(response.status_code))\n    \n            json_body = response.json()\n    \n            # Check if response has error\n            if 'error' in json_body:\n>               raise SubstrateRequestException(json_body['error'])\nE               substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:787: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","statusTrace":"data = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f151920a110>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n                            raise SubstrateRequestException(message['error'])\n    \n                        # If result handler is set, pass result through and loop until handler return value is set\n                        if callable(result_handler):\n    \n                            # Set subscription ID and only listen to messages containing this ID\n                            subscription_id = message['result']\n                            self.debug_message(f\"Websocket subscription [{subscription_id}] created\")\n    \n                        else:\n                            json_body = message\n    \n                # Process subscription updates\n                for message in self.__rpc_message_queue:\n                    # Check if message is meant for this subscription\n                    if 'params' in message and message['params']['subscription'] == subscription_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        self.debug_message(f\"Websocket result [{subscription_id} #{update_nr}]: {message}\")\n    \n                        # Call result_handler with message for processing\n                        callback_result = result_handler(message, update_nr, subscription_id)\n                        if callback_result is not None:\n                            json_body = callback_result\n    \n                        update_nr += 1\n    \n        else:\n    \n            if result_handler:\n                raise ConfigurationError(\"Result handlers only available for websockets (ws://) connections\")\n    \n            response = self.session.request(\"POST\", self.url, data=json.dumps(payload), headers=self.default_headers)\n    \n            if response.status_code != 200:\n                raise SubstrateRequestException(\n                    \"RPC request failed with HTTP status code {}\".format(response.status_code))\n    \n            json_body = response.json()\n    \n            # Check if response has error\n            if 'error' in json_body:\n>               raise SubstrateRequestException(json_body['error'])\nE               substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:787: SubstrateRequestException","steps":[],"attachments":[{"uid":"3da5dd3e98597e4c","name":"stdout","source":"3da5dd3e98597e4c.txt","type":"text/plain","size":254}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az402-490"},{"name":"thread","value":"1884-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cae1c72fa952c2a7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682582714107,"stop":1682582714292,"duration":185}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":0,"unknown":0,"total":11},"items":[{"uid":"f02918629801f470","reportUrl":"https://nova-wallet.github.io/test-runner/2899//#testresult/f02918629801f470","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682568309918,"stop":1682568310012,"duration":94}},{"uid":"ad4cab132fc62802","reportUrl":"https://nova-wallet.github.io/test-runner/2898//#testresult/ad4cab132fc62802","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682554461658,"stop":1682554461913,"duration":255}},{"uid":"b21cebe6bebf76d8","reportUrl":"https://nova-wallet.github.io/test-runner/2897//#testresult/b21cebe6bebf76d8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682539509971,"stop":1682539510208,"duration":237}},{"uid":"6a8477a41b36159e","reportUrl":"https://nova-wallet.github.io/test-runner/2896//#testresult/6a8477a41b36159e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682525130393,"stop":1682525130721,"duration":328}},{"uid":"51dc2a22bd51e482","reportUrl":"https://nova-wallet.github.io/test-runner/2895//#testresult/51dc2a22bd51e482","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682510852907,"stop":1682510853035,"duration":128}},{"uid":"e1de98ed40a58dcf","reportUrl":"https://nova-wallet.github.io/test-runner/2894//#testresult/e1de98ed40a58dcf","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682496339033,"stop":1682496339366,"duration":333}},{"uid":"6fa4d7270096afa1","reportUrl":"https://nova-wallet.github.io/test-runner/2893//#testresult/6fa4d7270096afa1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682481921247,"stop":1682481921557,"duration":310}},{"uid":"4dbb46aa5b21f7db","reportUrl":"https://nova-wallet.github.io/test-runner/2892//#testresult/4dbb46aa5b21f7db","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682468059854,"stop":1682468060137,"duration":283}},{"uid":"c675093039b7a768","reportUrl":"https://nova-wallet.github.io/test-runner/2891//#testresult/c675093039b7a768","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682453124830,"stop":1682453125143,"duration":313}},{"uid":"804e8ad682aee923","reportUrl":"https://nova-wallet.github.io/test-runner/2890//#testresult/804e8ad682aee923","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'method not found'}","time":{"start":1682438704723,"stop":1682438704813,"duration":90}}]},"tags":[]},"source":"465238fb2c7a600e.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}