{"uid":"fcead8c168f9d687","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1698264162217,"stop":1698264162250,"duration":33},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 25 Oct 2023 20:02:42 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 25 Oct 2023 20:02:42 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 25 Oct 2023 20:02:42 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 25 Oct 2023 20:02:42 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"8f30d2526aa2cba4","name":"stdout","source":"8f30d2526aa2cba4.txt","type":"text/plain","size":1098}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az573-950"},{"name":"thread","value":"2256-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ab03352f78fc2091","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 25 Oct 2023 20:02:27 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698264147065,"stop":1698264147107,"duration":42}},{"uid":"9deb4267bb74d4c3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 25 Oct 2023 20:02:11 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698264131921,"stop":1698264131959,"duration":38}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":366,"unknown":0,"total":377},"items":[{"uid":"37bbe9150dcda7b7","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/37bbe9150dcda7b7","status":"passed","time":{"start":1698249765292,"stop":1698249765333,"duration":41}},{"uid":"10c8105353ecdc70","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/10c8105353ecdc70","status":"passed","time":{"start":1698235335548,"stop":1698235335578,"duration":30}},{"uid":"386c0bb805f08512","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/386c0bb805f08512","status":"passed","time":{"start":1698221367548,"stop":1698221367866,"duration":318}},{"uid":"49df325507aaa6c1","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/49df325507aaa6c1","status":"passed","time":{"start":1698206503539,"stop":1698206503599,"duration":60}},{"uid":"5944700888ddad7a","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/5944700888ddad7a","status":"passed","time":{"start":1698192152659,"stop":1698192152949,"duration":290}},{"uid":"58511e0cbaf61a69","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/58511e0cbaf61a69","status":"passed","time":{"start":1698177745258,"stop":1698177745491,"duration":233}},{"uid":"a1f9140174434dc3","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/a1f9140174434dc3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 24 Oct 2023 16:02:54 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698163374430,"stop":1698163374462,"duration":32}},{"uid":"40ec925cfefeb058","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/40ec925cfefeb058","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 24 Oct 2023 12:03:02 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698148982233,"stop":1698148982256,"duration":23}},{"uid":"9f56daa816ea6808","reportUrl":"https://novasamatech.github.io/test-runner/4007//#testresult/9f56daa816ea6808","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 24 Oct 2023 04:02:48 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698120168863,"stop":1698120168907,"duration":44}},{"uid":"536bd91d7f7b5e8f","reportUrl":"https://novasamatech.github.io/test-runner/4008//#testresult/536bd91d7f7b5e8f","status":"passed","time":{"start":1698134521074,"stop":1698134521114,"duration":40}},{"uid":"ab140c61dafe67d7","reportUrl":"https://novasamatech.github.io/test-runner/4006//#testresult/ab140c61dafe67d7","status":"passed","time":{"start":1698105790528,"stop":1698105790837,"duration":309}},{"uid":"fbebbd9183273ba4","reportUrl":"https://novasamatech.github.io/test-runner/4005//#testresult/fbebbd9183273ba4","status":"passed","time":{"start":1698091339488,"stop":1698091339709,"duration":221}},{"uid":"b54b5ca525f51030","reportUrl":"https://novasamatech.github.io/test-runner/4004//#testresult/b54b5ca525f51030","status":"passed","time":{"start":1698076945820,"stop":1698076945852,"duration":32}},{"uid":"d98544a4b97c86c5","reportUrl":"https://novasamatech.github.io/test-runner/4003//#testresult/d98544a4b97c86c5","status":"passed","time":{"start":1698062504230,"stop":1698062504274,"duration":44}},{"uid":"3ae4b040baf4cf4d","reportUrl":"https://novasamatech.github.io/test-runner/4002//#testresult/3ae4b040baf4cf4d","status":"passed","time":{"start":1698048106037,"stop":1698048106122,"duration":85}},{"uid":"2de94d8cbc038165","reportUrl":"https://novasamatech.github.io/test-runner/4001//#testresult/2de94d8cbc038165","status":"passed","time":{"start":1698033707783,"stop":1698033708009,"duration":226}},{"uid":"2e4d1f752e5c453f","reportUrl":"https://novasamatech.github.io/test-runner/4000//#testresult/2e4d1f752e5c453f","status":"passed","time":{"start":1698019335884,"stop":1698019335943,"duration":59}},{"uid":"e58b3eaacd1ec4e4","reportUrl":"https://novasamatech.github.io/test-runner/3999//#testresult/e58b3eaacd1ec4e4","status":"passed","time":{"start":1698004898059,"stop":1698004898266,"duration":207}},{"uid":"c8b3325292901a45","reportUrl":"https://novasamatech.github.io/test-runner/3998//#testresult/c8b3325292901a45","status":"passed","time":{"start":1697990526417,"stop":1697990526630,"duration":213}},{"uid":"f5e87aef09c52174","reportUrl":"https://novasamatech.github.io/test-runner/3997//#testresult/f5e87aef09c52174","status":"passed","time":{"start":1697976099989,"stop":1697976100227,"duration":238}}]},"tags":[]},"source":"fcead8c168f9d687.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}