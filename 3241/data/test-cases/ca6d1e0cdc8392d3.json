{"uid":"ca6d1e0cdc8392d3","name":"test_can_create_connection[Test for Frequency, url: wss://0.rpc.frequency.xyz]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"19c26034bddffc5dd1f8d98e703505a3","time":{"start":1687248295187,"stop":1687248295401,"duration":214},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 20 Jun 2023 08:04:54 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Frequency', 'url': 'wss://0.rpc.frequency.xyz'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 20 Jun 2023 08:04:54 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 20 Jun 2023 08:04:54 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Frequency', 'url': 'wss://0.rpc.frequency.xyz'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 20 Jun 2023 08:04:54 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"2e45fa27d3d9a1ff","name":"stdout","source":"2e45fa27d3d9a1ff.txt","type":"text/plain","size":816}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az257-415"},{"name":"thread","value":"1911-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://0.rpc.frequency.xyz', 'name': 'Frequency'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3a5fff0820a457fe","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 20 Jun 2023 08:04:39 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1687248279858,"stop":1687248280079,"duration":221}},{"uid":"f214a16d2855593","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 20 Jun 2023 08:04:24 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1687248264442,"stop":1687248264695,"duration":253}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":214,"unknown":0,"total":220},"items":[{"uid":"1ec94ccc4cf4826f","reportUrl":"https://novasamatech.github.io/test-runner/3240//#testresult/1ec94ccc4cf4826f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 20 Jun 2023 04:04:46 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1687233886885,"stop":1687233886961,"duration":76}},{"uid":"adb0e1609804cdd6","reportUrl":"https://novasamatech.github.io/test-runner/3239//#testresult/adb0e1609804cdd6","status":"passed","time":{"start":1687219963946,"stop":1687219964297,"duration":351}},{"uid":"b8f2133d3c9db4ce","reportUrl":"https://novasamatech.github.io/test-runner/3238//#testresult/b8f2133d3c9db4ce","status":"passed","time":{"start":1687205044058,"stop":1687205044160,"duration":102}},{"uid":"ef66d95b65bdb336","reportUrl":"https://novasamatech.github.io/test-runner/3237//#testresult/ef66d95b65bdb336","status":"passed","time":{"start":1687190657122,"stop":1687190657303,"duration":181}},{"uid":"59cbedd3d9709362","reportUrl":"https://novasamatech.github.io/test-runner/3236//#testresult/59cbedd3d9709362","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 19 Jun 2023 12:05:44 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1687176343953,"stop":1687176344089,"duration":136}},{"uid":"efdd7d9ba36f4d66","reportUrl":"https://novasamatech.github.io/test-runner/3235//#testresult/efdd7d9ba36f4d66","status":"passed","time":{"start":1687161867968,"stop":1687161868233,"duration":265}},{"uid":"49a2937e74b586b4","reportUrl":"https://novasamatech.github.io/test-runner/3234//#testresult/49a2937e74b586b4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 19 Jun 2023 04:04:41 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1687147482398,"stop":1687147482455,"duration":57}},{"uid":"2a581debc8f3a1ba","reportUrl":"https://novasamatech.github.io/test-runner/3233//#testresult/2a581debc8f3a1ba","status":"passed","time":{"start":1687133679008,"stop":1687133679294,"duration":286}},{"uid":"4e06f98427f70d08","reportUrl":"https://novasamatech.github.io/test-runner/3232//#testresult/4e06f98427f70d08","status":"passed","time":{"start":1687118636704,"stop":1687118636858,"duration":154}},{"uid":"7370044574a0b7a8","reportUrl":"https://novasamatech.github.io/test-runner/3231//#testresult/7370044574a0b7a8","status":"passed","time":{"start":1687104250807,"stop":1687104250916,"duration":109}},{"uid":"4b7059eb29bb623f","reportUrl":"https://novasamatech.github.io/test-runner/3230//#testresult/4b7059eb29bb623f","status":"passed","time":{"start":1687089875422,"stop":1687089875673,"duration":251}},{"uid":"fae02415eac47b1c","reportUrl":"https://novasamatech.github.io/test-runner/3229//#testresult/fae02415eac47b1c","status":"passed","time":{"start":1687075439934,"stop":1687075440196,"duration":262}},{"uid":"b024625234db75d6","reportUrl":"https://novasamatech.github.io/test-runner/3228//#testresult/b024625234db75d6","status":"passed","time":{"start":1687061052673,"stop":1687061052980,"duration":307}},{"uid":"9cfbcede9e094f11","reportUrl":"https://novasamatech.github.io/test-runner/3227//#testresult/9cfbcede9e094f11","status":"passed","time":{"start":1687047353097,"stop":1687047353204,"duration":107}},{"uid":"de046275cf57c24b","reportUrl":"https://novasamatech.github.io/test-runner/3226//#testresult/de046275cf57c24b","status":"passed","time":{"start":1687032251676,"stop":1687032251872,"duration":196}},{"uid":"a942029bfff16ddf","reportUrl":"https://novasamatech.github.io/test-runner/3225//#testresult/a942029bfff16ddf","status":"passed","time":{"start":1687017880501,"stop":1687017880799,"duration":298}},{"uid":"3bf47c80629a5bf3","reportUrl":"https://novasamatech.github.io/test-runner/3224//#testresult/3bf47c80629a5bf3","status":"passed","time":{"start":1687003475707,"stop":1687003475855,"duration":148}},{"uid":"3c31029d2f61a3df","reportUrl":"https://novasamatech.github.io/test-runner/3223//#testresult/3c31029d2f61a3df","status":"passed","time":{"start":1686989083835,"stop":1686989084034,"duration":199}},{"uid":"f3475cdb9c888311","reportUrl":"https://novasamatech.github.io/test-runner/3222//#testresult/f3475cdb9c888311","status":"passed","time":{"start":1686974653197,"stop":1686974653548,"duration":351}},{"uid":"62446b260f19c7a2","reportUrl":"https://novasamatech.github.io/test-runner/3221//#testresult/62446b260f19c7a2","status":"passed","time":{"start":1686960816984,"stop":1686960817405,"duration":421}}]},"tags":[]},"source":"ca6d1e0cdc8392d3.json","parameterValues":["{'url': 'wss://0.rpc.frequency.xyz', 'name': 'Frequency'}"]}