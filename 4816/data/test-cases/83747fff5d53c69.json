{"uid":"83747fff5d53c69","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1709568072000,"stop":1709568072192,"duration":192},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fc140179240>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fc13afb27a0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fc13afb2b00>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1200-26"},{"name":"thread","value":"2084-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"42930b3f48a395e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709568066727,"stop":1709568066964,"duration":237}},{"uid":"ca965dbea3611345","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709568061252,"stop":1709568061593,"duration":341}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":15,"skipped":0,"passed":911,"unknown":0,"total":927},"items":[{"uid":"ff85d502d50ca1b7","reportUrl":"https://novasamatech.github.io/test-runner/4815//#testresult/ff85d502d50ca1b7","status":"passed","time":{"start":1709553978424,"stop":1709553979216,"duration":792}},{"uid":"fd89bbd93ee962f5","reportUrl":"https://novasamatech.github.io/test-runner/4814//#testresult/fd89bbd93ee962f5","status":"passed","time":{"start":1709539719892,"stop":1709539720640,"duration":748}},{"uid":"d5e24fd39e78b384","reportUrl":"https://novasamatech.github.io/test-runner/4813//#testresult/d5e24fd39e78b384","status":"passed","time":{"start":1709525139882,"stop":1709525140410,"duration":528}},{"uid":"ea898c01ae4e2441","reportUrl":"https://novasamatech.github.io/test-runner/4812//#testresult/ea898c01ae4e2441","status":"passed","time":{"start":1709510510898,"stop":1709510511481,"duration":583}},{"uid":"188a041702a7c93c","reportUrl":"https://novasamatech.github.io/test-runner/4811//#testresult/188a041702a7c93c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709496068038,"stop":1709496068405,"duration":367}},{"uid":"1b01c9f88770ca31","reportUrl":"https://novasamatech.github.io/test-runner/4810//#testresult/1b01c9f88770ca31","status":"passed","time":{"start":1709481659536,"stop":1709481659928,"duration":392}},{"uid":"cebac5bd7a9a9b15","reportUrl":"https://novasamatech.github.io/test-runner/4809//#testresult/cebac5bd7a9a9b15","status":"passed","time":{"start":1709467261350,"stop":1709467262139,"duration":789}},{"uid":"3385e1ad16f788f9","reportUrl":"https://novasamatech.github.io/test-runner/4808//#testresult/3385e1ad16f788f9","status":"passed","time":{"start":1709452855127,"stop":1709452855443,"duration":316}},{"uid":"d16d72247dfdd71e","reportUrl":"https://novasamatech.github.io/test-runner/4807//#testresult/d16d72247dfdd71e","status":"passed","time":{"start":1709438467381,"stop":1709438468123,"duration":742}},{"uid":"bac77a2097e588f6","reportUrl":"https://novasamatech.github.io/test-runner/4806//#testresult/bac77a2097e588f6","status":"passed","time":{"start":1709424105604,"stop":1709424105844,"duration":240}},{"uid":"9f92ad4ff070fb61","reportUrl":"https://novasamatech.github.io/test-runner/4805//#testresult/9f92ad4ff070fb61","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709409668670,"stop":1709409668972,"duration":302}},{"uid":"dfa64b9ea8680997","reportUrl":"https://novasamatech.github.io/test-runner/4804//#testresult/dfa64b9ea8680997","status":"passed","time":{"start":1709395273025,"stop":1709395273173,"duration":148}},{"uid":"205a50c2de202797","reportUrl":"https://novasamatech.github.io/test-runner/4803//#testresult/205a50c2de202797","status":"passed","time":{"start":1709380868249,"stop":1709380868543,"duration":294}},{"uid":"84744367bedf2cc2","reportUrl":"https://novasamatech.github.io/test-runner/4802//#testresult/84744367bedf2cc2","status":"passed","time":{"start":1709366467076,"stop":1709366467530,"duration":454}},{"uid":"5251ec465c12e7cd","reportUrl":"https://novasamatech.github.io/test-runner/4801//#testresult/5251ec465c12e7cd","status":"passed","time":{"start":1709352069402,"stop":1709352069888,"duration":486}},{"uid":"7ace7e8011074582","reportUrl":"https://novasamatech.github.io/test-runner/4800//#testresult/7ace7e8011074582","status":"passed","time":{"start":1709337707173,"stop":1709337708089,"duration":916}},{"uid":"53684283ef56b1db","reportUrl":"https://novasamatech.github.io/test-runner/4799//#testresult/53684283ef56b1db","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709323275394,"stop":1709323275449,"duration":55}},{"uid":"25c805864079a4ec","reportUrl":"https://novasamatech.github.io/test-runner/4798//#testresult/25c805864079a4ec","status":"passed","time":{"start":1709308863897,"stop":1709308864282,"duration":385}},{"uid":"61e74beb53aa9095","reportUrl":"https://novasamatech.github.io/test-runner/4796//#testresult/61e74beb53aa9095","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709289990869,"stop":1709289991054,"duration":185}},{"uid":"20e04f61e1bdce45","reportUrl":"https://novasamatech.github.io/test-runner/4789//#testresult/20e04f61e1bdce45","status":"passed","time":{"start":1709193660836,"stop":1709193661256,"duration":420}}]},"tags":[]},"source":"83747fff5d53c69.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}