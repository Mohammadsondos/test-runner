{"uid":"56da74adc2beb041","name":"test_can_create_connection[Test for Picasso, url: wss://picasso-rpc.composable.finance]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a99dc3895865408a2004c053a1261232","time":{"start":1675282469199,"stop":1675282469212,"duration":13},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fb8bbcdea10>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'picasso-rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Picasso', 'url': 'wss://picasso-rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fb8bbcdea10>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fb8bbcdea10>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'picasso-rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Picasso', 'url': 'wss://picasso-rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fb8bbcdea10>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"71126b9299d1e759","name":"stdout","source":"71126b9299d1e759.txt","type":"text/plain","size":248}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az581-488"},{"name":"thread","value":"1784-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://picasso-rpc.composable.finance', 'name': 'Picasso'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"baf98917ed137970","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675282458776,"stop":1675282459050,"duration":274}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":585,"unknown":0,"total":640},"items":[{"uid":"de69f415efd2f33f","reportUrl":"https://nova-wallet.github.io/test-runner/2381//#testresult/de69f415efd2f33f","status":"passed","time":{"start":1675254458802,"stop":1675254459322,"duration":520}},{"uid":"4aa98f4de8a88d4a","reportUrl":"https://nova-wallet.github.io/test-runner/2380//#testresult/4aa98f4de8a88d4a","status":"passed","time":{"start":1675239441087,"stop":1675239441730,"duration":643}},{"uid":"df8d1c96475a6963","reportUrl":"https://nova-wallet.github.io/test-runner/2379//#testresult/df8d1c96475a6963","status":"passed","time":{"start":1675225000229,"stop":1675225001013,"duration":784}},{"uid":"8a9a87cf0fd60fb0","reportUrl":"https://nova-wallet.github.io/test-runner/2377//#testresult/8a9a87cf0fd60fb0","status":"passed","time":{"start":1675196065163,"stop":1675196066026,"duration":863}},{"uid":"fcfdfc90b741f23e","reportUrl":"https://nova-wallet.github.io/test-runner/2376//#testresult/fcfdfc90b741f23e","status":"passed","time":{"start":1675181931756,"stop":1675181932386,"duration":630}},{"uid":"4dde20dc977bc5b6","reportUrl":"https://nova-wallet.github.io/test-runner/2375//#testresult/4dde20dc977bc5b6","status":"passed","time":{"start":1675167953256,"stop":1675167953807,"duration":551}},{"uid":"b6d72b9d355b92b6","reportUrl":"https://nova-wallet.github.io/test-runner/2373//#testresult/b6d72b9d355b92b6","status":"passed","time":{"start":1675138576788,"stop":1675138577410,"duration":622}},{"uid":"a0177d1cad06dced","reportUrl":"https://nova-wallet.github.io/test-runner/2372//#testresult/a0177d1cad06dced","status":"passed","time":{"start":1675127422929,"stop":1675127423550,"duration":621}},{"uid":"2eb3a880e3c3e306","reportUrl":"https://nova-wallet.github.io/test-runner/2371//#testresult/2eb3a880e3c3e306","status":"passed","time":{"start":1675109652921,"stop":1675109653341,"duration":420}},{"uid":"fc799a34d6bf7018","reportUrl":"https://nova-wallet.github.io/test-runner/2370//#testresult/fc799a34d6bf7018","status":"passed","time":{"start":1675095505008,"stop":1675095505548,"duration":540}},{"uid":"5ff46f7852392922","reportUrl":"https://nova-wallet.github.io/test-runner/2369//#testresult/5ff46f7852392922","status":"passed","time":{"start":1675081616938,"stop":1675081617562,"duration":624}},{"uid":"575d9b3d7e6b4de1","reportUrl":"https://nova-wallet.github.io/test-runner/2368//#testresult/575d9b3d7e6b4de1","status":"passed","time":{"start":1675066679777,"stop":1675066680620,"duration":843}},{"uid":"220d3418ad43e883","reportUrl":"https://nova-wallet.github.io/test-runner/2367//#testresult/220d3418ad43e883","status":"passed","time":{"start":1675052163624,"stop":1675052163977,"duration":353}},{"uid":"d82830ecfb933ee3","reportUrl":"https://nova-wallet.github.io/test-runner/2366//#testresult/d82830ecfb933ee3","status":"passed","time":{"start":1675040620017,"stop":1675040620960,"duration":943}},{"uid":"52baf922548f6ee9","reportUrl":"https://nova-wallet.github.io/test-runner/2365//#testresult/52baf922548f6ee9","status":"passed","time":{"start":1675023174489,"stop":1675023175196,"duration":707}},{"uid":"53ed983357c66fec","reportUrl":"https://nova-wallet.github.io/test-runner/2364//#testresult/53ed983357c66fec","status":"passed","time":{"start":1675009000597,"stop":1675009001115,"duration":518}},{"uid":"18ab0d18d04669ea","reportUrl":"https://nova-wallet.github.io/test-runner/2363//#testresult/18ab0d18d04669ea","status":"passed","time":{"start":1674995013944,"stop":1674995014337,"duration":393}},{"uid":"3694f769a34cb979","reportUrl":"https://nova-wallet.github.io/test-runner/2361//#testresult/3694f769a34cb979","status":"passed","time":{"start":1674965746191,"stop":1674965746718,"duration":527}},{"uid":"4a6801113b8942d3","reportUrl":"https://nova-wallet.github.io/test-runner/2360//#testresult/4a6801113b8942d3","status":"passed","time":{"start":1674954776682,"stop":1674954777287,"duration":605}},{"uid":"9f44664e99c38b9","reportUrl":"https://nova-wallet.github.io/test-runner/2359//#testresult/9f44664e99c38b9","status":"passed","time":{"start":1674936780419,"stop":1674936780955,"duration":536}}]},"tags":[]},"source":"56da74adc2beb041.json","parameterValues":["{'url': 'wss://picasso-rpc.composable.finance', 'name': 'Picasso'}"]}