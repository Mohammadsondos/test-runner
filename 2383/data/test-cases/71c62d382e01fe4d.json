{"uid":"71c62d382e01fe4d","name":"test_can_create_connection[Test for XX network, url: wss://xxnetwork-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"49738eb6cbd6c82b394f36fbd8fb6e1c","time":{"start":1675282562099,"stop":1675282562153,"duration":54},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'xxnetwork-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f0dde8dcbe0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'xxnetwork-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'XX network', 'url': 'wss://xxnetwork-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'xxnetwork-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f0dde8dcbe0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'xxnetwork-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f0dde8dcbe0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'xxnetwork-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'XX network', 'url': 'wss://xxnetwork-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'xxnetwork-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f0dde8dcbe0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"fa63b412749aa081","name":"stdout","source":"fa63b412749aa081.txt","type":"text/plain","size":238}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az581-488"},{"name":"thread","value":"1787-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://xxnetwork-rpc.dwellir.com', 'name': 'XX network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9f7f06697166ef7","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675282551905,"stop":1675282552012,"duration":107}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":56,"skipped":0,"passed":334,"unknown":0,"total":390},"items":[{"uid":"46543499063d6d45","reportUrl":"https://nova-wallet.github.io/test-runner/2381//#testresult/46543499063d6d45","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675254491755,"stop":1675254491818,"duration":63}},{"uid":"f4106ad02613842c","reportUrl":"https://nova-wallet.github.io/test-runner/2380//#testresult/f4106ad02613842c","status":"passed","time":{"start":1675239458136,"stop":1675239458591,"duration":455}},{"uid":"6e12724fbf261041","reportUrl":"https://nova-wallet.github.io/test-runner/2379//#testresult/6e12724fbf261041","status":"passed","time":{"start":1675225025069,"stop":1675225025738,"duration":669}},{"uid":"81c4ebbb4fc0af5e","reportUrl":"https://nova-wallet.github.io/test-runner/2377//#testresult/81c4ebbb4fc0af5e","status":"passed","time":{"start":1675196113766,"stop":1675196114547,"duration":781}},{"uid":"a67f4a4a4b563b7c","reportUrl":"https://nova-wallet.github.io/test-runner/2376//#testresult/a67f4a4a4b563b7c","status":"passed","time":{"start":1675181974754,"stop":1675181975449,"duration":695}},{"uid":"d79fc101bccbee60","reportUrl":"https://nova-wallet.github.io/test-runner/2375//#testresult/d79fc101bccbee60","status":"passed","time":{"start":1675168006050,"stop":1675168006609,"duration":559}},{"uid":"c7c73c17ae572d81","reportUrl":"https://nova-wallet.github.io/test-runner/2373//#testresult/c7c73c17ae572d81","status":"passed","time":{"start":1675138601117,"stop":1675138601903,"duration":786}},{"uid":"aff1b5a128adc4c5","reportUrl":"https://nova-wallet.github.io/test-runner/2372//#testresult/aff1b5a128adc4c5","status":"passed","time":{"start":1675127574840,"stop":1675127575601,"duration":761}},{"uid":"d40a408901d6afe8","reportUrl":"https://nova-wallet.github.io/test-runner/2371//#testresult/d40a408901d6afe8","status":"passed","time":{"start":1675109671015,"stop":1675109671501,"duration":486}},{"uid":"66aee0a298abd40","reportUrl":"https://nova-wallet.github.io/test-runner/2370//#testresult/66aee0a298abd40","status":"passed","time":{"start":1675095644268,"stop":1675095644753,"duration":485}},{"uid":"dfb00067177ead03","reportUrl":"https://nova-wallet.github.io/test-runner/2369//#testresult/dfb00067177ead03","status":"passed","time":{"start":1675081769137,"stop":1675081769905,"duration":768}},{"uid":"de4b581da85e5964","reportUrl":"https://nova-wallet.github.io/test-runner/2368//#testresult/de4b581da85e5964","status":"passed","time":{"start":1675066835072,"stop":1675066835683,"duration":611}},{"uid":"8082bda58864424e","reportUrl":"https://nova-wallet.github.io/test-runner/2367//#testresult/8082bda58864424e","status":"passed","time":{"start":1675052310141,"stop":1675052310595,"duration":454}},{"uid":"e5e4a75f50db8fe7","reportUrl":"https://nova-wallet.github.io/test-runner/2366//#testresult/e5e4a75f50db8fe7","status":"passed","time":{"start":1675040772595,"stop":1675040773057,"duration":462}},{"uid":"b6710ba0851befa4","reportUrl":"https://nova-wallet.github.io/test-runner/2365//#testresult/b6710ba0851befa4","status":"passed","time":{"start":1675023341397,"stop":1675023341927,"duration":530}},{"uid":"52779e6300509832","reportUrl":"https://nova-wallet.github.io/test-runner/2364//#testresult/52779e6300509832","status":"passed","time":{"start":1675009173479,"stop":1675009174108,"duration":629}},{"uid":"efb433de83a3364e","reportUrl":"https://nova-wallet.github.io/test-runner/2363//#testresult/efb433de83a3364e","status":"passed","time":{"start":1674995200523,"stop":1674995200995,"duration":472}},{"uid":"fa333f7c3c25d9d9","reportUrl":"https://nova-wallet.github.io/test-runner/2361//#testresult/fa333f7c3c25d9d9","status":"passed","time":{"start":1674965897316,"stop":1674965897910,"duration":594}},{"uid":"475f391ecc7757d3","reportUrl":"https://nova-wallet.github.io/test-runner/2360//#testresult/475f391ecc7757d3","status":"passed","time":{"start":1674954872615,"stop":1674954873368,"duration":753}},{"uid":"2cefce61a062c6f3","reportUrl":"https://nova-wallet.github.io/test-runner/2359//#testresult/2cefce61a062c6f3","status":"passed","time":{"start":1674936923825,"stop":1674936924419,"duration":594}}]},"tags":[]},"source":"71c62d382e01fe4d.json","parameterValues":["{'url': 'wss://xxnetwork-rpc.dwellir.com', 'name': 'XX network'}"]}