{"uid":"6077c07d55bd67c7","name":"test_can_create_connection[Test for Myriad, url: wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1905bde48a0f8eb493d41d695f659f1e","time":{"start":1677485156425,"stop":1677485156528,"duration":103},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable","statusTrace":"data = {'name': 'Myriad', 'url': 'wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable","statusTrace":"data = {'name': 'Myriad', 'url': 'wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"464f8b3820084f2f","name":"stdout","source":"464f8b3820084f2f.txt","type":"text/plain","size":338}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az168-854"},{"name":"thread","value":"1737-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0', 'name': 'Myriad'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7046a3077cb23db","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable","time":{"start":1677485146225,"stop":1677485146346,"duration":121}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":499,"unknown":0,"total":554},"items":[{"uid":"cd0a0564a3cf99d1","reportUrl":"https://nova-wallet.github.io/test-runner/2541//#testresult/cd0a0564a3cf99d1","status":"passed","time":{"start":1677470718649,"stop":1677470718756,"duration":107}},{"uid":"1ace4a66077ea8da","reportUrl":"https://nova-wallet.github.io/test-runner/2540//#testresult/1ace4a66077ea8da","status":"passed","time":{"start":1677456923388,"stop":1677456923569,"duration":181}},{"uid":"5dd1b81d660b5390","reportUrl":"https://nova-wallet.github.io/test-runner/2539//#testresult/5dd1b81d660b5390","status":"passed","time":{"start":1677441901404,"stop":1677441901567,"duration":163}},{"uid":"a5126ca76977626b","reportUrl":"https://nova-wallet.github.io/test-runner/2538//#testresult/a5126ca76977626b","status":"passed","time":{"start":1677427506209,"stop":1677427506435,"duration":226}},{"uid":"3db0e366867310d4","reportUrl":"https://nova-wallet.github.io/test-runner/2537//#testresult/3db0e366867310d4","status":"passed","time":{"start":1677413158194,"stop":1677413158395,"duration":201}},{"uid":"eff6bc637d205798","reportUrl":"https://nova-wallet.github.io/test-runner/2536//#testresult/eff6bc637d205798","status":"passed","time":{"start":1677398725929,"stop":1677398726091,"duration":162}},{"uid":"e898d8442029cb4b","reportUrl":"https://nova-wallet.github.io/test-runner/2535//#testresult/e898d8442029cb4b","status":"passed","time":{"start":1677384300571,"stop":1677384300716,"duration":145}},{"uid":"b1ce78072965bf0e","reportUrl":"https://nova-wallet.github.io/test-runner/2534//#testresult/b1ce78072965bf0e","status":"passed","time":{"start":1677370599249,"stop":1677370599444,"duration":195}},{"uid":"7c2bb5de44b72e57","reportUrl":"https://nova-wallet.github.io/test-runner/2533//#testresult/7c2bb5de44b72e57","status":"passed","time":{"start":1677355471297,"stop":1677355471483,"duration":186}},{"uid":"b97da193c6571f71","reportUrl":"https://nova-wallet.github.io/test-runner/2532//#testresult/b97da193c6571f71","status":"passed","time":{"start":1677341083846,"stop":1677341084112,"duration":266}},{"uid":"eb647aadfbba0fdc","reportUrl":"https://nova-wallet.github.io/test-runner/2531//#testresult/eb647aadfbba0fdc","status":"passed","time":{"start":1677326759538,"stop":1677326759683,"duration":145}},{"uid":"10457a5a337a37b2","reportUrl":"https://nova-wallet.github.io/test-runner/2530//#testresult/10457a5a337a37b2","status":"passed","time":{"start":1677312330085,"stop":1677312330251,"duration":166}},{"uid":"37e24cbee99d1fdc","reportUrl":"https://nova-wallet.github.io/test-runner/2529//#testresult/37e24cbee99d1fdc","status":"passed","time":{"start":1677297885989,"stop":1677297886107,"duration":118}},{"uid":"ca0fec8ab5688c5c","reportUrl":"https://nova-wallet.github.io/test-runner/2528//#testresult/ca0fec8ab5688c5c","status":"passed","time":{"start":1677284119521,"stop":1677284119621,"duration":100}},{"uid":"ae556e0f832db22e","reportUrl":"https://nova-wallet.github.io/test-runner/2527//#testresult/ae556e0f832db22e","status":"passed","time":{"start":1677269109851,"stop":1677269110075,"duration":224}},{"uid":"5bbeb741cbba80d9","reportUrl":"https://nova-wallet.github.io/test-runner/2526//#testresult/5bbeb741cbba80d9","status":"passed","time":{"start":1677254698374,"stop":1677254698526,"duration":152}},{"uid":"70932af646e75d9a","reportUrl":"https://nova-wallet.github.io/test-runner/2525//#testresult/70932af646e75d9a","status":"passed","time":{"start":1677240379738,"stop":1677240379876,"duration":138}},{"uid":"43bf1d1210c2b87b","reportUrl":"https://nova-wallet.github.io/test-runner/2524//#testresult/43bf1d1210c2b87b","status":"passed","time":{"start":1677225934433,"stop":1677225934644,"duration":211}},{"uid":"5ab23b06346fb7d5","reportUrl":"https://nova-wallet.github.io/test-runner/2523//#testresult/5ab23b06346fb7d5","status":"passed","time":{"start":1677211515558,"stop":1677211515736,"duration":178}},{"uid":"1e937ce6c6cfb0c2","reportUrl":"https://nova-wallet.github.io/test-runner/2522//#testresult/1e937ce6c6cfb0c2","status":"passed","time":{"start":1677197686722,"stop":1677197686928,"duration":206}}]},"tags":[]},"source":"6077c07d55bd67c7.json","parameterValues":["{'url': 'wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0', 'name': 'Myriad'}"]}