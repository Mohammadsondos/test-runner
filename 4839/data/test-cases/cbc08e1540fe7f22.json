{"uid":"cbc08e1540fe7f22","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1709899272105,"stop":1709899272483,"duration":378},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f9aad76b940>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f9aaf648760>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f9aad609570>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az698-899"},{"name":"thread","value":"2175-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"24dccffa785c9e86","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709899266671,"stop":1709899267046,"duration":375}},{"uid":"44542113d240ea1f","status":"failed","statusDetails":"AssertionError: Failed to connect to Ethereum RPC node\nassert False\n +  where False = <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f9aad608460>>()\n +    where <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f9aad608460>> = <web3.main.Web3 object at 0x7f9aad608460>.is_connected","time":{"start":1709899261131,"stop":1709899261603,"duration":472}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":23,"skipped":0,"passed":925,"unknown":0,"total":950},"items":[{"uid":"f0c5b3ab2c498208","reportUrl":"https://novasamatech.github.io/test-runner/4838//#testresult/f0c5b3ab2c498208","status":"passed","time":{"start":1709884870252,"stop":1709884870790,"duration":538}},{"uid":"fd7ee33321f57d4b","reportUrl":"https://novasamatech.github.io/test-runner/4837//#testresult/fd7ee33321f57d4b","status":"passed","time":{"start":1709870471234,"stop":1709870471617,"duration":383}},{"uid":"f33d0fe92f0583b","reportUrl":"https://novasamatech.github.io/test-runner/4836//#testresult/f33d0fe92f0583b","status":"passed","time":{"start":1709856108264,"stop":1709856108942,"duration":678}},{"uid":"59d0f3c2273298e8","reportUrl":"https://novasamatech.github.io/test-runner/4835//#testresult/59d0f3c2273298e8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709841667980,"stop":1709841668023,"duration":43}},{"uid":"b39e875c3767120e","reportUrl":"https://novasamatech.github.io/test-runner/4834//#testresult/b39e875c3767120e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709827276421,"stop":1709827276486,"duration":65}},{"uid":"7d518543775cf679","reportUrl":"https://novasamatech.github.io/test-runner/4833//#testresult/7d518543775cf679","status":"passed","time":{"start":1709812895742,"stop":1709812896037,"duration":295}},{"uid":"cf2ba028f81b4181","reportUrl":"https://novasamatech.github.io/test-runner/4832//#testresult/cf2ba028f81b4181","status":"passed","time":{"start":1709798467434,"stop":1709798467694,"duration":260}},{"uid":"6b70eeb1a9d1cad7","reportUrl":"https://novasamatech.github.io/test-runner/4831//#testresult/6b70eeb1a9d1cad7","status":"passed","time":{"start":1709784066150,"stop":1709784066498,"duration":348}},{"uid":"cd9a036305541e56","reportUrl":"https://novasamatech.github.io/test-runner/4830//#testresult/cd9a036305541e56","status":"passed","time":{"start":1709769698282,"stop":1709769698774,"duration":492}},{"uid":"187304b207307b16","reportUrl":"https://novasamatech.github.io/test-runner/4829//#testresult/187304b207307b16","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709755270293,"stop":1709755270334,"duration":41}},{"uid":"7dbf0814d0913956","reportUrl":"https://novasamatech.github.io/test-runner/4828//#testresult/7dbf0814d0913956","status":"passed","time":{"start":1709740872439,"stop":1709740872893,"duration":454}},{"uid":"910b4c2430ea3608","reportUrl":"https://novasamatech.github.io/test-runner/4827//#testresult/910b4c2430ea3608","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709726478283,"stop":1709726478426,"duration":143}},{"uid":"8fc992210901636a","reportUrl":"https://novasamatech.github.io/test-runner/4826//#testresult/8fc992210901636a","status":"passed","time":{"start":1709712058719,"stop":1709712058924,"duration":205}},{"uid":"ec99131b98b353cd","reportUrl":"https://novasamatech.github.io/test-runner/4825//#testresult/ec99131b98b353cd","status":"passed","time":{"start":1709697665154,"stop":1709697665664,"duration":510}},{"uid":"8166740f190090ee","reportUrl":"https://novasamatech.github.io/test-runner/4824//#testresult/8166740f190090ee","status":"passed","time":{"start":1709683310204,"stop":1709683310584,"duration":380}},{"uid":"754a327c9bbcfb95","reportUrl":"https://novasamatech.github.io/test-runner/4823//#testresult/754a327c9bbcfb95","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709668867260,"stop":1709668867445,"duration":185}},{"uid":"558d51cb25dd9afc","reportUrl":"https://novasamatech.github.io/test-runner/4822//#testresult/558d51cb25dd9afc","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709654477794,"stop":1709654478108,"duration":314}},{"uid":"376e5f3cf3feabaf","reportUrl":"https://novasamatech.github.io/test-runner/4821//#testresult/376e5f3cf3feabaf","status":"passed","time":{"start":1709640068625,"stop":1709640069172,"duration":547}},{"uid":"443425a39e0e930b","reportUrl":"https://novasamatech.github.io/test-runner/4820//#testresult/443425a39e0e930b","status":"passed","time":{"start":1709625668813,"stop":1709625669318,"duration":505}},{"uid":"931ce01d1e5a2939","reportUrl":"https://novasamatech.github.io/test-runner/4819//#testresult/931ce01d1e5a2939","status":"passed","time":{"start":1709611259231,"stop":1709611259571,"duration":340}}]},"tags":[]},"source":"cbc08e1540fe7f22.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}