{"uid":"72ae46c754b5703","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1690473914478,"stop":1690473914799,"duration":321},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 27 Jul 2023 16:05:14 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 27 Jul 2023 16:05:14 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 27 Jul 2023 16:05:14 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 27 Jul 2023 16:05:14 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"6410460b9494b2c5","name":"stdout","source":"6410460b9494b2c5.txt","type":"text/plain","size":1098}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az507-685"},{"name":"thread","value":"1993-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2189713154a20157","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 27 Jul 2023 16:04:59 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1690473899117,"stop":1690473899338,"duration":221}},{"uid":"d03f71f980ccb635","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 27 Jul 2023 16:04:43 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1690473883652,"stop":1690473883872,"duration":220}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":117,"skipped":0,"passed":353,"unknown":0,"total":470},"items":[{"uid":"74b9b31ecedfe347","reportUrl":"https://novasamatech.github.io/test-runner/3464//#testresult/74b9b31ecedfe347","status":"passed","time":{"start":1690459522499,"stop":1690459522792,"duration":293}},{"uid":"f3677cd09938cb0c","reportUrl":"https://novasamatech.github.io/test-runner/3463//#testresult/f3677cd09938cb0c","status":"passed","time":{"start":1690445068782,"stop":1690445069022,"duration":240}},{"uid":"fa1780bf702f8c40","reportUrl":"https://novasamatech.github.io/test-runner/3461//#testresult/fa1780bf702f8c40","status":"passed","time":{"start":1690416799625,"stop":1690416799656,"duration":31}},{"uid":"c35749dd9539cf2d","reportUrl":"https://novasamatech.github.io/test-runner/3462//#testresult/c35749dd9539cf2d","status":"passed","time":{"start":1690430660614,"stop":1690430661010,"duration":396}},{"uid":"3d2ceffed4dc476d","reportUrl":"https://novasamatech.github.io/test-runner/3460//#testresult/3d2ceffed4dc476d","status":"passed","time":{"start":1690401834333,"stop":1690401834389,"duration":56}},{"uid":"dcc8c4f85e3db37b","reportUrl":"https://novasamatech.github.io/test-runner/3459//#testresult/dcc8c4f85e3db37b","status":"passed","time":{"start":1690387466568,"stop":1690387466861,"duration":293}},{"uid":"cc33b90b2f7df5e5","reportUrl":"https://novasamatech.github.io/test-runner/3458//#testresult/cc33b90b2f7df5e5","status":"passed","time":{"start":1690373112499,"stop":1690373112888,"duration":389}},{"uid":"5cfb7836a89900ec","reportUrl":"https://novasamatech.github.io/test-runner/3457//#testresult/5cfb7836a89900ec","status":"passed","time":{"start":1690358701148,"stop":1690358701228,"duration":80}},{"uid":"193b8f01a3f29e81","reportUrl":"https://novasamatech.github.io/test-runner/3456//#testresult/193b8f01a3f29e81","status":"passed","time":{"start":1690344249100,"stop":1690344249159,"duration":59}},{"uid":"a329c72204899475","reportUrl":"https://novasamatech.github.io/test-runner/3455//#testresult/a329c72204899475","status":"passed","time":{"start":1690330457285,"stop":1690330457525,"duration":240}},{"uid":"aee8913f1b831f84","reportUrl":"https://novasamatech.github.io/test-runner/3454//#testresult/aee8913f1b831f84","status":"passed","time":{"start":1690315457236,"stop":1690315457526,"duration":290}},{"uid":"5c80aeb1ecee6360","reportUrl":"https://novasamatech.github.io/test-runner/3453//#testresult/5c80aeb1ecee6360","status":"passed","time":{"start":1690301061592,"stop":1690301061712,"duration":120}},{"uid":"1cd090bcbc14692","reportUrl":"https://novasamatech.github.io/test-runner/3452//#testresult/1cd090bcbc14692","status":"passed","time":{"start":1690286720616,"stop":1690286720688,"duration":72}},{"uid":"117a89b80ea1046a","reportUrl":"https://novasamatech.github.io/test-runner/3451//#testresult/117a89b80ea1046a","status":"passed","time":{"start":1690272275055,"stop":1690272275110,"duration":55}},{"uid":"3896658e38c97dfc","reportUrl":"https://novasamatech.github.io/test-runner/3450//#testresult/3896658e38c97dfc","status":"passed","time":{"start":1690257867469,"stop":1690257867505,"duration":36}},{"uid":"b4c8bed3165eceed","reportUrl":"https://novasamatech.github.io/test-runner/3449//#testresult/b4c8bed3165eceed","status":"passed","time":{"start":1690244096178,"stop":1690244096259,"duration":81}},{"uid":"6ce1105930ab6161","reportUrl":"https://novasamatech.github.io/test-runner/3448//#testresult/6ce1105930ab6161","status":"passed","time":{"start":1690229050182,"stop":1690229050331,"duration":149}},{"uid":"b26a054181557eaa","reportUrl":"https://novasamatech.github.io/test-runner/3447//#testresult/b26a054181557eaa","status":"passed","time":{"start":1690214662965,"stop":1690214663243,"duration":278}},{"uid":"b3d07ec3a3c90049","reportUrl":"https://novasamatech.github.io/test-runner/3446//#testresult/b3d07ec3a3c90049","status":"passed","time":{"start":1690200320662,"stop":1690200320727,"duration":65}},{"uid":"50aff69469fcdc05","reportUrl":"https://novasamatech.github.io/test-runner/3445//#testresult/50aff69469fcdc05","status":"passed","time":{"start":1690185877865,"stop":1690185877919,"duration":54}}]},"tags":[]},"source":"72ae46c754b5703.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}