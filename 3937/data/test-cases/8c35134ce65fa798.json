{"uid":"8c35134ce65fa798","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1697126547397,"stop":1697126547956,"duration":559},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 12 Oct 2023 16:02:27 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 12 Oct 2023 16:02:27 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 12 Oct 2023 16:02:27 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 12 Oct 2023 16:02:27 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"9496235b40f821dc","name":"stdout","source":"9496235b40f821dc.txt","type":"text/plain","size":825}],"parameters":[],"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true,"stepsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az407-236"},{"name":"thread","value":"2212-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"fc2aea70786dc824","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 12 Oct 2023 16:02:12 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1697126531656,"stop":1697126532290,"duration":634}},{"uid":"8e854c3a57e9d68f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 12 Oct 2023 16:01:55 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1697126515526,"stop":1697126516421,"duration":895}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":16,"skipped":0,"passed":281,"unknown":0,"total":297},"items":[{"uid":"dded7d7f2f3c8058","reportUrl":"https://novasamatech.github.io/test-runner/3936//#testresult/dded7d7f2f3c8058","status":"passed","time":{"start":1697112112721,"stop":1697112113423,"duration":702}},{"uid":"114bfb934c69811e","reportUrl":"https://novasamatech.github.io/test-runner/3935//#testresult/114bfb934c69811e","status":"passed","time":{"start":1697097711396,"stop":1697097712157,"duration":761}},{"uid":"e88b6c18093106cc","reportUrl":"https://novasamatech.github.io/test-runner/3934//#testresult/e88b6c18093106cc","status":"passed","time":{"start":1697083307450,"stop":1697083308109,"duration":659}},{"uid":"5ad1f3f548c14453","reportUrl":"https://novasamatech.github.io/test-runner/3933//#testresult/5ad1f3f548c14453","status":"passed","time":{"start":1697068939462,"stop":1697068940252,"duration":790}},{"uid":"a643700b304831b1","reportUrl":"https://novasamatech.github.io/test-runner/3932//#testresult/a643700b304831b1","status":"passed","time":{"start":1697054508788,"stop":1697054509421,"duration":633}},{"uid":"e0fb725c92b59d36","reportUrl":"https://novasamatech.github.io/test-runner/3931//#testresult/e0fb725c92b59d36","status":"passed","time":{"start":1697040126624,"stop":1697040127293,"duration":669}},{"uid":"96d9bd31ce92ce88","reportUrl":"https://novasamatech.github.io/test-runner/3930//#testresult/96d9bd31ce92ce88","status":"passed","time":{"start":1697025710533,"stop":1697025711666,"duration":1133}},{"uid":"2b360fe58ee526b1","reportUrl":"https://novasamatech.github.io/test-runner/3929//#testresult/2b360fe58ee526b1","status":"passed","time":{"start":1697011302192,"stop":1697011303495,"duration":1303}},{"uid":"b8bffdcad552fb59","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/b8bffdcad552fb59","status":"passed","time":{"start":1696996893323,"stop":1696996894132,"duration":809}},{"uid":"27672487c402a10d","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/27672487c402a10d","status":"passed","time":{"start":1696982532479,"stop":1696982533177,"duration":698}},{"uid":"95d47963a90f351a","reportUrl":"https://novasamatech.github.io/test-runner/3926//#testresult/95d47963a90f351a","status":"passed","time":{"start":1696968107687,"stop":1696968108386,"duration":699}},{"uid":"f99c6d9558add3cb","reportUrl":"https://novasamatech.github.io/test-runner/3925//#testresult/f99c6d9558add3cb","status":"passed","time":{"start":1696953707205,"stop":1696953708381,"duration":1176}},{"uid":"95dc33c913754a79","reportUrl":"https://novasamatech.github.io/test-runner/3924//#testresult/95dc33c913754a79","status":"passed","time":{"start":1696939298770,"stop":1696939299659,"duration":889}},{"uid":"d08de2a98af78fff","reportUrl":"https://novasamatech.github.io/test-runner/3923//#testresult/d08de2a98af78fff","status":"passed","time":{"start":1696924898109,"stop":1696924898787,"duration":678}},{"uid":"49e2cf3c294b0620","reportUrl":"https://novasamatech.github.io/test-runner/3922//#testresult/49e2cf3c294b0620","status":"passed","time":{"start":1696910491229,"stop":1696910491841,"duration":612}},{"uid":"a205a19b5a5ba774","reportUrl":"https://novasamatech.github.io/test-runner/3921//#testresult/a205a19b5a5ba774","status":"passed","time":{"start":1696896154810,"stop":1696896155854,"duration":1044}},{"uid":"d7ee38993a252812","reportUrl":"https://novasamatech.github.io/test-runner/3920//#testresult/d7ee38993a252812","status":"passed","time":{"start":1696881699902,"stop":1696881700740,"duration":838}},{"uid":"e41facd4f5ceea14","reportUrl":"https://novasamatech.github.io/test-runner/3919//#testresult/e41facd4f5ceea14","status":"passed","time":{"start":1696867301811,"stop":1696867302459,"duration":648}},{"uid":"1768a5cbc954374","reportUrl":"https://novasamatech.github.io/test-runner/3918//#testresult/1768a5cbc954374","status":"passed","time":{"start":1696852908099,"stop":1696852908897,"duration":798}},{"uid":"31adf0233a688d81","reportUrl":"https://novasamatech.github.io/test-runner/3917//#testresult/31adf0233a688d81","status":"passed","time":{"start":1696838494679,"stop":1696838495169,"duration":490}}]},"tags":[]},"source":"8c35134ce65fa798.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}