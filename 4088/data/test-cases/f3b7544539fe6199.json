{"uid":"f3b7544539fe6199","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1699286523666,"stop":1699286524073,"duration":407},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 06 Nov 2023 16:02:03 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 06 Nov 2023 16:02:03 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 06 Nov 2023 16:02:03 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 06 Nov 2023 16:02:03 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"2f4997c11ad6e227","name":"stdout","source":"2f4997c11ad6e227.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az529-666"},{"name":"thread","value":"2190-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"92a0a64406e2ccee","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 06 Nov 2023 16:01:48 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699286508003,"stop":1699286508568,"duration":565}},{"uid":"116ef20d497c800a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 06 Nov 2023 16:01:32 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699286492199,"stop":1699286492877,"duration":678}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":20,"skipped":0,"passed":423,"unknown":0,"total":443},"items":[{"uid":"68f59041756db0e","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/68f59041756db0e","status":"passed","time":{"start":1699272107927,"stop":1699272108525,"duration":598}},{"uid":"cfe7133fece8664e","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/cfe7133fece8664e","status":"passed","time":{"start":1699257713906,"stop":1699257714750,"duration":844}},{"uid":"93e6d0ca60abf2a9","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/93e6d0ca60abf2a9","status":"passed","time":{"start":1699243297727,"stop":1699243298386,"duration":659}},{"uid":"7cef23fee5e341f5","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/7cef23fee5e341f5","status":"passed","time":{"start":1699228926169,"stop":1699228926845,"duration":676}},{"uid":"d5ad7d2b6c2b8a11","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/d5ad7d2b6c2b8a11","status":"passed","time":{"start":1699214491853,"stop":1699214492750,"duration":897}},{"uid":"76022904427bb287","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/76022904427bb287","status":"passed","time":{"start":1699200084017,"stop":1699200084917,"duration":900}},{"uid":"32774e14cd42362f","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/32774e14cd42362f","status":"passed","time":{"start":1699185680293,"stop":1699185681201,"duration":908}},{"uid":"d1bfda3cc629438f","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/d1bfda3cc629438f","status":"passed","time":{"start":1699171280457,"stop":1699171281414,"duration":957}},{"uid":"5a94dcfd699edb5a","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/5a94dcfd699edb5a","status":"passed","time":{"start":1699156882763,"stop":1699156883484,"duration":721}},{"uid":"4c4da047c5118ef5","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/4c4da047c5118ef5","status":"passed","time":{"start":1699142538892,"stop":1699142539869,"duration":977}},{"uid":"8dfbc63a86e0c117","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/8dfbc63a86e0c117","status":"passed","time":{"start":1699128094750,"stop":1699128095677,"duration":927}},{"uid":"40e5faf72083ae69","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/40e5faf72083ae69","status":"passed","time":{"start":1699113692497,"stop":1699113693250,"duration":753}},{"uid":"e79604926b77e902","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/e79604926b77e902","status":"passed","time":{"start":1699099291593,"stop":1699099292444,"duration":851}},{"uid":"98c309add9775a14","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/98c309add9775a14","status":"passed","time":{"start":1699084884892,"stop":1699084885468,"duration":576}},{"uid":"fd7b21dffcd619f0","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/fd7b21dffcd619f0","status":"passed","time":{"start":1699070480377,"stop":1699070481321,"duration":944}},{"uid":"722d836ef0451775","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/722d836ef0451775","status":"passed","time":{"start":1699041688212,"stop":1699041689153,"duration":941}},{"uid":"8268c8261f264337","reportUrl":"https://novasamatech.github.io/test-runner/4072//#testresult/8268c8261f264337","status":"passed","time":{"start":1699056141803,"stop":1699056142569,"duration":766}},{"uid":"a6f02153d40c1ef5","reportUrl":"https://novasamatech.github.io/test-runner/4070//#testresult/a6f02153d40c1ef5","status":"passed","time":{"start":1699027337366,"stop":1699027338629,"duration":1263}},{"uid":"96c1f2b893d3fc26","reportUrl":"https://novasamatech.github.io/test-runner/4069//#testresult/96c1f2b893d3fc26","status":"passed","time":{"start":1699012895130,"stop":1699012895968,"duration":838}},{"uid":"35b1a2dcb359d5d8","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/35b1a2dcb359d5d8","status":"passed","time":{"start":1698998517735,"stop":1698998518620,"duration":885}}]},"tags":[]},"source":"f3b7544539fe6199.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}