{"uid":"539fbec3f31ffd45","name":"test_can_create_connection[Test for OriginTrail Parachain, url: wss://parachain-rpc.origin-trail.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2f3c2858490b7fe22f1ec62a2cdaccfd","time":{"start":1691525096080,"stop":1691525096532,"duration":452},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 08 Aug 2023 20:04:56 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'close'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'OriginTrail Parachain', 'url': 'wss://parachain-rpc.origin-trail.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 08 Aug 2023 20:04:56 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'close'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 08 Aug 2023 20:04:56 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'close'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'OriginTrail Parachain', 'url': 'wss://parachain-rpc.origin-trail.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 08 Aug 2023 20:04:56 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'close'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"dd4b51ca7d648add","name":"stdout","source":"dd4b51ca7d648add.txt","type":"text/plain","size":1035}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az354-707"},{"name":"thread","value":"2042-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://parachain-rpc.origin-trail.network', 'name': 'OriginTrail Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6c47cb045ce42100","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 08 Aug 2023 20:04:40 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'close'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1691525080455,"stop":1691525080993,"duration":538}},{"uid":"7701da8713459a63","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 08 Aug 2023 20:04:25 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'close'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1691525064840,"stop":1691525065297,"duration":457}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":541,"unknown":0,"total":543},"items":[{"uid":"bc90bd5b5542cd87","reportUrl":"https://novasamatech.github.io/test-runner/3537//#testresult/bc90bd5b5542cd87","status":"passed","time":{"start":1691510647582,"stop":1691510647993,"duration":411}},{"uid":"87e04916df52f146","reportUrl":"https://novasamatech.github.io/test-runner/3536//#testresult/87e04916df52f146","status":"passed","time":{"start":1691496302643,"stop":1691496303238,"duration":595}},{"uid":"e4efd1e5446d0cb3","reportUrl":"https://novasamatech.github.io/test-runner/3535//#testresult/e4efd1e5446d0cb3","status":"passed","time":{"start":1691481875084,"stop":1691481875840,"duration":756}},{"uid":"4ccb0594bcb58d1","reportUrl":"https://novasamatech.github.io/test-runner/3534//#testresult/4ccb0594bcb58d1","status":"passed","time":{"start":1691467457719,"stop":1691467458291,"duration":572}},{"uid":"6892a3ed3839cd2f","reportUrl":"https://novasamatech.github.io/test-runner/3533//#testresult/6892a3ed3839cd2f","status":"passed","time":{"start":1691453672307,"stop":1691453673130,"duration":823}},{"uid":"87bd5a4d8b036475","reportUrl":"https://novasamatech.github.io/test-runner/3532//#testresult/87bd5a4d8b036475","status":"passed","time":{"start":1691438659042,"stop":1691438659905,"duration":863}},{"uid":"82ab6cb076b4063a","reportUrl":"https://novasamatech.github.io/test-runner/3531//#testresult/82ab6cb076b4063a","status":"passed","time":{"start":1691424265395,"stop":1691424265834,"duration":439}},{"uid":"b1c50a87a9d19ea5","reportUrl":"https://novasamatech.github.io/test-runner/3530//#testresult/b1c50a87a9d19ea5","status":"passed","time":{"start":1691409910972,"stop":1691409911403,"duration":431}},{"uid":"61e56b84445fe06","reportUrl":"https://novasamatech.github.io/test-runner/3529//#testresult/61e56b84445fe06","status":"passed","time":{"start":1691395483810,"stop":1691395484279,"duration":469}},{"uid":"3d170f6c800b8a22","reportUrl":"https://novasamatech.github.io/test-runner/3528//#testresult/3d170f6c800b8a22","status":"passed","time":{"start":1691381048753,"stop":1691381049732,"duration":979}},{"uid":"88418938b398e8ee","reportUrl":"https://novasamatech.github.io/test-runner/3527//#testresult/88418938b398e8ee","status":"passed","time":{"start":1691367271250,"stop":1691367271805,"duration":555}},{"uid":"1efd2561db1618b3","reportUrl":"https://novasamatech.github.io/test-runner/3526//#testresult/1efd2561db1618b3","status":"passed","time":{"start":1691352236494,"stop":1691352237118,"duration":624}},{"uid":"8eaa526509c45b57","reportUrl":"https://novasamatech.github.io/test-runner/3525//#testresult/8eaa526509c45b57","status":"passed","time":{"start":1691337865384,"stop":1691337866267,"duration":883}},{"uid":"837616e9174eb822","reportUrl":"https://novasamatech.github.io/test-runner/3524//#testresult/837616e9174eb822","status":"passed","time":{"start":1691323469511,"stop":1691323470210,"duration":699}},{"uid":"606ac63a26eb53eb","reportUrl":"https://novasamatech.github.io/test-runner/3523//#testresult/606ac63a26eb53eb","status":"passed","time":{"start":1691309043507,"stop":1691309044196,"duration":689}},{"uid":"451915ac1b8eaacc","reportUrl":"https://novasamatech.github.io/test-runner/3522//#testresult/451915ac1b8eaacc","status":"passed","time":{"start":1691294639446,"stop":1691294640029,"duration":583}},{"uid":"d30334b6bac8e40c","reportUrl":"https://novasamatech.github.io/test-runner/3521//#testresult/d30334b6bac8e40c","status":"passed","time":{"start":1691280828594,"stop":1691280829270,"duration":676}},{"uid":"36b10122865cfeaf","reportUrl":"https://novasamatech.github.io/test-runner/3520//#testresult/36b10122865cfeaf","status":"passed","time":{"start":1691265844484,"stop":1691265845236,"duration":752}},{"uid":"fe2d5b2bb3ff95fb","reportUrl":"https://novasamatech.github.io/test-runner/3519//#testresult/fe2d5b2bb3ff95fb","status":"passed","time":{"start":1691251481183,"stop":1691251481755,"duration":572}},{"uid":"df1c65e4ffe1dec0","reportUrl":"https://novasamatech.github.io/test-runner/3518//#testresult/df1c65e4ffe1dec0","status":"passed","time":{"start":1691237070759,"stop":1691237071540,"duration":781}}]},"tags":[]},"source":"539fbec3f31ffd45.json","parameterValues":["{'url': 'wss://parachain-rpc.origin-trail.network', 'name': 'OriginTrail Parachain'}"]}