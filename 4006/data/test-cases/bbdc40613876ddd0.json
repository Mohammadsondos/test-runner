{"uid":"bbdc40613876ddd0","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1698105790010,"stop":1698105790457,"duration":447},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 24 Oct 2023 00:03:10 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 24 Oct 2023 00:03:10 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 24 Oct 2023 00:03:10 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 24 Oct 2023 00:03:10 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"bf74a93a8760edae","name":"stdout","source":"bf74a93a8760edae.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az257-386"},{"name":"thread","value":"2166-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3643a05e9688054e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 24 Oct 2023 00:02:54 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698105774410,"stop":1698105774872,"duration":462}},{"uid":"663403bb42fa68a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 24 Oct 2023 00:02:39 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698105758683,"stop":1698105759245,"duration":562}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":355,"unknown":0,"total":366},"items":[{"uid":"49e3cb37be92bc81","reportUrl":"https://novasamatech.github.io/test-runner/4005//#testresult/49e3cb37be92bc81","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 23 Oct 2023 20:02:19 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698091339041,"stop":1698091339408,"duration":367}},{"uid":"8ce3b8e76adfaf08","reportUrl":"https://novasamatech.github.io/test-runner/4004//#testresult/8ce3b8e76adfaf08","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 23 Oct 2023 16:02:26 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698076946160,"stop":1698076946425,"duration":265}},{"uid":"6fd7afa351a016a","reportUrl":"https://novasamatech.github.io/test-runner/4003//#testresult/6fd7afa351a016a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 23 Oct 2023 12:02:15 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698062535131,"stop":1698062535396,"duration":265}},{"uid":"d93a599318067d89","reportUrl":"https://novasamatech.github.io/test-runner/4002//#testresult/d93a599318067d89","status":"passed","time":{"start":1698048105508,"stop":1698048106030,"duration":522}},{"uid":"167f55fb616a6de","reportUrl":"https://novasamatech.github.io/test-runner/4001//#testresult/167f55fb616a6de","status":"passed","time":{"start":1698033707192,"stop":1698033707779,"duration":587}},{"uid":"ad61bef3e3284157","reportUrl":"https://novasamatech.github.io/test-runner/4000//#testresult/ad61bef3e3284157","status":"passed","time":{"start":1698019335517,"stop":1698019335880,"duration":363}},{"uid":"b4c43f7feb6803fb","reportUrl":"https://novasamatech.github.io/test-runner/3999//#testresult/b4c43f7feb6803fb","status":"passed","time":{"start":1698004897567,"stop":1698004898055,"duration":488}},{"uid":"cdd53d454926ca0a","reportUrl":"https://novasamatech.github.io/test-runner/3998//#testresult/cdd53d454926ca0a","status":"passed","time":{"start":1697990525917,"stop":1697990526410,"duration":493}},{"uid":"42a810082572b4d5","reportUrl":"https://novasamatech.github.io/test-runner/3997//#testresult/42a810082572b4d5","status":"passed","time":{"start":1697976099504,"stop":1697976099986,"duration":482}},{"uid":"d0bee4a342bca33e","reportUrl":"https://novasamatech.github.io/test-runner/3996//#testresult/d0bee4a342bca33e","status":"passed","time":{"start":1697961707616,"stop":1697961708235,"duration":619}},{"uid":"e17acc2aa38d3718","reportUrl":"https://novasamatech.github.io/test-runner/3995//#testresult/e17acc2aa38d3718","status":"passed","time":{"start":1697947292664,"stop":1697947293201,"duration":537}},{"uid":"39902f3fa76966b8","reportUrl":"https://novasamatech.github.io/test-runner/3994//#testresult/39902f3fa76966b8","status":"passed","time":{"start":1697932960776,"stop":1697932961514,"duration":738}},{"uid":"5c82c8dd8f1373a0","reportUrl":"https://novasamatech.github.io/test-runner/3993//#testresult/5c82c8dd8f1373a0","status":"passed","time":{"start":1697918504348,"stop":1697918504949,"duration":601}},{"uid":"94ec7f07298daf87","reportUrl":"https://novasamatech.github.io/test-runner/3992//#testresult/94ec7f07298daf87","status":"passed","time":{"start":1697904093438,"stop":1697904093921,"duration":483}},{"uid":"72c13ff7443588f8","reportUrl":"https://novasamatech.github.io/test-runner/3991//#testresult/72c13ff7443588f8","status":"passed","time":{"start":1697889700776,"stop":1697889701102,"duration":326}},{"uid":"3dd8f5940215151a","reportUrl":"https://novasamatech.github.io/test-runner/3990//#testresult/3dd8f5940215151a","status":"passed","time":{"start":1697875296770,"stop":1697875297104,"duration":334}},{"uid":"f1cef216ecf2791c","reportUrl":"https://novasamatech.github.io/test-runner/3989//#testresult/f1cef216ecf2791c","status":"passed","time":{"start":1697860901752,"stop":1697860902092,"duration":340}},{"uid":"9fe577eb09d056b6","reportUrl":"https://novasamatech.github.io/test-runner/3988//#testresult/9fe577eb09d056b6","status":"passed","time":{"start":1697846591706,"stop":1697846592229,"duration":523}},{"uid":"3d0626d64d4f55ea","reportUrl":"https://novasamatech.github.io/test-runner/3987//#testresult/3d0626d64d4f55ea","status":"passed","time":{"start":1697832153876,"stop":1697832154454,"duration":578}},{"uid":"d09fea429f1d64a0","reportUrl":"https://novasamatech.github.io/test-runner/3986//#testresult/d09fea429f1d64a0","status":"passed","time":{"start":1697817698679,"stop":1697817699440,"duration":761}}]},"tags":[]},"source":"bbdc40613876ddd0.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}