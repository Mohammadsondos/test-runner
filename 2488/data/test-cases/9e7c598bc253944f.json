{"uid":"9e7c598bc253944f","name":"test_can_create_connection[Test for XX network, url: wss://rpc.xx.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a8e1ede01a7872066249898c0020cb55","time":{"start":1676793914852,"stop":1676793915479,"duration":627},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'XX network', 'url': 'wss://rpc.xx.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'XX network', 'url': 'wss://rpc.xx.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"e7e663633d626a8f","name":"stdout","source":"e7e663633d626a8f.txt","type":"text/plain","size":208}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az572-577"},{"name":"thread","value":"1645-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.xx.network', 'name': 'XX network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9c195e42b485dc9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676793904107,"stop":1676793904755,"duration":648}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":59,"skipped":0,"passed":421,"unknown":0,"total":480},"items":[{"uid":"679ff4bce1727e4","reportUrl":"https://nova-wallet.github.io/test-runner/2487//#testresult/679ff4bce1727e4","status":"passed","time":{"start":1676779482741,"stop":1676779483841,"duration":1100}},{"uid":"c83cabafd9dba20e","reportUrl":"https://nova-wallet.github.io/test-runner/2485//#testresult/c83cabafd9dba20e","status":"passed","time":{"start":1676750704799,"stop":1676750705376,"duration":577}},{"uid":"8eb66043993a9dd3","reportUrl":"https://nova-wallet.github.io/test-runner/2484//#testresult/8eb66043993a9dd3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676736331613,"stop":1676736332233,"duration":620}},{"uid":"dab42f43bb066a7f","reportUrl":"https://nova-wallet.github.io/test-runner/2483//#testresult/dab42f43bb066a7f","status":"passed","time":{"start":1676721947474,"stop":1676721948661,"duration":1187}},{"uid":"538c08d147465778","reportUrl":"https://nova-wallet.github.io/test-runner/2482//#testresult/538c08d147465778","status":"passed","time":{"start":1676707522775,"stop":1676707523334,"duration":559}},{"uid":"524620c952943ce2","reportUrl":"https://nova-wallet.github.io/test-runner/2480//#testresult/524620c952943ce2","status":"passed","time":{"start":1676679283051,"stop":1676679284136,"duration":1085}},{"uid":"f9ba695fc450bd1d","reportUrl":"https://nova-wallet.github.io/test-runner/2479//#testresult/f9ba695fc450bd1d","status":"passed","time":{"start":1676664324542,"stop":1676664325451,"duration":909}},{"uid":"463d3a8885c90c8b","reportUrl":"https://nova-wallet.github.io/test-runner/2478//#testresult/463d3a8885c90c8b","status":"passed","time":{"start":1676649926089,"stop":1676649927219,"duration":1130}},{"uid":"bbca965a90bf385c","reportUrl":"https://nova-wallet.github.io/test-runner/2477//#testresult/bbca965a90bf385c","status":"passed","time":{"start":1676635586827,"stop":1676635587387,"duration":560}},{"uid":"9bc180d2035eef41","reportUrl":"https://nova-wallet.github.io/test-runner/2476//#testresult/9bc180d2035eef41","status":"passed","time":{"start":1676621109840,"stop":1676621110433,"duration":593}},{"uid":"46047746f431bbf9","reportUrl":"https://nova-wallet.github.io/test-runner/2475//#testresult/46047746f431bbf9","status":"passed","time":{"start":1676606700533,"stop":1676606701065,"duration":532}},{"uid":"b68557e5c1e1b566","reportUrl":"https://nova-wallet.github.io/test-runner/2474//#testresult/b68557e5c1e1b566","status":"passed","time":{"start":1676592975122,"stop":1676592975851,"duration":729}},{"uid":"2ed0a154be2c3b18","reportUrl":"https://nova-wallet.github.io/test-runner/2473//#testresult/2ed0a154be2c3b18","status":"passed","time":{"start":1676577893875,"stop":1676577894771,"duration":896}},{"uid":"c93ceb4acbae6ba9","reportUrl":"https://nova-wallet.github.io/test-runner/2472//#testresult/c93ceb4acbae6ba9","status":"passed","time":{"start":1676563510210,"stop":1676563514325,"duration":4115}},{"uid":"8608a0a36ad32ef4","reportUrl":"https://nova-wallet.github.io/test-runner/2471//#testresult/8608a0a36ad32ef4","status":"passed","time":{"start":1676549171693,"stop":1676549172473,"duration":780}},{"uid":"5d882a1ade5b4b8d","reportUrl":"https://nova-wallet.github.io/test-runner/2469//#testresult/5d882a1ade5b4b8d","status":"passed","time":{"start":1676520280490,"stop":1676520281789,"duration":1299}},{"uid":"81805983ead85e63","reportUrl":"https://nova-wallet.github.io/test-runner/2468//#testresult/81805983ead85e63","status":"passed","time":{"start":1676506527054,"stop":1676506528451,"duration":1397}},{"uid":"2ff585113b249392","reportUrl":"https://nova-wallet.github.io/test-runner/2467//#testresult/2ff585113b249392","status":"passed","time":{"start":1676491498133,"stop":1676491498839,"duration":706}},{"uid":"db231290270362e","reportUrl":"https://nova-wallet.github.io/test-runner/2466//#testresult/db231290270362e","status":"passed","time":{"start":1676477114592,"stop":1676477115353,"duration":761}},{"uid":"d27e98d730bed5e1","reportUrl":"https://nova-wallet.github.io/test-runner/2465//#testresult/d27e98d730bed5e1","status":"passed","time":{"start":1676462786195,"stop":1676462787371,"duration":1176}}]},"tags":[]},"source":"9e7c598bc253944f.json","parameterValues":["{'url': 'wss://rpc.xx.network', 'name': 'XX network'}"]}