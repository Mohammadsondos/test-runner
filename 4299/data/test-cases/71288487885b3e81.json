{"uid":"71288487885b3e81","name":"test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6b2d505052053a5da93000b537edc6f1","time":{"start":1702253402889,"stop":1702253402889,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n        connection = create_connection_by_url(data[\"url\"])\n>       get_properties(connection)\n\ntests/conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:667: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:571: in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f1ae3c2e710>\nmethod = 'state_getRuntimeVersion'\nparams = ['0x9930bf606c403dac4a3e798b1d2487ad08ffa79fe28b5a7fb78fe8b7aa7fcdd1']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1702253402890,"stop":1702253403267,"duration":377},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 24, in connection_by_url\n    get_properties(connection)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 667, in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 571, in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az883-466"},{"name":"thread","value":"2139-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5b5abac486620ec1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702253387402,"stop":1702253387402,"duration":0}},{"uid":"8df06b3aa733e2fb","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702253371898,"stop":1702253371898,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":67,"skipped":0,"passed":537,"unknown":0,"total":604},"items":[{"uid":"8589303848face1f","reportUrl":"https://novasamatech.github.io/test-runner/4298//#testresult/8589303848face1f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702238986814,"stop":1702238986814,"duration":0}},{"uid":"2cf968e45dc19203","reportUrl":"https://novasamatech.github.io/test-runner/4297//#testresult/2cf968e45dc19203","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702224384002,"stop":1702224384002,"duration":0}},{"uid":"bebab7575b31c680","reportUrl":"https://novasamatech.github.io/test-runner/4296//#testresult/bebab7575b31c680","status":"passed","time":{"start":1702210198089,"stop":1702210198089,"duration":0}},{"uid":"4e4fc9115039e04a","reportUrl":"https://novasamatech.github.io/test-runner/4295//#testresult/4e4fc9115039e04a","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702195584072,"stop":1702195584072,"duration":0}},{"uid":"c0b96045c0731a22","reportUrl":"https://novasamatech.github.io/test-runner/4294//#testresult/c0b96045c0731a22","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702181333556,"stop":1702181333556,"duration":0}},{"uid":"4cb60ece5745b0c1","reportUrl":"https://novasamatech.github.io/test-runner/4293//#testresult/4cb60ece5745b0c1","status":"passed","time":{"start":1702166992400,"stop":1702166992400,"duration":0}},{"uid":"2ab09079808c9751","reportUrl":"https://novasamatech.github.io/test-runner/4292//#testresult/2ab09079808c9751","status":"passed","time":{"start":1702152332710,"stop":1702152332711,"duration":1}},{"uid":"b7cb5512150532b2","reportUrl":"https://novasamatech.github.io/test-runner/4291//#testresult/b7cb5512150532b2","status":"passed","time":{"start":1702138210264,"stop":1702138210264,"duration":0}},{"uid":"9055e67565cc7ac9","reportUrl":"https://novasamatech.github.io/test-runner/4290//#testresult/9055e67565cc7ac9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702123810420,"stop":1702123810420,"duration":0}},{"uid":"34065c09371447b9","reportUrl":"https://novasamatech.github.io/test-runner/4289//#testresult/34065c09371447b9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702109163842,"stop":1702109163842,"duration":0}},{"uid":"51365140a678053c","reportUrl":"https://novasamatech.github.io/test-runner/4288//#testresult/51365140a678053c","status":"passed","time":{"start":1702094746149,"stop":1702094746149,"duration":0}},{"uid":"3defb65ea047d3b","reportUrl":"https://novasamatech.github.io/test-runner/4287//#testresult/3defb65ea047d3b","status":"passed","time":{"start":1702080627144,"stop":1702080627145,"duration":1}},{"uid":"6ac8e0905fecaf31","reportUrl":"https://novasamatech.github.io/test-runner/4286//#testresult/6ac8e0905fecaf31","status":"passed","time":{"start":1702065919641,"stop":1702065919641,"duration":0}},{"uid":"330ac9c783a79ba4","reportUrl":"https://novasamatech.github.io/test-runner/4285//#testresult/330ac9c783a79ba4","status":"passed","time":{"start":1702051770670,"stop":1702051770670,"duration":0}},{"uid":"b8c27ce7ef9204ae","reportUrl":"https://novasamatech.github.io/test-runner/4284//#testresult/b8c27ce7ef9204ae","status":"passed","time":{"start":1702038985173,"stop":1702038985173,"duration":0}},{"uid":"6c3a3b4f2c682300","reportUrl":"https://novasamatech.github.io/test-runner/4272//#testresult/6c3a3b4f2c682300","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701864347898,"stop":1701864347898,"duration":0}},{"uid":"94c5cdcc74206a13","reportUrl":"https://novasamatech.github.io/test-runner/4271//#testresult/94c5cdcc74206a13","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701850166863,"stop":1701850166863,"duration":0}},{"uid":"a44bdeac1b120eae","reportUrl":"https://novasamatech.github.io/test-runner/4270//#testresult/a44bdeac1b120eae","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701835518227,"stop":1701835518227,"duration":0}},{"uid":"14770717489a2030","reportUrl":"https://novasamatech.github.io/test-runner/4269//#testresult/14770717489a2030","status":"passed","time":{"start":1701821199366,"stop":1701821199366,"duration":0}},{"uid":"fe912e5346f8e073","reportUrl":"https://novasamatech.github.io/test-runner/4268//#testresult/fe912e5346f8e073","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701806753923,"stop":1701806753923,"duration":0}}]},"tags":[]},"source":"71288487885b3e81.json","parameterValues":["{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"]}