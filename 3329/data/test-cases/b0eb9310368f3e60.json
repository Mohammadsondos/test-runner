{"uid":"b0eb9310368f3e60","name":"test_can_create_connection[Test for QUARTZ, url: wss://eu-ws-quartz.unique.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a42ebcba1547e3b3e9bb87937a989684","time":{"start":1688516212841,"stop":1688516213158,"duration":317},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Wed, 05 Jul 2023 00:16:53 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e1b6bfa6ce66fec-IAD'} -+-+- None","statusTrace":"data = {'name': 'QUARTZ', 'url': 'wss://eu-ws-quartz.unique.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Wed, 05 Jul 2023 00:16:53 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e1b6bfa6ce66fec-IAD'} -+-+- None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Wed, 05 Jul 2023 00:16:53 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e1b6bfa6ce66fec-IAD'} -+-+- None","statusTrace":"data = {'name': 'QUARTZ', 'url': 'wss://eu-ws-quartz.unique.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Wed, 05 Jul 2023 00:16:53 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e1b6bfa6ce66fec-IAD'} -+-+- None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"2be67f5a70ee9799","name":"stdout","source":"2be67f5a70ee9799.txt","type":"text/plain","size":1380}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az313-710"},{"name":"thread","value":"2052-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://eu-ws-quartz.unique.network', 'name': 'QUARTZ'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4f4f7d7eaae7387c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Wed, 05 Jul 2023 00:16:37 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e1b6b9a4bcb3b8c-IAD'} -+-+- None","time":{"start":1688516197461,"stop":1688516197762,"duration":301}},{"uid":"232fe964190df637","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Wed, 05 Jul 2023 00:16:22 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e1b6b3999880814-IAD'} -+-+- None","time":{"start":1688516181985,"stop":1688516182292,"duration":307}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":332,"unknown":0,"total":334},"items":[{"uid":"322e2821cb4f108e","reportUrl":"https://novasamatech.github.io/test-runner/3328//#testresult/322e2821cb4f108e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 04 Jul 2023 20:04:53 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e19fad71c5ae7bb-DFW'} -+-+- None","time":{"start":1688501092916,"stop":1688501093366,"duration":450}},{"uid":"6f8c6e1029333796","reportUrl":"https://novasamatech.github.io/test-runner/3327//#testresult/6f8c6e1029333796","status":"passed","time":{"start":1688486668562,"stop":1688486669219,"duration":657}},{"uid":"e0b31f9f23c837cc","reportUrl":"https://novasamatech.github.io/test-runner/3326//#testresult/e0b31f9f23c837cc","status":"passed","time":{"start":1688472342971,"stop":1688472343559,"duration":588}},{"uid":"ba59737e9ab6ac80","reportUrl":"https://novasamatech.github.io/test-runner/3325//#testresult/ba59737e9ab6ac80","status":"passed","time":{"start":1688457893417,"stop":1688457894240,"duration":823}},{"uid":"3174fd7f5d7d85c8","reportUrl":"https://novasamatech.github.io/test-runner/3324//#testresult/3174fd7f5d7d85c8","status":"passed","time":{"start":1688443457807,"stop":1688443458294,"duration":487}},{"uid":"3b15d2e8ff688f09","reportUrl":"https://novasamatech.github.io/test-runner/3323//#testresult/3b15d2e8ff688f09","status":"passed","time":{"start":1688429759495,"stop":1688429760097,"duration":602}},{"uid":"49ece5ceeccc9130","reportUrl":"https://novasamatech.github.io/test-runner/3322//#testresult/49ece5ceeccc9130","status":"passed","time":{"start":1688414657172,"stop":1688414657625,"duration":453}},{"uid":"73f60c3f1e9f3576","reportUrl":"https://novasamatech.github.io/test-runner/3321//#testresult/73f60c3f1e9f3576","status":"passed","time":{"start":1688400264297,"stop":1688400264908,"duration":611}},{"uid":"ece010b42fdb54b0","reportUrl":"https://novasamatech.github.io/test-runner/3320//#testresult/ece010b42fdb54b0","status":"passed","time":{"start":1688385938742,"stop":1688385939398,"duration":656}},{"uid":"e9b13c1e03e3ee22","reportUrl":"https://novasamatech.github.io/test-runner/3319//#testresult/e9b13c1e03e3ee22","status":"passed","time":{"start":1688371500165,"stop":1688371500773,"duration":608}},{"uid":"8b61c2459f4bda45","reportUrl":"https://novasamatech.github.io/test-runner/3318//#testresult/8b61c2459f4bda45","status":"passed","time":{"start":1688357055093,"stop":1688357055873,"duration":780}},{"uid":"a1b1271110abb8a6","reportUrl":"https://novasamatech.github.io/test-runner/3317//#testresult/a1b1271110abb8a6","status":"passed","time":{"start":1688343366402,"stop":1688343367032,"duration":630}},{"uid":"f6593193b7a60ac1","reportUrl":"https://novasamatech.github.io/test-runner/3316//#testresult/f6593193b7a60ac1","status":"passed","time":{"start":1688328252431,"stop":1688328253124,"duration":693}},{"uid":"bff051e66d082b33","reportUrl":"https://novasamatech.github.io/test-runner/3315//#testresult/bff051e66d082b33","status":"passed","time":{"start":1688313832283,"stop":1688313832926,"duration":643}},{"uid":"369f7dcb6b4ce70a","reportUrl":"https://novasamatech.github.io/test-runner/3314//#testresult/369f7dcb6b4ce70a","status":"passed","time":{"start":1688299489738,"stop":1688299490160,"duration":422}},{"uid":"5a67a7c986308df6","reportUrl":"https://novasamatech.github.io/test-runner/3313//#testresult/5a67a7c986308df6","status":"passed","time":{"start":1688297673691,"stop":1688297674144,"duration":453}},{"uid":"97e9d3f57a6b147f","reportUrl":"https://novasamatech.github.io/test-runner/3313//#testresult/97e9d3f57a6b147f","status":"passed","time":{"start":1688285045831,"stop":1688285046359,"duration":528}},{"uid":"572faae377408c81","reportUrl":"https://novasamatech.github.io/test-runner/3312//#testresult/572faae377408c81","status":"passed","time":{"start":1688270634026,"stop":1688270634712,"duration":686}},{"uid":"98820df75c5e15db","reportUrl":"https://novasamatech.github.io/test-runner/3311//#testresult/98820df75c5e15db","status":"passed","time":{"start":1688257021093,"stop":1688257021738,"duration":645}},{"uid":"d12b67f56e3d4f94","reportUrl":"https://novasamatech.github.io/test-runner/3310//#testresult/d12b67f56e3d4f94","status":"passed","time":{"start":1688241850138,"stop":1688241850564,"duration":426}}]},"tags":[]},"source":"b0eb9310368f3e60.json","parameterValues":["{'url': 'wss://eu-ws-quartz.unique.network', 'name': 'QUARTZ'}"]}