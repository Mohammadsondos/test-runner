{"uid":"cc33177f95d53305","name":"test_can_create_connection[Test for UNIQUE, url: wss://eu-ws.unique.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"dffcd16fc0c06d46b01b982dd8c86ed9","time":{"start":1699070512555,"stop":1699070513026,"duration":471},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Sat, 04 Nov 2023 04:01:53 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8209f54faf3b0ca3-LAX'} -+-+- None","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://eu-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Sat, 04 Nov 2023 04:01:53 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8209f54faf3b0ca3-LAX'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Sat, 04 Nov 2023 04:01:53 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8209f54faf3b0ca3-LAX'} -+-+- None","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://eu-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Sat, 04 Nov 2023 04:01:53 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8209f54faf3b0ca3-LAX'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"9e4f8afabe5e18e6","name":"stdout","source":"9e4f8afabe5e18e6.txt","type":"text/plain","size":1362}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az914-483"},{"name":"thread","value":"2205-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://eu-ws.unique.network/', 'name': 'UNIQUE'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5e5d5519302fc48","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Sat, 04 Nov 2023 04:01:37 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8209f4ee69a30ca3-LAX'} -+-+- None","time":{"start":1699070496989,"stop":1699070497486,"duration":497}},{"uid":"f3c25c2179421229","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Sat, 04 Nov 2023 04:01:21 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8209f48caeab524b-LAX'} -+-+- None","time":{"start":1699070481336,"stop":1699070481862,"duration":526}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":432,"unknown":0,"total":433},"items":[{"uid":"770a31b2f32d633","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/770a31b2f32d633","status":"passed","time":{"start":1699041689493,"stop":1699041690090,"duration":597}},{"uid":"d83389d44cce17b0","reportUrl":"https://novasamatech.github.io/test-runner/4072//#testresult/d83389d44cce17b0","status":"passed","time":{"start":1699056145227,"stop":1699056145643,"duration":416}},{"uid":"adfda7f014012827","reportUrl":"https://novasamatech.github.io/test-runner/4070//#testresult/adfda7f014012827","status":"passed","time":{"start":1699027340765,"stop":1699027341476,"duration":711}},{"uid":"df7ab88d2196c0f3","reportUrl":"https://novasamatech.github.io/test-runner/4069//#testresult/df7ab88d2196c0f3","status":"passed","time":{"start":1699012900797,"stop":1699012901247,"duration":450}},{"uid":"ffd5ea401e53b332","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/ffd5ea401e53b332","status":"passed","time":{"start":1698998520924,"stop":1698998521389,"duration":465}},{"uid":"a0cb8f25157a66e1","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/a0cb8f25157a66e1","status":"passed","time":{"start":1698984107588,"stop":1698984108010,"duration":422}},{"uid":"5f104a9a25919ede","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/5f104a9a25919ede","status":"passed","time":{"start":1698969745494,"stop":1698969745893,"duration":399}},{"uid":"5c82091868cccaa2","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/5c82091868cccaa2","status":"passed","time":{"start":1698955297781,"stop":1698955298432,"duration":651}},{"uid":"252060fe3d8684f1","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/252060fe3d8684f1","status":"passed","time":{"start":1698940899610,"stop":1698940900024,"duration":414}},{"uid":"c11d4101a9718418","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/c11d4101a9718418","status":"passed","time":{"start":1698926498459,"stop":1698926498881,"duration":422}},{"uid":"93b2d933b697c88","reportUrl":"https://novasamatech.github.io/test-runner/4062//#testresult/93b2d933b697c88","status":"passed","time":{"start":1698912095076,"stop":1698912095716,"duration":640}},{"uid":"1ad9edee27fe3b17","reportUrl":"https://novasamatech.github.io/test-runner/4061//#testresult/1ad9edee27fe3b17","status":"passed","time":{"start":1698897676617,"stop":1698897677061,"duration":444}},{"uid":"425d05dd37ff3302","reportUrl":"https://novasamatech.github.io/test-runner/4060//#testresult/425d05dd37ff3302","status":"passed","time":{"start":1698883344145,"stop":1698883344852,"duration":707}},{"uid":"439c3eac8832514f","reportUrl":"https://novasamatech.github.io/test-runner/4059//#testresult/439c3eac8832514f","status":"passed","time":{"start":1698868891353,"stop":1698868891930,"duration":577}},{"uid":"730a2970a435bbbc","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/730a2970a435bbbc","status":"passed","time":{"start":1698840106535,"stop":1698840106935,"duration":400}},{"uid":"32abeda2a56c5c64","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/32abeda2a56c5c64","status":"passed","time":{"start":1698854495846,"stop":1698854496581,"duration":735}},{"uid":"190f7251ea768e61","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/190f7251ea768e61","status":"passed","time":{"start":1698825691580,"stop":1698825692195,"duration":615}},{"uid":"6a92e962b635e081","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/6a92e962b635e081","status":"passed","time":{"start":1698811281769,"stop":1698811282249,"duration":480}},{"uid":"bf71481396f802a0","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/bf71481396f802a0","status":"passed","time":{"start":1698796939850,"stop":1698796940486,"duration":636}},{"uid":"4dfbe9bc40d2c43a","reportUrl":"https://novasamatech.github.io/test-runner/4053//#testresult/4dfbe9bc40d2c43a","status":"passed","time":{"start":1698782504569,"stop":1698782505236,"duration":667}}]},"tags":[]},"source":"cc33177f95d53305.json","parameterValues":["{'url': 'wss://eu-ws.unique.network/', 'name': 'UNIQUE'}"]}