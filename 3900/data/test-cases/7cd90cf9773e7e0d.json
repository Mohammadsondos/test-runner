{"uid":"7cd90cf9773e7e0d","name":"test_can_create_connection[Test for Kapex, url: wss://kapex-parachain.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"4d0ec98b022b8004b2ac65e5ee37df7e","time":{"start":1696593855901,"stop":1696593916332,"duration":60431},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Kapex', 'url': 'wss://kapex-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Kapex', 'url': 'wss://kapex-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"a13cdadacde5c714","name":"stdout","source":"a13cdadacde5c714.txt","type":"text/plain","size":631}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az673-239"},{"name":"thread","value":"2074-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kapex-parachain.api.onfinality.io/public-ws', 'name': 'Kapex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a56ac5af77a9335e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 12:04:00 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '20029', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696593820276,"stop":1696593840770,"duration":20494}},{"uid":"b9bb07ee9bdb38cf","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1696593744648,"stop":1696593805113,"duration":60465}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":132,"unknown":0,"total":140},"items":[{"uid":"f5a8d95fc574dfbc","reportUrl":"https://novasamatech.github.io/test-runner/3899//#testresult/f5a8d95fc574dfbc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 08:03:23 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '20032', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696579382826,"stop":1696579403263,"duration":20437}},{"uid":"e6ed3bcc461eaa47","reportUrl":"https://novasamatech.github.io/test-runner/3898//#testresult/e6ed3bcc461eaa47","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 04:03:41 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '20028', 'x-kong-proxy-latency': '0', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696565001679,"stop":1696565022013,"duration":20334}},{"uid":"7a8ed309c353eee9","reportUrl":"https://novasamatech.github.io/test-runner/3897//#testresult/7a8ed309c353eee9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 00:04:28 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '31294', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696550636481,"stop":1696550668075,"duration":31594}},{"uid":"89c77a2cd2c874c3","reportUrl":"https://novasamatech.github.io/test-runner/3896//#testresult/89c77a2cd2c874c3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Thu, 05 Oct 2023 20:03:17 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '20080', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696536176734,"stop":1696536197279,"duration":20545}},{"uid":"efb3b02871cac73a","reportUrl":"https://novasamatech.github.io/test-runner/3895//#testresult/efb3b02871cac73a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Thu, 05 Oct 2023 16:04:24 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '51744', 'x-kong-proxy-latency': '0', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696521812035,"stop":1696521864109,"duration":52074}},{"uid":"1c78f0652e424866","reportUrl":"https://novasamatech.github.io/test-runner/3894//#testresult/1c78f0652e424866","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Thu, 05 Oct 2023 12:05:16 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '22089', 'x-kong-proxy-latency': '60000', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696507433771,"stop":1696507516445,"duration":82674}},{"uid":"c5f52fe0efc305c7","reportUrl":"https://novasamatech.github.io/test-runner/3893//#testresult/c5f52fe0efc305c7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Thu, 05 Oct 2023 09:06:27 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '20027', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696496766778,"stop":1696496787125,"duration":20347}},{"uid":"1171e2f0db174e4b","reportUrl":"https://novasamatech.github.io/test-runner/3892//#testresult/1171e2f0db174e4b","status":"passed","time":{"start":1696492967548,"stop":1696492967992,"duration":444}},{"uid":"7c69ec4ddb121dc7","reportUrl":"https://novasamatech.github.io/test-runner/3891//#testresult/7c69ec4ddb121dc7","status":"passed","time":{"start":1696478509132,"stop":1696478509595,"duration":463}},{"uid":"4e9c5a614631055e","reportUrl":"https://novasamatech.github.io/test-runner/3890//#testresult/4e9c5a614631055e","status":"passed","time":{"start":1696464183457,"stop":1696464184182,"duration":725}},{"uid":"c49eb449bc919c5b","reportUrl":"https://novasamatech.github.io/test-runner/3889//#testresult/c49eb449bc919c5b","status":"passed","time":{"start":1696449757946,"stop":1696449758350,"duration":404}},{"uid":"a2455866db77cd5b","reportUrl":"https://novasamatech.github.io/test-runner/3888//#testresult/a2455866db77cd5b","status":"passed","time":{"start":1696435348289,"stop":1696435348682,"duration":393}},{"uid":"1634363f4d6072e1","reportUrl":"https://novasamatech.github.io/test-runner/3887//#testresult/1634363f4d6072e1","status":"passed","time":{"start":1696420945946,"stop":1696420946616,"duration":670}},{"uid":"8598a7a83786f572","reportUrl":"https://novasamatech.github.io/test-runner/3886//#testresult/8598a7a83786f572","status":"passed","time":{"start":1696406579123,"stop":1696406579787,"duration":664}},{"uid":"fc350568d8474732","reportUrl":"https://novasamatech.github.io/test-runner/3885//#testresult/fc350568d8474732","status":"passed","time":{"start":1696392103640,"stop":1696392104074,"duration":434}},{"uid":"5ae6f870a8db2733","reportUrl":"https://novasamatech.github.io/test-runner/3884//#testresult/5ae6f870a8db2733","status":"passed","time":{"start":1696377739510,"stop":1696377739936,"duration":426}},{"uid":"117f0a056bad9f85","reportUrl":"https://novasamatech.github.io/test-runner/3883//#testresult/117f0a056bad9f85","status":"passed","time":{"start":1696363317729,"stop":1696363318312,"duration":583}},{"uid":"ecc0c96b63f7c5b2","reportUrl":"https://novasamatech.github.io/test-runner/3882//#testresult/ecc0c96b63f7c5b2","status":"passed","time":{"start":1696348931799,"stop":1696348932202,"duration":403}},{"uid":"8da6aef9b79fa41c","reportUrl":"https://novasamatech.github.io/test-runner/3881//#testresult/8da6aef9b79fa41c","status":"passed","time":{"start":1696334588091,"stop":1696334588757,"duration":666}},{"uid":"b49e131004c636b1","reportUrl":"https://novasamatech.github.io/test-runner/3880//#testresult/b49e131004c636b1","status":"passed","time":{"start":1696320108666,"stop":1696320109142,"duration":476}}]},"tags":[]},"source":"7cd90cf9773e7e0d.json","parameterValues":["{'url': 'wss://kapex-parachain.api.onfinality.io/public-ws', 'name': 'Kapex'}"]}