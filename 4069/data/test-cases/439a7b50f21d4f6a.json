{"uid":"439a7b50f21d4f6a","name":"test_can_create_connection[Test for Kylin, url: wss://polkadot.kylin-node.co.uk]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3ee0d191ab7acb2fad9a82a3aa808e89","time":{"start":1699012930098,"stop":1699012930168,"duration":70},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 03 Nov 2023 12:02:10 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 03 Nov 2023 12:02:10 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 03 Nov 2023 12:02:10 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 03 Nov 2023 12:02:10 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"bfcc45a49f76a3b5","name":"stdout","source":"bfcc45a49f76a3b5.txt","type":"text/plain","size":1500}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1543-140"},{"name":"thread","value":"2189-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2d50b279d4d96b8c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 03 Nov 2023 12:01:54 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699012914942,"stop":1699012914995,"duration":53}},{"uid":"6f28b45f06c952b8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 03 Nov 2023 12:01:39 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699012899781,"stop":1699012899871,"duration":90}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":38,"skipped":0,"passed":391,"unknown":0,"total":429},"items":[{"uid":"7d9e45d8f9215a1","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/7d9e45d8f9215a1","status":"passed","time":{"start":1698998521940,"stop":1698998522036,"duration":96}},{"uid":"9df0acb99a373f30","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/9df0acb99a373f30","status":"passed","time":{"start":1698984112668,"stop":1698984112780,"duration":112}},{"uid":"5f845523df6e03f9","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/5f845523df6e03f9","status":"passed","time":{"start":1698969748096,"stop":1698969748160,"duration":64}},{"uid":"bc83d81db7e6f338","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/bc83d81db7e6f338","status":"passed","time":{"start":1698955304376,"stop":1698955304720,"duration":344}},{"uid":"e127467a68bea243","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/e127467a68bea243","status":"passed","time":{"start":1698940900248,"stop":1698940900359,"duration":111}},{"uid":"b67de30a5981eee6","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/b67de30a5981eee6","status":"passed","time":{"start":1698926516747,"stop":1698926516807,"duration":60}},{"uid":"7024d48865d9773f","reportUrl":"https://novasamatech.github.io/test-runner/4062//#testresult/7024d48865d9773f","status":"passed","time":{"start":1698912099090,"stop":1698912099465,"duration":375}},{"uid":"d0fc73ffced13d04","reportUrl":"https://novasamatech.github.io/test-runner/4061//#testresult/d0fc73ffced13d04","status":"passed","time":{"start":1698897677671,"stop":1698897677791,"duration":120}},{"uid":"347b77cf9f8a3c69","reportUrl":"https://novasamatech.github.io/test-runner/4060//#testresult/347b77cf9f8a3c69","status":"passed","time":{"start":1698883348037,"stop":1698883348626,"duration":589}},{"uid":"110df7eb396ddb27","reportUrl":"https://novasamatech.github.io/test-runner/4059//#testresult/110df7eb396ddb27","status":"passed","time":{"start":1698868894742,"stop":1698868894993,"duration":251}},{"uid":"48a79aee3172b934","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/48a79aee3172b934","status":"passed","time":{"start":1698840108422,"stop":1698840108565,"duration":143}},{"uid":"6994f9acd50bdf39","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/6994f9acd50bdf39","status":"passed","time":{"start":1698854514541,"stop":1698854514949,"duration":408}},{"uid":"395efd5bb2090e5","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/395efd5bb2090e5","status":"passed","time":{"start":1698825695686,"stop":1698825695952,"duration":266}},{"uid":"21b742d7a281d268","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/21b742d7a281d268","status":"passed","time":{"start":1698811284715,"stop":1698811284879,"duration":164}},{"uid":"124fd93271f5f287","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/124fd93271f5f287","status":"passed","time":{"start":1698796942961,"stop":1698796943209,"duration":248}},{"uid":"f86d03b10bad81ca","reportUrl":"https://novasamatech.github.io/test-runner/4053//#testresult/f86d03b10bad81ca","status":"passed","time":{"start":1698782509164,"stop":1698782509560,"duration":396}},{"uid":"a4854b0e2671e500","reportUrl":"https://novasamatech.github.io/test-runner/4052//#testresult/a4854b0e2671e500","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Tue, 31 Oct 2023 16:02:32 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698768151922,"stop":1698768152120,"duration":198}},{"uid":"3e921cd50ad5c556","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/3e921cd50ad5c556","status":"passed","time":{"start":1698753714168,"stop":1698753714504,"duration":336}},{"uid":"7f0f83d4570755e7","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/7f0f83d4570755e7","status":"passed","time":{"start":1698739309613,"stop":1698739309949,"duration":336}},{"uid":"93b5442a3676e0d3","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/93b5442a3676e0d3","status":"passed","time":{"start":1698724903179,"stop":1698724903330,"duration":151}}]},"tags":[]},"source":"439a7b50f21d4f6a.json","parameterValues":["{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"]}