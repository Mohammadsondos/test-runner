{"uid":"2894a29f042054d8","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1699012930391,"stop":1699012930673,"duration":282},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 03 Nov 2023 12:02:10 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 03 Nov 2023 12:02:10 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 03 Nov 2023 12:02:10 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 03 Nov 2023 12:02:10 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"17444787325685aa","name":"stdout","source":"17444787325685aa.txt","type":"text/plain","size":1464}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1543-140"},{"name":"thread","value":"2186-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c0850d5511308d3e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 03 Nov 2023 12:01:55 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699012915000,"stop":1699012915284,"duration":284}},{"uid":"5514aa0d24a35fb4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 03 Nov 2023 12:01:39 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699012899471,"stop":1699012899873,"duration":402}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":51,"skipped":0,"passed":378,"unknown":0,"total":429},"items":[{"uid":"9dafc5c4a96f7750","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/9dafc5c4a96f7750","status":"passed","time":{"start":1698998522935,"stop":1698998523410,"duration":475}},{"uid":"cdd1d3b5d861fbdb","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/cdd1d3b5d861fbdb","status":"passed","time":{"start":1698984113735,"stop":1698984114108,"duration":373}},{"uid":"c8bb63d60d05636b","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/c8bb63d60d05636b","status":"passed","time":{"start":1698969747658,"stop":1698969748151,"duration":493}},{"uid":"9fa650a954bdf5eb","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/9fa650a954bdf5eb","status":"passed","time":{"start":1698955304751,"stop":1698955305338,"duration":587}},{"uid":"6866b768e78d8cf0","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/6866b768e78d8cf0","status":"passed","time":{"start":1698940901390,"stop":1698940901882,"duration":492}},{"uid":"44f08484ebf254ad","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/44f08484ebf254ad","status":"passed","time":{"start":1698926517715,"stop":1698926518093,"duration":378}},{"uid":"20ad501e54f4fda2","reportUrl":"https://novasamatech.github.io/test-runner/4062//#testresult/20ad501e54f4fda2","status":"passed","time":{"start":1698912098594,"stop":1698912099195,"duration":601}},{"uid":"41f9ab63b5d442e8","reportUrl":"https://novasamatech.github.io/test-runner/4061//#testresult/41f9ab63b5d442e8","status":"passed","time":{"start":1698897678671,"stop":1698897679042,"duration":371}},{"uid":"abe19b68913eb0b3","reportUrl":"https://novasamatech.github.io/test-runner/4060//#testresult/abe19b68913eb0b3","status":"passed","time":{"start":1698883347880,"stop":1698883348543,"duration":663}},{"uid":"bfb2a5702360f825","reportUrl":"https://novasamatech.github.io/test-runner/4059//#testresult/bfb2a5702360f825","status":"passed","time":{"start":1698868896030,"stop":1698868896592,"duration":562}},{"uid":"ebc872a3c3d4626e","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/ebc872a3c3d4626e","status":"passed","time":{"start":1698840108478,"stop":1698840109028,"duration":550}},{"uid":"ed746c7e57b6246a","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/ed746c7e57b6246a","status":"passed","time":{"start":1698854515411,"stop":1698854516059,"duration":648}},{"uid":"3497e0977820cc86","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/3497e0977820cc86","status":"passed","time":{"start":1698825696928,"stop":1698825697589,"duration":661}},{"uid":"9ce490eff9877692","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/9ce490eff9877692","status":"passed","time":{"start":1698811283940,"stop":1698811284585,"duration":645}},{"uid":"392504037fd86ead","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/392504037fd86ead","status":"passed","time":{"start":1698796943010,"stop":1698796943590,"duration":580}},{"uid":"c8bc4ffc94cbeba6","reportUrl":"https://novasamatech.github.io/test-runner/4053//#testresult/c8bc4ffc94cbeba6","status":"passed","time":{"start":1698782508437,"stop":1698782509240,"duration":803}},{"uid":"2a9f679ab2ae7f27","reportUrl":"https://novasamatech.github.io/test-runner/4052//#testresult/2a9f679ab2ae7f27","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 31 Oct 2023 16:03:04 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698768184088,"stop":1698768184461,"duration":373}},{"uid":"a597415b2b8854eb","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/a597415b2b8854eb","status":"passed","time":{"start":1698753715003,"stop":1698753715610,"duration":607}},{"uid":"dc68d5691837e883","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/dc68d5691837e883","status":"passed","time":{"start":1698739309829,"stop":1698739310402,"duration":573}},{"uid":"a31536c385c22425","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/a31536c385c22425","status":"passed","time":{"start":1698724903615,"stop":1698724904030,"duration":415}}]},"tags":[]},"source":"2894a29f042054d8.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}