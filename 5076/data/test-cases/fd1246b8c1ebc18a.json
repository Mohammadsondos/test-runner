{"uid":"fd1246b8c1ebc18a","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1713283278445,"stop":1713283278606,"duration":161},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f227b5fd780>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f227937bc10>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f2279379750>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1380-199"},{"name":"thread","value":"2079-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c8e7d5d3712a9c67","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713283273264,"stop":1713283273409,"duration":145}},{"uid":"e2a576ab84dab738","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.1}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1713283267772,"stop":1713283268163,"duration":391}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":57,"skipped":0,"passed":1092,"unknown":0,"total":1151},"items":[{"uid":"d9dff6dd16992a44","reportUrl":"https://novasamatech.github.io/test-runner/5075//#testresult/d9dff6dd16992a44","status":"passed","time":{"start":1713268867170,"stop":1713268867372,"duration":202}},{"uid":"45a7113ded9b1aa4","reportUrl":"https://novasamatech.github.io/test-runner/5074//#testresult/45a7113ded9b1aa4","status":"passed","time":{"start":1713254462869,"stop":1713254463481,"duration":612}},{"uid":"d7e0ea1745e7470a","reportUrl":"https://novasamatech.github.io/test-runner/5073//#testresult/d7e0ea1745e7470a","status":"passed","time":{"start":1713240057389,"stop":1713240057802,"duration":413}},{"uid":"8d29c5ca8db480aa","reportUrl":"https://novasamatech.github.io/test-runner/5072//#testresult/8d29c5ca8db480aa","status":"passed","time":{"start":1713225694288,"stop":1713225694987,"duration":699}},{"uid":"a275e1862410cb0","reportUrl":"https://novasamatech.github.io/test-runner/5071//#testresult/a275e1862410cb0","status":"passed","time":{"start":1713211266662,"stop":1713211266891,"duration":229}},{"uid":"5115ca4f98c2550e","reportUrl":"https://novasamatech.github.io/test-runner/5070//#testresult/5115ca4f98c2550e","status":"passed","time":{"start":1713196870950,"stop":1713196871562,"duration":612}},{"uid":"731f4db15475b6ff","reportUrl":"https://novasamatech.github.io/test-runner/5069//#testresult/731f4db15475b6ff","status":"passed","time":{"start":1713182470625,"stop":1713182471002,"duration":377}},{"uid":"939d6e3eeace05ac","reportUrl":"https://novasamatech.github.io/test-runner/5068//#testresult/939d6e3eeace05ac","status":"passed","time":{"start":1713168062622,"stop":1713168063608,"duration":986}},{"uid":"541e94ab925f6ae4","reportUrl":"https://novasamatech.github.io/test-runner/5067//#testresult/541e94ab925f6ae4","status":"passed","time":{"start":1713154579876,"stop":1713154580050,"duration":174}},{"uid":"12218712a3a2ce05","reportUrl":"https://novasamatech.github.io/test-runner/5066//#testresult/12218712a3a2ce05","status":"passed","time":{"start":1713140208360,"stop":1713140208520,"duration":160}},{"uid":"e1559005013adc13","reportUrl":"https://novasamatech.github.io/test-runner/5065//#testresult/e1559005013adc13","status":"passed","time":{"start":1713132502285,"stop":1713132502483,"duration":198}},{"uid":"11aa646614e5bfb4","reportUrl":"https://novasamatech.github.io/test-runner/5064//#testresult/11aa646614e5bfb4","status":"passed","time":{"start":1713115163624,"stop":1713115163992,"duration":368}},{"uid":"d0909cd9e9e4ef3a","reportUrl":"https://novasamatech.github.io/test-runner/5063//#testresult/d0909cd9e9e4ef3a","status":"passed","time":{"start":1713103496873,"stop":1713103497039,"duration":166}},{"uid":"76b4ecfb535ce388","reportUrl":"https://novasamatech.github.io/test-runner/5062//#testresult/76b4ecfb535ce388","status":"passed","time":{"start":1713082631578,"stop":1713082631981,"duration":403}},{"uid":"ba5e06531a08c37","reportUrl":"https://novasamatech.github.io/test-runner/5061//#testresult/ba5e06531a08c37","status":"passed","time":{"start":1713067451081,"stop":1713067451486,"duration":405}},{"uid":"e17b1cba431072b","reportUrl":"https://novasamatech.github.io/test-runner/5060//#testresult/e17b1cba431072b","status":"passed","time":{"start":1713053045940,"stop":1713053046196,"duration":256}},{"uid":"37afdb847e532a77","reportUrl":"https://novasamatech.github.io/test-runner/5059//#testresult/37afdb847e532a77","status":"passed","time":{"start":1713038460128,"stop":1713038460471,"duration":343}},{"uid":"f2d6bb5aef7fccd0","reportUrl":"https://novasamatech.github.io/test-runner/5058//#testresult/f2d6bb5aef7fccd0","status":"passed","time":{"start":1713024062459,"stop":1713024063019,"duration":560}},{"uid":"c2edacd68d632491","reportUrl":"https://novasamatech.github.io/test-runner/5057//#testresult/c2edacd68d632491","status":"passed","time":{"start":1713009663145,"stop":1713009663876,"duration":731}},{"uid":"6583cbf1db82301a","reportUrl":"https://novasamatech.github.io/test-runner/5056//#testresult/6583cbf1db82301a","status":"passed","time":{"start":1712995266273,"stop":1712995267080,"duration":807}}]},"tags":[]},"source":"fd1246b8c1ebc18a.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}