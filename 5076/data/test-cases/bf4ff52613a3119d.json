{"uid":"bf4ff52613a3119d","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1713283278724,"stop":1713283278867,"duration":143},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f091c349630>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f091c0befb0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f091c0bfb20>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1380-199"},{"name":"thread","value":"2082-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ae0c43c0d0cee63","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713283273504,"stop":1713283273690,"duration":186}},{"uid":"90fdd063ad89e4cd","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713283268201,"stop":1713283268392,"duration":191}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":51,"skipped":0,"passed":1097,"unknown":0,"total":1151},"items":[{"uid":"c182d0bbab5c377a","reportUrl":"https://novasamatech.github.io/test-runner/5075//#testresult/c182d0bbab5c377a","status":"passed","time":{"start":1713268866959,"stop":1713268867167,"duration":208}},{"uid":"a192c0eba67d32ba","reportUrl":"https://novasamatech.github.io/test-runner/5074//#testresult/a192c0eba67d32ba","status":"passed","time":{"start":1713254462739,"stop":1713254463316,"duration":577}},{"uid":"1978cb723c723130","reportUrl":"https://novasamatech.github.io/test-runner/5073//#testresult/1978cb723c723130","status":"passed","time":{"start":1713240067220,"stop":1713240067434,"duration":214}},{"uid":"e1eec70afb2f8f1d","reportUrl":"https://novasamatech.github.io/test-runner/5072//#testresult/e1eec70afb2f8f1d","status":"passed","time":{"start":1713225692642,"stop":1713225693286,"duration":644}},{"uid":"c6ea16798178b9cc","reportUrl":"https://novasamatech.github.io/test-runner/5071//#testresult/c6ea16798178b9cc","status":"passed","time":{"start":1713211266733,"stop":1713211267028,"duration":295}},{"uid":"a0c5349e08b9c2c2","reportUrl":"https://novasamatech.github.io/test-runner/5070//#testresult/a0c5349e08b9c2c2","status":"passed","time":{"start":1713196870151,"stop":1713196870742,"duration":591}},{"uid":"73d47faa0e3192db","reportUrl":"https://novasamatech.github.io/test-runner/5069//#testresult/73d47faa0e3192db","status":"passed","time":{"start":1713182471387,"stop":1713182471781,"duration":394}},{"uid":"8a4435b889e51021","reportUrl":"https://novasamatech.github.io/test-runner/5068//#testresult/8a4435b889e51021","status":"passed","time":{"start":1713168062618,"stop":1713168063175,"duration":557}},{"uid":"2fd5d01a0a9a240e","reportUrl":"https://novasamatech.github.io/test-runner/5067//#testresult/2fd5d01a0a9a240e","status":"passed","time":{"start":1713154581211,"stop":1713154581389,"duration":178}},{"uid":"638a8477fe4011cb","reportUrl":"https://novasamatech.github.io/test-runner/5066//#testresult/638a8477fe4011cb","status":"passed","time":{"start":1713140208142,"stop":1713140208288,"duration":146}},{"uid":"1fef38d3ccebb8f6","reportUrl":"https://novasamatech.github.io/test-runner/5065//#testresult/1fef38d3ccebb8f6","status":"passed","time":{"start":1713132503379,"stop":1713132503664,"duration":285}},{"uid":"46aea4edf3ed6262","reportUrl":"https://novasamatech.github.io/test-runner/5064//#testresult/46aea4edf3ed6262","status":"passed","time":{"start":1713115163598,"stop":1713115163977,"duration":379}},{"uid":"2b1cec3fc20288e5","reportUrl":"https://novasamatech.github.io/test-runner/5063//#testresult/2b1cec3fc20288e5","status":"passed","time":{"start":1713103496651,"stop":1713103496864,"duration":213}},{"uid":"d825fef0b20dbfe7","reportUrl":"https://novasamatech.github.io/test-runner/5062//#testresult/d825fef0b20dbfe7","status":"passed","time":{"start":1713082631510,"stop":1713082631610,"duration":100}},{"uid":"a1fe869ceda8b0f9","reportUrl":"https://novasamatech.github.io/test-runner/5061//#testresult/a1fe869ceda8b0f9","status":"passed","time":{"start":1713067452146,"stop":1713067452581,"duration":435}},{"uid":"34dd3d67bc01fc2f","reportUrl":"https://novasamatech.github.io/test-runner/5060//#testresult/34dd3d67bc01fc2f","status":"passed","time":{"start":1713053045231,"stop":1713053045513,"duration":282}},{"uid":"e0f5b4efa33809c7","reportUrl":"https://novasamatech.github.io/test-runner/5059//#testresult/e0f5b4efa33809c7","status":"passed","time":{"start":1713038461836,"stop":1713038462156,"duration":320}},{"uid":"161cbb2124f3e83","reportUrl":"https://novasamatech.github.io/test-runner/5058//#testresult/161cbb2124f3e83","status":"passed","time":{"start":1713024062343,"stop":1713024062543,"duration":200}},{"uid":"a48d21fdeca3d208","reportUrl":"https://novasamatech.github.io/test-runner/5057//#testresult/a48d21fdeca3d208","status":"passed","time":{"start":1713009664255,"stop":1713009664877,"duration":622}},{"uid":"f5a01c2e8f08d539","reportUrl":"https://novasamatech.github.io/test-runner/5056//#testresult/f5a01c2e8f08d539","status":"passed","time":{"start":1712995266207,"stop":1712995266744,"duration":537}}]},"tags":[]},"source":"bf4ff52613a3119d.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}