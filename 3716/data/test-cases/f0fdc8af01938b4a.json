{"uid":"f0fdc8af01938b4a","name":"test_address_prefix[Test for Acala]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"dfa1b9d6c2975e1a61d31d78750331a3","time":{"start":1693972931633,"stop":1693972936185,"duration":4552},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f0b17a38670>\nchain = <scripts.utils.chain_model.Chain object at 0x7f0b17977bb0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f0b0a9a7250>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x6d30d0776619d4d18583c9d6cef5f616b3c153efe83b56b0f97d8c79f067edb6']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f0b17a38670>\nchain = <scripts.utils.chain_model.Chain object at 0x7f0b17977bb0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f0b0a9a7250>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x6d30d0776619d4d18583c9d6cef5f616b3c153efe83b56b0f97d8c79f067edb6']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"8f5f168b4946c7c6","name":"stdout","source":"8f5f168b4946c7c6.txt","type":"text/plain","size":666}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az365-36"},{"name":"thread","value":"2097-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f0b17977bb0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6e0a43d412ce8761","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693972911634,"stop":1693972916493,"duration":4859}},{"uid":"91f65f8229610c49","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693972891829,"stop":1693972896422,"duration":4593}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":75,"unknown":0,"total":77},"items":[{"uid":"72438683ae583c50","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/72438683ae583c50","status":"passed","time":{"start":1693958546186,"stop":1693958555127,"duration":8941}},{"uid":"6b44509373e2944c","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/6b44509373e2944c","status":"passed","time":{"start":1693944092282,"stop":1693944100283,"duration":8001}},{"uid":"b95fdd506223189f","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/b95fdd506223189f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693929734044,"stop":1693929738784,"duration":4740}},{"uid":"5300bde4756f17f6","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/5300bde4756f17f6","status":"passed","time":{"start":1693915312041,"stop":1693915322545,"duration":10504}},{"uid":"4963ed274d8676af","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/4963ed274d8676af","status":"passed","time":{"start":1693900896798,"stop":1693900905045,"duration":8247}},{"uid":"e78b606a96a433f7","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/e78b606a96a433f7","status":"passed","time":{"start":1693872147096,"stop":1693872152034,"duration":4938}},{"uid":"ff971fa50bc4c396","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/ff971fa50bc4c396","status":"passed","time":{"start":1693857698567,"stop":1693857703669,"duration":5102}},{"uid":"97b85ba082ede195","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/97b85ba082ede195","status":"passed","time":{"start":1693843293597,"stop":1693843297254,"duration":3657}},{"uid":"daf730106ec70f1d","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/daf730106ec70f1d","status":"passed","time":{"start":1693828906469,"stop":1693828912591,"duration":6122}},{"uid":"cb20cfa7e20966f8","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/cb20cfa7e20966f8","status":"passed","time":{"start":1693814510434,"stop":1693814516234,"duration":5800}},{"uid":"9eb50858ae191276","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/9eb50858ae191276","status":"passed","time":{"start":1693800087895,"stop":1693800091703,"duration":3808}},{"uid":"e977b89c73406a01","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/e977b89c73406a01","status":"passed","time":{"start":1693785754914,"stop":1693785760357,"duration":5443}},{"uid":"81c0579203af0e8e","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/81c0579203af0e8e","status":"passed","time":{"start":1693771306848,"stop":1693771313513,"duration":6665}},{"uid":"9ed9df93316a16bf","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/9ed9df93316a16bf","status":"passed","time":{"start":1693756897159,"stop":1693756901689,"duration":4530}},{"uid":"7e6d257831b9be1e","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/7e6d257831b9be1e","status":"passed","time":{"start":1693742498303,"stop":1693742502771,"duration":4468}},{"uid":"ed887c5cca2a42f7","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/ed887c5cca2a42f7","status":"passed","time":{"start":1693728107623,"stop":1693728114276,"duration":6653}},{"uid":"355c35f9144a282f","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/355c35f9144a282f","status":"passed","time":{"start":1693713699788,"stop":1693713705112,"duration":5324}},{"uid":"5c5f7a8ceb134276","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/5c5f7a8ceb134276","status":"passed","time":{"start":1693699336030,"stop":1693699339763,"duration":3733}},{"uid":"7dbb67402dd1888c","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/7dbb67402dd1888c","status":"passed","time":{"start":1693684902406,"stop":1693684907583,"duration":5177}},{"uid":"eb1361f4a821fce7","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/eb1361f4a821fce7","status":"passed","time":{"start":1693670506482,"stop":1693670512356,"duration":5874}}]},"tags":[]},"source":"f0fdc8af01938b4a.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f0b17977bb0>"]}