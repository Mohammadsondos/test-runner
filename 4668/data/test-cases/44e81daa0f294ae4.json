{"uid":"44e81daa0f294ae4","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1707480078422,"stop":1707480078802,"duration":380},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7efe90109780>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7efe8bf65ba0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7efe8bf649a0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az711-612"},{"name":"thread","value":"2114-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"857b7dd17e3ceab8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480073050,"stop":1707480073388,"duration":338}},{"uid":"d025a0704f1897f6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480067633,"stop":1707480067933,"duration":300}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":855,"unknown":0,"total":859},"items":[{"uid":"2f619a7d6a4d22ad","reportUrl":"https://novasamatech.github.io/test-runner/4667//#testresult/2f619a7d6a4d22ad","status":"passed","time":{"start":1707465666453,"stop":1707465667068,"duration":615}},{"uid":"4bf227f542c70be8","reportUrl":"https://novasamatech.github.io/test-runner/4666//#testresult/4bf227f542c70be8","status":"passed","time":{"start":1707451262799,"stop":1707451263063,"duration":264}},{"uid":"b799b2596842c7d9","reportUrl":"https://novasamatech.github.io/test-runner/4665//#testresult/b799b2596842c7d9","status":"passed","time":{"start":1707436914068,"stop":1707436914669,"duration":601}},{"uid":"3d34cc4ddfd87f34","reportUrl":"https://novasamatech.github.io/test-runner/4664//#testresult/3d34cc4ddfd87f34","status":"passed","time":{"start":1707422465213,"stop":1707422465688,"duration":475}},{"uid":"c217950d3213a0fe","reportUrl":"https://novasamatech.github.io/test-runner/4663//#testresult/c217950d3213a0fe","status":"passed","time":{"start":1707408069516,"stop":1707408070081,"duration":565}},{"uid":"c5eb06848a610faa","reportUrl":"https://novasamatech.github.io/test-runner/4662//#testresult/c5eb06848a610faa","status":"passed","time":{"start":1707393665015,"stop":1707393665367,"duration":352}},{"uid":"39058ab01ab4b4","reportUrl":"https://novasamatech.github.io/test-runner/4661//#testresult/39058ab01ab4b4","status":"passed","time":{"start":1707379263826,"stop":1707379264208,"duration":382}},{"uid":"eeca8ee861981d98","reportUrl":"https://novasamatech.github.io/test-runner/4660//#testresult/eeca8ee861981d98","status":"passed","time":{"start":1707364857919,"stop":1707364858140,"duration":221}},{"uid":"a2e776584c11750a","reportUrl":"https://novasamatech.github.io/test-runner/4659//#testresult/a2e776584c11750a","status":"passed","time":{"start":1707350502348,"stop":1707350502685,"duration":337}},{"uid":"ca71e15083be3f29","reportUrl":"https://novasamatech.github.io/test-runner/4658//#testresult/ca71e15083be3f29","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707336087061,"stop":1707336087358,"duration":297}},{"uid":"6c18b87e3c1345b6","reportUrl":"https://novasamatech.github.io/test-runner/4657//#testresult/6c18b87e3c1345b6","status":"passed","time":{"start":1707321663239,"stop":1707321663600,"duration":361}},{"uid":"924957f61f12e409","reportUrl":"https://novasamatech.github.io/test-runner/4656//#testresult/924957f61f12e409","status":"passed","time":{"start":1707307266605,"stop":1707307266868,"duration":263}},{"uid":"e44e377135e2a57b","reportUrl":"https://novasamatech.github.io/test-runner/4655//#testresult/e44e377135e2a57b","status":"passed","time":{"start":1707292863231,"stop":1707292863589,"duration":358}},{"uid":"a886e995b2d9ed31","reportUrl":"https://novasamatech.github.io/test-runner/4654//#testresult/a886e995b2d9ed31","status":"failed","statusDetails":"AssertionError: Difference in block numbers is greater than 3:            wss_block_number=19173806, rpc_block_number=19173801\nassert 5 <= 3\n +  where 5 = abs((19173806 - 19173801))","time":{"start":1707278474724,"stop":1707278474881,"duration":157}},{"uid":"cfa2edb95e781541","reportUrl":"https://novasamatech.github.io/test-runner/4653//#testresult/cfa2edb95e781541","status":"passed","time":{"start":1707264099070,"stop":1707264099673,"duration":603}},{"uid":"2c7a21b6df975898","reportUrl":"https://novasamatech.github.io/test-runner/4652//#testresult/2c7a21b6df975898","status":"passed","time":{"start":1707249668597,"stop":1707249669227,"duration":630}},{"uid":"928f3ca3d6b98fdf","reportUrl":"https://novasamatech.github.io/test-runner/4651//#testresult/928f3ca3d6b98fdf","status":"passed","time":{"start":1707235263075,"stop":1707235263733,"duration":658}},{"uid":"f0da506010b81b41","reportUrl":"https://novasamatech.github.io/test-runner/4650//#testresult/f0da506010b81b41","status":"passed","time":{"start":1707220869141,"stop":1707220869861,"duration":720}},{"uid":"56f952b0c0ae7ff8","reportUrl":"https://novasamatech.github.io/test-runner/4649//#testresult/56f952b0c0ae7ff8","status":"passed","time":{"start":1707206459914,"stop":1707206460159,"duration":245}},{"uid":"7f464bc54521a21e","reportUrl":"https://novasamatech.github.io/test-runner/4648//#testresult/7f464bc54521a21e","status":"passed","time":{"start":1707192059695,"stop":1707192059987,"duration":292}}]},"tags":[]},"source":"44e81daa0f294ae4.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}