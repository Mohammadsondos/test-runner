{"uid":"b2af3ecbe91d9bfa","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1707480078510,"stop":1707480078857,"duration":347},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fc591269f60>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fc58aff6740>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fc58aff7fd0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az711-612"},{"name":"thread","value":"2111-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e42b2a2e27eef9cc","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480073135,"stop":1707480073479,"duration":344}},{"uid":"68027a94be686879","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480067644,"stop":1707480068016,"duration":372}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":403,"unknown":0,"total":407},"items":[{"uid":"b5ba4715c04c16b","reportUrl":"https://novasamatech.github.io/test-runner/4667//#testresult/b5ba4715c04c16b","status":"passed","time":{"start":1707465666295,"stop":1707465667169,"duration":874}},{"uid":"d2db9185c270658f","reportUrl":"https://novasamatech.github.io/test-runner/4666//#testresult/d2db9185c270658f","status":"passed","time":{"start":1707451262671,"stop":1707451262836,"duration":165}},{"uid":"e66fea9d444912fc","reportUrl":"https://novasamatech.github.io/test-runner/4665//#testresult/e66fea9d444912fc","status":"passed","time":{"start":1707436913986,"stop":1707436914736,"duration":750}},{"uid":"10735c0f36f01eb","reportUrl":"https://novasamatech.github.io/test-runner/4664//#testresult/10735c0f36f01eb","status":"passed","time":{"start":1707422465024,"stop":1707422465695,"duration":671}},{"uid":"e135f181dfad4a78","reportUrl":"https://novasamatech.github.io/test-runner/4663//#testresult/e135f181dfad4a78","status":"passed","time":{"start":1707408068791,"stop":1707408069513,"duration":722}},{"uid":"45f8c1a968d20639","reportUrl":"https://novasamatech.github.io/test-runner/4662//#testresult/45f8c1a968d20639","status":"passed","time":{"start":1707393664320,"stop":1707393665013,"duration":693}},{"uid":"8f11c53545ea648","reportUrl":"https://novasamatech.github.io/test-runner/4661//#testresult/8f11c53545ea648","status":"passed","time":{"start":1707379263543,"stop":1707379263991,"duration":448}},{"uid":"ca8de7dd19ae7a5d","reportUrl":"https://novasamatech.github.io/test-runner/4660//#testresult/ca8de7dd19ae7a5d","status":"passed","time":{"start":1707364857771,"stop":1707364857954,"duration":183}},{"uid":"4b73ff8319673cc1","reportUrl":"https://novasamatech.github.io/test-runner/4659//#testresult/4b73ff8319673cc1","status":"passed","time":{"start":1707350502201,"stop":1707350502345,"duration":144}},{"uid":"90bd6b60600d0230","reportUrl":"https://novasamatech.github.io/test-runner/4658//#testresult/90bd6b60600d0230","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707336087023,"stop":1707336087370,"duration":347}},{"uid":"21d3a6686d5eacc1","reportUrl":"https://novasamatech.github.io/test-runner/4657//#testresult/21d3a6686d5eacc1","status":"passed","time":{"start":1707321661772,"stop":1707321661995,"duration":223}},{"uid":"a98afa9ce669ffb0","reportUrl":"https://novasamatech.github.io/test-runner/4656//#testresult/a98afa9ce669ffb0","status":"passed","time":{"start":1707307266315,"stop":1707307266668,"duration":353}},{"uid":"9cc766ae61626468","reportUrl":"https://novasamatech.github.io/test-runner/4655//#testresult/9cc766ae61626468","status":"passed","time":{"start":1707292862955,"stop":1707292863403,"duration":448}},{"uid":"5da88d5be4711f23","reportUrl":"https://novasamatech.github.io/test-runner/4654//#testresult/5da88d5be4711f23","status":"passed","time":{"start":1707278463919,"stop":1707278464154,"duration":235}},{"uid":"21b762954110cc94","reportUrl":"https://novasamatech.github.io/test-runner/4653//#testresult/21b762954110cc94","status":"passed","time":{"start":1707264098969,"stop":1707264099716,"duration":747}},{"uid":"c9e54ac181d6ff63","reportUrl":"https://novasamatech.github.io/test-runner/4652//#testresult/c9e54ac181d6ff63","status":"passed","time":{"start":1707249668643,"stop":1707249669430,"duration":787}},{"uid":"df1d71a0283bef55","reportUrl":"https://novasamatech.github.io/test-runner/4651//#testresult/df1d71a0283bef55","status":"passed","time":{"start":1707235263024,"stop":1707235263971,"duration":947}},{"uid":"e62d2c8829126ffc","reportUrl":"https://novasamatech.github.io/test-runner/4650//#testresult/e62d2c8829126ffc","status":"passed","time":{"start":1707220869086,"stop":1707220869976,"duration":890}},{"uid":"5974619419b80f3f","reportUrl":"https://novasamatech.github.io/test-runner/4649//#testresult/5974619419b80f3f","status":"passed","time":{"start":1707206459583,"stop":1707206459763,"duration":180}},{"uid":"40c2e71d9ba9574b","reportUrl":"https://novasamatech.github.io/test-runner/4648//#testresult/40c2e71d9ba9574b","status":"passed","time":{"start":1707192059482,"stop":1707192059692,"duration":210}}]},"tags":[]},"source":"b2af3ecbe91d9bfa.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}