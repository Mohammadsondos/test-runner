{"uid":"f3d96d88a8b18d4c","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.flashbots.net]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"53f1fa2f4a4225b0df7d282ad6e0c8f4","time":{"start":1707480078770,"stop":1707480079087,"duration":317},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f3a66a7d7e0>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.flashbots.net'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f3a66918940>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f3a6691a200>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az711-612"},{"name":"thread","value":"2117-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.flashbots.net', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"af8e46ba6aea6f6d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480073326,"stop":1707480073738,"duration":412}},{"uid":"a0c505cb4dcd64a8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480067885,"stop":1707480068209,"duration":324}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":856,"unknown":0,"total":859},"items":[{"uid":"fd04fd04ccc77af8","reportUrl":"https://novasamatech.github.io/test-runner/4667//#testresult/fd04fd04ccc77af8","status":"passed","time":{"start":1707465666262,"stop":1707465667052,"duration":790}},{"uid":"41fa7ff66e4fe48","reportUrl":"https://novasamatech.github.io/test-runner/4666//#testresult/41fa7ff66e4fe48","status":"passed","time":{"start":1707451262866,"stop":1707451263220,"duration":354}},{"uid":"433e5e212c674109","reportUrl":"https://novasamatech.github.io/test-runner/4665//#testresult/433e5e212c674109","status":"passed","time":{"start":1707436914016,"stop":1707436914779,"duration":763}},{"uid":"3649ea9a373df5fd","reportUrl":"https://novasamatech.github.io/test-runner/4664//#testresult/3649ea9a373df5fd","status":"passed","time":{"start":1707422465355,"stop":1707422466133,"duration":778}},{"uid":"b641f62d1f624b56","reportUrl":"https://novasamatech.github.io/test-runner/4663//#testresult/b641f62d1f624b56","status":"passed","time":{"start":1707408068999,"stop":1707408071380,"duration":2381}},{"uid":"6324573374153273","reportUrl":"https://novasamatech.github.io/test-runner/4662//#testresult/6324573374153273","status":"passed","time":{"start":1707393664583,"stop":1707393665059,"duration":476}},{"uid":"4c400e5808ba03f8","reportUrl":"https://novasamatech.github.io/test-runner/4661//#testresult/4c400e5808ba03f8","status":"passed","time":{"start":1707379263819,"stop":1707379264255,"duration":436}},{"uid":"f0e302b17a825f26","reportUrl":"https://novasamatech.github.io/test-runner/4660//#testresult/f0e302b17a825f26","status":"passed","time":{"start":1707364858231,"stop":1707364858486,"duration":255}},{"uid":"f0035ff8bd55ff6d","reportUrl":"https://novasamatech.github.io/test-runner/4659//#testresult/f0035ff8bd55ff6d","status":"passed","time":{"start":1707350502427,"stop":1707350502822,"duration":395}},{"uid":"bdb49e2b461afd64","reportUrl":"https://novasamatech.github.io/test-runner/4658//#testresult/bdb49e2b461afd64","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707336087020,"stop":1707336087398,"duration":378}},{"uid":"36ae8d2d41d9bd9e","reportUrl":"https://novasamatech.github.io/test-runner/4657//#testresult/36ae8d2d41d9bd9e","status":"passed","time":{"start":1707321661716,"stop":1707321663236,"duration":1520}},{"uid":"a15c8ae959758c06","reportUrl":"https://novasamatech.github.io/test-runner/4656//#testresult/a15c8ae959758c06","status":"passed","time":{"start":1707307266670,"stop":1707307267017,"duration":347}},{"uid":"cab918fa340d0d61","reportUrl":"https://novasamatech.github.io/test-runner/4655//#testresult/cab918fa340d0d61","status":"passed","time":{"start":1707292863078,"stop":1707292863534,"duration":456}},{"uid":"58bc020ec2f72388","reportUrl":"https://novasamatech.github.io/test-runner/4654//#testresult/58bc020ec2f72388","status":"passed","time":{"start":1707278464157,"stop":1707278464446,"duration":289}},{"uid":"4443fd91e35aead5","reportUrl":"https://novasamatech.github.io/test-runner/4653//#testresult/4443fd91e35aead5","status":"passed","time":{"start":1707264099353,"stop":1707264100239,"duration":886}},{"uid":"17e3449fd2553ffc","reportUrl":"https://novasamatech.github.io/test-runner/4652//#testresult/17e3449fd2553ffc","status":"passed","time":{"start":1707249668436,"stop":1707249669402,"duration":966}},{"uid":"a7dfea20be0ba826","reportUrl":"https://novasamatech.github.io/test-runner/4651//#testresult/a7dfea20be0ba826","status":"passed","time":{"start":1707235263321,"stop":1707235264209,"duration":888}},{"uid":"f3a7ce8c944bad20","reportUrl":"https://novasamatech.github.io/test-runner/4650//#testresult/f3a7ce8c944bad20","status":"passed","time":{"start":1707220869138,"stop":1707220870039,"duration":901}},{"uid":"faccfad155b2ba99","reportUrl":"https://novasamatech.github.io/test-runner/4649//#testresult/faccfad155b2ba99","status":"passed","time":{"start":1707206459569,"stop":1707206459910,"duration":341}},{"uid":"29b6abe542fbf1eb","reportUrl":"https://novasamatech.github.io/test-runner/4648//#testresult/29b6abe542fbf1eb","status":"passed","time":{"start":1707192059600,"stop":1707192060079,"duration":479}}]},"tags":[]},"source":"f3d96d88a8b18d4c.json","parameterValues":["{'url': 'https://rpc.flashbots.net', 'name': 'Ethereum'}"]}