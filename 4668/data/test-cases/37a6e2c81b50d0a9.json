{"uid":"37a6e2c81b50d0a9","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1707480079130,"stop":1707480079436,"duration":306},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f4f5ef7d630>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f4f5eea56c0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f4f5eea43a0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az711-612"},{"name":"thread","value":"2120-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5cef02ec54473dec","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480073799,"stop":1707480074096,"duration":297}},{"uid":"a30e97df77296ac7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480068327,"stop":1707480068689,"duration":362}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":3,"skipped":0,"passed":855,"unknown":0,"total":859},"items":[{"uid":"8e512560c15ed9b8","reportUrl":"https://novasamatech.github.io/test-runner/4667//#testresult/8e512560c15ed9b8","status":"passed","time":{"start":1707465666669,"stop":1707465667418,"duration":749}},{"uid":"e74fe9469a1825","reportUrl":"https://novasamatech.github.io/test-runner/4666//#testresult/e74fe9469a1825","status":"passed","time":{"start":1707451263077,"stop":1707451263291,"duration":214}},{"uid":"cfc2affd673832ec","reportUrl":"https://novasamatech.github.io/test-runner/4665//#testresult/cfc2affd673832ec","status":"passed","time":{"start":1707436915017,"stop":1707436915717,"duration":700}},{"uid":"53e4e463cb3b71a","reportUrl":"https://novasamatech.github.io/test-runner/4664//#testresult/53e4e463cb3b71a","status":"passed","time":{"start":1707422466643,"stop":1707422467347,"duration":704}},{"uid":"7bd16296dfa69754","reportUrl":"https://novasamatech.github.io/test-runner/4663//#testresult/7bd16296dfa69754","status":"passed","time":{"start":1707408069867,"stop":1707408070516,"duration":649}},{"uid":"503d421be5e0945c","reportUrl":"https://novasamatech.github.io/test-runner/4662//#testresult/503d421be5e0945c","status":"passed","time":{"start":1707393664646,"stop":1707393665078,"duration":432}},{"uid":"bc2438f841ecf87f","reportUrl":"https://novasamatech.github.io/test-runner/4661//#testresult/bc2438f841ecf87f","status":"passed","time":{"start":1707379264449,"stop":1707379264705,"duration":256}},{"uid":"97c577ac0ea736c0","reportUrl":"https://novasamatech.github.io/test-runner/4660//#testresult/97c577ac0ea736c0","status":"passed","time":{"start":1707364858977,"stop":1707364859272,"duration":295}},{"uid":"be8b905a0f11b8d4","reportUrl":"https://novasamatech.github.io/test-runner/4659//#testresult/be8b905a0f11b8d4","status":"passed","time":{"start":1707350503274,"stop":1707350503507,"duration":233}},{"uid":"7b509ee3d54eca7c","reportUrl":"https://novasamatech.github.io/test-runner/4658//#testresult/7b509ee3d54eca7c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707336087426,"stop":1707336087741,"duration":315}},{"uid":"41128d3d82581a6c","reportUrl":"https://novasamatech.github.io/test-runner/4657//#testresult/41128d3d82581a6c","status":"passed","time":{"start":1707321662432,"stop":1707321662698,"duration":266}},{"uid":"e425a655ae0fa16f","reportUrl":"https://novasamatech.github.io/test-runner/4656//#testresult/e425a655ae0fa16f","status":"passed","time":{"start":1707307267439,"stop":1707307267670,"duration":231}},{"uid":"74f6c2b38bb7b517","reportUrl":"https://novasamatech.github.io/test-runner/4655//#testresult/74f6c2b38bb7b517","status":"passed","time":{"start":1707292863958,"stop":1707292864257,"duration":299}},{"uid":"58ac3a67182130f2","reportUrl":"https://novasamatech.github.io/test-runner/4654//#testresult/58ac3a67182130f2","status":"passed","time":{"start":1707278464940,"stop":1707278465086,"duration":146}},{"uid":"765e647ac68c5a2e","reportUrl":"https://novasamatech.github.io/test-runner/4653//#testresult/765e647ac68c5a2e","status":"passed","time":{"start":1707264099459,"stop":1707264100175,"duration":716}},{"uid":"490f363689024818","reportUrl":"https://novasamatech.github.io/test-runner/4652//#testresult/490f363689024818","status":"passed","time":{"start":1707249668491,"stop":1707249669437,"duration":946}},{"uid":"edf4f182ce7a09c0","reportUrl":"https://novasamatech.github.io/test-runner/4651//#testresult/edf4f182ce7a09c0","status":"passed","time":{"start":1707235263199,"stop":1707235264059,"duration":860}},{"uid":"d77db806ac4d8850","reportUrl":"https://novasamatech.github.io/test-runner/4650//#testresult/d77db806ac4d8850","status":"passed","time":{"start":1707220869399,"stop":1707220870107,"duration":708}},{"uid":"4a3d7c5f3d0304de","reportUrl":"https://novasamatech.github.io/test-runner/4649//#testresult/4a3d7c5f3d0304de","status":"passed","time":{"start":1707206460145,"stop":1707206460365,"duration":220}},{"uid":"1c151dbe6d59ff45","reportUrl":"https://novasamatech.github.io/test-runner/4648//#testresult/1c151dbe6d59ff45","status":"passed","time":{"start":1707192060166,"stop":1707192060434,"duration":268}}]},"tags":[]},"source":"37a6e2c81b50d0a9.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}