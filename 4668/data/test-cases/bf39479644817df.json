{"uid":"bf39479644817df","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1707480091651,"stop":1707480092022,"duration":371},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f3a66a7da20>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f3a6487dc00>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f3a6487caf0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az711-612"},{"name":"thread","value":"2117-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"deb10f856e9752e7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480086308,"stop":1707480086615,"duration":307}},{"uid":"62d2fe1aa0d0da8e","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.4}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1707480079119,"stop":1707480081287,"duration":2168}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":4,"skipped":0,"passed":853,"unknown":0,"total":859},"items":[{"uid":"64a5ba14842e33f3","reportUrl":"https://novasamatech.github.io/test-runner/4667//#testresult/64a5ba14842e33f3","status":"passed","time":{"start":1707465667070,"stop":1707465667863,"duration":793}},{"uid":"d573aecbc0f7c178","reportUrl":"https://novasamatech.github.io/test-runner/4666//#testresult/d573aecbc0f7c178","status":"passed","time":{"start":1707451263030,"stop":1707451264609,"duration":1579}},{"uid":"35366233f49fa142","reportUrl":"https://novasamatech.github.io/test-runner/4665//#testresult/35366233f49fa142","status":"passed","time":{"start":1707436914672,"stop":1707436916421,"duration":1749}},{"uid":"435f953dfe0dfa1c","reportUrl":"https://novasamatech.github.io/test-runner/4664//#testresult/435f953dfe0dfa1c","status":"passed","time":{"start":1707422466136,"stop":1707422467883,"duration":1747}},{"uid":"eaf44d3f8ac1f340","reportUrl":"https://novasamatech.github.io/test-runner/4663//#testresult/eaf44d3f8ac1f340","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707408082119,"stop":1707408082461,"duration":342}},{"uid":"3bd62e97f3e93c1","reportUrl":"https://novasamatech.github.io/test-runner/4662//#testresult/3bd62e97f3e93c1","status":"passed","time":{"start":1707393665081,"stop":1707393665585,"duration":504}},{"uid":"6419dad08a17ec6f","reportUrl":"https://novasamatech.github.io/test-runner/4661//#testresult/6419dad08a17ec6f","status":"passed","time":{"start":1707379264211,"stop":1707379265546,"duration":1335}},{"uid":"e78efe0db858c77d","reportUrl":"https://novasamatech.github.io/test-runner/4660//#testresult/e78efe0db858c77d","status":"passed","time":{"start":1707364858163,"stop":1707364858853,"duration":690}},{"uid":"86e46465cfe44d84","reportUrl":"https://novasamatech.github.io/test-runner/4659//#testresult/86e46465cfe44d84","status":"passed","time":{"start":1707350502825,"stop":1707350504459,"duration":1634}},{"uid":"6682943ead9de411","reportUrl":"https://novasamatech.github.io/test-runner/4658//#testresult/6682943ead9de411","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707336099572,"stop":1707336099884,"duration":312}},{"uid":"8863f29d0213d9a1","reportUrl":"https://novasamatech.github.io/test-runner/4657//#testresult/8863f29d0213d9a1","status":"passed","time":{"start":1707321662473,"stop":1707321663217,"duration":744}},{"uid":"eafc1c9d013fc575","reportUrl":"https://novasamatech.github.io/test-runner/4656//#testresult/eafc1c9d013fc575","status":"passed","time":{"start":1707307267113,"stop":1707307268417,"duration":1304}},{"uid":"801674fdfd7e6e64","reportUrl":"https://novasamatech.github.io/test-runner/4655//#testresult/801674fdfd7e6e64","status":"passed","time":{"start":1707292863592,"stop":1707292864564,"duration":972}},{"uid":"c74d608b0b8890f1","reportUrl":"https://novasamatech.github.io/test-runner/4654//#testresult/c74d608b0b8890f1","status":"passed","time":{"start":1707278464350,"stop":1707278465774,"duration":1424}},{"uid":"5353ded6df7b2c2b","reportUrl":"https://novasamatech.github.io/test-runner/4653//#testresult/5353ded6df7b2c2b","status":"passed","time":{"start":1707264100242,"stop":1707264101732,"duration":1490}},{"uid":"40e3c5de0a88becd","reportUrl":"https://novasamatech.github.io/test-runner/4652//#testresult/40e3c5de0a88becd","status":"passed","time":{"start":1707249669231,"stop":1707249670609,"duration":1378}},{"uid":"b72579576fcf745a","reportUrl":"https://novasamatech.github.io/test-runner/4651//#testresult/b72579576fcf745a","status":"passed","time":{"start":1707235264061,"stop":1707235265474,"duration":1413}},{"uid":"5ee5df146c80bf8d","reportUrl":"https://novasamatech.github.io/test-runner/4650//#testresult/5ee5df146c80bf8d","status":"passed","time":{"start":1707220869865,"stop":1707220871075,"duration":1210}},{"uid":"89a3dcf74b61520e","reportUrl":"https://novasamatech.github.io/test-runner/4649//#testresult/89a3dcf74b61520e","status":"passed","time":{"start":1707206459884,"stop":1707206460490,"duration":606}},{"uid":"b988ff9c2d0a6c9c","reportUrl":"https://novasamatech.github.io/test-runner/4648//#testresult/b988ff9c2d0a6c9c","status":"passed","time":{"start":1707192059989,"stop":1707192060863,"duration":874}}]},"tags":[]},"source":"bf39479644817df.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}