{"uid":"30a7414900b41aab","name":"test_can_create_connection[Test for Kusama, url: wss://kusama.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"04d2da413eab4f2e9d3d030b6cb0949b","time":{"start":1697054579679,"stop":1697054580663,"duration":984},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fbff627d4e0>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fbff627d4e0>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"b14812739558ec2b","name":"stdout","source":"b14812739558ec2b.txt","type":"text/plain","size":569}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az617-290"},{"name":"thread","value":"2084-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.api.onfinality.io/public-ws', 'name': 'Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"89f2887fd4955f5e","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697054503773,"stop":1697054564478,"duration":60705}},{"uid":"1a0c40798a06f406","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697054487497,"stop":1697054488460,"duration":963}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":291,"unknown":0,"total":292},"items":[{"uid":"b78f6de35919b553","reportUrl":"https://novasamatech.github.io/test-runner/3931//#testresult/b78f6de35919b553","status":"passed","time":{"start":1697040110227,"stop":1697040111103,"duration":876}},{"uid":"4b1b8c579eb09184","reportUrl":"https://novasamatech.github.io/test-runner/3930//#testresult/4b1b8c579eb09184","status":"passed","time":{"start":1697025688696,"stop":1697025689427,"duration":731}},{"uid":"f9a7a7c54e950532","reportUrl":"https://novasamatech.github.io/test-runner/3929//#testresult/f9a7a7c54e950532","status":"passed","time":{"start":1697011282650,"stop":1697011283381,"duration":731}},{"uid":"4c195819094c3748","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/4c195819094c3748","status":"passed","time":{"start":1696996876165,"stop":1696996877040,"duration":875}},{"uid":"a939bdba443f24f9","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/a939bdba443f24f9","status":"passed","time":{"start":1696982518540,"stop":1696982519644,"duration":1104}},{"uid":"f9c91e6df299ada3","reportUrl":"https://novasamatech.github.io/test-runner/3926//#testresult/f9c91e6df299ada3","status":"passed","time":{"start":1696968090847,"stop":1696968091975,"duration":1128}},{"uid":"b65c8fac60214b7d","reportUrl":"https://novasamatech.github.io/test-runner/3925//#testresult/b65c8fac60214b7d","status":"passed","time":{"start":1696953685483,"stop":1696953686301,"duration":818}},{"uid":"18cdf2015d27f881","reportUrl":"https://novasamatech.github.io/test-runner/3924//#testresult/18cdf2015d27f881","status":"passed","time":{"start":1696939280966,"stop":1696939282061,"duration":1095}},{"uid":"1fe9e4cf93ebdd6e","reportUrl":"https://novasamatech.github.io/test-runner/3923//#testresult/1fe9e4cf93ebdd6e","status":"passed","time":{"start":1696924883723,"stop":1696924884898,"duration":1175}},{"uid":"de7109ed02301820","reportUrl":"https://novasamatech.github.io/test-runner/3922//#testresult/de7109ed02301820","status":"passed","time":{"start":1696910477577,"stop":1696910478691,"duration":1114}},{"uid":"cdbdd034fa735f4a","reportUrl":"https://novasamatech.github.io/test-runner/3921//#testresult/cdbdd034fa735f4a","status":"passed","time":{"start":1696896145009,"stop":1696896145739,"duration":730}},{"uid":"80dda6f2fdf6a217","reportUrl":"https://novasamatech.github.io/test-runner/3920//#testresult/80dda6f2fdf6a217","status":"passed","time":{"start":1696881686776,"stop":1696881687660,"duration":884}},{"uid":"8df12ffd571ac491","reportUrl":"https://novasamatech.github.io/test-runner/3919//#testresult/8df12ffd571ac491","status":"passed","time":{"start":1696867284817,"stop":1696867285937,"duration":1120}},{"uid":"c11e56bc542e84eb","reportUrl":"https://novasamatech.github.io/test-runner/3918//#testresult/c11e56bc542e84eb","status":"passed","time":{"start":1696852894385,"stop":1696852895109,"duration":724}},{"uid":"fe1581675253dc49","reportUrl":"https://novasamatech.github.io/test-runner/3917//#testresult/fe1581675253dc49","status":"passed","time":{"start":1696838481196,"stop":1696838482168,"duration":972}},{"uid":"7619b5158b2dcc38","reportUrl":"https://novasamatech.github.io/test-runner/3916//#testresult/7619b5158b2dcc38","status":"passed","time":{"start":1696824075651,"stop":1696824076581,"duration":930}},{"uid":"1121311498b177cc","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/1121311498b177cc","status":"passed","time":{"start":1696809725410,"stop":1696809726494,"duration":1084}},{"uid":"8ae06e8b04369b5a","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/8ae06e8b04369b5a","status":"passed","time":{"start":1696795276338,"stop":1696795277181,"duration":843}},{"uid":"158ca32aa95ddbd8","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/158ca32aa95ddbd8","status":"passed","time":{"start":1696780892702,"stop":1696780893552,"duration":850}},{"uid":"b832abe58be29841","reportUrl":"https://novasamatech.github.io/test-runner/3912//#testresult/b832abe58be29841","status":"passed","time":{"start":1696766476827,"stop":1696766477880,"duration":1053}}]},"tags":[]},"source":"30a7414900b41aab.json","parameterValues":["{'url': 'wss://kusama.api.onfinality.io/public-ws', 'name': 'Kusama'}"]}