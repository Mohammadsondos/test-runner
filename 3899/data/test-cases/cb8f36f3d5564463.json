{"uid":"cb8f36f3d5564463","name":"test_address_prefix[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"9eb5311f9a3089d9a4d7a7f5fcd78c89","time":{"start":1696579380721,"stop":1696579382524,"duration":1803},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f95d5b8cdc0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f95d5b0c640>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f95b8376650>\nmethod = 'state_getMetadata'\nparams = ['0x670176c49ec7a3995d1fbc1d764156f5242339c6f1ca6d1aaa7188bac02f3961']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az620-992"},{"name":"thread","value":"2060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f95d5b0c640>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"448187dde2e6fa41","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696579363745,"stop":1696579365535,"duration":1790}},{"uid":"f0884ba441304a65","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696579346267,"stop":1696579348419,"duration":2152}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":258,"unknown":0,"total":259},"items":[{"uid":"17d07bc4ffc48f02","reportUrl":"https://novasamatech.github.io/test-runner/3898//#testresult/17d07bc4ffc48f02","status":"passed","time":{"start":1696564911025,"stop":1696564916505,"duration":5480}},{"uid":"3fb72b23fc989b72","reportUrl":"https://novasamatech.github.io/test-runner/3897//#testresult/3fb72b23fc989b72","status":"passed","time":{"start":1696550596019,"stop":1696550601694,"duration":5675}},{"uid":"9bc64b7e5998703","reportUrl":"https://novasamatech.github.io/test-runner/3896//#testresult/9bc64b7e5998703","status":"passed","time":{"start":1696536113505,"stop":1696536121478,"duration":7973}},{"uid":"62cae58ba4251350","reportUrl":"https://novasamatech.github.io/test-runner/3895//#testresult/62cae58ba4251350","status":"passed","time":{"start":1696521720439,"stop":1696521725113,"duration":4674}},{"uid":"2e5517b0372af49","reportUrl":"https://novasamatech.github.io/test-runner/3894//#testresult/2e5517b0372af49","status":"passed","time":{"start":1696507331501,"stop":1696507338910,"duration":7409}},{"uid":"89bcb99e3376f90b","reportUrl":"https://novasamatech.github.io/test-runner/3893//#testresult/89bcb99e3376f90b","status":"passed","time":{"start":1696496678413,"stop":1696496683125,"duration":4712}},{"uid":"3f5f13dc391dfb13","reportUrl":"https://novasamatech.github.io/test-runner/3892//#testresult/3f5f13dc391dfb13","status":"passed","time":{"start":1696492967133,"stop":1696492972548,"duration":5415}},{"uid":"2ea1aae9c433dfd1","reportUrl":"https://novasamatech.github.io/test-runner/3891//#testresult/2ea1aae9c433dfd1","status":"passed","time":{"start":1696478527009,"stop":1696478532403,"duration":5394}},{"uid":"1ddb1bd5fe077ad6","reportUrl":"https://novasamatech.github.io/test-runner/3890//#testresult/1ddb1bd5fe077ad6","status":"passed","time":{"start":1696464173654,"stop":1696464181130,"duration":7476}},{"uid":"d9ec5950242dee46","reportUrl":"https://novasamatech.github.io/test-runner/3889//#testresult/d9ec5950242dee46","status":"passed","time":{"start":1696449749794,"stop":1696449755717,"duration":5923}},{"uid":"e54f3a9d83febe92","reportUrl":"https://novasamatech.github.io/test-runner/3888//#testresult/e54f3a9d83febe92","status":"passed","time":{"start":1696435354535,"stop":1696435360913,"duration":6378}},{"uid":"26d811c909d4b8a0","reportUrl":"https://novasamatech.github.io/test-runner/3887//#testresult/26d811c909d4b8a0","status":"passed","time":{"start":1696420930093,"stop":1696420935784,"duration":5691}},{"uid":"7e7c77ed896bc747","reportUrl":"https://novasamatech.github.io/test-runner/3886//#testresult/7e7c77ed896bc747","status":"passed","time":{"start":1696406543692,"stop":1696406549542,"duration":5850}},{"uid":"8c23d155285887af","reportUrl":"https://novasamatech.github.io/test-runner/3885//#testresult/8c23d155285887af","status":"passed","time":{"start":1696392121032,"stop":1696392128158,"duration":7126}},{"uid":"4de69f07c0473285","reportUrl":"https://novasamatech.github.io/test-runner/3884//#testresult/4de69f07c0473285","status":"passed","time":{"start":1696377764726,"stop":1696377772493,"duration":7767}},{"uid":"3ed9a756f9929da0","reportUrl":"https://novasamatech.github.io/test-runner/3883//#testresult/3ed9a756f9929da0","status":"passed","time":{"start":1696363313490,"stop":1696363319016,"duration":5526}},{"uid":"4c6128a22084c681","reportUrl":"https://novasamatech.github.io/test-runner/3882//#testresult/4c6128a22084c681","status":"passed","time":{"start":1696348945266,"stop":1696348953059,"duration":7793}},{"uid":"6a78f37785331162","reportUrl":"https://novasamatech.github.io/test-runner/3881//#testresult/6a78f37785331162","status":"passed","time":{"start":1696334567918,"stop":1696334576947,"duration":9029}},{"uid":"7d5da201606d2c23","reportUrl":"https://novasamatech.github.io/test-runner/3880//#testresult/7d5da201606d2c23","status":"passed","time":{"start":1696320143757,"stop":1696320151230,"duration":7473}},{"uid":"ff5df37667ca89f9","reportUrl":"https://novasamatech.github.io/test-runner/3879//#testresult/ff5df37667ca89f9","status":"passed","time":{"start":1696305721304,"stop":1696305728472,"duration":7168}}]},"tags":[]},"source":"cb8f36f3d5564463.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f95d5b0c640>"]}