{"uid":"6a5b9dd139a45087","name":"test_xcm_parameters[Check XCM data for Ternoa]","fullName":"tests.test_xcm_data.TestCompareXCMData#test_xcm_parameters","historyId":"864c509f298d1188b7bce1c929732a38","time":{"start":1665382196303,"stop":1665382197019,"duration":716},"status":"failed","statusMessage":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5000000000>, <root['max_block'] t1:{'ref_time':...}, t2:...ef_time':...}, t2:500000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:125000000>]})","statusTrace":"self = <tests.test_xcm_data.TestCompareXCMData object at 0x7fdc08904400>\nchain = <tests.utils.chain_model.Chain object at 0x7fdc089534f0>\n\n    def test_xcm_parameters(self, chain: Chain):\n        connection = chain.create_connection()\n        chain.init_properties()\n        data = connection.get_constant('System', 'BlockWeights').serialize()\n    \n        with open(xcm_data_file_path) as fp:\n            json_data = json.load(fp)\n            changed_data = was_network_data_changed(data, json_data[chain.chainId]['BlockWeights'])\n>           assert not bool(changed_data)\nE           AssertionError: assert not True\nE            +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5000000000>, <root['max_block'] t1:{'ref_time':...}, t2:...ef_time':...}, t2:500000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:125000000>]})\n\ntests/test_xcm_data.py:30: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_xcm_data"},{"name":"subSuite","value":"TestCompareXCMData"},{"name":"host","value":"fv-az213-185"},{"name":"thread","value":"1679-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_xcm_data"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<tests.utils.chain_model.Chain object at 0x7fdc089534f0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5f2b6f9a165e321a","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5000000000>, <root['max_block'] t1:{'ref_time':...}, t2:...ef_time':...}, t2:500000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:125000000>]})","time":{"start":1665382180425,"stop":1665382186285,"duration":5860}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"b9411fa8074e15b6","reportUrl":"https://nova-wallet.github.io/test-runner/22//#testresult/b9411fa8074e15b6","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5000000000>, <root['max_block'] t1:{'ref_time':...}, t2:...ef_time':...}, t2:500000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:125000000>]})","time":{"start":1665381015192,"stop":1665381015901,"duration":709}},{"uid":"b358adec2cdb12b2","reportUrl":"https://nova-wallet.github.io/test-runner/21//#testresult/b358adec2cdb12b2","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5000000000>, <root['max_block'] t1:{'ref_time':...}, t2:...ef_time':...}, t2:500000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:125000000>]})","time":{"start":1665378477945,"stop":1665378478846,"duration":901}}]},"tags":[]},"source":"6a5b9dd139a45087.json","parameterValues":["<tests.utils.chain_model.Chain object at 0x7fdc089534f0>"]}