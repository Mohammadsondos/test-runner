{"uid":"2d79caeb84a6643","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1711310483746,"stop":1711310483883,"duration":137},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f773bfd1570>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f773996e110>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f773996e3e0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1200-640"},{"name":"thread","value":"2107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ffc9f80ffb06fe8f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711310478570,"stop":1711310478714,"duration":144}},{"uid":"63e628b0d3651de8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711310473385,"stop":1711310473538,"duration":153}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":55,"skipped":0,"passed":990,"unknown":0,"total":1049},"items":[{"uid":"1296481ac6ffec0d","reportUrl":"https://novasamatech.github.io/test-runner/4937//#testresult/1296481ac6ffec0d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711296074817,"stop":1711296074857,"duration":40}},{"uid":"a85e6da2506969df","reportUrl":"https://novasamatech.github.io/test-runner/4936//#testresult/a85e6da2506969df","status":"passed","time":{"start":1711281672887,"stop":1711281673396,"duration":509}},{"uid":"1c343e64476b6fd2","reportUrl":"https://novasamatech.github.io/test-runner/4935//#testresult/1c343e64476b6fd2","status":"passed","time":{"start":1711267264686,"stop":1711267265432,"duration":746}},{"uid":"b621f96790d81c55","reportUrl":"https://novasamatech.github.io/test-runner/4934//#testresult/b621f96790d81c55","status":"passed","time":{"start":1711252864728,"stop":1711252865345,"duration":617}},{"uid":"d2a2a0e023b152d4","reportUrl":"https://novasamatech.github.io/test-runner/4933//#testresult/d2a2a0e023b152d4","status":"passed","time":{"start":1711238497229,"stop":1711238497873,"duration":644}},{"uid":"4e6ec57a56a770c9","reportUrl":"https://novasamatech.github.io/test-runner/4932//#testresult/4e6ec57a56a770c9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711224070402,"stop":1711224070478,"duration":76}},{"uid":"7579f2acc05b5789","reportUrl":"https://novasamatech.github.io/test-runner/4931//#testresult/7579f2acc05b5789","status":"passed","time":{"start":1711209682272,"stop":1711209683075,"duration":803}},{"uid":"f3bd38053186b78c","reportUrl":"https://novasamatech.github.io/test-runner/4930//#testresult/f3bd38053186b78c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711195285874,"stop":1711195285921,"duration":47}},{"uid":"43edd78acce25e70","reportUrl":"https://novasamatech.github.io/test-runner/4929//#testresult/43edd78acce25e70","status":"passed","time":{"start":1711180864056,"stop":1711180865034,"duration":978}},{"uid":"5989e41ec34a03a2","reportUrl":"https://novasamatech.github.io/test-runner/4928//#testresult/5989e41ec34a03a2","status":"passed","time":{"start":1711166474682,"stop":1711166475726,"duration":1044}},{"uid":"1889847704492c13","reportUrl":"https://novasamatech.github.io/test-runner/4927//#testresult/1889847704492c13","status":"passed","time":{"start":1711152099234,"stop":1711152100235,"duration":1001}},{"uid":"633749fd35f1e93b","reportUrl":"https://novasamatech.github.io/test-runner/4926//#testresult/633749fd35f1e93b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711137664990,"stop":1711137665016,"duration":26}},{"uid":"54708b825f8fe5b4","reportUrl":"https://novasamatech.github.io/test-runner/4925//#testresult/54708b825f8fe5b4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711123286442,"stop":1711123286815,"duration":373}},{"uid":"972ee4591d77efbe","reportUrl":"https://novasamatech.github.io/test-runner/4924//#testresult/972ee4591d77efbe","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711108872821,"stop":1711108872857,"duration":36}},{"uid":"a650ef7c5572aa8","reportUrl":"https://novasamatech.github.io/test-runner/4923//#testresult/a650ef7c5572aa8","status":"passed","time":{"start":1711096480209,"stop":1711096481334,"duration":1125}},{"uid":"7af6ef78cb2cd355","reportUrl":"https://novasamatech.github.io/test-runner/4922//#testresult/7af6ef78cb2cd355","status":"passed","time":{"start":1711094460912,"stop":1711094461870,"duration":958}},{"uid":"acb3a249e2c05f90","reportUrl":"https://novasamatech.github.io/test-runner/4921//#testresult/acb3a249e2c05f90","status":"passed","time":{"start":1711080069660,"stop":1711080070515,"duration":855}},{"uid":"87752e895d150ead","reportUrl":"https://novasamatech.github.io/test-runner/4920//#testresult/87752e895d150ead","status":"passed","time":{"start":1711065709471,"stop":1711065710449,"duration":978}},{"uid":"cd7644cb86f98d81","reportUrl":"https://novasamatech.github.io/test-runner/4919//#testresult/cd7644cb86f98d81","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711051280052,"stop":1711051280078,"duration":26}},{"uid":"19ab2b99f6b30c03","reportUrl":"https://novasamatech.github.io/test-runner/4918//#testresult/19ab2b99f6b30c03","status":"passed","time":{"start":1711036867596,"stop":1711036868965,"duration":1369}}]},"tags":[]},"source":"2d79caeb84a6643.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}