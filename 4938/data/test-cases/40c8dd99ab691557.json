{"uid":"40c8dd99ab691557","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1711310473201,"stop":1711310473355,"duration":154},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f773bfd1450>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f7739917a60>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f7739914670>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1200-640"},{"name":"thread","value":"2107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"80d9523677ebcecd","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711310468029,"stop":1711310468167,"duration":138}},{"uid":"4208d01c02d2f894","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711310462762,"stop":1711310462921,"duration":159}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":44,"skipped":0,"passed":1002,"unknown":0,"total":1049},"items":[{"uid":"93e1bed59863edea","reportUrl":"https://novasamatech.github.io/test-runner/4937//#testresult/93e1bed59863edea","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711296064622,"stop":1711296064662,"duration":40}},{"uid":"e20a8c9afc20afe9","reportUrl":"https://novasamatech.github.io/test-runner/4936//#testresult/e20a8c9afc20afe9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711281677399,"stop":1711281677477,"duration":78}},{"uid":"8198ce25538fdccc","reportUrl":"https://novasamatech.github.io/test-runner/4935//#testresult/8198ce25538fdccc","status":"passed","time":{"start":1711267264765,"stop":1711267265203,"duration":438}},{"uid":"4130499c32988cc7","reportUrl":"https://novasamatech.github.io/test-runner/4934//#testresult/4130499c32988cc7","status":"passed","time":{"start":1711252864632,"stop":1711252864865,"duration":233}},{"uid":"8bcc627ccc1bc6c2","reportUrl":"https://novasamatech.github.io/test-runner/4933//#testresult/8bcc627ccc1bc6c2","status":"passed","time":{"start":1711238496950,"stop":1711238497235,"duration":285}},{"uid":"afb7eb8940aeeecd","reportUrl":"https://novasamatech.github.io/test-runner/4932//#testresult/afb7eb8940aeeecd","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711224070316,"stop":1711224070361,"duration":45}},{"uid":"bdc340e42eb6b46a","reportUrl":"https://novasamatech.github.io/test-runner/4931//#testresult/bdc340e42eb6b46a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711209671413,"stop":1711209671710,"duration":297}},{"uid":"f18cfbf7c779103b","reportUrl":"https://novasamatech.github.io/test-runner/4930//#testresult/f18cfbf7c779103b","status":"passed","time":{"start":1711195275065,"stop":1711195275175,"duration":110}},{"uid":"3716e072f78c3825","reportUrl":"https://novasamatech.github.io/test-runner/4929//#testresult/3716e072f78c3825","status":"passed","time":{"start":1711180863400,"stop":1711180864053,"duration":653}},{"uid":"2e4b036bb4f3f750","reportUrl":"https://novasamatech.github.io/test-runner/4928//#testresult/2e4b036bb4f3f750","status":"passed","time":{"start":1711166473963,"stop":1711166474607,"duration":644}},{"uid":"4cf7d11723fe31c4","reportUrl":"https://novasamatech.github.io/test-runner/4927//#testresult/4cf7d11723fe31c4","status":"passed","time":{"start":1711152099278,"stop":1711152099824,"duration":546}},{"uid":"87e42d6b029c9c3a","reportUrl":"https://novasamatech.github.io/test-runner/4926//#testresult/87e42d6b029c9c3a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711137664205,"stop":1711137664228,"duration":23}},{"uid":"578995c4b0fb9f54","reportUrl":"https://novasamatech.github.io/test-runner/4925//#testresult/578995c4b0fb9f54","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711123275184,"stop":1711123275560,"duration":376}},{"uid":"6f0692006e493d7b","reportUrl":"https://novasamatech.github.io/test-runner/4924//#testresult/6f0692006e493d7b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711108873458,"stop":1711108873493,"duration":35}},{"uid":"94ae00e9524ba8c6","reportUrl":"https://novasamatech.github.io/test-runner/4923//#testresult/94ae00e9524ba8c6","status":"passed","time":{"start":1711096479625,"stop":1711096480211,"duration":586}},{"uid":"2695a55d175c1424","reportUrl":"https://novasamatech.github.io/test-runner/4922//#testresult/2695a55d175c1424","status":"passed","time":{"start":1711094460786,"stop":1711094461033,"duration":247}},{"uid":"902afafb4821fe27","reportUrl":"https://novasamatech.github.io/test-runner/4921//#testresult/902afafb4821fe27","status":"passed","time":{"start":1711080069525,"stop":1711080069980,"duration":455}},{"uid":"9297b3285a8f0cbf","reportUrl":"https://novasamatech.github.io/test-runner/4920//#testresult/9297b3285a8f0cbf","status":"passed","time":{"start":1711065709245,"stop":1711065709436,"duration":191}},{"uid":"5928d1ae4fc10af0","reportUrl":"https://novasamatech.github.io/test-runner/4919//#testresult/5928d1ae4fc10af0","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711051269724,"stop":1711051269745,"duration":21}},{"uid":"8fa3d7217fefeef8","reportUrl":"https://novasamatech.github.io/test-runner/4918//#testresult/8fa3d7217fefeef8","status":"passed","time":{"start":1711036867724,"stop":1711036868271,"duration":547}}]},"tags":[]},"source":"40c8dd99ab691557.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}