{"uid":"f7f84d3de2ca5c31","name":"test_can_create_connection[Test for Bit.Country Pioneer, url: wss://pioneer.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"0c3c502fc2031b773f1baf0102f5a28e","time":{"start":1697270754771,"stop":1697271115382,"duration":360611},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Sat, 14 Oct 2023 08:11:55 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60002', 'x-kong-proxy-latency': '300004', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","statusTrace":"data = {'name': 'Bit.Country Pioneer', 'url': 'wss://pioneer.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Sat, 14 Oct 2023 08:11:55 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60002', 'x-kong-proxy-latency': '300004', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Sat, 14 Oct 2023 08:11:55 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60002', 'x-kong-proxy-latency': '300004', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","statusTrace":"data = {'name': 'Bit.Country Pioneer', 'url': 'wss://pioneer.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Sat, 14 Oct 2023 08:11:55 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60002', 'x-kong-proxy-latency': '300004', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"ad1fb67530cdc79e","name":"stdout","source":"ad1fb67530cdc79e.txt","type":"text/plain","size":707}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az488-504"},{"name":"thread","value":"2104-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://pioneer.api.onfinality.io/public-ws', 'name': 'Bit.Country Pioneer'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"38c5fe22b94937a8","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697270619008,"stop":1697270739614,"duration":120606}},{"uid":"2f5dee4b4b60d332","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697270483203,"stop":1697270603783,"duration":120580}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":299,"unknown":0,"total":307},"items":[{"uid":"793c7f9e08d79314","reportUrl":"https://novasamatech.github.io/test-runner/3946//#testresult/793c7f9e08d79314","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697256780632,"stop":1697256961229,"duration":180597}},{"uid":"e25706cc13d2ddb5","reportUrl":"https://novasamatech.github.io/test-runner/3945//#testresult/e25706cc13d2ddb5","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697242011341,"stop":1697242192054,"duration":180713}},{"uid":"d8cb6d13c3f78442","reportUrl":"https://novasamatech.github.io/test-runner/3944//#testresult/d8cb6d13c3f78442","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697227857360,"stop":1697227978032,"duration":120672}},{"uid":"7c3bd593862c0d58","reportUrl":"https://novasamatech.github.io/test-runner/3943//#testresult/7c3bd593862c0d58","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697213043598,"stop":1697213104133,"duration":60535}},{"uid":"21f20e470c993905","reportUrl":"https://novasamatech.github.io/test-runner/3942//#testresult/21f20e470c993905","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697198707755,"stop":1697198828446,"duration":120691}},{"uid":"21020e9dc385dc1e","reportUrl":"https://novasamatech.github.io/test-runner/3941//#testresult/21020e9dc385dc1e","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697184359984,"stop":1697184420648,"duration":60664}},{"uid":"6a600f2056076bd1","reportUrl":"https://novasamatech.github.io/test-runner/3940//#testresult/6a600f2056076bd1","status":"passed","time":{"start":1697169690675,"stop":1697169691394,"duration":719}},{"uid":"4ebb5af5fc31c7ee","reportUrl":"https://novasamatech.github.io/test-runner/3939//#testresult/4ebb5af5fc31c7ee","status":"passed","time":{"start":1697155331928,"stop":1697155332973,"duration":1045}},{"uid":"f674b3c633ebedb4","reportUrl":"https://novasamatech.github.io/test-runner/3938//#testresult/f674b3c633ebedb4","status":"passed","time":{"start":1697140879637,"stop":1697140880580,"duration":943}},{"uid":"47848e6d6432eb51","reportUrl":"https://novasamatech.github.io/test-runner/3937//#testresult/47848e6d6432eb51","status":"passed","time":{"start":1697126564936,"stop":1697126565856,"duration":920}},{"uid":"8e4204b9daf3bfc5","reportUrl":"https://novasamatech.github.io/test-runner/3936//#testresult/8e4204b9daf3bfc5","status":"passed","time":{"start":1697112093205,"stop":1697112094174,"duration":969}},{"uid":"23938b1cf7500f92","reportUrl":"https://novasamatech.github.io/test-runner/3935//#testresult/23938b1cf7500f92","status":"passed","time":{"start":1697097686448,"stop":1697097687367,"duration":919}},{"uid":"75c1bddfbe207357","reportUrl":"https://novasamatech.github.io/test-runner/3934//#testresult/75c1bddfbe207357","status":"passed","time":{"start":1697083285226,"stop":1697083286195,"duration":969}},{"uid":"11484c40a78e985d","reportUrl":"https://novasamatech.github.io/test-runner/3933//#testresult/11484c40a78e985d","status":"passed","time":{"start":1697068934778,"stop":1697068935744,"duration":966}},{"uid":"df4da1c5db9b7a61","reportUrl":"https://novasamatech.github.io/test-runner/3932//#testresult/df4da1c5db9b7a61","status":"passed","time":{"start":1697054495533,"stop":1697054496656,"duration":1123}},{"uid":"2151927eade3fe47","reportUrl":"https://novasamatech.github.io/test-runner/3931//#testresult/2151927eade3fe47","status":"passed","time":{"start":1697040100362,"stop":1697040101466,"duration":1104}},{"uid":"6c361aae20ce32fb","reportUrl":"https://novasamatech.github.io/test-runner/3930//#testresult/6c361aae20ce32fb","status":"passed","time":{"start":1697025693825,"stop":1697025694550,"duration":725}},{"uid":"973153b247273024","reportUrl":"https://novasamatech.github.io/test-runner/3929//#testresult/973153b247273024","status":"passed","time":{"start":1697011288737,"stop":1697011289459,"duration":722}},{"uid":"a91d17ad39b75cf4","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/a91d17ad39b75cf4","status":"passed","time":{"start":1696996879789,"stop":1696996880677,"duration":888}},{"uid":"821c59c36d220d9c","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/821c59c36d220d9c","status":"passed","time":{"start":1696982522143,"stop":1696982523099,"duration":956}}]},"tags":[]},"source":"f7f84d3de2ca5c31.json","parameterValues":["{'url': 'wss://pioneer.api.onfinality.io/public-ws', 'name': 'Bit.Country Pioneer'}"]}