{"uid":"745578fe0b4670d6","name":"test_can_create_connection[Test for Polkadot, url: wss://polkadot-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"315be884cdb6488ec3793a9c58c6e516","time":{"start":1686715455878,"stop":1686715456200,"duration":322},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 14 Jun 2023 04:04:15 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadot', 'url': 'wss://polkadot-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 14 Jun 2023 04:04:15 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 14 Jun 2023 04:04:15 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadot', 'url': 'wss://polkadot-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 14 Jun 2023 04:04:15 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"db49520596804269","name":"stdout","source":"db49520596804269.txt","type":"text/plain","size":1065}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az251-536"},{"name":"thread","value":"1925-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot-rpc.dwellir.com', 'name': 'Polkadot'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"662cd2862c90c628","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 14 Jun 2023 04:04:00 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1686715440471,"stop":1686715440796,"duration":325}},{"uid":"ebebdfd0c97b88e3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 14 Jun 2023 04:03:44 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1686715424916,"stop":1686715425301,"duration":385}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":232,"unknown":0,"total":234},"items":[{"uid":"f9f0ee2190c4367b","reportUrl":"https://novasamatech.github.io/test-runner/3203//#testresult/f9f0ee2190c4367b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 14 Jun 2023 00:13:37 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1686701617678,"stop":1686701618054,"duration":376}},{"uid":"fff40a0664c98a3e","reportUrl":"https://novasamatech.github.io/test-runner/3202//#testresult/fff40a0664c98a3e","status":"passed","time":{"start":1686686644023,"stop":1686686644528,"duration":505}},{"uid":"73a2d4e0d4a89a0d","reportUrl":"https://novasamatech.github.io/test-runner/3201//#testresult/73a2d4e0d4a89a0d","status":"passed","time":{"start":1686672243170,"stop":1686672243800,"duration":630}},{"uid":"74a5b64d8cf538ce","reportUrl":"https://novasamatech.github.io/test-runner/3200//#testresult/74a5b64d8cf538ce","status":"passed","time":{"start":1686657888176,"stop":1686657888862,"duration":686}},{"uid":"44fb9de8e0d9521f","reportUrl":"https://novasamatech.github.io/test-runner/3199//#testresult/44fb9de8e0d9521f","status":"passed","time":{"start":1686643456021,"stop":1686643456541,"duration":520}},{"uid":"e81c721dd3753a03","reportUrl":"https://novasamatech.github.io/test-runner/3198//#testresult/e81c721dd3753a03","status":"passed","time":{"start":1686629039244,"stop":1686629039722,"duration":478}},{"uid":"99af3cca690ca33c","reportUrl":"https://novasamatech.github.io/test-runner/3197//#testresult/99af3cca690ca33c","status":"passed","time":{"start":1686615255065,"stop":1686615255657,"duration":592}},{"uid":"b3207e06c9ca29ba","reportUrl":"https://novasamatech.github.io/test-runner/3196//#testresult/b3207e06c9ca29ba","status":"passed","time":{"start":1686600237168,"stop":1686600237817,"duration":649}},{"uid":"c354e7880545d7fc","reportUrl":"https://novasamatech.github.io/test-runner/3195//#testresult/c354e7880545d7fc","status":"passed","time":{"start":1686585824078,"stop":1686585824550,"duration":472}},{"uid":"9dc57c84421b3fdd","reportUrl":"https://novasamatech.github.io/test-runner/3194//#testresult/9dc57c84421b3fdd","status":"passed","time":{"start":1686571497397,"stop":1686571497906,"duration":509}},{"uid":"d9a29c142eb3727d","reportUrl":"https://novasamatech.github.io/test-runner/3193//#testresult/d9a29c142eb3727d","status":"passed","time":{"start":1686557060958,"stop":1686557061465,"duration":507}},{"uid":"f9972ebd90c17986","reportUrl":"https://novasamatech.github.io/test-runner/3192//#testresult/f9972ebd90c17986","status":"passed","time":{"start":1686542638204,"stop":1686542638702,"duration":498}},{"uid":"2045df152fc85f21","reportUrl":"https://novasamatech.github.io/test-runner/3191//#testresult/2045df152fc85f21","status":"passed","time":{"start":1686528885084,"stop":1686528885564,"duration":480}},{"uid":"486fdc29c688ff6d","reportUrl":"https://novasamatech.github.io/test-runner/3190//#testresult/486fdc29c688ff6d","status":"passed","time":{"start":1686513815347,"stop":1686513815813,"duration":466}},{"uid":"32e282e4b6d127c","reportUrl":"https://novasamatech.github.io/test-runner/3189//#testresult/32e282e4b6d127c","status":"passed","time":{"start":1686499440424,"stop":1686499441093,"duration":669}},{"uid":"105fd4bb499db6eb","reportUrl":"https://novasamatech.github.io/test-runner/3188//#testresult/105fd4bb499db6eb","status":"passed","time":{"start":1686485088640,"stop":1686485089421,"duration":781}},{"uid":"322534814b713ddd","reportUrl":"https://novasamatech.github.io/test-runner/3187//#testresult/322534814b713ddd","status":"passed","time":{"start":1686470637362,"stop":1686470637841,"duration":479}},{"uid":"56c7ebbd4b77abfc","reportUrl":"https://novasamatech.github.io/test-runner/3186//#testresult/56c7ebbd4b77abfc","status":"passed","time":{"start":1686456220115,"stop":1686456220601,"duration":486}},{"uid":"fcdefa53a58ae588","reportUrl":"https://novasamatech.github.io/test-runner/3185//#testresult/fcdefa53a58ae588","status":"passed","time":{"start":1686442514764,"stop":1686442515561,"duration":797}},{"uid":"ad14a26656f660e1","reportUrl":"https://novasamatech.github.io/test-runner/3184//#testresult/ad14a26656f660e1","status":"passed","time":{"start":1686427466046,"stop":1686427466859,"duration":813}}]},"tags":[]},"source":"745578fe0b4670d6.json","parameterValues":["{'url': 'wss://polkadot-rpc.dwellir.com', 'name': 'Polkadot'}"]}