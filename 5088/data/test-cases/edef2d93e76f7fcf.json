{"uid":"edef2d93e76f7fcf","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1713456071340,"stop":1713456071747,"duration":407},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f75d286d270>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f75d17481c0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f75d174a020>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az979-882"},{"name":"thread","value":"2082-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2bb5d5c9d7ad251a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713456065947,"stop":1713456066304,"duration":357}},{"uid":"3f3e49246d78e745","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713456060276,"stop":1713456060810,"duration":534}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":55,"skipped":0,"passed":1107,"unknown":0,"total":1163},"items":[{"uid":"b0323f541e8dcdbf","reportUrl":"https://novasamatech.github.io/test-runner/5087//#testresult/b0323f541e8dcdbf","status":"passed","time":{"start":1713441688673,"stop":1713441689256,"duration":583}},{"uid":"a2624c9988de13dc","reportUrl":"https://novasamatech.github.io/test-runner/5086//#testresult/a2624c9988de13dc","status":"passed","time":{"start":1713427265060,"stop":1713427265562,"duration":502}},{"uid":"c34cc26b17787feb","reportUrl":"https://novasamatech.github.io/test-runner/5085//#testresult/c34cc26b17787feb","status":"passed","time":{"start":1713412864666,"stop":1713412865386,"duration":720}},{"uid":"8f4fefb3890dd889","reportUrl":"https://novasamatech.github.io/test-runner/5084//#testresult/8f4fefb3890dd889","status":"passed","time":{"start":1713398508651,"stop":1713398509198,"duration":547}},{"uid":"3614ad5f3fecdcf4","reportUrl":"https://novasamatech.github.io/test-runner/5083//#testresult/3614ad5f3fecdcf4","status":"passed","time":{"start":1713384058798,"stop":1713384059566,"duration":768}},{"uid":"5a0224ebc1a9629b","reportUrl":"https://novasamatech.github.io/test-runner/5082//#testresult/5a0224ebc1a9629b","status":"passed","time":{"start":1713369673306,"stop":1713369673690,"duration":384}},{"uid":"8c846abd2c8f04d5","reportUrl":"https://novasamatech.github.io/test-runner/5081//#testresult/8c846abd2c8f04d5","status":"passed","time":{"start":1713355267609,"stop":1713355267891,"duration":282}},{"uid":"c0dba9869451424e","reportUrl":"https://novasamatech.github.io/test-runner/5080//#testresult/c0dba9869451424e","status":"passed","time":{"start":1713340864695,"stop":1713340865393,"duration":698}},{"uid":"ad35d53dc54035a","reportUrl":"https://novasamatech.github.io/test-runner/5079//#testresult/ad35d53dc54035a","status":"passed","time":{"start":1713326456330,"stop":1713326456529,"duration":199}},{"uid":"2e11016a27a3ec73","reportUrl":"https://novasamatech.github.io/test-runner/5078//#testresult/2e11016a27a3ec73","status":"passed","time":{"start":1713312110103,"stop":1713312110329,"duration":226}},{"uid":"55603877d440cdba","reportUrl":"https://novasamatech.github.io/test-runner/5077//#testresult/55603877d440cdba","status":"passed","time":{"start":1713297657875,"stop":1713297658173,"duration":298}},{"uid":"31c95eefc1e4354b","reportUrl":"https://novasamatech.github.io/test-runner/5076//#testresult/31c95eefc1e4354b","status":"passed","time":{"start":1713283287363,"stop":1713283287673,"duration":310}},{"uid":"372bf88f0afaacc2","reportUrl":"https://novasamatech.github.io/test-runner/5075//#testresult/372bf88f0afaacc2","status":"passed","time":{"start":1713268866421,"stop":1713268867102,"duration":681}},{"uid":"a08433b65ab99cd7","reportUrl":"https://novasamatech.github.io/test-runner/5074//#testresult/a08433b65ab99cd7","status":"passed","time":{"start":1713254462184,"stop":1713254462916,"duration":732}},{"uid":"afc9416a41ab3c50","reportUrl":"https://novasamatech.github.io/test-runner/5073//#testresult/afc9416a41ab3c50","status":"passed","time":{"start":1713240056743,"stop":1713240056926,"duration":183}},{"uid":"f2c798d4c0ce5c9a","reportUrl":"https://novasamatech.github.io/test-runner/5072//#testresult/f2c798d4c0ce5c9a","status":"passed","time":{"start":1713225691928,"stop":1713225692634,"duration":706}},{"uid":"f80f5a2c5d79a1de","reportUrl":"https://novasamatech.github.io/test-runner/5071//#testresult/f80f5a2c5d79a1de","status":"passed","time":{"start":1713211265889,"stop":1713211266436,"duration":547}},{"uid":"b5a5c4635a5189b3","reportUrl":"https://novasamatech.github.io/test-runner/5070//#testresult/b5a5c4635a5189b3","status":"passed","time":{"start":1713196869487,"stop":1713196870132,"duration":645}},{"uid":"2ce64f0018037eba","reportUrl":"https://novasamatech.github.io/test-runner/5069//#testresult/2ce64f0018037eba","status":"passed","time":{"start":1713182469899,"stop":1713182470616,"duration":717}},{"uid":"c9e7bbd714241ea6","reportUrl":"https://novasamatech.github.io/test-runner/5068//#testresult/c9e7bbd714241ea6","status":"passed","time":{"start":1713168062028,"stop":1713168062685,"duration":657}}]},"tags":[]},"source":"edef2d93e76f7fcf.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}