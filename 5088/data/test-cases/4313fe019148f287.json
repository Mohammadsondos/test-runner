{"uid":"4313fe019148f287","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1713456072767,"stop":1713456073126,"duration":359},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f1241c71bd0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f12409e1ea0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f12409e0850>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az979-882"},{"name":"thread","value":"2079-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1b52329b267bee4f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713456067339,"stop":1713456067730,"duration":391}},{"uid":"bda90248787eb4af","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1713456061584,"stop":1713456062237,"duration":653}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":58,"skipped":0,"passed":1103,"unknown":0,"total":1163},"items":[{"uid":"42cad225746af3f7","reportUrl":"https://novasamatech.github.io/test-runner/5087//#testresult/42cad225746af3f7","status":"passed","time":{"start":1713441675323,"stop":1713441676343,"duration":1020}},{"uid":"51e74caef9daa8d2","reportUrl":"https://novasamatech.github.io/test-runner/5086//#testresult/51e74caef9daa8d2","status":"passed","time":{"start":1713427266018,"stop":1713427266327,"duration":309}},{"uid":"4b842a85d3cf1682","reportUrl":"https://novasamatech.github.io/test-runner/5085//#testresult/4b842a85d3cf1682","status":"passed","time":{"start":1713412865379,"stop":1713412866077,"duration":698}},{"uid":"b0483a262792924a","reportUrl":"https://novasamatech.github.io/test-runner/5084//#testresult/b0483a262792924a","status":"passed","time":{"start":1713398509520,"stop":1713398509910,"duration":390}},{"uid":"7e3a0ff02a6ff544","reportUrl":"https://novasamatech.github.io/test-runner/5083//#testresult/7e3a0ff02a6ff544","status":"passed","time":{"start":1713384060097,"stop":1713384062695,"duration":2598}},{"uid":"f039ed0e2a74d3aa","reportUrl":"https://novasamatech.github.io/test-runner/5082//#testresult/f039ed0e2a74d3aa","status":"passed","time":{"start":1713369673797,"stop":1713369674112,"duration":315}},{"uid":"c0004c1e3a41cdd8","reportUrl":"https://novasamatech.github.io/test-runner/5081//#testresult/c0004c1e3a41cdd8","status":"passed","time":{"start":1713355268092,"stop":1713355268294,"duration":202}},{"uid":"6c61174c067e2d51","reportUrl":"https://novasamatech.github.io/test-runner/5080//#testresult/6c61174c067e2d51","status":"passed","time":{"start":1713340865389,"stop":1713340866008,"duration":619}},{"uid":"a960aff5d56e604","reportUrl":"https://novasamatech.github.io/test-runner/5079//#testresult/a960aff5d56e604","status":"passed","time":{"start":1713326456945,"stop":1713326457790,"duration":845}},{"uid":"c580ba4a9faebfd2","reportUrl":"https://novasamatech.github.io/test-runner/5078//#testresult/c580ba4a9faebfd2","status":"passed","time":{"start":1713312110749,"stop":1713312110972,"duration":223}},{"uid":"b40b6fbad172f30e","reportUrl":"https://novasamatech.github.io/test-runner/5077//#testresult/b40b6fbad172f30e","status":"passed","time":{"start":1713297658517,"stop":1713297658722,"duration":205}},{"uid":"fd1246b8c1ebc18a","reportUrl":"https://novasamatech.github.io/test-runner/5076//#testresult/fd1246b8c1ebc18a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713283278445,"stop":1713283278606,"duration":161}},{"uid":"d9dff6dd16992a44","reportUrl":"https://novasamatech.github.io/test-runner/5075//#testresult/d9dff6dd16992a44","status":"passed","time":{"start":1713268867170,"stop":1713268867372,"duration":202}},{"uid":"45a7113ded9b1aa4","reportUrl":"https://novasamatech.github.io/test-runner/5074//#testresult/45a7113ded9b1aa4","status":"passed","time":{"start":1713254462869,"stop":1713254463481,"duration":612}},{"uid":"d7e0ea1745e7470a","reportUrl":"https://novasamatech.github.io/test-runner/5073//#testresult/d7e0ea1745e7470a","status":"passed","time":{"start":1713240057389,"stop":1713240057802,"duration":413}},{"uid":"8d29c5ca8db480aa","reportUrl":"https://novasamatech.github.io/test-runner/5072//#testresult/8d29c5ca8db480aa","status":"passed","time":{"start":1713225694288,"stop":1713225694987,"duration":699}},{"uid":"a275e1862410cb0","reportUrl":"https://novasamatech.github.io/test-runner/5071//#testresult/a275e1862410cb0","status":"passed","time":{"start":1713211266662,"stop":1713211266891,"duration":229}},{"uid":"5115ca4f98c2550e","reportUrl":"https://novasamatech.github.io/test-runner/5070//#testresult/5115ca4f98c2550e","status":"passed","time":{"start":1713196870950,"stop":1713196871562,"duration":612}},{"uid":"731f4db15475b6ff","reportUrl":"https://novasamatech.github.io/test-runner/5069//#testresult/731f4db15475b6ff","status":"passed","time":{"start":1713182470625,"stop":1713182471002,"duration":377}},{"uid":"939d6e3eeace05ac","reportUrl":"https://novasamatech.github.io/test-runner/5068//#testresult/939d6e3eeace05ac","status":"passed","time":{"start":1713168062622,"stop":1713168063608,"duration":986}}]},"tags":[]},"source":"4313fe019148f287.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}