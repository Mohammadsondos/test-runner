{"uid":"ae0fa954cd5774ec","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1713456073008,"stop":1713456073431,"duration":423},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7ff009d8dba0>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7ff008b5bc10>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7ff008b5be80>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az979-882"},{"name":"thread","value":"2076-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2d5fbe70fa4bb2c8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713456067614,"stop":1713456067972,"duration":358}},{"uid":"50eaeca4ef978550","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1713456061470,"stop":1713456062514,"duration":1044}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":72,"skipped":0,"passed":1086,"unknown":0,"total":1163},"items":[{"uid":"37457a9e274ddeb0","reportUrl":"https://novasamatech.github.io/test-runner/5087//#testresult/37457a9e274ddeb0","status":"passed","time":{"start":1713441674962,"stop":1713441675617,"duration":655}},{"uid":"2f596e6a4dad6090","reportUrl":"https://novasamatech.github.io/test-runner/5086//#testresult/2f596e6a4dad6090","status":"passed","time":{"start":1713427265787,"stop":1713427266626,"duration":839}},{"uid":"c267c33ddf1be557","reportUrl":"https://novasamatech.github.io/test-runner/5085//#testresult/c267c33ddf1be557","status":"passed","time":{"start":1713412866080,"stop":1713412866977,"duration":897}},{"uid":"ff343fade8c5411b","reportUrl":"https://novasamatech.github.io/test-runner/5084//#testresult/ff343fade8c5411b","status":"passed","time":{"start":1713398509768,"stop":1713398510275,"duration":507}},{"uid":"9f2b6a8d302fcbe5","reportUrl":"https://novasamatech.github.io/test-runner/5083//#testresult/9f2b6a8d302fcbe5","status":"passed","time":{"start":1713384060186,"stop":1713384061117,"duration":931}},{"uid":"f39808e258468912","reportUrl":"https://novasamatech.github.io/test-runner/5082//#testresult/f39808e258468912","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713369685556,"stop":1713369685702,"duration":146}},{"uid":"a0c0f0e1f1f4835a","reportUrl":"https://novasamatech.github.io/test-runner/5081//#testresult/a0c0f0e1f1f4835a","status":"passed","time":{"start":1713355268221,"stop":1713355268779,"duration":558}},{"uid":"a59ba4f70221da32","reportUrl":"https://novasamatech.github.io/test-runner/5080//#testresult/a59ba4f70221da32","status":"passed","time":{"start":1713340866010,"stop":1713340866951,"duration":941}},{"uid":"e90c0745551de145","reportUrl":"https://novasamatech.github.io/test-runner/5079//#testresult/e90c0745551de145","status":"passed","time":{"start":1713326456998,"stop":1713326459143,"duration":2145}},{"uid":"a5903be77d346d59","reportUrl":"https://novasamatech.github.io/test-runner/5078//#testresult/a5903be77d346d59","status":"passed","time":{"start":1713312110804,"stop":1713312111605,"duration":801}},{"uid":"3cf1d258f12a534f","reportUrl":"https://novasamatech.github.io/test-runner/5077//#testresult/3cf1d258f12a534f","status":"passed","time":{"start":1713297658594,"stop":1713297659320,"duration":726}},{"uid":"a1769be650dafcfa","reportUrl":"https://novasamatech.github.io/test-runner/5076//#testresult/a1769be650dafcfa","status":"passed","time":{"start":1713283283843,"stop":1713283286270,"duration":2427}},{"uid":"945f54ff0545a962","reportUrl":"https://novasamatech.github.io/test-runner/5075//#testresult/945f54ff0545a962","status":"passed","time":{"start":1713268867335,"stop":1713268869841,"duration":2506}},{"uid":"97513468a79e3c51","reportUrl":"https://novasamatech.github.io/test-runner/5074//#testresult/97513468a79e3c51","status":"passed","time":{"start":1713254463319,"stop":1713254465400,"duration":2081}},{"uid":"f55583c04f3488f7","reportUrl":"https://novasamatech.github.io/test-runner/5073//#testresult/f55583c04f3488f7","status":"passed","time":{"start":1713240059261,"stop":1713240060494,"duration":1233}},{"uid":"4d74bc58ce74a429","reportUrl":"https://novasamatech.github.io/test-runner/5072//#testresult/4d74bc58ce74a429","status":"passed","time":{"start":1713225693073,"stop":1713225695310,"duration":2237}},{"uid":"24ea6821214e478a","reportUrl":"https://novasamatech.github.io/test-runner/5071//#testresult/24ea6821214e478a","status":"passed","time":{"start":1713211266893,"stop":1713211268493,"duration":1600}},{"uid":"ccdb238cf34f5af9","reportUrl":"https://novasamatech.github.io/test-runner/5070//#testresult/ccdb238cf34f5af9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713196883371,"stop":1713196883727,"duration":356}},{"uid":"f1941578a5ec9645","reportUrl":"https://novasamatech.github.io/test-runner/5069//#testresult/f1941578a5ec9645","status":"passed","time":{"start":1713182470644,"stop":1713182471963,"duration":1319}},{"uid":"c2bd6ae5d26a048c","reportUrl":"https://novasamatech.github.io/test-runner/5068//#testresult/c2bd6ae5d26a048c","status":"passed","time":{"start":1713168063178,"stop":1713168064652,"duration":1474}}]},"tags":[]},"source":"ae0fa954cd5774ec.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}