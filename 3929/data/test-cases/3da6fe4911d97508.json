{"uid":"3da6fe4911d97508","name":"test_precision[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"d509d66f8aae8d37ee667169b62aafd3","time":{"start":1697011360975,"stop":1697011362987,"duration":2012},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7fde2157f460>\nchain = <scripts.utils.chain_model.Chain object at 0x7fde21606a40>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fde03e11030>\nmethod = 'state_getMetadata'\nparams = ['0x04dab833e8a4babcb867732f0369fe5cd9f702504194a5b83dbe211fe6a0fdf0']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az485-529"},{"name":"thread","value":"2088-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fde21606a40>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7dff71ec17335886","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697011343816,"stop":1697011345712,"duration":1896}},{"uid":"63e4d9f48edc079","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697011326648,"stop":1697011328610,"duration":1962}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":285,"unknown":0,"total":289},"items":[{"uid":"2be4897715cfa453","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/2be4897715cfa453","status":"passed","time":{"start":1696996934243,"stop":1696996939311,"duration":5068}},{"uid":"3d6296430c6cc6b0","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/3d6296430c6cc6b0","status":"passed","time":{"start":1696982565368,"stop":1696982573292,"duration":7924}},{"uid":"d98dd1af4e825dbe","reportUrl":"https://novasamatech.github.io/test-runner/3926//#testresult/d98dd1af4e825dbe","status":"passed","time":{"start":1696968123422,"stop":1696968133331,"duration":9909}},{"uid":"b4ae7ec75b4a8c1b","reportUrl":"https://novasamatech.github.io/test-runner/3925//#testresult/b4ae7ec75b4a8c1b","status":"passed","time":{"start":1696953733121,"stop":1696953740309,"duration":7188}},{"uid":"201982c6c64934b","reportUrl":"https://novasamatech.github.io/test-runner/3924//#testresult/201982c6c64934b","status":"passed","time":{"start":1696939339731,"stop":1696939348045,"duration":8314}},{"uid":"ae503d8822f8e686","reportUrl":"https://novasamatech.github.io/test-runner/3923//#testresult/ae503d8822f8e686","status":"passed","time":{"start":1696924914942,"stop":1696924922177,"duration":7235}},{"uid":"9708669021f23004","reportUrl":"https://novasamatech.github.io/test-runner/3922//#testresult/9708669021f23004","status":"passed","time":{"start":1696910524499,"stop":1696910530007,"duration":5508}},{"uid":"e8f31721dc5de51b","reportUrl":"https://novasamatech.github.io/test-runner/3921//#testresult/e8f31721dc5de51b","status":"passed","time":{"start":1696896152775,"stop":1696896158149,"duration":5374}},{"uid":"b6368fc91c5078c3","reportUrl":"https://novasamatech.github.io/test-runner/3920//#testresult/b6368fc91c5078c3","status":"passed","time":{"start":1696881722471,"stop":1696881729883,"duration":7412}},{"uid":"2aa286211587569f","reportUrl":"https://novasamatech.github.io/test-runner/3919//#testresult/2aa286211587569f","status":"passed","time":{"start":1696867335984,"stop":1696867342387,"duration":6403}},{"uid":"ef14fac4095372b7","reportUrl":"https://novasamatech.github.io/test-runner/3918//#testresult/ef14fac4095372b7","status":"passed","time":{"start":1696852958267,"stop":1696852965587,"duration":7320}},{"uid":"74bc4d3b1e954f16","reportUrl":"https://novasamatech.github.io/test-runner/3917//#testresult/74bc4d3b1e954f16","status":"passed","time":{"start":1696838521162,"stop":1696838528313,"duration":7151}},{"uid":"1938e858073f61dd","reportUrl":"https://novasamatech.github.io/test-runner/3916//#testresult/1938e858073f61dd","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696824169837,"stop":1696824171605,"duration":1768}},{"uid":"9e8c96a87cfca8ed","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/9e8c96a87cfca8ed","status":"passed","time":{"start":1696809785677,"stop":1696809792398,"duration":6721}},{"uid":"3d2f3cc24754779f","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/3d2f3cc24754779f","status":"passed","time":{"start":1696795330094,"stop":1696795335400,"duration":5306}},{"uid":"787afae7019653a8","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/787afae7019653a8","status":"passed","time":{"start":1696780918461,"stop":1696780926888,"duration":8427}},{"uid":"26b861b7f2c96cef","reportUrl":"https://novasamatech.github.io/test-runner/3912//#testresult/26b861b7f2c96cef","status":"passed","time":{"start":1696766505921,"stop":1696766511231,"duration":5310}},{"uid":"41287cf75b21fddb","reportUrl":"https://novasamatech.github.io/test-runner/3911//#testresult/41287cf75b21fddb","status":"passed","time":{"start":1696752150081,"stop":1696752155758,"duration":5677}},{"uid":"312e12d1916e859","reportUrl":"https://novasamatech.github.io/test-runner/3910//#testresult/312e12d1916e859","status":"passed","time":{"start":1696737735930,"stop":1696737741447,"duration":5517}},{"uid":"672644fcdb3fb048","reportUrl":"https://novasamatech.github.io/test-runner/3909//#testresult/672644fcdb3fb048","status":"passed","time":{"start":1696723381098,"stop":1696723387701,"duration":6603}}]},"tags":[]},"source":"3da6fe4911d97508.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fde21606a40>"]}