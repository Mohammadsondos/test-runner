{"uid":"e7b1613c03070459","name":"test_can_create_connection[Test for Polkadot, url: wss://polkadot.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3d6e4d900ee752640ae09aecc5be71f8","time":{"start":1697025781206,"stop":1697025781915,"duration":709},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"data = {'name': 'Polkadot', 'url': 'wss://polkadot.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fe3d5964610>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"data = {'name': 'Polkadot', 'url': 'wss://polkadot.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fe3d5964610>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"9d28fbc26f66f50d","name":"stdout","source":"9d28fbc26f66f50d.txt","type":"text/plain","size":575}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1250-288"},{"name":"thread","value":"2090-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.api.onfinality.io/public-ws', 'name': 'Polkadot'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3031b460bbc0e3b3","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697025765327,"stop":1697025766044,"duration":717}},{"uid":"e7b8bb90fc7a8a46","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697025689342,"stop":1697025750027,"duration":60685}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":289,"unknown":0,"total":290},"items":[{"uid":"dd91be7b76db819e","reportUrl":"https://novasamatech.github.io/test-runner/3929//#testresult/dd91be7b76db819e","status":"passed","time":{"start":1697011286388,"stop":1697011287116,"duration":728}},{"uid":"b3eefc619b98fe87","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/b3eefc619b98fe87","status":"passed","time":{"start":1696996875976,"stop":1696996876916,"duration":940}},{"uid":"6980821932d6cfdf","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/6980821932d6cfdf","status":"passed","time":{"start":1696982517736,"stop":1696982518882,"duration":1146}},{"uid":"8fe919cf08d3868f","reportUrl":"https://novasamatech.github.io/test-runner/3926//#testresult/8fe919cf08d3868f","status":"passed","time":{"start":1696968090814,"stop":1696968091977,"duration":1163}},{"uid":"83c3223eeeccad50","reportUrl":"https://novasamatech.github.io/test-runner/3925//#testresult/83c3223eeeccad50","status":"passed","time":{"start":1696953686134,"stop":1696953686869,"duration":735}},{"uid":"9eba731b8d140c87","reportUrl":"https://novasamatech.github.io/test-runner/3924//#testresult/9eba731b8d140c87","status":"passed","time":{"start":1696939280848,"stop":1696939282177,"duration":1329}},{"uid":"38c4edaec31631b2","reportUrl":"https://novasamatech.github.io/test-runner/3923//#testresult/38c4edaec31631b2","status":"passed","time":{"start":1696924883679,"stop":1696924884727,"duration":1048}},{"uid":"3854edf345675a17","reportUrl":"https://novasamatech.github.io/test-runner/3922//#testresult/3854edf345675a17","status":"passed","time":{"start":1696910477940,"stop":1696910479016,"duration":1076}},{"uid":"f8a1f57856e2128f","reportUrl":"https://novasamatech.github.io/test-runner/3921//#testresult/f8a1f57856e2128f","status":"passed","time":{"start":1696896129780,"stop":1696896130656,"duration":876}},{"uid":"85885c09277ce5c3","reportUrl":"https://novasamatech.github.io/test-runner/3920//#testresult/85885c09277ce5c3","status":"passed","time":{"start":1696881686371,"stop":1696881687247,"duration":876}},{"uid":"3982ce88b067708e","reportUrl":"https://novasamatech.github.io/test-runner/3919//#testresult/3982ce88b067708e","status":"passed","time":{"start":1696867286041,"stop":1696867287108,"duration":1067}},{"uid":"1fc8749bebef2a3d","reportUrl":"https://novasamatech.github.io/test-runner/3918//#testresult/1fc8749bebef2a3d","status":"passed","time":{"start":1696852890407,"stop":1696852891156,"duration":749}},{"uid":"604c49000f030ae7","reportUrl":"https://novasamatech.github.io/test-runner/3917//#testresult/604c49000f030ae7","status":"passed","time":{"start":1696838481991,"stop":1696838482918,"duration":927}},{"uid":"d22536ddc4ec95e6","reportUrl":"https://novasamatech.github.io/test-runner/3916//#testresult/d22536ddc4ec95e6","status":"passed","time":{"start":1696824075438,"stop":1696824076559,"duration":1121}},{"uid":"59439c4f9fe183cc","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/59439c4f9fe183cc","status":"passed","time":{"start":1696809725200,"stop":1696809726148,"duration":948}},{"uid":"18db3a39a6da1b34","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/18db3a39a6da1b34","status":"passed","time":{"start":1696795276330,"stop":1696795277300,"duration":970}},{"uid":"756e831f8d7057ff","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/756e831f8d7057ff","status":"passed","time":{"start":1696780877231,"stop":1696780878189,"duration":958}},{"uid":"4fa960840e962698","reportUrl":"https://novasamatech.github.io/test-runner/3912//#testresult/4fa960840e962698","status":"passed","time":{"start":1696766476999,"stop":1696766478059,"duration":1060}},{"uid":"80558a4a7d919ad","reportUrl":"https://novasamatech.github.io/test-runner/3911//#testresult/80558a4a7d919ad","status":"passed","time":{"start":1696752095651,"stop":1696752096478,"duration":827}},{"uid":"6538a9e1459f5a0f","reportUrl":"https://novasamatech.github.io/test-runner/3910//#testresult/6538a9e1459f5a0f","status":"passed","time":{"start":1696737679543,"stop":1696737680504,"duration":961}}]},"tags":[]},"source":"e7b1613c03070459.json","parameterValues":["{'url': 'wss://polkadot.api.onfinality.io/public-ws', 'name': 'Polkadot'}"]}