{"uid":"7b09965a10cba829","name":"test_can_create_connection[Test for Nodle Parachain, url: wss://nodle-parachain.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e25e5e392faa8447ae2b8bca966817b4","time":{"start":1705593980324,"stop":1705593980324,"duration":0},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 18 Jan 2024 16:06:20 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'NA', 'x-cluster': 'lh', 'x-kong-response-latency': '0', 'server': 'kong/2.1.4'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Nodle Parachain, url: wss://nodle-parachain.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 18 Jan 2024 16:06:20 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'NA', 'x-cluster': 'lh', 'x-kong-response-latency': '0', 'server': 'kong/2.1.4'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1705593949994,"stop":1705593950119,"duration":125},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 18 Jan 2024 16:05:50 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'NA', 'x-cluster': 'lh', 'x-kong-response-latency': '1', 'server': 'kong/2.1.4'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1705593965188,"stop":1705593965258,"duration":70},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 18 Jan 2024 16:06:05 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'NA', 'x-cluster': 'lh', 'x-kong-response-latency': '1', 'server': 'kong/2.1.4'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1705593980325,"stop":1705593980410,"duration":85},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 18 Jan 2024 16:06:20 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'NA', 'x-cluster': 'lh', 'x-kong-response-latency': '0', 'server': 'kong/2.1.4'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 18 Jan 2024 16:06:20 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'NA', 'x-cluster': 'lh', 'x-kong-response-latency': '0', 'server': 'kong/2.1.4'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Nodle Parachain, url: wss://nodle-parachain.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 18 Jan 2024 16:06:20 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'NA', 'x-cluster': 'lh', 'x-kong-response-latency': '0', 'server': 'kong/2.1.4'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"9b4fdf8122cbeceb","name":"stdout","source":"9b4fdf8122cbeceb.txt","type":"text/plain","size":1404}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1391-61"},{"name":"thread","value":"2074-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://nodle-parachain.api.onfinality.io/public-ws', 'name': 'Nodle Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c5b382b4fcbe94b1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 18 Jan 2024 16:06:05 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'NA', 'x-cluster': 'lh', 'x-kong-response-latency': '1', 'server': 'kong/2.1.4'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1705593965188,"stop":1705593965188,"duration":0}},{"uid":"6b1297e513f77760","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 18 Jan 2024 16:05:50 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'NA', 'x-cluster': 'lh', 'x-kong-response-latency': '1', 'server': 'kong/2.1.4'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1705593949993,"stop":1705593949993,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":748,"unknown":0,"total":749},"items":[{"uid":"b6077c7a58654c78","reportUrl":"https://novasamatech.github.io/test-runner/4535//#testresult/b6077c7a58654c78","status":"passed","time":{"start":1705579565784,"stop":1705579565784,"duration":0}},{"uid":"8406033a4428ca81","reportUrl":"https://novasamatech.github.io/test-runner/4533//#testresult/8406033a4428ca81","status":"passed","time":{"start":1705550668949,"stop":1705550668950,"duration":1}},{"uid":"95effd9979355417","reportUrl":"https://novasamatech.github.io/test-runner/4532//#testresult/95effd9979355417","status":"passed","time":{"start":1705536329227,"stop":1705536329228,"duration":1}},{"uid":"f8776624b43597db","reportUrl":"https://novasamatech.github.io/test-runner/4531//#testresult/f8776624b43597db","status":"passed","time":{"start":1705521968440,"stop":1705521968441,"duration":1}},{"uid":"9c975eb9cb56e088","reportUrl":"https://novasamatech.github.io/test-runner/4530//#testresult/9c975eb9cb56e088","status":"passed","time":{"start":1705507500909,"stop":1705507500909,"duration":0}},{"uid":"fc87e2bb83a1bce3","reportUrl":"https://novasamatech.github.io/test-runner/4529//#testresult/fc87e2bb83a1bce3","status":"passed","time":{"start":1705493074320,"stop":1705493074320,"duration":0}},{"uid":"5af79a3c5a1a0c37","reportUrl":"https://novasamatech.github.io/test-runner/4528//#testresult/5af79a3c5a1a0c37","status":"passed","time":{"start":1705478687902,"stop":1705478687903,"duration":1}},{"uid":"98e56c089ef157ac","reportUrl":"https://novasamatech.github.io/test-runner/4527//#testresult/98e56c089ef157ac","status":"passed","time":{"start":1705464269481,"stop":1705464269481,"duration":0}},{"uid":"1a0be92f6b190fee","reportUrl":"https://novasamatech.github.io/test-runner/4526//#testresult/1a0be92f6b190fee","status":"passed","time":{"start":1705449907540,"stop":1705449907540,"duration":0}},{"uid":"23eb629b60149395","reportUrl":"https://novasamatech.github.io/test-runner/4525//#testresult/23eb629b60149395","status":"passed","time":{"start":1705435509201,"stop":1705435509201,"duration":0}},{"uid":"400d638922ce8c6d","reportUrl":"https://novasamatech.github.io/test-runner/4524//#testresult/400d638922ce8c6d","status":"passed","time":{"start":1705421132627,"stop":1705421132627,"duration":0}},{"uid":"67167be0b1b08e98","reportUrl":"https://novasamatech.github.io/test-runner/4523//#testresult/67167be0b1b08e98","status":"passed","time":{"start":1705406689079,"stop":1705406689079,"duration":0}},{"uid":"2f2ed2bd450734ec","reportUrl":"https://novasamatech.github.io/test-runner/4522//#testresult/2f2ed2bd450734ec","status":"passed","time":{"start":1705392247053,"stop":1705392247053,"duration":0}},{"uid":"3da01620c8ea6f0b","reportUrl":"https://novasamatech.github.io/test-runner/4521//#testresult/3da01620c8ea6f0b","status":"passed","time":{"start":1705377853520,"stop":1705377853520,"duration":0}},{"uid":"5532bcc79364fc94","reportUrl":"https://novasamatech.github.io/test-runner/4520//#testresult/5532bcc79364fc94","status":"passed","time":{"start":1705363514395,"stop":1705363514395,"duration":0}},{"uid":"ef8dedb4bde9826","reportUrl":"https://novasamatech.github.io/test-runner/4519//#testresult/ef8dedb4bde9826","status":"passed","time":{"start":1705349048700,"stop":1705349048700,"duration":0}},{"uid":"2f080a80313bac0","reportUrl":"https://novasamatech.github.io/test-runner/4518//#testresult/2f080a80313bac0","status":"passed","time":{"start":1705334691876,"stop":1705334691876,"duration":0}},{"uid":"261e7de1bd599193","reportUrl":"https://novasamatech.github.io/test-runner/4517//#testresult/261e7de1bd599193","status":"passed","time":{"start":1705320284526,"stop":1705320284526,"duration":0}},{"uid":"effc258fb9b2132d","reportUrl":"https://novasamatech.github.io/test-runner/4516//#testresult/effc258fb9b2132d","status":"passed","time":{"start":1705305860417,"stop":1705305860417,"duration":0}},{"uid":"decb5cdeebb38205","reportUrl":"https://novasamatech.github.io/test-runner/4515//#testresult/decb5cdeebb38205","status":"passed","time":{"start":1705291448879,"stop":1705291448879,"duration":0}}]},"tags":[]},"source":"7b09965a10cba829.json","parameterValues":["{'url': 'wss://nodle-parachain.api.onfinality.io/public-ws', 'name': 'Nodle Parachain'}"]}