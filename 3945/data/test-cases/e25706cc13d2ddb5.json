{"uid":"e25706cc13d2ddb5","name":"test_can_create_connection[Test for Bit.Country Pioneer, url: wss://pioneer.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"0c3c502fc2031b773f1baf0102f5a28e","time":{"start":1697242011341,"stop":1697242192054,"duration":180713},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Bit.Country Pioneer', 'url': 'wss://pioneer.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Bit.Country Pioneer', 'url': 'wss://pioneer.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"d0a1d78cc01ea9eb","name":"stdout","source":"d0a1d78cc01ea9eb.txt","type":"text/plain","size":384}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1030-277"},{"name":"thread","value":"2332-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://pioneer.api.onfinality.io/public-ws', 'name': 'Bit.Country Pioneer'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"be08487a43573662","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697241875437,"stop":1697241996180,"duration":120743}},{"uid":"93cbe4b5ccc237bd","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697241739499,"stop":1697241860217,"duration":120718}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":299,"unknown":0,"total":305},"items":[{"uid":"d8cb6d13c3f78442","reportUrl":"https://novasamatech.github.io/test-runner/3944//#testresult/d8cb6d13c3f78442","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697227857360,"stop":1697227978032,"duration":120672}},{"uid":"7c3bd593862c0d58","reportUrl":"https://novasamatech.github.io/test-runner/3943//#testresult/7c3bd593862c0d58","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697213043598,"stop":1697213104133,"duration":60535}},{"uid":"21f20e470c993905","reportUrl":"https://novasamatech.github.io/test-runner/3942//#testresult/21f20e470c993905","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697198707755,"stop":1697198828446,"duration":120691}},{"uid":"21020e9dc385dc1e","reportUrl":"https://novasamatech.github.io/test-runner/3941//#testresult/21020e9dc385dc1e","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697184359984,"stop":1697184420648,"duration":60664}},{"uid":"6a600f2056076bd1","reportUrl":"https://novasamatech.github.io/test-runner/3940//#testresult/6a600f2056076bd1","status":"passed","time":{"start":1697169690675,"stop":1697169691394,"duration":719}},{"uid":"4ebb5af5fc31c7ee","reportUrl":"https://novasamatech.github.io/test-runner/3939//#testresult/4ebb5af5fc31c7ee","status":"passed","time":{"start":1697155331928,"stop":1697155332973,"duration":1045}},{"uid":"f674b3c633ebedb4","reportUrl":"https://novasamatech.github.io/test-runner/3938//#testresult/f674b3c633ebedb4","status":"passed","time":{"start":1697140879637,"stop":1697140880580,"duration":943}},{"uid":"47848e6d6432eb51","reportUrl":"https://novasamatech.github.io/test-runner/3937//#testresult/47848e6d6432eb51","status":"passed","time":{"start":1697126564936,"stop":1697126565856,"duration":920}},{"uid":"8e4204b9daf3bfc5","reportUrl":"https://novasamatech.github.io/test-runner/3936//#testresult/8e4204b9daf3bfc5","status":"passed","time":{"start":1697112093205,"stop":1697112094174,"duration":969}},{"uid":"23938b1cf7500f92","reportUrl":"https://novasamatech.github.io/test-runner/3935//#testresult/23938b1cf7500f92","status":"passed","time":{"start":1697097686448,"stop":1697097687367,"duration":919}},{"uid":"75c1bddfbe207357","reportUrl":"https://novasamatech.github.io/test-runner/3934//#testresult/75c1bddfbe207357","status":"passed","time":{"start":1697083285226,"stop":1697083286195,"duration":969}},{"uid":"11484c40a78e985d","reportUrl":"https://novasamatech.github.io/test-runner/3933//#testresult/11484c40a78e985d","status":"passed","time":{"start":1697068934778,"stop":1697068935744,"duration":966}},{"uid":"df4da1c5db9b7a61","reportUrl":"https://novasamatech.github.io/test-runner/3932//#testresult/df4da1c5db9b7a61","status":"passed","time":{"start":1697054495533,"stop":1697054496656,"duration":1123}},{"uid":"2151927eade3fe47","reportUrl":"https://novasamatech.github.io/test-runner/3931//#testresult/2151927eade3fe47","status":"passed","time":{"start":1697040100362,"stop":1697040101466,"duration":1104}},{"uid":"6c361aae20ce32fb","reportUrl":"https://novasamatech.github.io/test-runner/3930//#testresult/6c361aae20ce32fb","status":"passed","time":{"start":1697025693825,"stop":1697025694550,"duration":725}},{"uid":"973153b247273024","reportUrl":"https://novasamatech.github.io/test-runner/3929//#testresult/973153b247273024","status":"passed","time":{"start":1697011288737,"stop":1697011289459,"duration":722}},{"uid":"a91d17ad39b75cf4","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/a91d17ad39b75cf4","status":"passed","time":{"start":1696996879789,"stop":1696996880677,"duration":888}},{"uid":"821c59c36d220d9c","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/821c59c36d220d9c","status":"passed","time":{"start":1696982522143,"stop":1696982523099,"duration":956}},{"uid":"c24095965dd50699","reportUrl":"https://novasamatech.github.io/test-runner/3926//#testresult/c24095965dd50699","status":"passed","time":{"start":1696968096749,"stop":1696968097671,"duration":922}},{"uid":"e521d8ec2fc73216","reportUrl":"https://novasamatech.github.io/test-runner/3925//#testresult/e521d8ec2fc73216","status":"passed","time":{"start":1696953690723,"stop":1696953691457,"duration":734}}]},"tags":[]},"source":"e25706cc13d2ddb5.json","parameterValues":["{'url': 'wss://pioneer.api.onfinality.io/public-ws', 'name': 'Bit.Country Pioneer'}"]}