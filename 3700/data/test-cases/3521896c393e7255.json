{"uid":"3521896c393e7255","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1693742545659,"stop":1693742546325,"duration":666},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sun, 03 Sep 2023 12:02:25 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sun, 03 Sep 2023 12:02:25 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sun, 03 Sep 2023 12:02:25 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sun, 03 Sep 2023 12:02:25 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"4cff170a3490ff9f","name":"stdout","source":"4cff170a3490ff9f.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az301-754"},{"name":"thread","value":"2050-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8b461e191c2e59ac","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sun, 03 Sep 2023 12:02:09 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693742529865,"stop":1693742530485,"duration":620}},{"uid":"f85e3832e40f698e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sun, 03 Sep 2023 12:01:54 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693742513831,"stop":1693742514668,"duration":837}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":60,"unknown":0,"total":62},"items":[{"uid":"7eb8e01f55f6ed9e","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/7eb8e01f55f6ed9e","status":"passed","time":{"start":1693728112231,"stop":1693728112867,"duration":636}},{"uid":"d3aed8bfad109681","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/d3aed8bfad109681","status":"passed","time":{"start":1693713715493,"stop":1693713716322,"duration":829}},{"uid":"2038efbc195da2ee","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/2038efbc195da2ee","status":"passed","time":{"start":1693699343409,"stop":1693699344173,"duration":764}},{"uid":"4119631cf2e21691","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/4119631cf2e21691","status":"passed","time":{"start":1693684910574,"stop":1693684911241,"duration":667}},{"uid":"4ee4c7a3dfdb5997","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/4ee4c7a3dfdb5997","status":"passed","time":{"start":1693670494072,"stop":1693670494684,"duration":612}},{"uid":"2e4072eac6e10332","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/2e4072eac6e10332","status":"passed","time":{"start":1693656096632,"stop":1693656097589,"duration":957}},{"uid":"58607bd33d2b6b0","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/58607bd33d2b6b0","status":"passed","time":{"start":1693641692673,"stop":1693641693375,"duration":702}},{"uid":"66761f852216ed24","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/66761f852216ed24","status":"passed","time":{"start":1693627304098,"stop":1693627304900,"duration":802}},{"uid":"aab13253bfd87015","reportUrl":"https://novasamatech.github.io/test-runner/3691//#testresult/aab13253bfd87015","status":"passed","time":{"start":1693612952974,"stop":1693612954033,"duration":1059}},{"uid":"d73cc7b67e92e1f9","reportUrl":"https://novasamatech.github.io/test-runner/3690//#testresult/d73cc7b67e92e1f9","status":"passed","time":{"start":1693598509609,"stop":1693598510403,"duration":794}},{"uid":"1bd3081106fa5d47","reportUrl":"https://novasamatech.github.io/test-runner/3689//#testresult/1bd3081106fa5d47","status":"passed","time":{"start":1693584110747,"stop":1693584111564,"duration":817}},{"uid":"df5725e85908bcb2","reportUrl":"https://novasamatech.github.io/test-runner/3688//#testresult/df5725e85908bcb2","status":"passed","time":{"start":1693569718342,"stop":1693569719151,"duration":809}},{"uid":"a8aee4c5f6da5b5f","reportUrl":"https://novasamatech.github.io/test-runner/3687//#testresult/a8aee4c5f6da5b5f","status":"passed","time":{"start":1693555741401,"stop":1693555742268,"duration":867}},{"uid":"51c7b6196affa4bd","reportUrl":"https://novasamatech.github.io/test-runner/3686//#testresult/51c7b6196affa4bd","status":"passed","time":{"start":1693540910847,"stop":1693540911753,"duration":906}},{"uid":"c084ee00c13ffb8e","reportUrl":"https://novasamatech.github.io/test-runner/3685//#testresult/c084ee00c13ffb8e","status":"passed","time":{"start":1693526559432,"stop":1693526560234,"duration":802}},{"uid":"fead585fbe072899","reportUrl":"https://novasamatech.github.io/test-runner/3684//#testresult/fead585fbe072899","status":"passed","time":{"start":1693512132808,"stop":1693512134078,"duration":1270}},{"uid":"b755d61da4760a49","reportUrl":"https://novasamatech.github.io/test-runner/3683//#testresult/b755d61da4760a49","status":"passed","time":{"start":1693497719803,"stop":1693497720465,"duration":662}},{"uid":"50e63d39236d5909","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/50e63d39236d5909","status":"passed","time":{"start":1693483313256,"stop":1693483314072,"duration":816}},{"uid":"661b92072b71a59c","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/661b92072b71a59c","status":"passed","time":{"start":1693468903141,"stop":1693468903851,"duration":710}},{"uid":"9e1a8fbab3a68a44","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/9e1a8fbab3a68a44","status":"passed","time":{"start":1693454521654,"stop":1693454522738,"duration":1084}}]},"tags":[]},"source":"3521896c393e7255.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}