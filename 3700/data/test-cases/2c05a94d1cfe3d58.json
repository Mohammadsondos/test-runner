{"uid":"2c05a94d1cfe3d58","name":"test_can_create_connection[Test for Kylin, url: wss://polkadot.kylin-node.co.uk]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3ee0d191ab7acb2fad9a82a3aa808e89","time":{"start":1693742560205,"stop":1693742560399,"duration":194},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 03 Sep 2023 12:02:40 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 03 Sep 2023 12:02:40 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 03 Sep 2023 12:02:40 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 03 Sep 2023 12:02:40 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b66dd35c67322179","name":"stdout","source":"b66dd35c67322179.txt","type":"text/plain","size":1500}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az301-754"},{"name":"thread","value":"2053-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"dce66c12af88e9d2","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 03 Sep 2023 12:02:25 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1693742544868,"stop":1693742545043,"duration":175}},{"uid":"99cd1cd9d35a6639","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Sun, 03 Sep 2023 12:02:09 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1693742529509,"stop":1693742529754,"duration":245}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":61,"unknown":0,"total":62},"items":[{"uid":"2a3fb9c58da4c35e","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/2a3fb9c58da4c35e","status":"passed","time":{"start":1693728127721,"stop":1693728127940,"duration":219}},{"uid":"d4effdc3b551f656","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/d4effdc3b551f656","status":"passed","time":{"start":1693713721320,"stop":1693713721591,"duration":271}},{"uid":"d1a28ce4a6d44d6","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/d1a28ce4a6d44d6","status":"passed","time":{"start":1693699350187,"stop":1693699350253,"duration":66}},{"uid":"a5afed432c1804c","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/a5afed432c1804c","status":"passed","time":{"start":1693684913160,"stop":1693684913397,"duration":237}},{"uid":"a96c413a7a501d12","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/a96c413a7a501d12","status":"passed","time":{"start":1693670518978,"stop":1693670519065,"duration":87}},{"uid":"97f281dfd28f65ca","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/97f281dfd28f65ca","status":"passed","time":{"start":1693656106502,"stop":1693656106551,"duration":49}},{"uid":"d45412564705b15b","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/d45412564705b15b","status":"passed","time":{"start":1693641698729,"stop":1693641698799,"duration":70}},{"uid":"e97bbb33a84b5bed","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/e97bbb33a84b5bed","status":"passed","time":{"start":1693627307311,"stop":1693627307578,"duration":267}},{"uid":"563678b29dddd3ea","reportUrl":"https://novasamatech.github.io/test-runner/3691//#testresult/563678b29dddd3ea","status":"passed","time":{"start":1693612964186,"stop":1693612964332,"duration":146}},{"uid":"ea95973dd0238ea8","reportUrl":"https://novasamatech.github.io/test-runner/3690//#testresult/ea95973dd0238ea8","status":"passed","time":{"start":1693598520126,"stop":1693598520363,"duration":237}},{"uid":"b9ab5ceb2dfca12f","reportUrl":"https://novasamatech.github.io/test-runner/3689//#testresult/b9ab5ceb2dfca12f","status":"passed","time":{"start":1693584127709,"stop":1693584127954,"duration":245}},{"uid":"703c2c61251416f3","reportUrl":"https://novasamatech.github.io/test-runner/3688//#testresult/703c2c61251416f3","status":"passed","time":{"start":1693569746663,"stop":1693569746945,"duration":282}},{"uid":"2bda8ee3180aa654","reportUrl":"https://novasamatech.github.io/test-runner/3687//#testresult/2bda8ee3180aa654","status":"passed","time":{"start":1693555773956,"stop":1693555774288,"duration":332}},{"uid":"a211827a57cccbd4","reportUrl":"https://novasamatech.github.io/test-runner/3686//#testresult/a211827a57cccbd4","status":"passed","time":{"start":1693540917716,"stop":1693540918145,"duration":429}},{"uid":"86946691bca8f19a","reportUrl":"https://novasamatech.github.io/test-runner/3685//#testresult/86946691bca8f19a","status":"passed","time":{"start":1693526564832,"stop":1693526565072,"duration":240}},{"uid":"711823674f1f2715","reportUrl":"https://novasamatech.github.io/test-runner/3684//#testresult/711823674f1f2715","status":"passed","time":{"start":1693512140179,"stop":1693512140978,"duration":799}},{"uid":"a91067a713b80bbc","reportUrl":"https://novasamatech.github.io/test-runner/3683//#testresult/a91067a713b80bbc","status":"passed","time":{"start":1693497725358,"stop":1693497725454,"duration":96}},{"uid":"ad1db0e55eaf5ad7","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/ad1db0e55eaf5ad7","status":"passed","time":{"start":1693483353233,"stop":1693483353452,"duration":219}},{"uid":"7d0a94a7e40a61a4","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/7d0a94a7e40a61a4","status":"passed","time":{"start":1693468912132,"stop":1693468912204,"duration":72}},{"uid":"52441ed123e4de98","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/52441ed123e4de98","status":"passed","time":{"start":1693454527316,"stop":1693454527684,"duration":368}}]},"tags":[]},"source":"2c05a94d1cfe3d58.json","parameterValues":["{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"]}