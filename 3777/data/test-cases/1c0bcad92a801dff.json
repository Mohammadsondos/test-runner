{"uid":"1c0bcad92a801dff","name":"test_can_create_connection[Test for Efinity, url: wss://efinity-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"f0d671d9a2a539de5bff43146ab75e98","time":{"start":1694836935334,"stop":1694836935362,"duration":28},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'efinity-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fc5a8dea620>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'efinity-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Efinity', 'url': 'wss://efinity-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:121: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'efinity-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fc5a8dea620>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:166: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'efinity-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fc5a8dea620>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'efinity-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Efinity', 'url': 'wss://efinity-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:121: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'efinity-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fc5a8dea620>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:166: WebSocketAddressException","steps":[],"attachments":[{"uid":"8bd65ab9cb48f1ea","name":"stdout","source":"8bd65ab9cb48f1ea.txt","type":"text/plain","size":351}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az621-754"},{"name":"thread","value":"2071-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://efinity-rpc.dwellir.com', 'name': 'Efinity'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bef21904c3d300e9","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1694836920100,"stop":1694836920157,"duration":57}},{"uid":"7f768006a8590e52","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1694836904811,"stop":1694836904921,"duration":110}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":132,"unknown":0,"total":138},"items":[{"uid":"e0adcee6f116ae22","reportUrl":"https://novasamatech.github.io/test-runner/3776//#testresult/e0adcee6f116ae22","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1694822580965,"stop":1694822580977,"duration":12}},{"uid":"104e5a3f87619f28","reportUrl":"https://novasamatech.github.io/test-runner/3775//#testresult/104e5a3f87619f28","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1694808142238,"stop":1694808142286,"duration":48}},{"uid":"dec7c4fe975ecda","reportUrl":"https://novasamatech.github.io/test-runner/3774//#testresult/dec7c4fe975ecda","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1694793749173,"stop":1694793749225,"duration":52}},{"uid":"72f89a49c6842e5f","reportUrl":"https://novasamatech.github.io/test-runner/3773//#testresult/72f89a49c6842e5f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694779337439,"stop":1694779340793,"duration":3354}},{"uid":"6f87199f988373f","reportUrl":"https://novasamatech.github.io/test-runner/3772//#testresult/6f87199f988373f","status":"passed","time":{"start":1694764905679,"stop":1694764906312,"duration":633}},{"uid":"357af9fbcb94329f","reportUrl":"https://novasamatech.github.io/test-runner/3771//#testresult/357af9fbcb94329f","status":"passed","time":{"start":1694750511410,"stop":1694750512184,"duration":774}},{"uid":"e8c352997756d553","reportUrl":"https://novasamatech.github.io/test-runner/3770//#testresult/e8c352997756d553","status":"passed","time":{"start":1694736142154,"stop":1694736142632,"duration":478}},{"uid":"924de1329387403f","reportUrl":"https://novasamatech.github.io/test-runner/3769//#testresult/924de1329387403f","status":"passed","time":{"start":1694721704512,"stop":1694721705274,"duration":762}},{"uid":"a1af71fd7225bee8","reportUrl":"https://novasamatech.github.io/test-runner/3768//#testresult/a1af71fd7225bee8","status":"passed","time":{"start":1694707306575,"stop":1694707307074,"duration":499}},{"uid":"c804e62485a67eff","reportUrl":"https://novasamatech.github.io/test-runner/3767//#testresult/c804e62485a67eff","status":"passed","time":{"start":1694692911850,"stop":1694692912340,"duration":490}},{"uid":"640bc64c391df76b","reportUrl":"https://novasamatech.github.io/test-runner/3766//#testresult/640bc64c391df76b","status":"passed","time":{"start":1694678497005,"stop":1694678497493,"duration":488}},{"uid":"1e9a40573f6ea758","reportUrl":"https://novasamatech.github.io/test-runner/3765//#testresult/1e9a40573f6ea758","status":"passed","time":{"start":1694664093922,"stop":1694664094410,"duration":488}},{"uid":"25912ae6c6ad122a","reportUrl":"https://novasamatech.github.io/test-runner/3764//#testresult/25912ae6c6ad122a","status":"passed","time":{"start":1694649740690,"stop":1694649741184,"duration":494}},{"uid":"a6d42126447157c7","reportUrl":"https://novasamatech.github.io/test-runner/3763//#testresult/a6d42126447157c7","status":"passed","time":{"start":1694635297115,"stop":1694635297580,"duration":465}},{"uid":"8669d342e4cb8ddb","reportUrl":"https://novasamatech.github.io/test-runner/3762//#testresult/8669d342e4cb8ddb","status":"passed","time":{"start":1694620913692,"stop":1694620914448,"duration":756}},{"uid":"a0cb4e9f5cdca1c6","reportUrl":"https://novasamatech.github.io/test-runner/3761//#testresult/a0cb4e9f5cdca1c6","status":"passed","time":{"start":1694606516806,"stop":1694606517393,"duration":587}},{"uid":"111fa47f3baf4af2","reportUrl":"https://novasamatech.github.io/test-runner/3760//#testresult/111fa47f3baf4af2","status":"passed","time":{"start":1694597299117,"stop":1694597299738,"duration":621}},{"uid":"61d842d3bb4dfc50","reportUrl":"https://novasamatech.github.io/test-runner/3759//#testresult/61d842d3bb4dfc50","status":"passed","time":{"start":1694592102159,"stop":1694592102753,"duration":594}},{"uid":"c67291e7a173e931","reportUrl":"https://novasamatech.github.io/test-runner/3758//#testresult/c67291e7a173e931","status":"passed","time":{"start":1694577706643,"stop":1694577707119,"duration":476}},{"uid":"22f70b904fdb6690","reportUrl":"https://novasamatech.github.io/test-runner/3757//#testresult/22f70b904fdb6690","status":"passed","time":{"start":1694563359466,"stop":1694563360040,"duration":574}}]},"tags":[]},"source":"1c0bcad92a801dff.json","parameterValues":["{'url': 'wss://efinity-rpc.dwellir.com', 'name': 'Efinity'}"]}