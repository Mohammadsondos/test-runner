{"uid":"fed13b3ea117c1c3","name":"test_can_create_connection[Test for Joystream, url: wss://rpc.joystream.org]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"0531002b3c72e5f090f0c59bbed56551","time":{"start":1705306212586,"stop":1705306212586,"duration":0},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Mon, 15 Jan 2024 08:10:14 GMT', 'content-length': '0'} -+-+- b''","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Joystream, url: wss://rpc.joystream.org]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Mon, 15 Jan 2024 08:10:14 GMT', 'content-length': '0'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1705306179215,"stop":1705306180871,"duration":1656},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Mon, 15 Jan 2024 08:09:40 GMT', 'content-length': '0'} -+-+- b''\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1705306195936,"stop":1705306197522,"duration":1586},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Mon, 15 Jan 2024 08:09:57 GMT', 'content-length': '0'} -+-+- b''\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1705306212586,"stop":1705306214172,"duration":1586},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Mon, 15 Jan 2024 08:10:14 GMT', 'content-length': '0'} -+-+- b''\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Mon, 15 Jan 2024 08:10:14 GMT', 'content-length': '0'} -+-+- b''","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Joystream, url: wss://rpc.joystream.org]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Mon, 15 Jan 2024 08:10:14 GMT', 'content-length': '0'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"9c7f50c76e97a650","name":"stdout","source":"9c7f50c76e97a650.txt","type":"text/plain","size":753}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az774-109"},{"name":"thread","value":"2100-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://rpc.joystream.org', 'name': 'Joystream'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4f6a3a7791583e48","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Mon, 15 Jan 2024 08:09:57 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705306195936,"stop":1705306195936,"duration":0}},{"uid":"924a29342bab4eb0","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Mon, 15 Jan 2024 08:09:40 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705306179214,"stop":1705306179214,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":155,"unknown":0,"total":156},"items":[{"uid":"88d5f0d6b8509acc","reportUrl":"https://novasamatech.github.io/test-runner/4515//#testresult/88d5f0d6b8509acc","status":"passed","time":{"start":1705291726463,"stop":1705291726463,"duration":0}},{"uid":"2d1032172ec155fb","reportUrl":"https://novasamatech.github.io/test-runner/4514//#testresult/2d1032172ec155fb","status":"passed","time":{"start":1705277416236,"stop":1705277416236,"duration":0}},{"uid":"82f229a1ac0f171a","reportUrl":"https://novasamatech.github.io/test-runner/4513//#testresult/82f229a1ac0f171a","status":"passed","time":{"start":1705263014940,"stop":1705263014940,"duration":0}},{"uid":"f1efc5ac95c9db3f","reportUrl":"https://novasamatech.github.io/test-runner/4512//#testresult/f1efc5ac95c9db3f","status":"passed","time":{"start":1705248656006,"stop":1705248656007,"duration":1}},{"uid":"b27d0fba62218625","reportUrl":"https://novasamatech.github.io/test-runner/4511//#testresult/b27d0fba62218625","status":"passed","time":{"start":1705234176964,"stop":1705234176964,"duration":0}},{"uid":"92bbf8571609b5df","reportUrl":"https://novasamatech.github.io/test-runner/4510//#testresult/92bbf8571609b5df","status":"passed","time":{"start":1705219776940,"stop":1705219776940,"duration":0}},{"uid":"9a4731d5cddd47a3","reportUrl":"https://novasamatech.github.io/test-runner/4509//#testresult/9a4731d5cddd47a3","status":"passed","time":{"start":1705205333240,"stop":1705205333240,"duration":0}},{"uid":"fc7c2a7d97fd0f22","reportUrl":"https://novasamatech.github.io/test-runner/4508//#testresult/fc7c2a7d97fd0f22","status":"passed","time":{"start":1705191043213,"stop":1705191043213,"duration":0}},{"uid":"3a2179f0db586128","reportUrl":"https://novasamatech.github.io/test-runner/4507//#testresult/3a2179f0db586128","status":"passed","time":{"start":1705176579027,"stop":1705176579027,"duration":0}},{"uid":"9b1ae8287deaee06","reportUrl":"https://novasamatech.github.io/test-runner/4506//#testresult/9b1ae8287deaee06","status":"passed","time":{"start":1705162164148,"stop":1705162164148,"duration":0}},{"uid":"e0c79fc67580da0a","reportUrl":"https://novasamatech.github.io/test-runner/4505//#testresult/e0c79fc67580da0a","status":"passed","time":{"start":1705147731410,"stop":1705147731410,"duration":0}},{"uid":"fa9a88681a40ad27","reportUrl":"https://novasamatech.github.io/test-runner/4504//#testresult/fa9a88681a40ad27","status":"passed","time":{"start":1705133353872,"stop":1705133353872,"duration":0}},{"uid":"a1219f1ac901b63c","reportUrl":"https://novasamatech.github.io/test-runner/4503//#testresult/a1219f1ac901b63c","status":"passed","time":{"start":1705118949472,"stop":1705118949473,"duration":1}},{"uid":"dc30a992a5cae5b9","reportUrl":"https://novasamatech.github.io/test-runner/4502//#testresult/dc30a992a5cae5b9","status":"passed","time":{"start":1705104575635,"stop":1705104575635,"duration":0}},{"uid":"4a332567c185d0ea","reportUrl":"https://novasamatech.github.io/test-runner/4501//#testresult/4a332567c185d0ea","status":"passed","time":{"start":1705090247542,"stop":1705090247542,"duration":0}},{"uid":"c7178c5771f3cf2e","reportUrl":"https://novasamatech.github.io/test-runner/4500//#testresult/c7178c5771f3cf2e","status":"passed","time":{"start":1705075761119,"stop":1705075761120,"duration":1}},{"uid":"d8b054524efc5a39","reportUrl":"https://novasamatech.github.io/test-runner/4499//#testresult/d8b054524efc5a39","status":"passed","time":{"start":1705061401899,"stop":1705061401900,"duration":1}},{"uid":"9adf1b5b2bb0dbff","reportUrl":"https://novasamatech.github.io/test-runner/4498//#testresult/9adf1b5b2bb0dbff","status":"passed","time":{"start":1705046991205,"stop":1705046991205,"duration":0}},{"uid":"514f1992ca3dae6d","reportUrl":"https://novasamatech.github.io/test-runner/4497//#testresult/514f1992ca3dae6d","status":"passed","time":{"start":1705032584396,"stop":1705032584396,"duration":0}},{"uid":"75fa939231d000b9","reportUrl":"https://novasamatech.github.io/test-runner/4496//#testresult/75fa939231d000b9","status":"passed","time":{"start":1705018194295,"stop":1705018194295,"duration":0}}]},"tags":[]},"source":"fed13b3ea117c1c3.json","parameterValues":["{'url': 'wss://rpc.joystream.org', 'name': 'Joystream'}"]}