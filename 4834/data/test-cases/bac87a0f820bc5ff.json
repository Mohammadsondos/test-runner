{"uid":"bac87a0f820bc5ff","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1709827277209,"stop":1709827277284,"duration":75},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f2d5d85db70>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f2d5c5db8b0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f2d5c5dae30>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az532-192"},{"name":"thread","value":"2171-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"21d9c76f36a37a3d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709827272110,"stop":1709827272174,"duration":64}},{"uid":"70996250b9957893","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709827266950,"stop":1709827267002,"duration":52}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":22,"skipped":0,"passed":923,"unknown":0,"total":945},"items":[{"uid":"d11afa1a64f511c4","reportUrl":"https://novasamatech.github.io/test-runner/4833//#testresult/d11afa1a64f511c4","status":"passed","time":{"start":1709812897371,"stop":1709812897630,"duration":259}},{"uid":"4caba11f7dee762","reportUrl":"https://novasamatech.github.io/test-runner/4832//#testresult/4caba11f7dee762","status":"passed","time":{"start":1709798467613,"stop":1709798468113,"duration":500}},{"uid":"190df6bfa4403e09","reportUrl":"https://novasamatech.github.io/test-runner/4831//#testresult/190df6bfa4403e09","status":"passed","time":{"start":1709784066972,"stop":1709784067312,"duration":340}},{"uid":"eb478925f3df5b65","reportUrl":"https://novasamatech.github.io/test-runner/4830//#testresult/eb478925f3df5b65","status":"passed","time":{"start":1709769699475,"stop":1709769699915,"duration":440}},{"uid":"142a309a0f9d5ed7","reportUrl":"https://novasamatech.github.io/test-runner/4829//#testresult/142a309a0f9d5ed7","status":"passed","time":{"start":1709755279751,"stop":1709755280174,"duration":423}},{"uid":"57cb8ab6c5120f53","reportUrl":"https://novasamatech.github.io/test-runner/4828//#testresult/57cb8ab6c5120f53","status":"passed","time":{"start":1709740872657,"stop":1709740873139,"duration":482}},{"uid":"6319fac3b9d61093","reportUrl":"https://novasamatech.github.io/test-runner/4827//#testresult/6319fac3b9d61093","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709726488849,"stop":1709726489008,"duration":159}},{"uid":"ce1d273621e718dd","reportUrl":"https://novasamatech.github.io/test-runner/4826//#testresult/ce1d273621e718dd","status":"passed","time":{"start":1709712058811,"stop":1709712059073,"duration":262}},{"uid":"13d659a4f78c44c8","reportUrl":"https://novasamatech.github.io/test-runner/4825//#testresult/13d659a4f78c44c8","status":"passed","time":{"start":1709697665154,"stop":1709697665814,"duration":660}},{"uid":"6fc5509f008edd6b","reportUrl":"https://novasamatech.github.io/test-runner/4824//#testresult/6fc5509f008edd6b","status":"passed","time":{"start":1709683310587,"stop":1709683311067,"duration":480}},{"uid":"36f845226153fc52","reportUrl":"https://novasamatech.github.io/test-runner/4823//#testresult/36f845226153fc52","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709668867617,"stop":1709668867781,"duration":164}},{"uid":"ca8a9e7fc5098ee0","reportUrl":"https://novasamatech.github.io/test-runner/4822//#testresult/ca8a9e7fc5098ee0","status":"passed","time":{"start":1709654473379,"stop":1709654474038,"duration":659}},{"uid":"bab5e8e9360fb80f","reportUrl":"https://novasamatech.github.io/test-runner/4821//#testresult/bab5e8e9360fb80f","status":"passed","time":{"start":1709640075436,"stop":1709640076453,"duration":1017}},{"uid":"f83411d5582c958d","reportUrl":"https://novasamatech.github.io/test-runner/4820//#testresult/f83411d5582c958d","status":"passed","time":{"start":1709625669321,"stop":1709625670153,"duration":832}},{"uid":"c7962d1484611723","reportUrl":"https://novasamatech.github.io/test-runner/4819//#testresult/c7962d1484611723","status":"passed","time":{"start":1709611259478,"stop":1709611259733,"duration":255}},{"uid":"d572d78cd38c23e8","reportUrl":"https://novasamatech.github.io/test-runner/4818//#testresult/d572d78cd38c23e8","status":"passed","time":{"start":1709596893602,"stop":1709596894589,"duration":987}},{"uid":"ab32eda9e6e7e65c","reportUrl":"https://novasamatech.github.io/test-runner/4817//#testresult/ab32eda9e6e7e65c","status":"passed","time":{"start":1709582473531,"stop":1709582473833,"duration":302}},{"uid":"126c49669f52966e","reportUrl":"https://novasamatech.github.io/test-runner/4816//#testresult/126c49669f52966e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709568072366,"stop":1709568072512,"duration":146}},{"uid":"1dc30bf494040212","reportUrl":"https://novasamatech.github.io/test-runner/4815//#testresult/1dc30bf494040212","status":"passed","time":{"start":1709553979600,"stop":1709553980219,"duration":619}},{"uid":"1fd0052047f6a79","reportUrl":"https://novasamatech.github.io/test-runner/4814//#testresult/1fd0052047f6a79","status":"passed","time":{"start":1709539721090,"stop":1709539721761,"duration":671}}]},"tags":[]},"source":"bac87a0f820bc5ff.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}