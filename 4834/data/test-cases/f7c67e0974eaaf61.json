{"uid":"f7c67e0974eaaf61","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1709827286699,"stop":1709827286746,"duration":47},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f7bf658f760>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f7bf41eb190>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f7bf41e93f0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az532-192"},{"name":"thread","value":"2174-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c7b475a8f6f25b9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709827281600,"stop":1709827281665,"duration":65}},{"uid":"24e39b86ca8de563","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709827276516,"stop":1709827276566,"duration":50}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":19,"skipped":0,"passed":923,"unknown":0,"total":945},"items":[{"uid":"332bf291eb66ebf8","reportUrl":"https://novasamatech.github.io/test-runner/4833//#testresult/332bf291eb66ebf8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709812910812,"stop":1709812910900,"duration":88}},{"uid":"79111cee52cb8295","reportUrl":"https://novasamatech.github.io/test-runner/4832//#testresult/79111cee52cb8295","status":"passed","time":{"start":1709798467585,"stop":1709798467822,"duration":237}},{"uid":"b18a93206dd0206a","reportUrl":"https://novasamatech.github.io/test-runner/4831//#testresult/b18a93206dd0206a","status":"passed","time":{"start":1709784066373,"stop":1709784066819,"duration":446}},{"uid":"18a0194f7bb5ebea","reportUrl":"https://novasamatech.github.io/test-runner/4830//#testresult/18a0194f7bb5ebea","status":"passed","time":{"start":1709769698777,"stop":1709769699150,"duration":373}},{"uid":"72d3ed9bfb133e93","reportUrl":"https://novasamatech.github.io/test-runner/4829//#testresult/72d3ed9bfb133e93","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709755269475,"stop":1709755269528,"duration":53}},{"uid":"6f7043430cd56d79","reportUrl":"https://novasamatech.github.io/test-runner/4828//#testresult/6f7043430cd56d79","status":"passed","time":{"start":1709740872896,"stop":1709740873310,"duration":414}},{"uid":"597018c22efe9175","reportUrl":"https://novasamatech.github.io/test-runner/4827//#testresult/597018c22efe9175","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709726479173,"stop":1709726479315,"duration":142}},{"uid":"1f898ad0f2bff999","reportUrl":"https://novasamatech.github.io/test-runner/4826//#testresult/1f898ad0f2bff999","status":"passed","time":{"start":1709712059061,"stop":1709712059208,"duration":147}},{"uid":"b0a253fdc7968c35","reportUrl":"https://novasamatech.github.io/test-runner/4825//#testresult/b0a253fdc7968c35","status":"passed","time":{"start":1709697665371,"stop":1709697665944,"duration":573}},{"uid":"3f5e287e6438e38d","reportUrl":"https://novasamatech.github.io/test-runner/4824//#testresult/3f5e287e6438e38d","status":"passed","time":{"start":1709683310563,"stop":1709683310964,"duration":401}},{"uid":"11b6b4741ef66d72","reportUrl":"https://novasamatech.github.io/test-runner/4823//#testresult/11b6b4741ef66d72","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709668877921,"stop":1709668878076,"duration":155}},{"uid":"d5196fac24dbc2c3","reportUrl":"https://novasamatech.github.io/test-runner/4822//#testresult/d5196fac24dbc2c3","status":"passed","time":{"start":1709654472685,"stop":1709654473289,"duration":604}},{"uid":"879d9b756bb12d75","reportUrl":"https://novasamatech.github.io/test-runner/4821//#testresult/879d9b756bb12d75","status":"passed","time":{"start":1709640068733,"stop":1709640069342,"duration":609}},{"uid":"a612cc2dcaca7390","reportUrl":"https://novasamatech.github.io/test-runner/4820//#testresult/a612cc2dcaca7390","status":"passed","time":{"start":1709625668938,"stop":1709625669630,"duration":692}},{"uid":"3e6f991cd585b21a","reportUrl":"https://novasamatech.github.io/test-runner/4819//#testresult/3e6f991cd585b21a","status":"passed","time":{"start":1709611259392,"stop":1709611259669,"duration":277}},{"uid":"fd600a9451345307","reportUrl":"https://novasamatech.github.io/test-runner/4818//#testresult/fd600a9451345307","status":"passed","time":{"start":1709596893162,"stop":1709596893850,"duration":688}},{"uid":"2b866314ca2ac2ab","reportUrl":"https://novasamatech.github.io/test-runner/4817//#testresult/2b866314ca2ac2ab","status":"passed","time":{"start":1709582474157,"stop":1709582474386,"duration":229}},{"uid":"24dab52ec5c5bd12","reportUrl":"https://novasamatech.github.io/test-runner/4816//#testresult/24dab52ec5c5bd12","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709568112073,"stop":1709568112265,"duration":192}},{"uid":"e7ca5c7a4eb7e0f","reportUrl":"https://novasamatech.github.io/test-runner/4815//#testresult/e7ca5c7a4eb7e0f","status":"passed","time":{"start":1709553979091,"stop":1709553979658,"duration":567}},{"uid":"a21a39583c35b177","reportUrl":"https://novasamatech.github.io/test-runner/4814//#testresult/a21a39583c35b177","status":"passed","time":{"start":1709539720645,"stop":1709539721272,"duration":627}}]},"tags":[]},"source":"f7c67e0974eaaf61.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}