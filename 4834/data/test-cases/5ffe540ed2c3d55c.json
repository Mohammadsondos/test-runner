{"uid":"5ffe540ed2c3d55c","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1709827286417,"stop":1709827286461,"duration":44},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f8bc888d960>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f8bc86468c0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f8bc86447f0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az532-192"},{"name":"thread","value":"2177-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7f4a727fc4de50dd","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709827281336,"stop":1709827281381,"duration":45}},{"uid":"597dc38688fc1cdf","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709827276218,"stop":1709827276301,"duration":83}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":14,"skipped":0,"passed":478,"unknown":0,"total":493},"items":[{"uid":"93f5f5446e0092b6","reportUrl":"https://novasamatech.github.io/test-runner/4833//#testresult/93f5f5446e0092b6","status":"passed","time":{"start":1709812895945,"stop":1709812896153,"duration":208}},{"uid":"1930369bd529c48e","reportUrl":"https://novasamatech.github.io/test-runner/4832//#testresult/1930369bd529c48e","status":"passed","time":{"start":1709798467433,"stop":1709798467610,"duration":177}},{"uid":"80157e7ac7396f10","reportUrl":"https://novasamatech.github.io/test-runner/4831//#testresult/80157e7ac7396f10","status":"passed","time":{"start":1709784066158,"stop":1709784066535,"duration":377}},{"uid":"21a3dcb8af3af63a","reportUrl":"https://novasamatech.github.io/test-runner/4830//#testresult/21a3dcb8af3af63a","status":"passed","time":{"start":1709769698353,"stop":1709769698693,"duration":340}},{"uid":"3fc8af58652ec943","reportUrl":"https://novasamatech.github.io/test-runner/4829//#testresult/3fc8af58652ec943","status":"passed","time":{"start":1709755279305,"stop":1709755279513,"duration":208}},{"uid":"a3c6858e704ce0aa","reportUrl":"https://novasamatech.github.io/test-runner/4828//#testresult/a3c6858e704ce0aa","status":"passed","time":{"start":1709740872524,"stop":1709740872834,"duration":310}},{"uid":"e3d0c29bfbe372b1","reportUrl":"https://novasamatech.github.io/test-runner/4827//#testresult/e3d0c29bfbe372b1","status":"passed","time":{"start":1709726467707,"stop":1709726468000,"duration":293}},{"uid":"2cfd5744e22e5166","reportUrl":"https://novasamatech.github.io/test-runner/4826//#testresult/2cfd5744e22e5166","status":"passed","time":{"start":1709712058666,"stop":1709712058808,"duration":142}},{"uid":"a424e4a50302c105","reportUrl":"https://novasamatech.github.io/test-runner/4825//#testresult/a424e4a50302c105","status":"passed","time":{"start":1709697665120,"stop":1709697665732,"duration":612}},{"uid":"5b8b17b9cadbe7d8","reportUrl":"https://novasamatech.github.io/test-runner/4824//#testresult/5b8b17b9cadbe7d8","status":"passed","time":{"start":1709683310295,"stop":1709683310648,"duration":353}},{"uid":"ae8720f84214fc31","reportUrl":"https://novasamatech.github.io/test-runner/4823//#testresult/ae8720f84214fc31","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709668877775,"stop":1709668877956,"duration":181}},{"uid":"55667237595a9b3f","reportUrl":"https://novasamatech.github.io/test-runner/4822//#testresult/55667237595a9b3f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709654488280,"stop":1709654488591,"duration":311}},{"uid":"69a0d323504e741b","reportUrl":"https://novasamatech.github.io/test-runner/4821//#testresult/69a0d323504e741b","status":"passed","time":{"start":1709640079162,"stop":1709640079964,"duration":802}},{"uid":"e1408e51f406220a","reportUrl":"https://novasamatech.github.io/test-runner/4820//#testresult/e1408e51f406220a","status":"passed","time":{"start":1709625668934,"stop":1709625669543,"duration":609}},{"uid":"a0b39d7b6180d894","reportUrl":"https://novasamatech.github.io/test-runner/4819//#testresult/a0b39d7b6180d894","status":"passed","time":{"start":1709611259154,"stop":1709611259389,"duration":235}},{"uid":"65738cadf5df0403","reportUrl":"https://novasamatech.github.io/test-runner/4818//#testresult/65738cadf5df0403","status":"passed","time":{"start":1709596893204,"stop":1709596893906,"duration":702}},{"uid":"a80893691a8c44bd","reportUrl":"https://novasamatech.github.io/test-runner/4817//#testresult/a80893691a8c44bd","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709582483081,"stop":1709582483107,"duration":26}},{"uid":"8a673e439102d78d","reportUrl":"https://novasamatech.github.io/test-runner/4816//#testresult/8a673e439102d78d","status":"passed","time":{"start":1709568082647,"stop":1709568083039,"duration":392}},{"uid":"61d11aea7e4f4771","reportUrl":"https://novasamatech.github.io/test-runner/4815//#testresult/61d11aea7e4f4771","status":"passed","time":{"start":1709553979219,"stop":1709553979825,"duration":606}},{"uid":"2532f4ad685cf2d1","reportUrl":"https://novasamatech.github.io/test-runner/4814//#testresult/2532f4ad685cf2d1","status":"passed","time":{"start":1709539726382,"stop":1709539727035,"duration":653}}]},"tags":[]},"source":"5ffe540ed2c3d55c.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}