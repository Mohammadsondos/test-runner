{"uid":"eeddaacc302a5aca","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1712145672440,"stop":1712145672857,"duration":417},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fc620d4d750>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fc620ab34f0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fc620ab0040>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1206-723"},{"name":"thread","value":"2101-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b4124757e9f6f3d3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712145667026,"stop":1712145667382,"duration":356}},{"uid":"263717e0da1411ca","status":"failed","statusDetails":"AssertionError: Difference in block numbers is greater than 3:            wss_block_number=19575106, rpc_block_number=19575073\nassert 33 <= 3\n +  where 33 = abs((19575106 - 19575073))","time":{"start":1712145661142,"stop":1712145661957,"duration":815}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":59,"skipped":0,"passed":1010,"unknown":0,"total":1073},"items":[{"uid":"9009a094b5d508f0","reportUrl":"https://novasamatech.github.io/test-runner/4996//#testresult/9009a094b5d508f0","status":"passed","time":{"start":1712131273908,"stop":1712131274425,"duration":517}},{"uid":"51052adc251b6ca0","reportUrl":"https://novasamatech.github.io/test-runner/4995//#testresult/51052adc251b6ca0","status":"passed","time":{"start":1712116864014,"stop":1712116864876,"duration":862}},{"uid":"cb6be45e1f260255","reportUrl":"https://novasamatech.github.io/test-runner/4994//#testresult/cb6be45e1f260255","status":"passed","time":{"start":1712102504255,"stop":1712102504937,"duration":682}},{"uid":"7ed7afb4a9fa1b9b","reportUrl":"https://novasamatech.github.io/test-runner/4993//#testresult/7ed7afb4a9fa1b9b","status":"passed","time":{"start":1712088062224,"stop":1712088063143,"duration":919}},{"uid":"9ec2cb27ae2e7330","reportUrl":"https://novasamatech.github.io/test-runner/4992//#testresult/9ec2cb27ae2e7330","status":"passed","time":{"start":1712073677586,"stop":1712073678222,"duration":636}},{"uid":"1261edfc0515c5fe","reportUrl":"https://novasamatech.github.io/test-runner/4991//#testresult/1261edfc0515c5fe","status":"passed","time":{"start":1712059270044,"stop":1712059270835,"duration":791}},{"uid":"4db0f8f2067189c4","reportUrl":"https://novasamatech.github.io/test-runner/4990//#testresult/4db0f8f2067189c4","status":"passed","time":{"start":1712048231316,"stop":1712048232010,"duration":694}},{"uid":"491af347e2845cb","reportUrl":"https://novasamatech.github.io/test-runner/4954//#testresult/491af347e2845cb","status":"passed","time":{"start":1711540871779,"stop":1711540872863,"duration":1084}},{"uid":"6b583e4f595b9a30","reportUrl":"https://novasamatech.github.io/test-runner/4953//#testresult/6b583e4f595b9a30","status":"passed","time":{"start":1711526458655,"stop":1711526459622,"duration":967}},{"uid":"81a5383a4ccbfd7b","reportUrl":"https://novasamatech.github.io/test-runner/4952//#testresult/81a5383a4ccbfd7b","status":"passed","time":{"start":1711512062132,"stop":1711512063236,"duration":1104}},{"uid":"a741b9e5f631883f","reportUrl":"https://novasamatech.github.io/test-runner/4951//#testresult/a741b9e5f631883f","status":"passed","time":{"start":1711497695796,"stop":1711497696834,"duration":1038}},{"uid":"9eae5f9377ddce14","reportUrl":"https://novasamatech.github.io/test-runner/4950//#testresult/9eae5f9377ddce14","status":"passed","time":{"start":1711483267066,"stop":1711483268077,"duration":1011}},{"uid":"21efc1ad5cd29a2a","reportUrl":"https://novasamatech.github.io/test-runner/4949//#testresult/21efc1ad5cd29a2a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711468880653,"stop":1711468881041,"duration":388}},{"uid":"1d7ce7162c867de8","reportUrl":"https://novasamatech.github.io/test-runner/4948//#testresult/1d7ce7162c867de8","status":"passed","time":{"start":1711454469023,"stop":1711454469944,"duration":921}},{"uid":"d06626c46d00e3ed","reportUrl":"https://novasamatech.github.io/test-runner/4947//#testresult/d06626c46d00e3ed","status":"passed","time":{"start":1711440067269,"stop":1711440068347,"duration":1078}},{"uid":"3638a2ef140c13e0","reportUrl":"https://novasamatech.github.io/test-runner/4946//#testresult/3638a2ef140c13e0","status":"passed","time":{"start":1711425678710,"stop":1711425679677,"duration":967}},{"uid":"311d1a2125f75130","reportUrl":"https://novasamatech.github.io/test-runner/4945//#testresult/311d1a2125f75130","status":"passed","time":{"start":1711411296758,"stop":1711411297927,"duration":1169}},{"uid":"1738a6300b9fac08","reportUrl":"https://novasamatech.github.io/test-runner/4944//#testresult/1738a6300b9fac08","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711396886287,"stop":1711396886617,"duration":330}},{"uid":"743f3556b80d5c18","reportUrl":"https://novasamatech.github.io/test-runner/4943//#testresult/743f3556b80d5c18","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711382485323,"stop":1711382485485,"duration":162}},{"uid":"42ae4a2e5e1981d5","reportUrl":"https://novasamatech.github.io/test-runner/4942//#testresult/42ae4a2e5e1981d5","status":"passed","time":{"start":1711368072797,"stop":1711368073966,"duration":1169}}]},"tags":[]},"source":"eeddaacc302a5aca.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}