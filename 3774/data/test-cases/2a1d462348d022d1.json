{"uid":"2a1d462348d022d1","name":"test_can_create_connection[Test for Efinity, url: wss://efinity.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e7127e77471430140b24b1b56702eaf3","time":{"start":1694794501090,"stop":1694794861817,"duration":360727},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Fri, 15 Sep 2023 16:21:01 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300008', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","statusTrace":"data = {'name': 'Efinity', 'url': 'wss://efinity.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Fri, 15 Sep 2023 16:21:01 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300008', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Fri, 15 Sep 2023 16:21:01 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300008', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","statusTrace":"data = {'name': 'Efinity', 'url': 'wss://efinity.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Fri, 15 Sep 2023 16:21:01 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300008', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"27031954d4ed4eb7","name":"stdout","source":"27031954d4ed4eb7.txt","type":"text/plain","size":1353}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az936-949"},{"name":"thread","value":"2040-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://efinity.api.onfinality.io/public-ws', 'name': 'Efinity'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3acf18b077fe5f63","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Fri, 15 Sep 2023 16:14:45 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300002', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","time":{"start":1694794125286,"stop":1694794485992,"duration":360706}},{"uid":"deddb98c2f00e024","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Fri, 15 Sep 2023 16:08:30 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '59999', 'x-kong-proxy-latency': '300122', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","time":{"start":1694793749332,"stop":1694794110153,"duration":360821}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":133,"unknown":0,"total":135},"items":[{"uid":"e52f030d6aeb78ae","reportUrl":"https://novasamatech.github.io/test-runner/3773//#testresult/e52f030d6aeb78ae","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 15 Sep 2023 12:19:28 GMT', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '42582', 'x-kong-proxy-latency': '244805', 'via': 'kong/2.5.2'} -+-+- b''","time":{"start":1694780092532,"stop":1694780380636,"duration":288104}},{"uid":"c18dc2bcf41274db","reportUrl":"https://novasamatech.github.io/test-runner/3772//#testresult/c18dc2bcf41274db","status":"passed","time":{"start":1694764906316,"stop":1694764907163,"duration":847}},{"uid":"5fea604d0548e95c","reportUrl":"https://novasamatech.github.io/test-runner/3771//#testresult/5fea604d0548e95c","status":"passed","time":{"start":1694750512188,"stop":1694750512941,"duration":753}},{"uid":"dd117fd23c712376","reportUrl":"https://novasamatech.github.io/test-runner/3770//#testresult/dd117fd23c712376","status":"passed","time":{"start":1694736142635,"stop":1694736143742,"duration":1107}},{"uid":"3db018c6418cb3c2","reportUrl":"https://novasamatech.github.io/test-runner/3769//#testresult/3db018c6418cb3c2","status":"passed","time":{"start":1694721705281,"stop":1694721706027,"duration":746}},{"uid":"84f24afd55a28d87","reportUrl":"https://novasamatech.github.io/test-runner/3768//#testresult/84f24afd55a28d87","status":"passed","time":{"start":1694707307078,"stop":1694707308086,"duration":1008}},{"uid":"fef95e9b45c2a8b7","reportUrl":"https://novasamatech.github.io/test-runner/3767//#testresult/fef95e9b45c2a8b7","status":"passed","time":{"start":1694692912347,"stop":1694692913322,"duration":975}},{"uid":"9efedc62917d8aec","reportUrl":"https://novasamatech.github.io/test-runner/3766//#testresult/9efedc62917d8aec","status":"passed","time":{"start":1694678497498,"stop":1694678498458,"duration":960}},{"uid":"7b93dab555be558b","reportUrl":"https://novasamatech.github.io/test-runner/3765//#testresult/7b93dab555be558b","status":"passed","time":{"start":1694664088410,"stop":1694664089337,"duration":927}},{"uid":"3137c9254eeaf75d","reportUrl":"https://novasamatech.github.io/test-runner/3764//#testresult/3137c9254eeaf75d","status":"passed","time":{"start":1694649741188,"stop":1694649742196,"duration":1008}},{"uid":"d3b87e5bb30a9933","reportUrl":"https://novasamatech.github.io/test-runner/3763//#testresult/d3b87e5bb30a9933","status":"passed","time":{"start":1694635297583,"stop":1694635298510,"duration":927}},{"uid":"954b0f8c1e7e10da","reportUrl":"https://novasamatech.github.io/test-runner/3762//#testresult/954b0f8c1e7e10da","status":"passed","time":{"start":1694620914453,"stop":1694620915189,"duration":736}},{"uid":"20cde5ae94756504","reportUrl":"https://novasamatech.github.io/test-runner/3761//#testresult/20cde5ae94756504","status":"passed","time":{"start":1694606517396,"stop":1694606518255,"duration":859}},{"uid":"8b722d2421f9ba81","reportUrl":"https://novasamatech.github.io/test-runner/3760//#testresult/8b722d2421f9ba81","status":"passed","time":{"start":1694597299742,"stop":1694597300629,"duration":887}},{"uid":"4090293d251ce76f","reportUrl":"https://novasamatech.github.io/test-runner/3759//#testresult/4090293d251ce76f","status":"passed","time":{"start":1694592096977,"stop":1694592097904,"duration":927}},{"uid":"f9630354dcfbe0b7","reportUrl":"https://novasamatech.github.io/test-runner/3758//#testresult/f9630354dcfbe0b7","status":"passed","time":{"start":1694577707122,"stop":1694577708068,"duration":946}},{"uid":"8db82f7cf3d255e9","reportUrl":"https://novasamatech.github.io/test-runner/3757//#testresult/8db82f7cf3d255e9","status":"passed","time":{"start":1694563360044,"stop":1694563360983,"duration":939}},{"uid":"90d47bc8aa21ea1f","reportUrl":"https://novasamatech.github.io/test-runner/3756//#testresult/90d47bc8aa21ea1f","status":"passed","time":{"start":1694548948276,"stop":1694548949017,"duration":741}},{"uid":"4033343f92ce871b","reportUrl":"https://novasamatech.github.io/test-runner/3755//#testresult/4033343f92ce871b","status":"passed","time":{"start":1694534522309,"stop":1694534523189,"duration":880}},{"uid":"cd40786fd811ff94","reportUrl":"https://novasamatech.github.io/test-runner/3754//#testresult/cd40786fd811ff94","status":"passed","time":{"start":1694520122872,"stop":1694520123827,"duration":955}}]},"tags":[]},"source":"2a1d462348d022d1.json","parameterValues":["{'url': 'wss://efinity.api.onfinality.io/public-ws', 'name': 'Efinity'}"]}