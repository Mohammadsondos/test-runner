{"uid":"2e555de928dc27a6","name":"test_can_create_connection[Test for Bit.Country Pioneer, url: wss://pioneer.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"0c3c502fc2031b773f1baf0102f5a28e","time":{"start":1696910995317,"stop":1696911176817,"duration":181500},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Bit.Country Pioneer', 'url': 'wss://pioneer.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Bit.Country Pioneer', 'url': 'wss://pioneer.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"af28de34562f6e7c","name":"stdout","source":"af28de34562f6e7c.txt","type":"text/plain","size":384}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az627-447"},{"name":"thread","value":"2213-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://pioneer.api.onfinality.io/public-ws', 'name': 'Bit.Country Pioneer'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6880c6ac27aadf3","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1696910859418,"stop":1696910980147,"duration":120729}},{"uid":"867537b57854b344","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1696910483304,"stop":1696910844187,"duration":360883}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":281,"unknown":0,"total":282},"items":[{"uid":"4707c899b46506cc","reportUrl":"https://novasamatech.github.io/test-runner/3921//#testresult/4707c899b46506cc","status":"passed","time":{"start":1696896136157,"stop":1696896136879,"duration":722}},{"uid":"bc4952afad24b3","reportUrl":"https://novasamatech.github.io/test-runner/3920//#testresult/bc4952afad24b3","status":"passed","time":{"start":1696881689896,"stop":1696881690773,"duration":877}},{"uid":"3f6bf6bd40bd88d0","reportUrl":"https://novasamatech.github.io/test-runner/3919//#testresult/3f6bf6bd40bd88d0","status":"passed","time":{"start":1696867290268,"stop":1696867291228,"duration":960}},{"uid":"d93c0348b73f1074","reportUrl":"https://novasamatech.github.io/test-runner/3918//#testresult/d93c0348b73f1074","status":"passed","time":{"start":1696852897525,"stop":1696852898314,"duration":789}},{"uid":"847d7649acc9486d","reportUrl":"https://novasamatech.github.io/test-runner/3917//#testresult/847d7649acc9486d","status":"passed","time":{"start":1696838489154,"stop":1696838490128,"duration":974}},{"uid":"91ee21ac2d722e2f","reportUrl":"https://novasamatech.github.io/test-runner/3916//#testresult/91ee21ac2d722e2f","status":"passed","time":{"start":1696824083017,"stop":1696824083977,"duration":960}},{"uid":"aa7ab1a41db46524","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/aa7ab1a41db46524","status":"passed","time":{"start":1696809730625,"stop":1696809731595,"duration":970}},{"uid":"606b90b3d1395b2b","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/606b90b3d1395b2b","status":"passed","time":{"start":1696795280864,"stop":1696795281843,"duration":979}},{"uid":"592215bbebac43e4","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/592215bbebac43e4","status":"passed","time":{"start":1696780884675,"stop":1696780885569,"duration":894}},{"uid":"e5711a31d85bc7cf","reportUrl":"https://novasamatech.github.io/test-runner/3912//#testresult/e5711a31d85bc7cf","status":"passed","time":{"start":1696766516241,"stop":1696766517169,"duration":928}},{"uid":"d844a06d85776694","reportUrl":"https://novasamatech.github.io/test-runner/3911//#testresult/d844a06d85776694","status":"passed","time":{"start":1696752100314,"stop":1696752101025,"duration":711}},{"uid":"558f8846ceae0dc2","reportUrl":"https://novasamatech.github.io/test-runner/3910//#testresult/558f8846ceae0dc2","status":"passed","time":{"start":1696737684584,"stop":1696737685676,"duration":1092}},{"uid":"6fa4ba53d9c2a8ef","reportUrl":"https://novasamatech.github.io/test-runner/3909//#testresult/6fa4ba53d9c2a8ef","status":"passed","time":{"start":1696723337967,"stop":1696723339095,"duration":1128}},{"uid":"982b1cb67ad830b4","reportUrl":"https://novasamatech.github.io/test-runner/3908//#testresult/982b1cb67ad830b4","status":"passed","time":{"start":1696708883828,"stop":1696708887207,"duration":3379}},{"uid":"24337a09cdae3cc2","reportUrl":"https://novasamatech.github.io/test-runner/3907//#testresult/24337a09cdae3cc2","status":"passed","time":{"start":1696694480829,"stop":1696694481707,"duration":878}},{"uid":"f2f97553e53a7736","reportUrl":"https://novasamatech.github.io/test-runner/3906//#testresult/f2f97553e53a7736","status":"passed","time":{"start":1696680086221,"stop":1696680087338,"duration":1117}},{"uid":"749b6eb293f6a1c","reportUrl":"https://novasamatech.github.io/test-runner/3905//#testresult/749b6eb293f6a1c","status":"passed","time":{"start":1696665685601,"stop":1696665686339,"duration":738}},{"uid":"d2d3b9875e5c68","reportUrl":"https://novasamatech.github.io/test-runner/3904//#testresult/d2d3b9875e5c68","status":"passed","time":{"start":1696651280974,"stop":1696651281729,"duration":755}},{"uid":"571c12d867609e6c","reportUrl":"https://novasamatech.github.io/test-runner/3903//#testresult/571c12d867609e6c","status":"passed","time":{"start":1696636927590,"stop":1696636928367,"duration":777}},{"uid":"d9c60b30f2de84c8","reportUrl":"https://novasamatech.github.io/test-runner/3902//#testresult/d9c60b30f2de84c8","status":"passed","time":{"start":1696622483184,"stop":1696622484178,"duration":994}}]},"tags":[]},"source":"2e555de928dc27a6.json","parameterValues":["{'url': 'wss://pioneer.api.onfinality.io/public-ws', 'name': 'Bit.Country Pioneer'}"]}