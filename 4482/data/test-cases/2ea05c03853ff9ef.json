{"uid":"2ea05c03853ff9ef","name":"test_can_create_connection[Test for CLV Parachain, url: wss://rpc-para.clover.finance]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"285ace9874728e1e6eff7918cb458ce7","time":{"start":1704816237655,"stop":1704816237655,"duration":0},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 16:03:58 GMT', 'content-length': '0'} -+-+- b''","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for CLV Parachain, url: wss://rpc-para.clover.finance]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 16:03:58 GMT', 'content-length': '0'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1704816205842,"stop":1704816206675,"duration":833},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 16:03:26 GMT', 'content-length': '0'} -+-+- b''\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1704816221754,"stop":1704816222583,"duration":829},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 16:03:42 GMT', 'content-length': '0'} -+-+- b''\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1704816237655,"stop":1704816238472,"duration":817},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 16:03:58 GMT', 'content-length': '0'} -+-+- b''\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 16:03:58 GMT', 'content-length': '0'} -+-+- b''","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for CLV Parachain, url: wss://rpc-para.clover.finance]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 16:03:58 GMT', 'content-length': '0'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"ee3c99a570187df0","name":"stdout","source":"ee3c99a570187df0.txt","type":"text/plain","size":771}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az659-507"},{"name":"thread","value":"2098-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://rpc-para.clover.finance', 'name': 'CLV Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f2801962cf0b31a8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 16:03:42 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1704816221753,"stop":1704816221753,"duration":0}},{"uid":"5c0dd52416714b5f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 16:03:26 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1704816205840,"stop":1704816205840,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":694,"unknown":0,"total":696},"items":[{"uid":"73825c2f6a1c9eac","reportUrl":"https://novasamatech.github.io/test-runner/4481//#testresult/73825c2f6a1c9eac","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Tue, 09 Jan 2024 12:03:49 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1704801829075,"stop":1704801829075,"duration":0}},{"uid":"a1bb9d06a0b79f3b","reportUrl":"https://novasamatech.github.io/test-runner/4406//#testresult/a1bb9d06a0b79f3b","status":"passed","time":{"start":1703750567622,"stop":1703750567622,"duration":0}},{"uid":"897b24a2953062b4","reportUrl":"https://novasamatech.github.io/test-runner/4405//#testresult/897b24a2953062b4","status":"passed","time":{"start":1703736167591,"stop":1703736167591,"duration":0}},{"uid":"a265a1543db278fc","reportUrl":"https://novasamatech.github.io/test-runner/4404//#testresult/a265a1543db278fc","status":"passed","time":{"start":1703721827533,"stop":1703721827533,"duration":0}},{"uid":"118b539a167d78d6","reportUrl":"https://novasamatech.github.io/test-runner/4403//#testresult/118b539a167d78d6","status":"passed","time":{"start":1703707478767,"stop":1703707478767,"duration":0}},{"uid":"988917e6b3563dac","reportUrl":"https://novasamatech.github.io/test-runner/4402//#testresult/988917e6b3563dac","status":"passed","time":{"start":1703692961033,"stop":1703692961033,"duration":0}},{"uid":"5da1c18972c2a3ee","reportUrl":"https://novasamatech.github.io/test-runner/4401//#testresult/5da1c18972c2a3ee","status":"passed","time":{"start":1703678584223,"stop":1703678584223,"duration":0}},{"uid":"cd6ece653e15e065","reportUrl":"https://novasamatech.github.io/test-runner/4400//#testresult/cd6ece653e15e065","status":"passed","time":{"start":1703664173090,"stop":1703664173090,"duration":0}},{"uid":"5632aa4daf7e062d","reportUrl":"https://novasamatech.github.io/test-runner/4399//#testresult/5632aa4daf7e062d","status":"passed","time":{"start":1703649765597,"stop":1703649765597,"duration":0}},{"uid":"dbcdf6fd68d4bcbf","reportUrl":"https://novasamatech.github.io/test-runner/4398//#testresult/dbcdf6fd68d4bcbf","status":"passed","time":{"start":1703635426913,"stop":1703635426913,"duration":0}},{"uid":"18a626e3cafb87c7","reportUrl":"https://novasamatech.github.io/test-runner/4397//#testresult/18a626e3cafb87c7","status":"passed","time":{"start":1703620965807,"stop":1703620965807,"duration":0}},{"uid":"c7e5406bab0e4110","reportUrl":"https://novasamatech.github.io/test-runner/4396//#testresult/c7e5406bab0e4110","status":"passed","time":{"start":1703606552242,"stop":1703606552242,"duration":0}},{"uid":"8dd2a2dcf3aea84","reportUrl":"https://novasamatech.github.io/test-runner/4395//#testresult/8dd2a2dcf3aea84","status":"passed","time":{"start":1703592153495,"stop":1703592153495,"duration":0}},{"uid":"805303606a9d9436","reportUrl":"https://novasamatech.github.io/test-runner/4394//#testresult/805303606a9d9436","status":"passed","time":{"start":1703577797148,"stop":1703577797148,"duration":0}},{"uid":"216a6ca9d2c35d66","reportUrl":"https://novasamatech.github.io/test-runner/4393//#testresult/216a6ca9d2c35d66","status":"passed","time":{"start":1703563356001,"stop":1703563356001,"duration":0}},{"uid":"9e22893925765f99","reportUrl":"https://novasamatech.github.io/test-runner/4392//#testresult/9e22893925765f99","status":"passed","time":{"start":1703549001620,"stop":1703549001620,"duration":0}},{"uid":"da84a41a679691b3","reportUrl":"https://novasamatech.github.io/test-runner/4391//#testresult/da84a41a679691b3","status":"passed","time":{"start":1703534563659,"stop":1703534563659,"duration":0}},{"uid":"245a84dd9c916b92","reportUrl":"https://novasamatech.github.io/test-runner/4390//#testresult/245a84dd9c916b92","status":"passed","time":{"start":1703520170524,"stop":1703520170524,"duration":0}},{"uid":"7adba35cd9831a45","reportUrl":"https://novasamatech.github.io/test-runner/4389//#testresult/7adba35cd9831a45","status":"passed","time":{"start":1703505771447,"stop":1703505771447,"duration":0}},{"uid":"c3b0acf075ecc1c0","reportUrl":"https://novasamatech.github.io/test-runner/4388//#testresult/c3b0acf075ecc1c0","status":"passed","time":{"start":1703491340301,"stop":1703491340301,"duration":0}}]},"tags":[]},"source":"2ea05c03853ff9ef.json","parameterValues":["{'url': 'wss://rpc-para.clover.finance', 'name': 'CLV Parachain'}"]}