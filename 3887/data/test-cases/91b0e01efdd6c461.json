{"uid":"91b0e01efdd6c461","name":"test_can_create_connection[Test for Zeitgeist, url: wss://zeitgeist-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1911313e5366bd74b4f9ce70704534b6","time":{"start":1696420929341,"stop":1696420929941,"duration":600},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 12:02:09 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Zeitgeist', 'url': 'wss://zeitgeist-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 12:02:09 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 12:02:09 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Zeitgeist', 'url': 'wss://zeitgeist-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 12:02:09 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b7137eee7d9c7ac1","name":"stdout","source":"b7137eee7d9c7ac1.txt","type":"text/plain","size":1068}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1107-249"},{"name":"thread","value":"2072-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://zeitgeist-rpc.dwellir.com', 'name': 'Zeitgeist'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d19f39cb6be482d9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 12:01:53 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696420913663,"stop":1696420914247,"duration":584}},{"uid":"54443d0215cbb115","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 12:01:38 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696420897868,"stop":1696420898497,"duration":629}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":245,"unknown":0,"total":247},"items":[{"uid":"650a352882b6a098","reportUrl":"https://novasamatech.github.io/test-runner/3886//#testresult/650a352882b6a098","status":"passed","time":{"start":1696406497561,"stop":1696406498347,"duration":786}},{"uid":"de391a2bbe479089","reportUrl":"https://novasamatech.github.io/test-runner/3885//#testresult/de391a2bbe479089","status":"passed","time":{"start":1696392087599,"stop":1696392088073,"duration":474}},{"uid":"e404980e7f750a9b","reportUrl":"https://novasamatech.github.io/test-runner/3884//#testresult/e404980e7f750a9b","status":"passed","time":{"start":1696377730473,"stop":1696377730935,"duration":462}},{"uid":"1a891607d85b5954","reportUrl":"https://novasamatech.github.io/test-runner/3883//#testresult/1a891607d85b5954","status":"passed","time":{"start":1696363289453,"stop":1696363290057,"duration":604}},{"uid":"c3926e826538dbf4","reportUrl":"https://novasamatech.github.io/test-runner/3882//#testresult/c3926e826538dbf4","status":"passed","time":{"start":1696348888900,"stop":1696348889335,"duration":435}},{"uid":"398ccc6b08dac67f","reportUrl":"https://novasamatech.github.io/test-runner/3881//#testresult/398ccc6b08dac67f","status":"passed","time":{"start":1696334510019,"stop":1696334510784,"duration":765}},{"uid":"807b94cd881441d2","reportUrl":"https://novasamatech.github.io/test-runner/3880//#testresult/807b94cd881441d2","status":"passed","time":{"start":1696320099551,"stop":1696320100050,"duration":499}},{"uid":"c9c8b8fdb0ac0b0d","reportUrl":"https://novasamatech.github.io/test-runner/3879//#testresult/c9c8b8fdb0ac0b0d","status":"passed","time":{"start":1696305717937,"stop":1696305718686,"duration":749}},{"uid":"ab5bd2f16094de46","reportUrl":"https://novasamatech.github.io/test-runner/3878//#testresult/ab5bd2f16094de46","status":"passed","time":{"start":1696291340174,"stop":1696291340758,"duration":584}},{"uid":"891fa1b706b91b51","reportUrl":"https://novasamatech.github.io/test-runner/3877//#testresult/891fa1b706b91b51","status":"passed","time":{"start":1696276930704,"stop":1696276931382,"duration":678}},{"uid":"23c56987ced117d4","reportUrl":"https://novasamatech.github.io/test-runner/3876//#testresult/23c56987ced117d4","status":"passed","time":{"start":1696262522339,"stop":1696262522950,"duration":611}},{"uid":"930cc8de532d3f5f","reportUrl":"https://novasamatech.github.io/test-runner/3875//#testresult/930cc8de532d3f5f","status":"passed","time":{"start":1696248127263,"stop":1696248127714,"duration":451}},{"uid":"b5c52a599e31f4ae","reportUrl":"https://novasamatech.github.io/test-runner/3874//#testresult/b5c52a599e31f4ae","status":"passed","time":{"start":1696233699735,"stop":1696233700209,"duration":474}},{"uid":"952b72fc4313fb59","reportUrl":"https://novasamatech.github.io/test-runner/3873//#testresult/952b72fc4313fb59","status":"passed","time":{"start":1696219303815,"stop":1696219304261,"duration":446}},{"uid":"872e0021f8bcabc7","reportUrl":"https://novasamatech.github.io/test-runner/3872//#testresult/872e0021f8bcabc7","status":"passed","time":{"start":1696204955036,"stop":1696204955791,"duration":755}},{"uid":"ad17b5867f2825a8","reportUrl":"https://novasamatech.github.io/test-runner/3871//#testresult/ad17b5867f2825a8","status":"passed","time":{"start":1696190483404,"stop":1696190483866,"duration":462}},{"uid":"4ead869af82a07e0","reportUrl":"https://novasamatech.github.io/test-runner/3870//#testresult/4ead869af82a07e0","status":"passed","time":{"start":1696176098359,"stop":1696176099121,"duration":762}},{"uid":"60b080b88b9df933","reportUrl":"https://novasamatech.github.io/test-runner/3869//#testresult/60b080b88b9df933","status":"passed","time":{"start":1696161690929,"stop":1696161691396,"duration":467}},{"uid":"ef58b092def3a520","reportUrl":"https://novasamatech.github.io/test-runner/3868//#testresult/ef58b092def3a520","status":"passed","time":{"start":1696147303647,"stop":1696147304432,"duration":785}},{"uid":"d25021b41530329d","reportUrl":"https://novasamatech.github.io/test-runner/3867//#testresult/d25021b41530329d","status":"passed","time":{"start":1696132893953,"stop":1696132894427,"duration":474}}]},"tags":[]},"source":"91b0e01efdd6c461.json","parameterValues":["{'url': 'wss://zeitgeist-rpc.dwellir.com', 'name': 'Zeitgeist'}"]}