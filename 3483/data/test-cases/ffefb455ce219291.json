{"uid":"ffefb455ce219291","name":"test_can_create_connection[Test for Bifrost Kusama, url: wss://bifrost-parachain.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"da0d60f78cc9d831d0acf2220df35d10","time":{"start":1690733073900,"stop":1690733074110,"duration":210},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","statusTrace":"data = {'name': 'Bifrost Kusama', 'url': 'wss://bifrost-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","statusTrace":"data = {'name': 'Bifrost Kusama', 'url': 'wss://bifrost-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"f2f92c7b20d07c2a","name":"stdout","source":"f2f92c7b20d07c2a.txt","type":"text/plain","size":597}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az309-792"},{"name":"thread","value":"2057-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://bifrost-parachain.api.onfinality.io/public-ws', 'name': 'Bifrost Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"413bb37705f39dbb","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690733058572,"stop":1690733058781,"duration":209}},{"uid":"44e79167e2352e3b","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690733043145,"stop":1690733043385,"duration":240}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":485,"unknown":0,"total":488},"items":[{"uid":"c0a4925f85d0fdf9","reportUrl":"https://novasamatech.github.io/test-runner/3482//#testresult/c0a4925f85d0fdf9","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690718697182,"stop":1690718697378,"duration":196}},{"uid":"1130da1dcc412762","reportUrl":"https://novasamatech.github.io/test-runner/3481//#testresult/1130da1dcc412762","status":"passed","time":{"start":1690704295805,"stop":1690704296350,"duration":545}},{"uid":"68f4cea677ea8d18","reportUrl":"https://novasamatech.github.io/test-runner/3480//#testresult/68f4cea677ea8d18","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690689896326,"stop":1690689896615,"duration":289}},{"uid":"272105179e848d6f","reportUrl":"https://novasamatech.github.io/test-runner/3479//#testresult/272105179e848d6f","status":"passed","time":{"start":1690676100376,"stop":1690676100897,"duration":521}},{"uid":"f974d8c7f5c45df8","reportUrl":"https://novasamatech.github.io/test-runner/3478//#testresult/f974d8c7f5c45df8","status":"passed","time":{"start":1690661040689,"stop":1690661041261,"duration":572}},{"uid":"a4ec682f1ab81f23","reportUrl":"https://novasamatech.github.io/test-runner/3477//#testresult/a4ec682f1ab81f23","status":"passed","time":{"start":1690646638540,"stop":1690646638959,"duration":419}},{"uid":"3ded5e0d806187f0","reportUrl":"https://novasamatech.github.io/test-runner/3476//#testresult/3ded5e0d806187f0","status":"passed","time":{"start":1690632269008,"stop":1690632269437,"duration":429}},{"uid":"fbc6ce718b64fc84","reportUrl":"https://novasamatech.github.io/test-runner/3475//#testresult/fbc6ce718b64fc84","status":"passed","time":{"start":1690617863809,"stop":1690617864189,"duration":380}},{"uid":"2337244c400014e6","reportUrl":"https://novasamatech.github.io/test-runner/3474//#testresult/2337244c400014e6","status":"passed","time":{"start":1690603434464,"stop":1690603434991,"duration":527}},{"uid":"43e1cddc45dd9bb8","reportUrl":"https://novasamatech.github.io/test-runner/3473//#testresult/43e1cddc45dd9bb8","status":"passed","time":{"start":1690589624184,"stop":1690589624956,"duration":772}},{"uid":"d25c1662d85a475d","reportUrl":"https://novasamatech.github.io/test-runner/3472//#testresult/d25c1662d85a475d","status":"passed","time":{"start":1690574641305,"stop":1690574641726,"duration":421}},{"uid":"f2c6505235644977","reportUrl":"https://novasamatech.github.io/test-runner/3471//#testresult/f2c6505235644977","status":"passed","time":{"start":1690560257753,"stop":1690560258321,"duration":568}},{"uid":"6ae0b74496e79d48","reportUrl":"https://novasamatech.github.io/test-runner/3470//#testresult/6ae0b74496e79d48","status":"passed","time":{"start":1690545900441,"stop":1690545901146,"duration":705}},{"uid":"3b70e67dbf44392","reportUrl":"https://novasamatech.github.io/test-runner/3469//#testresult/3b70e67dbf44392","status":"passed","time":{"start":1690531458592,"stop":1690531459008,"duration":416}},{"uid":"755f9f3c6174ff9f","reportUrl":"https://novasamatech.github.io/test-runner/3468//#testresult/755f9f3c6174ff9f","status":"passed","time":{"start":1690517046252,"stop":1690517046796,"duration":544}},{"uid":"9c37a493b3a6347a","reportUrl":"https://novasamatech.github.io/test-runner/3467//#testresult/9c37a493b3a6347a","status":"passed","time":{"start":1690503202369,"stop":1690503203034,"duration":665}},{"uid":"fdb5fe48ce879922","reportUrl":"https://novasamatech.github.io/test-runner/3466//#testresult/fdb5fe48ce879922","status":"passed","time":{"start":1690488252702,"stop":1690488253136,"duration":434}},{"uid":"d1f45382a4a8765b","reportUrl":"https://novasamatech.github.io/test-runner/3465//#testresult/d1f45382a4a8765b","status":"passed","time":{"start":1690473874890,"stop":1690473875579,"duration":689}},{"uid":"1e9dd8663819b29e","reportUrl":"https://novasamatech.github.io/test-runner/3464//#testresult/1e9dd8663819b29e","status":"passed","time":{"start":1690459483242,"stop":1690459483850,"duration":608}},{"uid":"fb7e7693eaf62e0","reportUrl":"https://novasamatech.github.io/test-runner/3463//#testresult/fb7e7693eaf62e0","status":"passed","time":{"start":1690445063081,"stop":1690445063641,"duration":560}}]},"tags":[]},"source":"ffefb455ce219291.json","parameterValues":["{'url': 'wss://bifrost-parachain.api.onfinality.io/public-ws', 'name': 'Bifrost Kusama'}"]}