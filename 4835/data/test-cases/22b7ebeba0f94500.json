{"uid":"22b7ebeba0f94500","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1709841667834,"stop":1709841667907,"duration":73},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f76c16551e0>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f76c0536530>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f76c0536860>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1536-365"},{"name":"thread","value":"2211-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"769231b3002783d1","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709841662757,"stop":1709841662800,"duration":43}},{"uid":"805a0e26588f2683","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709841657471,"stop":1709841657637,"duration":166}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":22,"skipped":0,"passed":923,"unknown":0,"total":946},"items":[{"uid":"792c8aef476e1994","reportUrl":"https://novasamatech.github.io/test-runner/4834//#testresult/792c8aef476e1994","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709827276132,"stop":1709827276188,"duration":56}},{"uid":"5947b3b74500c854","reportUrl":"https://novasamatech.github.io/test-runner/4833//#testresult/5947b3b74500c854","status":"passed","time":{"start":1709812895642,"stop":1709812895942,"duration":300}},{"uid":"42ae911bb90cf73e","reportUrl":"https://novasamatech.github.io/test-runner/4832//#testresult/42ae911bb90cf73e","status":"passed","time":{"start":1709798467015,"stop":1709798467429,"duration":414}},{"uid":"4978ac4362c53741","reportUrl":"https://novasamatech.github.io/test-runner/4831//#testresult/4978ac4362c53741","status":"passed","time":{"start":1709784065783,"stop":1709784066155,"duration":372}},{"uid":"fa569f1f5904b553","reportUrl":"https://novasamatech.github.io/test-runner/4830//#testresult/fa569f1f5904b553","status":"passed","time":{"start":1709769698004,"stop":1709769698350,"duration":346}},{"uid":"b550ab4392d97700","reportUrl":"https://novasamatech.github.io/test-runner/4829//#testresult/b550ab4392d97700","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709755269030,"stop":1709755269123,"duration":93}},{"uid":"2a8e39997d6126e0","reportUrl":"https://novasamatech.github.io/test-runner/4828//#testresult/2a8e39997d6126e0","status":"passed","time":{"start":1709740872124,"stop":1709740872521,"duration":397}},{"uid":"21f201683acd9455","reportUrl":"https://novasamatech.github.io/test-runner/4827//#testresult/21f201683acd9455","status":"passed","time":{"start":1709726467346,"stop":1709726467703,"duration":357}},{"uid":"47a7056642f16287","reportUrl":"https://novasamatech.github.io/test-runner/4826//#testresult/47a7056642f16287","status":"passed","time":{"start":1709712058444,"stop":1709712058663,"duration":219}},{"uid":"21a8d9305ca4862e","reportUrl":"https://novasamatech.github.io/test-runner/4825//#testresult/21a8d9305ca4862e","status":"passed","time":{"start":1709697664370,"stop":1709697665116,"duration":746}},{"uid":"a0bd122e27cbd1cb","reportUrl":"https://novasamatech.github.io/test-runner/4824//#testresult/a0bd122e27cbd1cb","status":"passed","time":{"start":1709683309908,"stop":1709683310292,"duration":384}},{"uid":"2ee44a07eb4b8bf9","reportUrl":"https://novasamatech.github.io/test-runner/4823//#testresult/2ee44a07eb4b8bf9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709668867087,"stop":1709668867250,"duration":163}},{"uid":"b21955230cf8e145","reportUrl":"https://novasamatech.github.io/test-runner/4822//#testresult/b21955230cf8e145","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709654477266,"stop":1709654477553,"duration":287}},{"uid":"57f9ac57a51faa72","reportUrl":"https://novasamatech.github.io/test-runner/4821//#testresult/57f9ac57a51faa72","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709640073373,"stop":1709640073742,"duration":369}},{"uid":"2fbb804f57ec1785","reportUrl":"https://novasamatech.github.io/test-runner/4820//#testresult/2fbb804f57ec1785","status":"passed","time":{"start":1709625668337,"stop":1709625668926,"duration":589}},{"uid":"50684bcfa79460d5","reportUrl":"https://novasamatech.github.io/test-runner/4819//#testresult/50684bcfa79460d5","status":"passed","time":{"start":1709611258864,"stop":1709611259151,"duration":287}},{"uid":"b4007863081ce466","reportUrl":"https://novasamatech.github.io/test-runner/4818//#testresult/b4007863081ce466","status":"passed","time":{"start":1709596892484,"stop":1709596893201,"duration":717}},{"uid":"68212ea3d5cc56ed","reportUrl":"https://novasamatech.github.io/test-runner/4817//#testresult/68212ea3d5cc56ed","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709582472779,"stop":1709582472836,"duration":57}},{"uid":"83747fff5d53c69","reportUrl":"https://novasamatech.github.io/test-runner/4816//#testresult/83747fff5d53c69","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709568072000,"stop":1709568072192,"duration":192}},{"uid":"ff85d502d50ca1b7","reportUrl":"https://novasamatech.github.io/test-runner/4815//#testresult/ff85d502d50ca1b7","status":"passed","time":{"start":1709553978424,"stop":1709553979216,"duration":792}}]},"tags":[]},"source":"22b7ebeba0f94500.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}