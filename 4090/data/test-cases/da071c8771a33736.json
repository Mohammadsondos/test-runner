{"uid":"da071c8771a33736","name":"test_can_create_connection[Test for UNIQUE, url: wss://us-ws.unique.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"aed298dd4949a65b501aa652affb6654","time":{"start":1699315364930,"stop":1699315365011,"duration":81},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:02:45 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214f26efeb3980-IAD'} -+-+- None","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://us-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:02:45 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214f26efeb3980-IAD'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:02:45 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214f26efeb3980-IAD'} -+-+- None","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://us-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:02:45 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214f26efeb3980-IAD'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"8f7a4cb2e1e23a46","name":"stdout","source":"8f7a4cb2e1e23a46.txt","type":"text/plain","size":1362}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az411-616"},{"name":"thread","value":"2293-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://us-ws.unique.network/', 'name': 'UNIQUE'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c9c04aa570fa8615","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:02:29 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214ec7dc1c07bd-IAD'} -+-+- None","time":{"start":1699315349722,"stop":1699315349790,"duration":68}},{"uid":"7746ec3595234fbb","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:02:14 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214e68bdcd3980-IAD'} -+-+- None","time":{"start":1699315334475,"stop":1699315334570,"duration":95}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":449,"unknown":0,"total":450},"items":[{"uid":"e79e69ea92f612fb","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/e79e69ea92f612fb","status":"passed","time":{"start":1699300885959,"stop":1699300886168,"duration":209}},{"uid":"76da03418808d0b7","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/76da03418808d0b7","status":"passed","time":{"start":1699286492675,"stop":1699286492789,"duration":114}},{"uid":"932d0e54fdc43417","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/932d0e54fdc43417","status":"passed","time":{"start":1699272096019,"stop":1699272096151,"duration":132}},{"uid":"ad82a427e29af53a","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/ad82a427e29af53a","status":"passed","time":{"start":1699257715783,"stop":1699257716023,"duration":240}},{"uid":"1e7801bde32f5417","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/1e7801bde32f5417","status":"passed","time":{"start":1699243299832,"stop":1699243300202,"duration":370}},{"uid":"4b7ca3026c3e6e67","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/4b7ca3026c3e6e67","status":"passed","time":{"start":1699228928933,"stop":1699228929096,"duration":163}},{"uid":"27f7b2bb1082647a","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/27f7b2bb1082647a","status":"passed","time":{"start":1699214494144,"stop":1699214494379,"duration":235}},{"uid":"caa1fae342f5402","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/caa1fae342f5402","status":"passed","time":{"start":1699200088397,"stop":1699200088561,"duration":164}},{"uid":"7136eb49be085c2b","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/7136eb49be085c2b","status":"passed","time":{"start":1699185682038,"stop":1699185682174,"duration":136}},{"uid":"d10a9b2a0d0803e9","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/d10a9b2a0d0803e9","status":"passed","time":{"start":1699171282357,"stop":1699171282445,"duration":88}},{"uid":"d5fa2891020612a5","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/d5fa2891020612a5","status":"passed","time":{"start":1699156884426,"stop":1699156884532,"duration":106}},{"uid":"d7534db2b670b5d3","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/d7534db2b670b5d3","status":"passed","time":{"start":1699142545675,"stop":1699142545993,"duration":318}},{"uid":"255a43474e7fcdd5","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/255a43474e7fcdd5","status":"passed","time":{"start":1699128094960,"stop":1699128095091,"duration":131}},{"uid":"49afaebaa49a74fb","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/49afaebaa49a74fb","status":"passed","time":{"start":1699113699076,"stop":1699113699211,"duration":135}},{"uid":"da3589c677d35dd6","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/da3589c677d35dd6","status":"passed","time":{"start":1699099291621,"stop":1699099291832,"duration":211}},{"uid":"645026083277b05c","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/645026083277b05c","status":"passed","time":{"start":1699084887147,"stop":1699084887274,"duration":127}},{"uid":"2586141b2e859d55","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/2586141b2e859d55","status":"passed","time":{"start":1699070513107,"stop":1699070513439,"duration":332}},{"uid":"839b880fb71a051c","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/839b880fb71a051c","status":"passed","time":{"start":1699041690095,"stop":1699041690189,"duration":94}},{"uid":"868eb547a4cd5ee8","reportUrl":"https://novasamatech.github.io/test-runner/4072//#testresult/868eb547a4cd5ee8","status":"passed","time":{"start":1699056145646,"stop":1699056145772,"duration":126}},{"uid":"8c09218a5105ee18","reportUrl":"https://novasamatech.github.io/test-runner/4070//#testresult/8c09218a5105ee18","status":"passed","time":{"start":1699027341481,"stop":1699027341819,"duration":338}}]},"tags":[]},"source":"da071c8771a33736.json","parameterValues":["{'url': 'wss://us-ws.unique.network/', 'name': 'UNIQUE'}"]}