{"uid":"d2d6df7e6ec63781","name":"test_can_create_connection[Test for UNIQUE, url: wss://asia-ws.unique.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"7aada6e7d9f483907a85d962126aab77","time":{"start":1699315395419,"stop":1699315395494,"duration":75},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:03:15 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214fe57c74083d-IAD'} -+-+- None","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://asia-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:03:15 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214fe57c74083d-IAD'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:03:15 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214fe57c74083d-IAD'} -+-+- None","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://asia-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:03:15 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214fe57c74083d-IAD'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"d975c3205f009a10","name":"stdout","source":"d975c3205f009a10.txt","type":"text/plain","size":1368}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az411-616"},{"name":"thread","value":"2293-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://asia-ws.unique.network/', 'name': 'UNIQUE'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3ab604d2fa49938b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:03:00 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214f86adb93980-IAD'} -+-+- None","time":{"start":1699315380253,"stop":1699315380327,"duration":74}},{"uid":"926358675565924c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 07 Nov 2023 00:02:45 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '82214f27ff2c20bd-IAD'} -+-+- None","time":{"start":1699315365090,"stop":1699315365160,"duration":70}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":448,"unknown":0,"total":450},"items":[{"uid":"dfb4c95b404f41","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/dfb4c95b404f41","status":"passed","time":{"start":1699300886171,"stop":1699300886361,"duration":190}},{"uid":"2f604f8ae97f71d8","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/2f604f8ae97f71d8","status":"passed","time":{"start":1699286492792,"stop":1699286492904,"duration":112}},{"uid":"55622952ea3ec92","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/55622952ea3ec92","status":"passed","time":{"start":1699272096155,"stop":1699272096252,"duration":97}},{"uid":"fab311dd7bc281ad","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/fab311dd7bc281ad","status":"passed","time":{"start":1699257716027,"stop":1699257716286,"duration":259}},{"uid":"3065670233ba6679","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/3065670233ba6679","status":"passed","time":{"start":1699243300206,"stop":1699243300451,"duration":245}},{"uid":"e0383aac45bfd910","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/e0383aac45bfd910","status":"passed","time":{"start":1699228929099,"stop":1699228929300,"duration":201}},{"uid":"359f4009b6a0473a","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/359f4009b6a0473a","status":"passed","time":{"start":1699214494382,"stop":1699214494606,"duration":224}},{"uid":"ce19a039807c132a","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/ce19a039807c132a","status":"passed","time":{"start":1699200088564,"stop":1699200088763,"duration":199}},{"uid":"1f1d3945f0d70a04","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/1f1d3945f0d70a04","status":"passed","time":{"start":1699185682177,"stop":1699185682287,"duration":110}},{"uid":"ce829369809d6f86","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/ce829369809d6f86","status":"passed","time":{"start":1699171282448,"stop":1699171282552,"duration":104}},{"uid":"325f1e89a30ccaa0","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/325f1e89a30ccaa0","status":"passed","time":{"start":1699156884535,"stop":1699156884632,"duration":97}},{"uid":"b4af9e5d933da745","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/b4af9e5d933da745","status":"passed","time":{"start":1699142540732,"stop":1699142541065,"duration":333}},{"uid":"ab0ac3603ecd808","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/ab0ac3603ecd808","status":"passed","time":{"start":1699128095096,"stop":1699128095221,"duration":125}},{"uid":"42d504a2f613e4cd","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/42d504a2f613e4cd","status":"passed","time":{"start":1699113694587,"stop":1699113694707,"duration":120}},{"uid":"fa83f54fc83d19f4","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/fa83f54fc83d19f4","status":"passed","time":{"start":1699099291836,"stop":1699099292060,"duration":224}},{"uid":"21d248f62250f79a","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/21d248f62250f79a","status":"passed","time":{"start":1699084887277,"stop":1699084887398,"duration":121}},{"uid":"76344110d71b87af","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/76344110d71b87af","status":"passed","time":{"start":1699070513442,"stop":1699070513766,"duration":324}},{"uid":"1d03d9737dc13ae9","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/1d03d9737dc13ae9","status":"passed","time":{"start":1699041690192,"stop":1699041690290,"duration":98}},{"uid":"be5d5bb42dcd6a90","reportUrl":"https://novasamatech.github.io/test-runner/4072//#testresult/be5d5bb42dcd6a90","status":"passed","time":{"start":1699056145774,"stop":1699056145889,"duration":115}},{"uid":"ecef63a95212f1e1","reportUrl":"https://novasamatech.github.io/test-runner/4070//#testresult/ecef63a95212f1e1","status":"passed","time":{"start":1699027341822,"stop":1699027342169,"duration":347}}]},"tags":[]},"source":"d2d6df7e6ec63781.json","parameterValues":["{'url': 'wss://asia-ws.unique.network/', 'name': 'UNIQUE'}"]}