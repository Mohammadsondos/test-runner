{"uid":"addf2c3cc46b7780","name":"test_has_new_assets[Test for Equilibrium]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"f21168016f27145dde497a9174f0cda4","time":{"start":1696061042670,"stop":1696061044498,"duration":1828},"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f1418af2620>\nchain = <scripts.utils.chain_model.Chain object at 0x7f1418d52fb0>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n        chain.init_properties()\n        symbols = chain.substrate.token_symbol if isinstance(chain.substrate.token_symbol, list) else [\n            chain.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n.venv/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az256-88"},{"name":"thread","value":"2099-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f1418d52fb0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ece37e1f561b3edf","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1696061025675,"stop":1696061027644,"duration":1969}},{"uid":"46933b2c23d31b4c","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1696061003429,"stop":1696061010649,"duration":7220}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":216,"unknown":0,"total":221},"items":[{"uid":"f99e30f59d91359d","reportUrl":"https://novasamatech.github.io/test-runner/3861//#testresult/f99e30f59d91359d","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1696046630964,"stop":1696046632702,"duration":1738}},{"uid":"b89a8e772cd401d2","reportUrl":"https://novasamatech.github.io/test-runner/3860//#testresult/b89a8e772cd401d2","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1696032228266,"stop":1696032229443,"duration":1177}},{"uid":"21b9e4b27c1727d8","reportUrl":"https://novasamatech.github.io/test-runner/3859//#testresult/21b9e4b27c1727d8","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1696017838008,"stop":1696017839363,"duration":1355}},{"uid":"87f48e2b5866d8d9","reportUrl":"https://novasamatech.github.io/test-runner/3858//#testresult/87f48e2b5866d8d9","status":"passed","time":{"start":1696003399431,"stop":1696003403565,"duration":4134}},{"uid":"34bde62fcc8e8965","reportUrl":"https://novasamatech.github.io/test-runner/3857//#testresult/34bde62fcc8e8965","status":"passed","time":{"start":1695988969577,"stop":1695988974266,"duration":4689}},{"uid":"6d8cf5835cdb7cd2","reportUrl":"https://novasamatech.github.io/test-runner/3856//#testresult/6d8cf5835cdb7cd2","status":"passed","time":{"start":1695974565962,"stop":1695974571448,"duration":5486}},{"uid":"2d423d4796c3d4c6","reportUrl":"https://novasamatech.github.io/test-runner/3855//#testresult/2d423d4796c3d4c6","status":"passed","time":{"start":1695960189631,"stop":1695960193834,"duration":4203}},{"uid":"d21861ee95a14dde","reportUrl":"https://novasamatech.github.io/test-runner/3854//#testresult/d21861ee95a14dde","status":"passed","time":{"start":1695945828726,"stop":1695945834911,"duration":6185}},{"uid":"8419db563a38b31d","reportUrl":"https://novasamatech.github.io/test-runner/3853//#testresult/8419db563a38b31d","status":"passed","time":{"start":1695931370075,"stop":1695931374319,"duration":4244}},{"uid":"faae19536635122b","reportUrl":"https://novasamatech.github.io/test-runner/3852//#testresult/faae19536635122b","status":"passed","time":{"start":1695916975117,"stop":1695916979828,"duration":4711}},{"uid":"1348f841e0155618","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/1348f841e0155618","status":"passed","time":{"start":1695902606031,"stop":1695902611924,"duration":5893}},{"uid":"a451f11a803e013f","reportUrl":"https://novasamatech.github.io/test-runner/3850//#testresult/a451f11a803e013f","status":"passed","time":{"start":1695888183907,"stop":1695888189712,"duration":5805}},{"uid":"949e752bd7a040a2","reportUrl":"https://novasamatech.github.io/test-runner/3849//#testresult/949e752bd7a040a2","status":"passed","time":{"start":1695873767257,"stop":1695873772642,"duration":5385}},{"uid":"6cbc7f7fb202d660","reportUrl":"https://novasamatech.github.io/test-runner/3848//#testresult/6cbc7f7fb202d660","status":"passed","time":{"start":1695859407564,"stop":1695859413803,"duration":6239}},{"uid":"7d05597d0ded3e28","reportUrl":"https://novasamatech.github.io/test-runner/3847//#testresult/7d05597d0ded3e28","status":"passed","time":{"start":1695845007554,"stop":1695845013868,"duration":6314}},{"uid":"e98fc741bf60423","reportUrl":"https://novasamatech.github.io/test-runner/3846//#testresult/e98fc741bf60423","status":"passed","time":{"start":1695830592079,"stop":1695830597514,"duration":5435}},{"uid":"1680618b8f595b57","reportUrl":"https://novasamatech.github.io/test-runner/3845//#testresult/1680618b8f595b57","status":"passed","time":{"start":1695816174578,"stop":1695816179249,"duration":4671}},{"uid":"41b7e52f763984c1","reportUrl":"https://novasamatech.github.io/test-runner/3844//#testresult/41b7e52f763984c1","status":"passed","time":{"start":1695801754562,"stop":1695801760925,"duration":6363}},{"uid":"8e8a475a1aa38129","reportUrl":"https://novasamatech.github.io/test-runner/3843//#testresult/8e8a475a1aa38129","status":"passed","time":{"start":1695787385808,"stop":1695787395807,"duration":9999}},{"uid":"135b95a993891be7","reportUrl":"https://novasamatech.github.io/test-runner/3842//#testresult/135b95a993891be7","status":"passed","time":{"start":1695773021001,"stop":1695773030292,"duration":9291}}]},"tags":[]},"source":"addf2c3cc46b7780.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f1418d52fb0>"]}