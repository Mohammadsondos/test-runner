{"uid":"3c876abfc01653a5","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1709064075975,"stop":1709064076356,"duration":381},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7ff36324d300>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7ff3610459c0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7ff361044b50>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az658-468"},{"name":"thread","value":"2118-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5dcdd458c867885d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709064070551,"stop":1709064070939,"duration":388}},{"uid":"c77f26ea6df0f307","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709064065039,"stop":1709064065430,"duration":391}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":8,"skipped":0,"passed":889,"unknown":0,"total":898},"items":[{"uid":"80bccdb37984ec76","reportUrl":"https://novasamatech.github.io/test-runner/4779//#testresult/80bccdb37984ec76","status":"passed","time":{"start":1709049668022,"stop":1709049668997,"duration":975}},{"uid":"f528369b9222406b","reportUrl":"https://novasamatech.github.io/test-runner/4778//#testresult/f528369b9222406b","status":"passed","time":{"start":1709035284467,"stop":1709035284692,"duration":225}},{"uid":"6bcfb11587aca926","reportUrl":"https://novasamatech.github.io/test-runner/4776//#testresult/6bcfb11587aca926","status":"passed","time":{"start":1709032476005,"stop":1709032476223,"duration":218}},{"uid":"d12f412fbea4f191","reportUrl":"https://novasamatech.github.io/test-runner/4703//#testresult/d12f412fbea4f191","status":"passed","time":{"start":1707984057830,"stop":1707984058094,"duration":264}},{"uid":"ac59c848edb21bf0","reportUrl":"https://novasamatech.github.io/test-runner/4702//#testresult/ac59c848edb21bf0","status":"passed","time":{"start":1707969665420,"stop":1707969665744,"duration":324}},{"uid":"3ec798375b1a3f66","reportUrl":"https://novasamatech.github.io/test-runner/4701//#testresult/3ec798375b1a3f66","status":"passed","time":{"start":1707955310917,"stop":1707955311238,"duration":321}},{"uid":"506e40ceaa477f6d","reportUrl":"https://novasamatech.github.io/test-runner/4700//#testresult/506e40ceaa477f6d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707940870444,"stop":1707940870612,"duration":168}},{"uid":"20acec6f1bd5e6d2","reportUrl":"https://novasamatech.github.io/test-runner/4699//#testresult/20acec6f1bd5e6d2","status":"passed","time":{"start":1707926462405,"stop":1707926463438,"duration":1033}},{"uid":"3006097895e67fed","reportUrl":"https://novasamatech.github.io/test-runner/4698//#testresult/3006097895e67fed","status":"passed","time":{"start":1707912073764,"stop":1707912074257,"duration":493}},{"uid":"d478e17e15c1c9d8","reportUrl":"https://novasamatech.github.io/test-runner/4697//#testresult/d478e17e15c1c9d8","status":"passed","time":{"start":1707897670769,"stop":1707897671061,"duration":292}},{"uid":"d3f56c573be4084a","reportUrl":"https://novasamatech.github.io/test-runner/4696//#testresult/d3f56c573be4084a","status":"passed","time":{"start":1707883263791,"stop":1707883263987,"duration":196}},{"uid":"9c41766d16e8bb84","reportUrl":"https://novasamatech.github.io/test-runner/4695//#testresult/9c41766d16e8bb84","status":"passed","time":{"start":1707868908040,"stop":1707868908777,"duration":737}},{"uid":"bd8c611ec52fae90","reportUrl":"https://novasamatech.github.io/test-runner/4694//#testresult/bd8c611ec52fae90","status":"passed","time":{"start":1707854472410,"stop":1707854472650,"duration":240}},{"uid":"91ac2fbc0560fa20","reportUrl":"https://novasamatech.github.io/test-runner/4693//#testresult/91ac2fbc0560fa20","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707840074664,"stop":1707840074718,"duration":54}},{"uid":"7f6154889d89b9c","reportUrl":"https://novasamatech.github.io/test-runner/4692//#testresult/7f6154889d89b9c","status":"passed","time":{"start":1707825671385,"stop":1707825672235,"duration":850}},{"uid":"fd38c6d55ba8bdc5","reportUrl":"https://novasamatech.github.io/test-runner/4691//#testresult/fd38c6d55ba8bdc5","status":"passed","time":{"start":1707811263718,"stop":1707811264547,"duration":829}},{"uid":"26778523508938b0","reportUrl":"https://novasamatech.github.io/test-runner/4690//#testresult/26778523508938b0","status":"passed","time":{"start":1707796863378,"stop":1707796863624,"duration":246}},{"uid":"877550c5bda6f659","reportUrl":"https://novasamatech.github.io/test-runner/4689//#testresult/877550c5bda6f659","status":"passed","time":{"start":1707782499731,"stop":1707782500012,"duration":281}},{"uid":"8a98ad6642f026a3","reportUrl":"https://novasamatech.github.io/test-runner/4688//#testresult/8a98ad6642f026a3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707768065837,"stop":1707768065881,"duration":44}},{"uid":"923642eb23f6032b","reportUrl":"https://novasamatech.github.io/test-runner/4687//#testresult/923642eb23f6032b","status":"passed","time":{"start":1707753660908,"stop":1707753661846,"duration":938}}]},"tags":[]},"source":"3c876abfc01653a5.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}