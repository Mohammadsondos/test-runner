{"uid":"277c5ca84d8440d8","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1710691280821,"stop":1710691280968,"duration":147},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7a14bc1ff790>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7a14b5f63c10>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7a14b5f61ed0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az692-637"},{"name":"thread","value":"2048-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a1992b478e6cdf21","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710691275636,"stop":1710691275787,"duration":151}},{"uid":"36ee3e6529877295","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1710691269747,"stop":1710691270615,"duration":868}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":43,"skipped":0,"passed":958,"unknown":0,"total":1005},"items":[{"uid":"ac4ad3673b105664","reportUrl":"https://novasamatech.github.io/test-runner/4893//#testresult/ac4ad3673b105664","status":"passed","time":{"start":1710676865924,"stop":1710676866866,"duration":942}},{"uid":"cd2010c30edfa1bf","reportUrl":"https://novasamatech.github.io/test-runner/4892//#testresult/cd2010c30edfa1bf","status":"passed","time":{"start":1710662467199,"stop":1710662468184,"duration":985}},{"uid":"61158c38b7ca1b88","reportUrl":"https://novasamatech.github.io/test-runner/4891//#testresult/61158c38b7ca1b88","status":"passed","time":{"start":1710648065086,"stop":1710648066066,"duration":980}},{"uid":"a7efe822d69a70bd","reportUrl":"https://novasamatech.github.io/test-runner/4890//#testresult/a7efe822d69a70bd","status":"passed","time":{"start":1710633704315,"stop":1710633705413,"duration":1098}},{"uid":"c2efd57601393d77","reportUrl":"https://novasamatech.github.io/test-runner/4889//#testresult/c2efd57601393d77","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1710619272359,"stop":1710619273152,"duration":793}},{"uid":"3754a498b857d26f","reportUrl":"https://novasamatech.github.io/test-runner/4888//#testresult/3754a498b857d26f","status":"passed","time":{"start":1710604861433,"stop":1710604861988,"duration":555}},{"uid":"fad1c18261b3b71a","reportUrl":"https://novasamatech.github.io/test-runner/4887//#testresult/fad1c18261b3b71a","status":"passed","time":{"start":1710590464866,"stop":1710590465681,"duration":815}},{"uid":"6ef4857628ccf7fe","reportUrl":"https://novasamatech.github.io/test-runner/4886//#testresult/6ef4857628ccf7fe","status":"passed","time":{"start":1710576068616,"stop":1710576069302,"duration":686}},{"uid":"8d56b649bf36cf5c","reportUrl":"https://novasamatech.github.io/test-runner/4885//#testresult/8d56b649bf36cf5c","status":"passed","time":{"start":1710561662199,"stop":1710561662630,"duration":431}},{"uid":"a51778e0087c39b0","reportUrl":"https://novasamatech.github.io/test-runner/4884//#testresult/a51778e0087c39b0","status":"passed","time":{"start":1710547297579,"stop":1710547298458,"duration":879}},{"uid":"659684356167e4eb","reportUrl":"https://novasamatech.github.io/test-runner/4883//#testresult/659684356167e4eb","status":"passed","time":{"start":1710532861491,"stop":1710532862204,"duration":713}},{"uid":"4fed892cf0298374","reportUrl":"https://novasamatech.github.io/test-runner/4882//#testresult/4fed892cf0298374","status":"passed","time":{"start":1710518461451,"stop":1710518463961,"duration":2510}},{"uid":"f3f16c0d7274668f","reportUrl":"https://novasamatech.github.io/test-runner/4881//#testresult/f3f16c0d7274668f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710504076700,"stop":1710504076762,"duration":62}},{"uid":"66b6c3d9138165c1","reportUrl":"https://novasamatech.github.io/test-runner/4880//#testresult/66b6c3d9138165c1","status":"passed","time":{"start":1710489664076,"stop":1710489664599,"duration":523}},{"uid":"a4bd245faab0747","reportUrl":"https://novasamatech.github.io/test-runner/4879//#testresult/a4bd245faab0747","status":"passed","time":{"start":1710475265433,"stop":1710475266223,"duration":790}},{"uid":"c23e43a6adfb11c6","reportUrl":"https://novasamatech.github.io/test-runner/4878//#testresult/c23e43a6adfb11c6","status":"passed","time":{"start":1710460894856,"stop":1710460895605,"duration":749}},{"uid":"4f470b8708893a69","reportUrl":"https://novasamatech.github.io/test-runner/4877//#testresult/4f470b8708893a69","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710446482394,"stop":1710446482437,"duration":43}},{"uid":"5f5db97ee1e3d462","reportUrl":"https://novasamatech.github.io/test-runner/4876//#testresult/5f5db97ee1e3d462","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710432079658,"stop":1710432079699,"duration":41}},{"uid":"483fba66fa67e88a","reportUrl":"https://novasamatech.github.io/test-runner/4875//#testresult/483fba66fa67e88a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710417706748,"stop":1710417706796,"duration":48}},{"uid":"364923a3a9c867e8","reportUrl":"https://novasamatech.github.io/test-runner/4874//#testresult/364923a3a9c867e8","status":"passed","time":{"start":1710403265445,"stop":1710403266396,"duration":951}}]},"tags":[]},"source":"277c5ca84d8440d8.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}