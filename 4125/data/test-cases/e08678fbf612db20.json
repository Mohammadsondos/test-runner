{"uid":"e08678fbf612db20","name":"test_can_create_connection[Test for KILT, url: wss://spiritnet.kilt.io/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e9f49a30f86013b1729b9ba9efef42ff","time":{"start":1699819334737,"stop":1699819335203,"duration":466},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 12 Nov 2023 20:02:15 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'KILT', 'url': 'wss://spiritnet.kilt.io/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 12 Nov 2023 20:02:15 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 12 Nov 2023 20:02:15 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'KILT', 'url': 'wss://spiritnet.kilt.io/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 12 Nov 2023 20:02:15 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f1063be801058a81","name":"stdout","source":"f1063be801058a81.txt","type":"text/plain","size":1218}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1383-850"},{"name":"thread","value":"2174-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://spiritnet.kilt.io/', 'name': 'KILT'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ca9c6fd49866ee6a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 12 Nov 2023 20:01:59 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699819319000,"stop":1699819319640,"duration":640}},{"uid":"27a830ed1778104","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 12 Nov 2023 20:01:43 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699819303444,"stop":1699819303934,"duration":490}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":484,"unknown":0,"total":485},"items":[{"uid":"9109a6f5ba58d9b1","reportUrl":"https://novasamatech.github.io/test-runner/4124//#testresult/9109a6f5ba58d9b1","status":"passed","time":{"start":1699804877537,"stop":1699804878141,"duration":604}},{"uid":"5482037bf0ad5375","reportUrl":"https://novasamatech.github.io/test-runner/4123//#testresult/5482037bf0ad5375","status":"passed","time":{"start":1699790476153,"stop":1699790478727,"duration":2574}},{"uid":"fa6ba052b6328e74","reportUrl":"https://novasamatech.github.io/test-runner/4122//#testresult/fa6ba052b6328e74","status":"passed","time":{"start":1699776120078,"stop":1699776123093,"duration":3015}},{"uid":"48d2d0b57ac63733","reportUrl":"https://novasamatech.github.io/test-runner/4121//#testresult/48d2d0b57ac63733","status":"passed","time":{"start":1699761716550,"stop":1699761717230,"duration":680}},{"uid":"6c7961711206da00","reportUrl":"https://novasamatech.github.io/test-runner/4120//#testresult/6c7961711206da00","status":"passed","time":{"start":1699747363275,"stop":1699747363932,"duration":657}},{"uid":"cdeaa1f888e442f9","reportUrl":"https://novasamatech.github.io/test-runner/4119//#testresult/cdeaa1f888e442f9","status":"passed","time":{"start":1699732912729,"stop":1699732932376,"duration":19647}},{"uid":"b6cd79712d1df57e","reportUrl":"https://novasamatech.github.io/test-runner/4118//#testresult/b6cd79712d1df57e","status":"passed","time":{"start":1699718474755,"stop":1699718480879,"duration":6124}},{"uid":"77448f5d092a77d7","reportUrl":"https://novasamatech.github.io/test-runner/4117//#testresult/77448f5d092a77d7","status":"passed","time":{"start":1699704080428,"stop":1699704081629,"duration":1201}},{"uid":"7b5bf4d1b0e47dc9","reportUrl":"https://novasamatech.github.io/test-runner/4116//#testresult/7b5bf4d1b0e47dc9","status":"passed","time":{"start":1699689718846,"stop":1699689719474,"duration":628}},{"uid":"e93f11831e74f434","reportUrl":"https://novasamatech.github.io/test-runner/4115//#testresult/e93f11831e74f434","status":"passed","time":{"start":1699675273371,"stop":1699675273893,"duration":522}},{"uid":"6187314798dc935c","reportUrl":"https://novasamatech.github.io/test-runner/4114//#testresult/6187314798dc935c","status":"passed","time":{"start":1699660965862,"stop":1699660966680,"duration":818}},{"uid":"6e1607b8a9abef42","reportUrl":"https://novasamatech.github.io/test-runner/4113//#testresult/6e1607b8a9abef42","status":"passed","time":{"start":1699646641779,"stop":1699646642579,"duration":800}},{"uid":"ab0179f31b17b1e0","reportUrl":"https://novasamatech.github.io/test-runner/4112//#testresult/ab0179f31b17b1e0","status":"passed","time":{"start":1699632115456,"stop":1699632138510,"duration":23054}},{"uid":"561ea939e9542284","reportUrl":"https://novasamatech.github.io/test-runner/4111//#testresult/561ea939e9542284","status":"passed","time":{"start":1699617677998,"stop":1699617678485,"duration":487}},{"uid":"c1571ac3cd4f5c72","reportUrl":"https://novasamatech.github.io/test-runner/4110//#testresult/c1571ac3cd4f5c72","status":"passed","time":{"start":1699603289333,"stop":1699603290195,"duration":862}},{"uid":"d59c1f8f87a32348","reportUrl":"https://novasamatech.github.io/test-runner/4109//#testresult/d59c1f8f87a32348","status":"passed","time":{"start":1699588951851,"stop":1699588952449,"duration":598}},{"uid":"d07735968c8d82af","reportUrl":"https://novasamatech.github.io/test-runner/4108//#testresult/d07735968c8d82af","status":"passed","time":{"start":1699574526792,"stop":1699574536467,"duration":9675}},{"uid":"716cc041871ce81d","reportUrl":"https://novasamatech.github.io/test-runner/4107//#testresult/716cc041871ce81d","status":"passed","time":{"start":1699560086787,"stop":1699560087470,"duration":683}},{"uid":"23a8fd37fd6183c7","reportUrl":"https://novasamatech.github.io/test-runner/4106//#testresult/23a8fd37fd6183c7","status":"passed","time":{"start":1699545682980,"stop":1699545683649,"duration":669}},{"uid":"364f2c62120bdfb8","reportUrl":"https://novasamatech.github.io/test-runner/4105//#testresult/364f2c62120bdfb8","status":"passed","time":{"start":1699531367165,"stop":1699531367858,"duration":693}}]},"tags":[]},"source":"e08678fbf612db20.json","parameterValues":["{'url': 'wss://spiritnet.kilt.io/', 'name': 'KILT'}"]}