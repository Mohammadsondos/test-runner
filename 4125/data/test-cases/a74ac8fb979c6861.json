{"uid":"a74ac8fb979c6861","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1699819356542,"stop":1699819356878,"duration":336},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 20:02:36 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 20:02:36 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 20:02:36 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 20:02:36 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"24e7bd7d22fe7478","name":"stdout","source":"24e7bd7d22fe7478.txt","type":"text/plain","size":1139}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1383-850"},{"name":"thread","value":"2177-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"13eabb85bbd72906","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 20:02:21 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699819341137,"stop":1699819341472,"duration":335}},{"uid":"28bdd04d8f0206a","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1699819325756,"stop":1699819326017,"duration":261}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":57,"skipped":0,"passed":428,"unknown":0,"total":485},"items":[{"uid":"fb4a2ed964e7b410","reportUrl":"https://novasamatech.github.io/test-runner/4124//#testresult/fb4a2ed964e7b410","status":"passed","time":{"start":1699804910628,"stop":1699804910993,"duration":365}},{"uid":"3a1f5641c78f893b","reportUrl":"https://novasamatech.github.io/test-runner/4123//#testresult/3a1f5641c78f893b","status":"passed","time":{"start":1699790527180,"stop":1699790527550,"duration":370}},{"uid":"30cd186ea75cf790","reportUrl":"https://novasamatech.github.io/test-runner/4122//#testresult/30cd186ea75cf790","status":"passed","time":{"start":1699776168845,"stop":1699776169419,"duration":574}},{"uid":"67eb7659debbc2b7","reportUrl":"https://novasamatech.github.io/test-runner/4121//#testresult/67eb7659debbc2b7","status":"passed","time":{"start":1699761746766,"stop":1699761747250,"duration":484}},{"uid":"2676be8f9df62f5e","reportUrl":"https://novasamatech.github.io/test-runner/4120//#testresult/2676be8f9df62f5e","status":"passed","time":{"start":1699747399102,"stop":1699747399786,"duration":684}},{"uid":"37dc74818a6ec63","reportUrl":"https://novasamatech.github.io/test-runner/4119//#testresult/37dc74818a6ec63","status":"passed","time":{"start":1699732916876,"stop":1699732917495,"duration":619}},{"uid":"ac4f22f7e529a759","reportUrl":"https://novasamatech.github.io/test-runner/4118//#testresult/ac4f22f7e529a759","status":"passed","time":{"start":1699718533647,"stop":1699718534018,"duration":371}},{"uid":"8e88966327d90b49","reportUrl":"https://novasamatech.github.io/test-runner/4117//#testresult/8e88966327d90b49","status":"passed","time":{"start":1699704097719,"stop":1699704098329,"duration":610}},{"uid":"c15a886337f3e536","reportUrl":"https://novasamatech.github.io/test-runner/4116//#testresult/c15a886337f3e536","status":"passed","time":{"start":1699689703671,"stop":1699689704228,"duration":557}},{"uid":"8cb0b9af6312056f","reportUrl":"https://novasamatech.github.io/test-runner/4115//#testresult/8cb0b9af6312056f","status":"passed","time":{"start":1699675299413,"stop":1699675299980,"duration":567}},{"uid":"9939ab64e246d50b","reportUrl":"https://novasamatech.github.io/test-runner/4114//#testresult/9939ab64e246d50b","status":"passed","time":{"start":1699660951640,"stop":1699660952294,"duration":654}},{"uid":"2b0150425ab0d6a2","reportUrl":"https://novasamatech.github.io/test-runner/4113//#testresult/2b0150425ab0d6a2","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1699646595237,"stop":1699646595494,"duration":257}},{"uid":"7ba539c57ce83c43","reportUrl":"https://novasamatech.github.io/test-runner/4112//#testresult/7ba539c57ce83c43","status":"passed","time":{"start":1699632143790,"stop":1699632144310,"duration":520}},{"uid":"d7c8d93e72d44bec","reportUrl":"https://novasamatech.github.io/test-runner/4111//#testresult/d7c8d93e72d44bec","status":"passed","time":{"start":1699617723897,"stop":1699617724267,"duration":370}},{"uid":"c9f2a30d290b249b","reportUrl":"https://novasamatech.github.io/test-runner/4110//#testresult/c9f2a30d290b249b","status":"passed","time":{"start":1699603385992,"stop":1699603386640,"duration":648}},{"uid":"9ed38fbd415a6c59","reportUrl":"https://novasamatech.github.io/test-runner/4109//#testresult/9ed38fbd415a6c59","status":"passed","time":{"start":1699588965857,"stop":1699588966347,"duration":490}},{"uid":"1cf49a5378e83c93","reportUrl":"https://novasamatech.github.io/test-runner/4108//#testresult/1cf49a5378e83c93","status":"passed","time":{"start":1699574546637,"stop":1699574547041,"duration":404}},{"uid":"33b2d6e1f5139651","reportUrl":"https://novasamatech.github.io/test-runner/4107//#testresult/33b2d6e1f5139651","status":"passed","time":{"start":1699560125119,"stop":1699560125694,"duration":575}},{"uid":"674baa3bf24ab668","reportUrl":"https://novasamatech.github.io/test-runner/4106//#testresult/674baa3bf24ab668","status":"passed","time":{"start":1699545709852,"stop":1699545710356,"duration":504}},{"uid":"da39cc6f8bc5ae3a","reportUrl":"https://novasamatech.github.io/test-runner/4105//#testresult/da39cc6f8bc5ae3a","status":"passed","time":{"start":1699531391707,"stop":1699531392276,"duration":569}}]},"tags":[]},"source":"a74ac8fb979c6861.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}