{"uid":"9096694f68bf4d3e","name":"test_can_create_connection[Test for Hashed Network, url: wss://c1.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"82d36aa15e8a5bcf4ff7d8702aa21bfe","time":{"start":1681200302570,"stop":1681200302635,"duration":65},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c1.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c1.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"3fa088002192b5e0","name":"stdout","source":"3fa088002192b5e0.txt","type":"text/plain","size":226}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az359-828"},{"name":"thread","value":"1787-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c1.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6758ac7ccb85db9c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1681200292385,"stop":1681200292458,"duration":73}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":25,"skipped":0,"passed":83,"unknown":0,"total":108},"items":[{"uid":"1668ccc3d6a6b8ab","reportUrl":"https://nova-wallet.github.io/test-runner/2801//#testresult/1668ccc3d6a6b8ab","status":"passed","time":{"start":1681185904325,"stop":1681185904768,"duration":443}},{"uid":"740bb4540d87d125","reportUrl":"https://nova-wallet.github.io/test-runner/2800//#testresult/740bb4540d87d125","status":"passed","time":{"start":1681172044043,"stop":1681172044352,"duration":309}},{"uid":"7758c750efbe4e5b","reportUrl":"https://nova-wallet.github.io/test-runner/2799//#testresult/7758c750efbe4e5b","status":"passed","time":{"start":1681157106094,"stop":1681157106408,"duration":314}},{"uid":"ca0b36afc7cee00c","reportUrl":"https://nova-wallet.github.io/test-runner/2798//#testresult/ca0b36afc7cee00c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1681142694171,"stop":1681142694341,"duration":170}},{"uid":"1cb416ab74828eee","reportUrl":"https://nova-wallet.github.io/test-runner/2797//#testresult/1cb416ab74828eee","status":"passed","time":{"start":1681128331255,"stop":1681128331334,"duration":79}},{"uid":"6ce565143596d55d","reportUrl":"https://nova-wallet.github.io/test-runner/2796//#testresult/6ce565143596d55d","status":"passed","time":{"start":1681113885199,"stop":1681113885373,"duration":174}},{"uid":"3c4674d9f5657e60","reportUrl":"https://nova-wallet.github.io/test-runner/2795//#testresult/3c4674d9f5657e60","status":"passed","time":{"start":1681099479336,"stop":1681099479674,"duration":338}},{"uid":"e17f20656a8e68a6","reportUrl":"https://nova-wallet.github.io/test-runner/2794//#testresult/e17f20656a8e68a6","status":"passed","time":{"start":1681085609863,"stop":1681085610160,"duration":297}},{"uid":"bea765955fc7fbc8","reportUrl":"https://nova-wallet.github.io/test-runner/2793//#testresult/bea765955fc7fbc8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1681070680278,"stop":1681070680328,"duration":50}},{"uid":"2900f93c7dba40f2","reportUrl":"https://nova-wallet.github.io/test-runner/2792//#testresult/2900f93c7dba40f2","status":"passed","time":{"start":1681056274575,"stop":1681056274632,"duration":57}},{"uid":"18900e664dbbbf31","reportUrl":"https://nova-wallet.github.io/test-runner/2791//#testresult/18900e664dbbbf31","status":"passed","time":{"start":1681041907443,"stop":1681041907754,"duration":311}},{"uid":"80d254815d03b272","reportUrl":"https://nova-wallet.github.io/test-runner/2790//#testresult/80d254815d03b272","status":"passed","time":{"start":1681027497704,"stop":1681027498001,"duration":297}},{"uid":"fa97ae046cdb8915","reportUrl":"https://nova-wallet.github.io/test-runner/2789//#testresult/fa97ae046cdb8915","status":"passed","time":{"start":1681013066541,"stop":1681013066625,"duration":84}},{"uid":"221661b8c7d74668","reportUrl":"https://nova-wallet.github.io/test-runner/2788//#testresult/221661b8c7d74668","status":"passed","time":{"start":1680999268954,"stop":1680999269149,"duration":195}},{"uid":"6256a49250561c78","reportUrl":"https://nova-wallet.github.io/test-runner/2787//#testresult/6256a49250561c78","status":"passed","time":{"start":1680984282387,"stop":1680984282695,"duration":308}},{"uid":"a051a5db1c475f76","reportUrl":"https://nova-wallet.github.io/test-runner/2786//#testresult/a051a5db1c475f76","status":"passed","time":{"start":1680969873574,"stop":1680969873753,"duration":179}},{"uid":"ea5dc9a9a5f8d6b1","reportUrl":"https://nova-wallet.github.io/test-runner/2785//#testresult/ea5dc9a9a5f8d6b1","status":"passed","time":{"start":1680955493934,"stop":1680955493997,"duration":63}},{"uid":"82c9a14fefa6aaab","reportUrl":"https://nova-wallet.github.io/test-runner/2784//#testresult/82c9a14fefa6aaab","status":"passed","time":{"start":1680941080200,"stop":1680941080495,"duration":295}},{"uid":"3da670faf4a737e8","reportUrl":"https://nova-wallet.github.io/test-runner/2783//#testresult/3da670faf4a737e8","status":"passed","time":{"start":1680926705998,"stop":1680926706078,"duration":80}},{"uid":"fbaf7a64eb2eaaeb","reportUrl":"https://nova-wallet.github.io/test-runner/2782//#testresult/fbaf7a64eb2eaaeb","status":"passed","time":{"start":1680912738025,"stop":1680912738103,"duration":78}}]},"tags":[]},"source":"9096694f68bf4d3e.json","parameterValues":["{'url': 'wss://c1.hashed.network', 'name': 'Hashed Network'}"]}