{"uid":"20fd8ace46b0d0a5","name":"test_can_create_connection[Test for Calamari, url: wss://calamari.systems]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1f97e1b2aa75f736283999eef96b536b","time":{"start":1690128293056,"stop":1690128293543,"duration":487},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 23 Jul 2023 16:04:53 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://calamari.systems'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 23 Jul 2023 16:04:53 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 23 Jul 2023 16:04:53 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://calamari.systems'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 23 Jul 2023 16:04:53 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"aa491a17dc513dce","name":"stdout","source":"aa491a17dc513dce.txt","type":"text/plain","size":996}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az455-922"},{"name":"thread","value":"1952-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://calamari.systems', 'name': 'Calamari'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"700c8fdd61d7ca32","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 23 Jul 2023 16:04:37 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1690128277349,"stop":1690128277945,"duration":596}},{"uid":"313d456d5c4e8fef","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 23 Jul 2023 16:04:22 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1690128261629,"stop":1690128262136,"duration":507}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":407,"unknown":0,"total":411},"items":[{"uid":"2b8fa2265aa4cc9d","reportUrl":"https://novasamatech.github.io/test-runner/3440//#testresult/2b8fa2265aa4cc9d","status":"passed","time":{"start":1690113882579,"stop":1690113883299,"duration":720}},{"uid":"484956a60b5085af","reportUrl":"https://novasamatech.github.io/test-runner/3439//#testresult/484956a60b5085af","status":"passed","time":{"start":1690099458748,"stop":1690099458879,"duration":131}},{"uid":"dea046d8e2c28c04","reportUrl":"https://novasamatech.github.io/test-runner/3438//#testresult/dea046d8e2c28c04","status":"passed","time":{"start":1690085040100,"stop":1690085040919,"duration":819}},{"uid":"fe08d982daf464fa","reportUrl":"https://novasamatech.github.io/test-runner/3437//#testresult/fe08d982daf464fa","status":"passed","time":{"start":1690071322840,"stop":1690071323326,"duration":486}},{"uid":"424490564e16464b","reportUrl":"https://novasamatech.github.io/test-runner/3436//#testresult/424490564e16464b","status":"passed","time":{"start":1690056238576,"stop":1690056238787,"duration":211}},{"uid":"12b65d35e474c955","reportUrl":"https://novasamatech.github.io/test-runner/3435//#testresult/12b65d35e474c955","status":"passed","time":{"start":1690041825212,"stop":1690041826093,"duration":881}},{"uid":"7fb6158bd61b50e9","reportUrl":"https://novasamatech.github.io/test-runner/3434//#testresult/7fb6158bd61b50e9","status":"passed","time":{"start":1690027462111,"stop":1690027462258,"duration":147}},{"uid":"6b0da07ffd5b127d","reportUrl":"https://novasamatech.github.io/test-runner/3433//#testresult/6b0da07ffd5b127d","status":"passed","time":{"start":1690013062664,"stop":1690013063732,"duration":1068}},{"uid":"eca614e468cf6cff","reportUrl":"https://novasamatech.github.io/test-runner/3432//#testresult/eca614e468cf6cff","status":"passed","time":{"start":1689998629215,"stop":1689998629517,"duration":302}},{"uid":"4f89712f55329d42","reportUrl":"https://novasamatech.github.io/test-runner/3431//#testresult/4f89712f55329d42","status":"passed","time":{"start":1689984831137,"stop":1689984831800,"duration":663}},{"uid":"6e5e5a0e503aa9a0","reportUrl":"https://novasamatech.github.io/test-runner/3430//#testresult/6e5e5a0e503aa9a0","status":"passed","time":{"start":1689969850452,"stop":1689969850500,"duration":48}},{"uid":"b54328c8d4c40f02","reportUrl":"https://novasamatech.github.io/test-runner/3429//#testresult/b54328c8d4c40f02","status":"passed","time":{"start":1689955451587,"stop":1689955451834,"duration":247}},{"uid":"4d85e799f98068af","reportUrl":"https://novasamatech.github.io/test-runner/3428//#testresult/4d85e799f98068af","status":"passed","time":{"start":1689941106605,"stop":1689941107173,"duration":568}},{"uid":"a0d063117070361c","reportUrl":"https://novasamatech.github.io/test-runner/3427//#testresult/a0d063117070361c","status":"passed","time":{"start":1689926660774,"stop":1689926661303,"duration":529}},{"uid":"883ba5c9c8f37027","reportUrl":"https://novasamatech.github.io/test-runner/3426//#testresult/883ba5c9c8f37027","status":"passed","time":{"start":1689912238990,"stop":1689912239412,"duration":422}},{"uid":"22ebc7442cd60a66","reportUrl":"https://novasamatech.github.io/test-runner/3425//#testresult/22ebc7442cd60a66","status":"passed","time":{"start":1689898446463,"stop":1689898447128,"duration":665}},{"uid":"b29a7c4bd6412618","reportUrl":"https://novasamatech.github.io/test-runner/3424//#testresult/b29a7c4bd6412618","status":"passed","time":{"start":1689883449011,"stop":1689883449594,"duration":583}},{"uid":"85fefe222e5641de","reportUrl":"https://novasamatech.github.io/test-runner/3423//#testresult/85fefe222e5641de","status":"passed","time":{"start":1689869062106,"stop":1689869062915,"duration":809}},{"uid":"e8d54dabc3e2b0d0","reportUrl":"https://novasamatech.github.io/test-runner/3422//#testresult/e8d54dabc3e2b0d0","status":"passed","time":{"start":1689854708018,"stop":1689854708217,"duration":199}},{"uid":"411093a0c34c1f5","reportUrl":"https://novasamatech.github.io/test-runner/3421//#testresult/411093a0c34c1f5","status":"passed","time":{"start":1689840254261,"stop":1689840254595,"duration":334}}]},"tags":[]},"source":"20fd8ace46b0d0a5.json","parameterValues":["{'url': 'wss://calamari.systems', 'name': 'Calamari'}"]}