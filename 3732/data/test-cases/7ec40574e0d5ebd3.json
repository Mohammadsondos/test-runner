{"uid":"7ec40574e0d5ebd3","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1694203369768,"stop":1694203369938,"duration":170},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 08 Sep 2023 20:02:49 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 08 Sep 2023 20:02:49 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 08 Sep 2023 20:02:49 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 08 Sep 2023 20:02:49 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"8b6ef3c5ec29af34","name":"stdout","source":"8b6ef3c5ec29af34.txt","type":"text/plain","size":1098}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az178-968"},{"name":"thread","value":"2138-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e2381f0a1d5f36dd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 08 Sep 2023 20:02:34 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694203354474,"stop":1694203354651,"duration":177}},{"uid":"4859f104d9eead63","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 08 Sep 2023 20:02:19 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694203339207,"stop":1694203339381,"duration":174}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":92,"unknown":0,"total":93},"items":[{"uid":"ffde71f65741d6b2","reportUrl":"https://novasamatech.github.io/test-runner/3731//#testresult/ffde71f65741d6b2","status":"passed","time":{"start":1694188979470,"stop":1694188979792,"duration":322}},{"uid":"a2ef3fd7388724ce","reportUrl":"https://novasamatech.github.io/test-runner/3730//#testresult/a2ef3fd7388724ce","status":"passed","time":{"start":1694174545634,"stop":1694174545723,"duration":89}},{"uid":"a841c36b034f6139","reportUrl":"https://novasamatech.github.io/test-runner/3729//#testresult/a841c36b034f6139","status":"passed","time":{"start":1694160114408,"stop":1694160114446,"duration":38}},{"uid":"58fcbe9521667ca9","reportUrl":"https://novasamatech.github.io/test-runner/3728//#testresult/58fcbe9521667ca9","status":"passed","time":{"start":1694145725576,"stop":1694145725640,"duration":64}},{"uid":"2660f96d4526395e","reportUrl":"https://novasamatech.github.io/test-runner/3727//#testresult/2660f96d4526395e","status":"passed","time":{"start":1694131375915,"stop":1694131375981,"duration":66}},{"uid":"8796cbb1116d00cb","reportUrl":"https://novasamatech.github.io/test-runner/3726//#testresult/8796cbb1116d00cb","status":"passed","time":{"start":1694116908813,"stop":1694116909004,"duration":191}},{"uid":"e01c652a01b79668","reportUrl":"https://novasamatech.github.io/test-runner/3725//#testresult/e01c652a01b79668","status":"passed","time":{"start":1694102598851,"stop":1694102598936,"duration":85}},{"uid":"aadafb8b94cf42b6","reportUrl":"https://novasamatech.github.io/test-runner/3724//#testresult/aadafb8b94cf42b6","status":"passed","time":{"start":1694088181533,"stop":1694088181772,"duration":239}},{"uid":"4c152fda13c85afc","reportUrl":"https://novasamatech.github.io/test-runner/3723//#testresult/4c152fda13c85afc","status":"passed","time":{"start":1694073762523,"stop":1694073762781,"duration":258}},{"uid":"dd77098625de3014","reportUrl":"https://novasamatech.github.io/test-runner/3722//#testresult/dd77098625de3014","status":"passed","time":{"start":1694059351564,"stop":1694059351800,"duration":236}},{"uid":"eb7480f0738d7973","reportUrl":"https://novasamatech.github.io/test-runner/3721//#testresult/eb7480f0738d7973","status":"passed","time":{"start":1694044971314,"stop":1694044971534,"duration":220}},{"uid":"2c80794b81cc51","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/2c80794b81cc51","status":"passed","time":{"start":1694030522412,"stop":1694030522481,"duration":69}},{"uid":"fba30725bd91155","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/fba30725bd91155","status":"passed","time":{"start":1694016165479,"stop":1694016165698,"duration":219}},{"uid":"ee8a34e7a6067634","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/ee8a34e7a6067634","status":"passed","time":{"start":1694001750886,"stop":1694001751148,"duration":262}},{"uid":"c4dac9b37061e53d","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/c4dac9b37061e53d","status":"passed","time":{"start":1693987333658,"stop":1693987333896,"duration":238}},{"uid":"9495c894f5e2d778","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/9495c894f5e2d778","status":"passed","time":{"start":1693972926140,"stop":1693972926202,"duration":62}},{"uid":"ef4b7bbd6c9fce17","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/ef4b7bbd6c9fce17","status":"passed","time":{"start":1693958597074,"stop":1693958597159,"duration":85}},{"uid":"fa78df52b11d3bdd","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/fa78df52b11d3bdd","status":"passed","time":{"start":1693944133390,"stop":1693944133574,"duration":184}},{"uid":"9086294b8f8c7157","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/9086294b8f8c7157","status":"passed","time":{"start":1693929764554,"stop":1693929764616,"duration":62}},{"uid":"9a88210d3ee99c78","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/9a88210d3ee99c78","status":"passed","time":{"start":1693915793918,"stop":1693915794170,"duration":252}}]},"tags":[]},"source":"7ec40574e0d5ebd3.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}