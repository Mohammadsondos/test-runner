{"uid":"c5d13bd67a77de82","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1684411525320,"stop":1684411525344,"duration":24},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"c764c15165ed096c","name":"stdout","source":"c764c15165ed096c.txt","type":"text/plain","size":226}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az362-248"},{"name":"thread","value":"1885-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e1f6ad96881a8c4e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1684411515137,"stop":1684411515190,"duration":53}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":117,"unknown":0,"total":121},"items":[{"uid":"cb501e62cd9a44d7","reportUrl":"https://nova-wallet.github.io/test-runner/3027//#testresult/cb501e62cd9a44d7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1684353902726,"stop":1684353902965,"duration":239}},{"uid":"119f02198d937c01","reportUrl":"https://nova-wallet.github.io/test-runner/3026//#testresult/119f02198d937c01","status":"passed","time":{"start":1684339501564,"stop":1684339501865,"duration":301}},{"uid":"df8e9f440ecbf712","reportUrl":"https://nova-wallet.github.io/test-runner/3024//#testresult/df8e9f440ecbf712","status":"passed","time":{"start":1684310703174,"stop":1684310703321,"duration":147}},{"uid":"9d8456742c53525d","reportUrl":"https://nova-wallet.github.io/test-runner/3023//#testresult/9d8456742c53525d","status":"passed","time":{"start":1684296295693,"stop":1684296295925,"duration":232}},{"uid":"f03a5c290e62432b","reportUrl":"https://nova-wallet.github.io/test-runner/3022//#testresult/f03a5c290e62432b","status":"passed","time":{"start":1684282511049,"stop":1684282511283,"duration":234}},{"uid":"c17a7ec6733461f1","reportUrl":"https://nova-wallet.github.io/test-runner/3020//#testresult/c17a7ec6733461f1","status":"passed","time":{"start":1684253296021,"stop":1684253296216,"duration":195}},{"uid":"ea33f3eb71a87e79","reportUrl":"https://nova-wallet.github.io/test-runner/3019//#testresult/ea33f3eb71a87e79","status":"passed","time":{"start":1684238815236,"stop":1684238815465,"duration":229}},{"uid":"9738573d3c012a4e","reportUrl":"https://nova-wallet.github.io/test-runner/3017//#testresult/9738573d3c012a4e","status":"passed","time":{"start":1684209966325,"stop":1684209966549,"duration":224}},{"uid":"42c5a52cb76e5caf","reportUrl":"https://nova-wallet.github.io/test-runner/3016//#testresult/42c5a52cb76e5caf","status":"passed","time":{"start":1684196037222,"stop":1684196037306,"duration":84}},{"uid":"b3f35bf98ca485be","reportUrl":"https://nova-wallet.github.io/test-runner/3015//#testresult/b3f35bf98ca485be","status":"passed","time":{"start":1684181087061,"stop":1684181087120,"duration":59}},{"uid":"fa2831ec4dd4bdae","reportUrl":"https://nova-wallet.github.io/test-runner/3013//#testresult/fa2831ec4dd4bdae","status":"passed","time":{"start":1684152338462,"stop":1684152338678,"duration":216}},{"uid":"129804c4c9f4d568","reportUrl":"https://nova-wallet.github.io/test-runner/3012//#testresult/129804c4c9f4d568","status":"passed","time":{"start":1684137901223,"stop":1684137901322,"duration":99}},{"uid":"93d4cfcfbef466e4","reportUrl":"https://nova-wallet.github.io/test-runner/3011//#testresult/93d4cfcfbef466e4","status":"passed","time":{"start":1684123493550,"stop":1684123493610,"duration":60}},{"uid":"c6af8659983cad35","reportUrl":"https://nova-wallet.github.io/test-runner/3010//#testresult/c6af8659983cad35","status":"passed","time":{"start":1684109657381,"stop":1684109657446,"duration":65}},{"uid":"a2a5811a6294e95d","reportUrl":"https://nova-wallet.github.io/test-runner/3009//#testresult/a2a5811a6294e95d","status":"passed","time":{"start":1684094763629,"stop":1684094763862,"duration":233}},{"uid":"e5b5203c5704a136","reportUrl":"https://nova-wallet.github.io/test-runner/3008//#testresult/e5b5203c5704a136","status":"passed","time":{"start":1684080340017,"stop":1684080340328,"duration":311}},{"uid":"1988bb3b41ebc4ef","reportUrl":"https://nova-wallet.github.io/test-runner/3005//#testresult/1988bb3b41ebc4ef","status":"passed","time":{"start":1684037106874,"stop":1684037107191,"duration":317}},{"uid":"a7c10ae403c60d08","reportUrl":"https://nova-wallet.github.io/test-runner/3003//#testresult/a7c10ae403c60d08","status":"passed","time":{"start":1684008305724,"stop":1684008306035,"duration":311}},{"uid":"2b85798d9ad24cfa","reportUrl":"https://nova-wallet.github.io/test-runner/3002//#testresult/2b85798d9ad24cfa","status":"passed","time":{"start":1683993872551,"stop":1683993872610,"duration":59}},{"uid":"c734e185761e923c","reportUrl":"https://nova-wallet.github.io/test-runner/3001//#testresult/c734e185761e923c","status":"passed","time":{"start":1683979512209,"stop":1683979512521,"duration":312}}]},"tags":[]},"source":"c5d13bd67a77de82.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}