{"uid":"b75d781a6121ec5b","name":"test_can_create_connection[Test for Khala, url: wss://khala-api.phala.network/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"b9ef5d231f3ccda572f27ab1ee01534b","time":{"start":1683777859733,"stop":1683777860131,"duration":398},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'Khala', 'url': 'wss://khala-api.phala.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'Khala', 'url': 'wss://khala-api.phala.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"66f3bdbaa196deaf","name":"stdout","source":"66f3bdbaa196deaf.txt","type":"text/plain","size":232}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az206-810"},{"name":"thread","value":"1861-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://khala-api.phala.network/ws', 'name': 'Khala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cce29d8afdfda8c3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1683777849140,"stop":1683777849579,"duration":439}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":88,"unknown":0,"total":90},"items":[{"uid":"c11dbe6a7cf71064","reportUrl":"https://nova-wallet.github.io/test-runner/2985//#testresult/c11dbe6a7cf71064","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1683749121072,"stop":1683749121365,"duration":293}},{"uid":"f9b553c3f204f580","reportUrl":"https://nova-wallet.github.io/test-runner/2983//#testresult/f9b553c3f204f580","status":"passed","time":{"start":1683720309813,"stop":1683720310207,"duration":394}},{"uid":"4dfac3c605719983","reportUrl":"https://nova-wallet.github.io/test-runner/2982//#testresult/4dfac3c605719983","status":"passed","time":{"start":1683705874641,"stop":1683705875033,"duration":392}},{"uid":"e31d897e4be58f2b","reportUrl":"https://nova-wallet.github.io/test-runner/2981//#testresult/e31d897e4be58f2b","status":"passed","time":{"start":1683691453898,"stop":1683691454658,"duration":760}},{"uid":"53a7250952b5e7bd","reportUrl":"https://nova-wallet.github.io/test-runner/2980//#testresult/53a7250952b5e7bd","status":"passed","time":{"start":1683677567704,"stop":1683677568259,"duration":555}},{"uid":"7304a2b08c45e84c","reportUrl":"https://nova-wallet.github.io/test-runner/2979//#testresult/7304a2b08c45e84c","status":"passed","time":{"start":1683662638331,"stop":1683662638728,"duration":397}},{"uid":"d5185e72d024ea49","reportUrl":"https://nova-wallet.github.io/test-runner/2978//#testresult/d5185e72d024ea49","status":"passed","time":{"start":1683648261395,"stop":1683648262039,"duration":644}},{"uid":"22e4b4b97408e61d","reportUrl":"https://nova-wallet.github.io/test-runner/2977//#testresult/22e4b4b97408e61d","status":"passed","time":{"start":1683635496918,"stop":1683635497506,"duration":588}},{"uid":"e9869b9c268023c8","reportUrl":"https://nova-wallet.github.io/test-runner/2976//#testresult/e9869b9c268023c8","status":"passed","time":{"start":1683619470762,"stop":1683619471394,"duration":632}},{"uid":"58e8bf511d9e5cd4","reportUrl":"https://nova-wallet.github.io/test-runner/2975//#testresult/58e8bf511d9e5cd4","status":"passed","time":{"start":1683605062265,"stop":1683605062934,"duration":669}},{"uid":"6f556238edaad6c9","reportUrl":"https://nova-wallet.github.io/test-runner/2972//#testresult/6f556238edaad6c9","status":"passed","time":{"start":1683561869357,"stop":1683561869741,"duration":384}},{"uid":"f24cf14f9ce1e5ef","reportUrl":"https://nova-wallet.github.io/test-runner/2969//#testresult/f24cf14f9ce1e5ef","status":"passed","time":{"start":1683518645196,"stop":1683518645576,"duration":380}},{"uid":"bba52a0fb8e7b2f4","reportUrl":"https://nova-wallet.github.io/test-runner/2968//#testresult/bba52a0fb8e7b2f4","status":"passed","time":{"start":1683504754136,"stop":1683504754838,"duration":702}},{"uid":"1a3c71f7c4a3140c","reportUrl":"https://nova-wallet.github.io/test-runner/2967//#testresult/1a3c71f7c4a3140c","status":"passed","time":{"start":1683489838310,"stop":1683489838684,"duration":374}},{"uid":"d9e0b72e1e08593d","reportUrl":"https://nova-wallet.github.io/test-runner/2966//#testresult/d9e0b72e1e08593d","status":"passed","time":{"start":1683475436930,"stop":1683475437304,"duration":374}},{"uid":"8785c6a6b3981c53","reportUrl":"https://nova-wallet.github.io/test-runner/2965//#testresult/8785c6a6b3981c53","status":"passed","time":{"start":1683461098993,"stop":1683461099644,"duration":651}},{"uid":"854508a65cfefb3b","reportUrl":"https://nova-wallet.github.io/test-runner/2964//#testresult/854508a65cfefb3b","status":"passed","time":{"start":1683446661957,"stop":1683446662594,"duration":637}},{"uid":"779b057b2fc8e060","reportUrl":"https://nova-wallet.github.io/test-runner/2963//#testresult/779b057b2fc8e060","status":"passed","time":{"start":1683432251468,"stop":1683432252069,"duration":601}},{"uid":"bf391a9214a696e0","reportUrl":"https://nova-wallet.github.io/test-runner/2962//#testresult/bf391a9214a696e0","status":"passed","time":{"start":1683418419534,"stop":1683418419929,"duration":395}},{"uid":"a07a3f567a68b5b7","reportUrl":"https://nova-wallet.github.io/test-runner/2961//#testresult/a07a3f567a68b5b7","status":"passed","time":{"start":1683403444886,"stop":1683403445654,"duration":768}}]},"tags":[]},"source":"b75d781a6121ec5b.json","parameterValues":["{'url': 'wss://khala-api.phala.network/ws', 'name': 'Khala'}"]}