{"uid":"972254ac2210596","name":"test_can_create_connection[Test for Parallel, url: wss://rpc.parallel.fi]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3426d33511aeea73e7f0e3938dc2a76d","time":{"start":1705147381883,"stop":1705147381883,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Parallel, url: wss://rpc.parallel.fi]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:165: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2948: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2962: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:359: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7ff91449bbe0>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1705147351036,"stop":1705147351422,"duration":386},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 165, in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2948, in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2962, in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 359, in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1705147366518,"stop":1705147366789,"duration":271},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 165, in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2948, in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2962, in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 359, in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1705147381883,"stop":1705147382170,"duration":287},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 165, in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2948, in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2962, in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 359, in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Parallel, url: wss://rpc.parallel.fi]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:165: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2948: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2962: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:359: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7ff91449bbe0>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","steps":[],"attachments":[{"uid":"c7f6bc50d9b3b85f","name":"stdout","source":"c7f6bc50d9b3b85f.txt","type":"text/plain","size":477}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1435-461"},{"name":"thread","value":"2155-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://rpc.parallel.fi', 'name': 'Parallel'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"72abac1d97202741","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705147366518,"stop":1705147366518,"duration":0}},{"uid":"cba37e77ab0f0f1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705147351035,"stop":1705147351035,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":29,"skipped":0,"passed":690,"unknown":0,"total":719},"items":[{"uid":"b4e4233a28bfde67","reportUrl":"https://novasamatech.github.io/test-runner/4504//#testresult/b4e4233a28bfde67","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705132966617,"stop":1705132966617,"duration":0}},{"uid":"4b580877cf4c49c8","reportUrl":"https://novasamatech.github.io/test-runner/4503//#testresult/4b580877cf4c49c8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705118584850,"stop":1705118584850,"duration":0}},{"uid":"5e492d196e001f1d","reportUrl":"https://novasamatech.github.io/test-runner/4502//#testresult/5e492d196e001f1d","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705104223097,"stop":1705104223097,"duration":0}},{"uid":"cceab43605a1b804","reportUrl":"https://novasamatech.github.io/test-runner/4501//#testresult/cceab43605a1b804","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705089847531,"stop":1705089847531,"duration":0}},{"uid":"33ccd1fc4286d7b9","reportUrl":"https://novasamatech.github.io/test-runner/4500//#testresult/33ccd1fc4286d7b9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705075391368,"stop":1705075391368,"duration":0}},{"uid":"d369619c74cd33b0","reportUrl":"https://novasamatech.github.io/test-runner/4499//#testresult/d369619c74cd33b0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705061141424,"stop":1705061141424,"duration":0}},{"uid":"4cb2daadae2cf53e","reportUrl":"https://novasamatech.github.io/test-runner/4498//#testresult/4cb2daadae2cf53e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705046705763,"stop":1705046705763,"duration":0}},{"uid":"cbd5f0684675179c","reportUrl":"https://novasamatech.github.io/test-runner/4497//#testresult/cbd5f0684675179c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705032192684,"stop":1705032192684,"duration":0}},{"uid":"757b6727404a328e","reportUrl":"https://novasamatech.github.io/test-runner/4496//#testresult/757b6727404a328e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705017825726,"stop":1705017825726,"duration":0}},{"uid":"b1236fd5b70993bb","reportUrl":"https://novasamatech.github.io/test-runner/4495//#testresult/b1236fd5b70993bb","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1705003404155,"stop":1705003404155,"duration":0}},{"uid":"23c5f1257399a4d4","reportUrl":"https://novasamatech.github.io/test-runner/4494//#testresult/23c5f1257399a4d4","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704989070759,"stop":1704989070759,"duration":0}},{"uid":"5b0c1907e906dd64","reportUrl":"https://novasamatech.github.io/test-runner/4493//#testresult/5b0c1907e906dd64","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704974628869,"stop":1704974628869,"duration":0}},{"uid":"6034c326fd120315","reportUrl":"https://novasamatech.github.io/test-runner/4492//#testresult/6034c326fd120315","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704960169228,"stop":1704960169228,"duration":0}},{"uid":"ea708895b6d7cfe1","reportUrl":"https://novasamatech.github.io/test-runner/4491//#testresult/ea708895b6d7cfe1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704945754660,"stop":1704945754660,"duration":0}},{"uid":"d2a4ac32b5a4558f","reportUrl":"https://novasamatech.github.io/test-runner/4490//#testresult/d2a4ac32b5a4558f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704931444913,"stop":1704931444913,"duration":0}},{"uid":"e7f002dcde66eddd","reportUrl":"https://novasamatech.github.io/test-runner/4489//#testresult/e7f002dcde66eddd","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704917017393,"stop":1704917017393,"duration":0}},{"uid":"5cb61af92b97d786","reportUrl":"https://novasamatech.github.io/test-runner/4488//#testresult/5cb61af92b97d786","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704902576356,"stop":1704902576356,"duration":0}},{"uid":"6809c0fe14066a36","reportUrl":"https://novasamatech.github.io/test-runner/4487//#testresult/6809c0fe14066a36","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704888157247,"stop":1704888157247,"duration":0}},{"uid":"4a36308af61927c5","reportUrl":"https://novasamatech.github.io/test-runner/4486//#testresult/4a36308af61927c5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704873764835,"stop":1704873764835,"duration":0}},{"uid":"da4577a47d0f1f94","reportUrl":"https://novasamatech.github.io/test-runner/4485//#testresult/da4577a47d0f1f94","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'the method system_chain does not exist/is not available'}","time":{"start":1704859384771,"stop":1704859384771,"duration":0}}]},"tags":[]},"source":"972254ac2210596.json","parameterValues":["{'url': 'wss://rpc.parallel.fi', 'name': 'Parallel'}"]}