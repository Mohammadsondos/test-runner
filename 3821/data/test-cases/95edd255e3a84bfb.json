{"uid":"95edd255e3a84bfb","name":"test_can_create_connection[Test for Jur, url: wss://jur-archive-mainnet-1.simplystaking.xyz/VX68C07AR4K2/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"dd49206c1c09e244537b99b238d0dbac","time":{"start":1695470582617,"stop":1695470583550,"duration":933},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:03:03 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- None","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-archive-mainnet-1.simplystaking.xyz/VX68C07AR4K2/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:03:03 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:03:03 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- None","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-archive-mainnet-1.simplystaking.xyz/VX68C07AR4K2/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:03:03 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"13182810f16447b8","name":"stdout","source":"13182810f16447b8.txt","type":"text/plain","size":1095}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az565-143"},{"name":"thread","value":"2287-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://jur-archive-mainnet-1.simplystaking.xyz/VX68C07AR4K2/ws', 'name': 'Jur'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d2bede4bb8166c29","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:02:47 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- None","time":{"start":1695470565480,"stop":1695470567466,"duration":1986}},{"uid":"5d91d26a7db7d5c5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:02:30 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- None","time":{"start":1695470548754,"stop":1695470550389,"duration":1635}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":180,"unknown":0,"total":181},"items":[{"uid":"6923acdc91e73240","reportUrl":"https://novasamatech.github.io/test-runner/3820//#testresult/6923acdc91e73240","status":"passed","time":{"start":1695456114489,"stop":1695456116015,"duration":1526}},{"uid":"86ec034367382b7e","reportUrl":"https://novasamatech.github.io/test-runner/3819//#testresult/86ec034367382b7e","status":"passed","time":{"start":1695441719159,"stop":1695441720447,"duration":1288}},{"uid":"a59fdb36c338aa5d","reportUrl":"https://novasamatech.github.io/test-runner/3818//#testresult/a59fdb36c338aa5d","status":"passed","time":{"start":1695427373202,"stop":1695427374900,"duration":1698}},{"uid":"c529c38a7a62f37c","reportUrl":"https://novasamatech.github.io/test-runner/3817//#testresult/c529c38a7a62f37c","status":"passed","time":{"start":1695412927512,"stop":1695412928394,"duration":882}},{"uid":"c1e16f7140c177f9","reportUrl":"https://novasamatech.github.io/test-runner/3816//#testresult/c1e16f7140c177f9","status":"passed","time":{"start":1695398534885,"stop":1695398535781,"duration":896}},{"uid":"8098001a2d665ab3","reportUrl":"https://novasamatech.github.io/test-runner/3815//#testresult/8098001a2d665ab3","status":"passed","time":{"start":1695384138436,"stop":1695384139214,"duration":778}},{"uid":"ba64edd140c8c7fa","reportUrl":"https://novasamatech.github.io/test-runner/3814//#testresult/ba64edd140c8c7fa","status":"passed","time":{"start":1695369759022,"stop":1695369760233,"duration":1211}},{"uid":"bd72f66a9cf4d41d","reportUrl":"https://novasamatech.github.io/test-runner/3813//#testresult/bd72f66a9cf4d41d","status":"passed","time":{"start":1695355370431,"stop":1695355373358,"duration":2927}},{"uid":"d64e716920e0ee8b","reportUrl":"https://novasamatech.github.io/test-runner/3812//#testresult/d64e716920e0ee8b","status":"passed","time":{"start":1695340999575,"stop":1695341001605,"duration":2030}},{"uid":"91efd6108b1d4dc6","reportUrl":"https://novasamatech.github.io/test-runner/3810//#testresult/91efd6108b1d4dc6","status":"passed","time":{"start":1695312149614,"stop":1695312151936,"duration":2322}},{"uid":"1534d1d66f7528bf","reportUrl":"https://novasamatech.github.io/test-runner/3809//#testresult/1534d1d66f7528bf","status":"passed","time":{"start":1695297823257,"stop":1695297825245,"duration":1988}},{"uid":"b3e297e00b8b570b","reportUrl":"https://novasamatech.github.io/test-runner/3808//#testresult/b3e297e00b8b570b","status":"passed","time":{"start":1695283376883,"stop":1695283377559,"duration":676}},{"uid":"8c9f96e3f1fa668f","reportUrl":"https://novasamatech.github.io/test-runner/3807//#testresult/8c9f96e3f1fa668f","status":"passed","time":{"start":1695268971559,"stop":1695268973151,"duration":1592}},{"uid":"31916515e93dc934","reportUrl":"https://novasamatech.github.io/test-runner/3806//#testresult/31916515e93dc934","status":"passed","time":{"start":1695254662654,"stop":1695254663427,"duration":773}},{"uid":"631776163fc5406","reportUrl":"https://novasamatech.github.io/test-runner/3805//#testresult/631776163fc5406","status":"passed","time":{"start":1695240170185,"stop":1695240172145,"duration":1960}},{"uid":"b408eabb8648141c","reportUrl":"https://novasamatech.github.io/test-runner/3804//#testresult/b408eabb8648141c","status":"passed","time":{"start":1695225886954,"stop":1695225888516,"duration":1562}},{"uid":"d28109b6826cb32d","reportUrl":"https://novasamatech.github.io/test-runner/3803//#testresult/d28109b6826cb32d","status":"passed","time":{"start":1695211439090,"stop":1695211440438,"duration":1348}},{"uid":"ba4079faee30787f","reportUrl":"https://novasamatech.github.io/test-runner/3802//#testresult/ba4079faee30787f","status":"passed","time":{"start":1695196982011,"stop":1695196982876,"duration":865}},{"uid":"5dff39f71d6567ea","reportUrl":"https://novasamatech.github.io/test-runner/3801//#testresult/5dff39f71d6567ea","status":"passed","time":{"start":1695182543932,"stop":1695182545902,"duration":1970}},{"uid":"dfd200394c2d8e1b","reportUrl":"https://novasamatech.github.io/test-runner/3800//#testresult/dfd200394c2d8e1b","status":"passed","time":{"start":1695168212102,"stop":1695168213584,"duration":1482}}]},"tags":[]},"source":"95edd255e3a84bfb.json","parameterValues":["{'url': 'wss://jur-archive-mainnet-1.simplystaking.xyz/VX68C07AR4K2/ws', 'name': 'Jur'}"]}