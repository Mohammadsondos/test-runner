{"uid":"d8f6e59693153175","name":"test_can_create_connection[Test for Jur, url: wss://jur-mainnet-archive-rpc-1.icebergnodes.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"dd04e52265ef77974494aaad2d4c080f","time":{"start":1695470579348,"stop":1695470579784,"duration":436},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:02:59 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:02:59 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:02:59 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:02:59 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"20a882ddc42a2441","name":"stdout","source":"20a882ddc42a2441.txt","type":"text/plain","size":1458}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az565-143"},{"name":"thread","value":"2284-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9337dce1deb8284c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:02:44 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695470563647,"stop":1695470564186,"duration":539}},{"uid":"5b2b8242f8aa44d7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:02:28 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695470548149,"stop":1695470548558,"duration":409}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":174,"unknown":0,"total":181},"items":[{"uid":"643fc8fef5a4f83","reportUrl":"https://novasamatech.github.io/test-runner/3820//#testresult/643fc8fef5a4f83","status":"passed","time":{"start":1695456114076,"stop":1695456114486,"duration":410}},{"uid":"b77ca9ce95564de6","reportUrl":"https://novasamatech.github.io/test-runner/3819//#testresult/b77ca9ce95564de6","status":"passed","time":{"start":1695441718336,"stop":1695441718914,"duration":578}},{"uid":"2cbee9a17ce40423","reportUrl":"https://novasamatech.github.io/test-runner/3818//#testresult/2cbee9a17ce40423","status":"passed","time":{"start":1695427372846,"stop":1695427373382,"duration":536}},{"uid":"698cf05f807af326","reportUrl":"https://novasamatech.github.io/test-runner/3817//#testresult/698cf05f807af326","status":"passed","time":{"start":1695412927116,"stop":1695412927508,"duration":392}},{"uid":"6de40bae3b8f72fc","reportUrl":"https://novasamatech.github.io/test-runner/3816//#testresult/6de40bae3b8f72fc","status":"passed","time":{"start":1695398535109,"stop":1695398535652,"duration":543}},{"uid":"48ec62ad2d409a12","reportUrl":"https://novasamatech.github.io/test-runner/3815//#testresult/48ec62ad2d409a12","status":"passed","time":{"start":1695384138285,"stop":1695384138917,"duration":632}},{"uid":"a3014d2e391a8411","reportUrl":"https://novasamatech.github.io/test-runner/3814//#testresult/a3014d2e391a8411","status":"passed","time":{"start":1695369759177,"stop":1695369759945,"duration":768}},{"uid":"ae820b5cc32ad986","reportUrl":"https://novasamatech.github.io/test-runner/3813//#testresult/ae820b5cc32ad986","status":"passed","time":{"start":1695355369976,"stop":1695355370751,"duration":775}},{"uid":"1bb09598fffb3754","reportUrl":"https://novasamatech.github.io/test-runner/3812//#testresult/1bb09598fffb3754","status":"passed","time":{"start":1695341000241,"stop":1695341000787,"duration":546}},{"uid":"3e23a178cb639d9f","reportUrl":"https://novasamatech.github.io/test-runner/3810//#testresult/3e23a178cb639d9f","status":"passed","time":{"start":1695312149977,"stop":1695312150465,"duration":488}},{"uid":"aa8ef76d951ecb0c","reportUrl":"https://novasamatech.github.io/test-runner/3809//#testresult/aa8ef76d951ecb0c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Sep 2023 12:03:43 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695297822698,"stop":1695297823159,"duration":461}},{"uid":"929b24259d1b13c2","reportUrl":"https://novasamatech.github.io/test-runner/3808//#testresult/929b24259d1b13c2","status":"passed","time":{"start":1695283360372,"stop":1695283360732,"duration":360}},{"uid":"44af4ac4678f78e9","reportUrl":"https://novasamatech.github.io/test-runner/3807//#testresult/44af4ac4678f78e9","status":"passed","time":{"start":1695268970833,"stop":1695268971552,"duration":719}},{"uid":"e4ae0ffb3ed4e91","reportUrl":"https://novasamatech.github.io/test-runner/3806//#testresult/e4ae0ffb3ed4e91","status":"passed","time":{"start":1695254662020,"stop":1695254662650,"duration":630}},{"uid":"c60e2028b56ce2b3","reportUrl":"https://novasamatech.github.io/test-runner/3805//#testresult/c60e2028b56ce2b3","status":"passed","time":{"start":1695240169794,"stop":1695240170180,"duration":386}},{"uid":"92295be3ff8fb351","reportUrl":"https://novasamatech.github.io/test-runner/3804//#testresult/92295be3ff8fb351","status":"passed","time":{"start":1695225886815,"stop":1695225887478,"duration":663}},{"uid":"bb98e6898b1a2b9c","reportUrl":"https://novasamatech.github.io/test-runner/3803//#testresult/bb98e6898b1a2b9c","status":"passed","time":{"start":1695211438365,"stop":1695211439085,"duration":720}},{"uid":"ff2deb6d41473fd6","reportUrl":"https://novasamatech.github.io/test-runner/3802//#testresult/ff2deb6d41473fd6","status":"passed","time":{"start":1695196981167,"stop":1695196981720,"duration":553}},{"uid":"a61c5a23363ec32a","reportUrl":"https://novasamatech.github.io/test-runner/3801//#testresult/a61c5a23363ec32a","status":"passed","time":{"start":1695182543952,"stop":1695182544481,"duration":529}},{"uid":"3005b46d64a549ea","reportUrl":"https://novasamatech.github.io/test-runner/3800//#testresult/3005b46d64a549ea","status":"passed","time":{"start":1695168211381,"stop":1695168212098,"duration":717}}]},"tags":[]},"source":"d8f6e59693153175.json","parameterValues":["{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"]}