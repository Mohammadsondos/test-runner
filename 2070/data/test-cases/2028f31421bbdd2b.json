{"uid":"2028f31421bbdd2b","name":"test_can_create_connection[Test for Tinkernet, url: wss://tinker.invarch.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"d05bfdf1289b5d816007efa824eb7e47","time":{"start":1670832375331,"stop":1670832375382,"duration":51},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://tinker.invarch.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://tinker.invarch.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b8d787088ed02545","name":"stdout","source":"b8d787088ed02545.txt","type":"text/plain","size":236}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az548-435"},{"name":"thread","value":"1756-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://tinker.invarch.network', 'name': 'Tinkernet'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e48e705ff63238f5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1670832365186,"stop":1670832365248,"duration":62}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":101,"skipped":0,"passed":238,"unknown":0,"total":339},"items":[{"uid":"64ed27605401fd34","reportUrl":"https://nova-wallet.github.io/test-runner/2069//#testresult/64ed27605401fd34","status":"passed","time":{"start":1670817949002,"stop":1670817949317,"duration":315}},{"uid":"f72dc9d28e51837f","reportUrl":"https://nova-wallet.github.io/test-runner/2068//#testresult/f72dc9d28e51837f","status":"passed","time":{"start":1670804133567,"stop":1670804133891,"duration":324}},{"uid":"46ba9f3cf3adc5e","reportUrl":"https://nova-wallet.github.io/test-runner/2067//#testresult/46ba9f3cf3adc5e","status":"passed","time":{"start":1670789130718,"stop":1670789130826,"duration":108}},{"uid":"720e02d529f317e6","reportUrl":"https://nova-wallet.github.io/test-runner/2066//#testresult/720e02d529f317e6","status":"passed","time":{"start":1670774734008,"stop":1670774734079,"duration":71}},{"uid":"7b2692c02cb3ccc1","reportUrl":"https://nova-wallet.github.io/test-runner/2065//#testresult/7b2692c02cb3ccc1","status":"passed","time":{"start":1670760392839,"stop":1670760393260,"duration":421}},{"uid":"c922e635e9f855e8","reportUrl":"https://nova-wallet.github.io/test-runner/2064//#testresult/c922e635e9f855e8","status":"passed","time":{"start":1670746019142,"stop":1670746019202,"duration":60}},{"uid":"18e2c83e6b098b1c","reportUrl":"https://nova-wallet.github.io/test-runner/2063//#testresult/18e2c83e6b098b1c","status":"passed","time":{"start":1670731614987,"stop":1670731615065,"duration":78}},{"uid":"b77d341014644ce7","reportUrl":"https://nova-wallet.github.io/test-runner/2062//#testresult/b77d341014644ce7","status":"passed","time":{"start":1670717794372,"stop":1670717794455,"duration":83}},{"uid":"a1ca26edb152f3cb","reportUrl":"https://nova-wallet.github.io/test-runner/2061//#testresult/a1ca26edb152f3cb","status":"passed","time":{"start":1670702722613,"stop":1670702722694,"duration":81}},{"uid":"1ed9eca9b69d7a2e","reportUrl":"https://nova-wallet.github.io/test-runner/2060//#testresult/1ed9eca9b69d7a2e","status":"passed","time":{"start":1670688339659,"stop":1670688340087,"duration":428}},{"uid":"25c6da8e1be8170c","reportUrl":"https://nova-wallet.github.io/test-runner/2059//#testresult/25c6da8e1be8170c","status":"passed","time":{"start":1670674024776,"stop":1670674024833,"duration":57}},{"uid":"f67b9bf8b9ead69","reportUrl":"https://nova-wallet.github.io/test-runner/2058//#testresult/f67b9bf8b9ead69","status":"passed","time":{"start":1670659607861,"stop":1670659608134,"duration":273}},{"uid":"354e1ef52abf3abd","reportUrl":"https://nova-wallet.github.io/test-runner/2057//#testresult/354e1ef52abf3abd","status":"passed","time":{"start":1670645118468,"stop":1670645118761,"duration":293}},{"uid":"54a9cce7c504db46","reportUrl":"https://nova-wallet.github.io/test-runner/2056//#testresult/54a9cce7c504db46","status":"passed","time":{"start":1670631249907,"stop":1670631250209,"duration":302}},{"uid":"3f807cb94eb995cd","reportUrl":"https://nova-wallet.github.io/test-runner/2054//#testresult/3f807cb94eb995cd","status":"passed","time":{"start":1670601942134,"stop":1670601942409,"duration":275}},{"uid":"2d02554ffab9012c","reportUrl":"https://nova-wallet.github.io/test-runner/2053//#testresult/2d02554ffab9012c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1670587582157,"stop":1670587582348,"duration":191}},{"uid":"a2b0dc772a2ac559","reportUrl":"https://nova-wallet.github.io/test-runner/2052//#testresult/a2b0dc772a2ac559","status":"passed","time":{"start":1670573208243,"stop":1670573208492,"duration":249}},{"uid":"b920886af6d920c1","reportUrl":"https://nova-wallet.github.io/test-runner/2051//#testresult/b920886af6d920c1","status":"passed","time":{"start":1670558733847,"stop":1670558734163,"duration":316}},{"uid":"6a2884640194d729","reportUrl":"https://nova-wallet.github.io/test-runner/2050//#testresult/6a2884640194d729","status":"passed","time":{"start":1670544971783,"stop":1670544971855,"duration":72}},{"uid":"95b5f55916026a4f","reportUrl":"https://nova-wallet.github.io/test-runner/2049//#testresult/95b5f55916026a4f","status":"passed","time":{"start":1670529979694,"stop":1670529980061,"duration":367}}]},"tags":[]},"source":"2028f31421bbdd2b.json","parameterValues":["{'url': 'wss://tinker.invarch.network', 'name': 'Tinkernet'}"]}