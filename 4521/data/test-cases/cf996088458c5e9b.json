{"uid":"cf996088458c5e9b","name":"test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6b2d505052053a5da93000b537edc6f1","time":{"start":1705378366958,"stop":1705378366958,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n        connection = create_connection_by_url(data[\"url\"])\n>       get_properties(connection)\n\ntests/conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:691: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:518: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f23436fd960>\nmethod = 'state_getMetadata'\nparams = ['0x8c2c5efde6cd4b16e2bc4b29cd0b44fa60a895ed33d31d4b8136c1f483834328']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1705378366958,"stop":1705378367547,"duration":589},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 24, in connection_by_url\n    get_properties(connection)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 691, in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 518, in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az523-752"},{"name":"thread","value":"2091-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"fceb804473d7e545","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705378351326,"stop":1705378351326,"duration":0}},{"uid":"e6d5502f51d52290","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705378335665,"stop":1705378335665,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":163,"skipped":0,"passed":572,"unknown":0,"total":735},"items":[{"uid":"85b1cd27e3dfbca9","reportUrl":"https://novasamatech.github.io/test-runner/4520//#testresult/85b1cd27e3dfbca9","status":"passed","time":{"start":1705363745923,"stop":1705363745923,"duration":0}},{"uid":"3ae6f95f9db3007d","reportUrl":"https://novasamatech.github.io/test-runner/4519//#testresult/3ae6f95f9db3007d","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705349547994,"stop":1705349547994,"duration":0}},{"uid":"6bf9e31339cd719c","reportUrl":"https://novasamatech.github.io/test-runner/4518//#testresult/6bf9e31339cd719c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705334979729,"stop":1705334979729,"duration":0}},{"uid":"7c57e49d3a7ac604","reportUrl":"https://novasamatech.github.io/test-runner/4517//#testresult/7c57e49d3a7ac604","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705320529154,"stop":1705320529154,"duration":0}},{"uid":"56904d29f9f4d11e","reportUrl":"https://novasamatech.github.io/test-runner/4516//#testresult/56904d29f9f4d11e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705306133115,"stop":1705306133115,"duration":0}},{"uid":"94b05ca712be2d1c","reportUrl":"https://novasamatech.github.io/test-runner/4515//#testresult/94b05ca712be2d1c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705291714853,"stop":1705291714853,"duration":0}},{"uid":"a42ec00d54e357b","reportUrl":"https://novasamatech.github.io/test-runner/4514//#testresult/a42ec00d54e357b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705277371072,"stop":1705277371072,"duration":0}},{"uid":"c11d5fac1124220a","reportUrl":"https://novasamatech.github.io/test-runner/4513//#testresult/c11d5fac1124220a","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705262995604,"stop":1705262995604,"duration":0}},{"uid":"d22ae71f2e31cb9c","reportUrl":"https://novasamatech.github.io/test-runner/4512//#testresult/d22ae71f2e31cb9c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705248604417,"stop":1705248604417,"duration":0}},{"uid":"8a9b5469bec6328f","reportUrl":"https://novasamatech.github.io/test-runner/4511//#testresult/8a9b5469bec6328f","status":"passed","time":{"start":1705234094885,"stop":1705234094885,"duration":0}},{"uid":"ee97600cd532dd7","reportUrl":"https://novasamatech.github.io/test-runner/4510//#testresult/ee97600cd532dd7","status":"passed","time":{"start":1705219751910,"stop":1705219751910,"duration":0}},{"uid":"4789407cb7e8739c","reportUrl":"https://novasamatech.github.io/test-runner/4509//#testresult/4789407cb7e8739c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705205320829,"stop":1705205320829,"duration":0}},{"uid":"6234570e75f69187","reportUrl":"https://novasamatech.github.io/test-runner/4508//#testresult/6234570e75f69187","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705191030963,"stop":1705191030963,"duration":0}},{"uid":"14324f14a89ef4a9","reportUrl":"https://novasamatech.github.io/test-runner/4507//#testresult/14324f14a89ef4a9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705176550623,"stop":1705176550623,"duration":0}},{"uid":"d7dbcb3f9efaac84","reportUrl":"https://novasamatech.github.io/test-runner/4506//#testresult/d7dbcb3f9efaac84","status":"passed","time":{"start":1705162119578,"stop":1705162119578,"duration":0}},{"uid":"8107e4e73b0b3728","reportUrl":"https://novasamatech.github.io/test-runner/4505//#testresult/8107e4e73b0b3728","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705147716398,"stop":1705147716398,"duration":0}},{"uid":"ed835fbf0fe9fa9d","reportUrl":"https://novasamatech.github.io/test-runner/4504//#testresult/ed835fbf0fe9fa9d","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705133339411,"stop":1705133339411,"duration":0}},{"uid":"32a538c1f18c92dd","reportUrl":"https://novasamatech.github.io/test-runner/4503//#testresult/32a538c1f18c92dd","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705118935049,"stop":1705118935049,"duration":0}},{"uid":"ff45890d69cf880e","reportUrl":"https://novasamatech.github.io/test-runner/4502//#testresult/ff45890d69cf880e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1705104560791,"stop":1705104560791,"duration":0}},{"uid":"5ed44b87245de959","reportUrl":"https://novasamatech.github.io/test-runner/4501//#testresult/5ed44b87245de959","status":"passed","time":{"start":1705090390795,"stop":1705090390796,"duration":1}}]},"tags":[]},"source":"cf996088458c5e9b.json","parameterValues":["{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"]}