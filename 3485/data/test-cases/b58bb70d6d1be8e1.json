{"uid":"b58bb70d6d1be8e1","name":"test_has_new_assets[Test for Equilibrium]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"f21168016f27145dde497a9174f0cda4","time":{"start":1690762547155,"stop":1690762548257,"duration":1102},"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f9b64157550>\nchain = <scripts.utils.chain_model.Chain object at 0x7f9b643bfd00>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n        chain.init_properties()\n        symbols = chain.substrate.token_symbol if isinstance(chain.substrate.token_symbol, list) else [\n            chain.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n../../../../.local/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f9b64157550>\nchain = <scripts.utils.chain_model.Chain object at 0x7f9b643bfd00>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n        chain.init_properties()\n        symbols = chain.substrate.token_symbol if isinstance(chain.substrate.token_symbol, list) else [\n            chain.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n../../../../.local/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","steps":[],"attachments":[{"uid":"957b7c0058d95db5","name":"stdout","source":"957b7c0058d95db5.txt","type":"text/plain","size":612}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az735-222"},{"name":"thread","value":"1996-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f9b643bfd00>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2f0c5a8556c2b91d","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1690762531035,"stop":1690762532135,"duration":1100}},{"uid":"f9769c06a72a9ba","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1690762508030,"stop":1690762516012,"duration":7982}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":26,"broken":0,"skipped":0,"passed":437,"unknown":0,"total":463},"items":[{"uid":"d5c6afc648c61774","reportUrl":"https://novasamatech.github.io/test-runner/3484//#testresult/d5c6afc648c61774","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1690747522708,"stop":1690747524230,"duration":1522}},{"uid":"342e0dfd4129039c","reportUrl":"https://novasamatech.github.io/test-runner/3483//#testresult/342e0dfd4129039c","status":"passed","time":{"start":1690733103447,"stop":1690733112587,"duration":9140}},{"uid":"9788510b1f3e6489","reportUrl":"https://novasamatech.github.io/test-runner/3482//#testresult/9788510b1f3e6489","status":"passed","time":{"start":1690718730007,"stop":1690718742165,"duration":12158}},{"uid":"8eb10a30a9bb6011","reportUrl":"https://novasamatech.github.io/test-runner/3481//#testresult/8eb10a30a9bb6011","status":"passed","time":{"start":1690704344732,"stop":1690704351322,"duration":6590}},{"uid":"26c57a57c42c200","reportUrl":"https://novasamatech.github.io/test-runner/3480//#testresult/26c57a57c42c200","status":"passed","time":{"start":1690689926767,"stop":1690689935113,"duration":8346}},{"uid":"d7a68b8b193c4ffd","reportUrl":"https://novasamatech.github.io/test-runner/3479//#testresult/d7a68b8b193c4ffd","status":"passed","time":{"start":1690676148322,"stop":1690676155133,"duration":6811}},{"uid":"859e811245dc2b9d","reportUrl":"https://novasamatech.github.io/test-runner/3478//#testresult/859e811245dc2b9d","status":"passed","time":{"start":1690661095215,"stop":1690661106244,"duration":11029}},{"uid":"6ed3b22d9abf0639","reportUrl":"https://novasamatech.github.io/test-runner/3477//#testresult/6ed3b22d9abf0639","status":"passed","time":{"start":1690646718325,"stop":1690646732123,"duration":13798}},{"uid":"f5fbd37f62f5592","reportUrl":"https://novasamatech.github.io/test-runner/3476//#testresult/f5fbd37f62f5592","status":"passed","time":{"start":1690632362416,"stop":1690632376740,"duration":14324}},{"uid":"c7443809262ce7df","reportUrl":"https://novasamatech.github.io/test-runner/3475//#testresult/c7443809262ce7df","status":"passed","time":{"start":1690617886866,"stop":1690617894935,"duration":8069}},{"uid":"968ddc7c236def94","reportUrl":"https://novasamatech.github.io/test-runner/3474//#testresult/968ddc7c236def94","status":"passed","time":{"start":1690603519687,"stop":1690603532706,"duration":13019}},{"uid":"c73366596670c096","reportUrl":"https://novasamatech.github.io/test-runner/3473//#testresult/c73366596670c096","status":"passed","time":{"start":1690589679664,"stop":1690589689207,"duration":9543}},{"uid":"b7a228f272c650e1","reportUrl":"https://novasamatech.github.io/test-runner/3472//#testresult/b7a228f272c650e1","status":"passed","time":{"start":1690574682575,"stop":1690574690674,"duration":8099}},{"uid":"28f02677e46a4b27","reportUrl":"https://novasamatech.github.io/test-runner/3471//#testresult/28f02677e46a4b27","status":"passed","time":{"start":1690560320335,"stop":1690560332680,"duration":12345}},{"uid":"c28e9c017598ebab","reportUrl":"https://novasamatech.github.io/test-runner/3470//#testresult/c28e9c017598ebab","status":"passed","time":{"start":1690545957394,"stop":1690545966007,"duration":8613}},{"uid":"cff4728938d33f6a","reportUrl":"https://novasamatech.github.io/test-runner/3469//#testresult/cff4728938d33f6a","status":"passed","time":{"start":1690531524599,"stop":1690531535723,"duration":11124}},{"uid":"e046abe0af3a4624","reportUrl":"https://novasamatech.github.io/test-runner/3468//#testresult/e046abe0af3a4624","status":"passed","time":{"start":1690517116377,"stop":1690517127192,"duration":10815}},{"uid":"d46e36737cf7a3df","reportUrl":"https://novasamatech.github.io/test-runner/3467//#testresult/d46e36737cf7a3df","status":"passed","time":{"start":1690503258216,"stop":1690503272879,"duration":14663}},{"uid":"955e78e7a4ef281f","reportUrl":"https://novasamatech.github.io/test-runner/3466//#testresult/955e78e7a4ef281f","status":"passed","time":{"start":1690488296834,"stop":1690488307166,"duration":10332}},{"uid":"570fe9b62dbb30b9","reportUrl":"https://novasamatech.github.io/test-runner/3465//#testresult/570fe9b62dbb30b9","status":"passed","time":{"start":1690473930092,"stop":1690473939582,"duration":9490}}]},"tags":[]},"source":"b58bb70d6d1be8e1.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f9b643bfd00>"]}