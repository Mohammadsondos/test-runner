{"uid":"3822fd123c882a3e","name":"test_has_new_assets[Test for Hashed Network]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"f9ce5f041da025d241358b30e13d00db","time":{"start":1703203485613,"stop":1703203486152,"duration":539},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 22 Dec 2023 00:04:46 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f78df9f1690>\nmethod = 'system_properties', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f78df9f3f40>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"system_properties\", \"params\": [], \"id\": 4}'\nopcode = 1\n\n    def send(self, payload: Union[bytes, str], opcode: int = ABNF.OPCODE_TEXT) -> int:\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:285: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f78df9f3f40>\nframe = <websocket._abnf.ABNF object at 0x7f78ded29780>\n\n    def send_frame(self, frame) -> int:\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:313: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f78df9f3f40>\ndata = b\"\\x81\\xc8\\x1d\\xad/\\x11f\\x8fEbr\\xc3]a~\\x8f\\x151?\\x9f\\x01!?\\x81\\x0f3p\\xc8[yr\\xc9\\r+=\\x8f\\\\hn\\xd9J|B\\xdd]~m\\xc8]et\\xc8\\\\31\\x8d\\ra|\\xdfN|n\\x8f\\x151F\\xf0\\x031?\\xc4K3'\\x8d\\x1bl\"\n\n    def _send(self, data: Union[str, bytes]):\n>       return send(self.sock, data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:527: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b\"\\x81\\xc8\\x1d\\xad/\\x11f\\x8fEbr\\xc3]a~\\x8f\\x151?\\x9f\\x01!?\\x81\\x0f3p\\xc8[yr\\xc9\\r+=\\x8f\\\\hn\\xd9J|B\\xdd]~m\\xc8]et\\xc8\\\\31\\x8d\\ra|\\xdfN|n\\x8f\\x151F\\xf0\\x031?\\xc4K3'\\x8d\\x1bl\"\n\n    def send(sock: socket.socket, data: Union[bytes, str]) -> int:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:145: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_check_new_assets.TestAssets object at 0x7f78e1cdfa60>\nchain_model = <scripts.utils.chain_model.Chain object at 0x7f78e23f2890>\n\n    def test_has_new_assets(self, chain_model: Chain):\n    \n        chain_assets = {asset['symbol'].upper(\n        ): '' for asset in chain_model.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain_model.name in self.exclusions:\n            chain_assets.update(\n                {ex_asset: '' for ex_asset in self.exclusions[chain_model.name]})\n        chain_model.create_connection()\n        chain_model.init_properties()\n>       symbols = chain_model.substrate.token_symbol if isinstance(chain_model.substrate.token_symbol, list) else [\n            chain_model.properties.symbol]\n\ntests/test_check_new_assets.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/substrateinterface/base.py:383: in token_symbol\n    if self.properties:\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:353: in properties\n    self.__properties = self.rpc_request(\"system_properties\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:271: in rpc_request\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 22 Dec 2023 00:04:46 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"chain_model","time":{"start":1703203449793,"stop":1703203452848,"duration":3055},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 22 Dec 2023 00:04:46 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f78df9f1690>\nmethod = 'system_properties', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f78df9f3f40>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"system_properties\", \"params\": [], \"id\": 4}'\nopcode = 1\n\n    def send(self, payload: Union[bytes, str], opcode: int = ABNF.OPCODE_TEXT) -> int:\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:285: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f78df9f3f40>\nframe = <websocket._abnf.ABNF object at 0x7f78ded29780>\n\n    def send_frame(self, frame) -> int:\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:313: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f78df9f3f40>\ndata = b\"\\x81\\xc8\\x1d\\xad/\\x11f\\x8fEbr\\xc3]a~\\x8f\\x151?\\x9f\\x01!?\\x81\\x0f3p\\xc8[yr\\xc9\\r+=\\x8f\\\\hn\\xd9J|B\\xdd]~m\\xc8]et\\xc8\\\\31\\x8d\\ra|\\xdfN|n\\x8f\\x151F\\xf0\\x031?\\xc4K3'\\x8d\\x1bl\"\n\n    def _send(self, data: Union[str, bytes]):\n>       return send(self.sock, data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:527: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b\"\\x81\\xc8\\x1d\\xad/\\x11f\\x8fEbr\\xc3]a~\\x8f\\x151?\\x9f\\x01!?\\x81\\x0f3p\\xc8[yr\\xc9\\r+=\\x8f\\\\hn\\xd9J|B\\xdd]~m\\xc8]et\\xc8\\\\31\\x8d\\ra|\\xdfN|n\\x8f\\x151F\\xf0\\x031?\\xc4K3'\\x8d\\x1bl\"\n\n    def send(sock: socket.socket, data: Union[bytes, str]) -> int:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:145: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_check_new_assets.TestAssets object at 0x7f78e1cdfa60>\nchain_model = <scripts.utils.chain_model.Chain object at 0x7f78e23f2890>\n\n    def test_has_new_assets(self, chain_model: Chain):\n    \n        chain_assets = {asset['symbol'].upper(\n        ): '' for asset in chain_model.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain_model.name in self.exclusions:\n            chain_assets.update(\n                {ex_asset: '' for ex_asset in self.exclusions[chain_model.name]})\n        chain_model.create_connection()\n        chain_model.init_properties()\n>       symbols = chain_model.substrate.token_symbol if isinstance(chain_model.substrate.token_symbol, list) else [\n            chain_model.properties.symbol]\n\ntests/test_check_new_assets.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/substrateinterface/base.py:383: in token_symbol\n    if self.properties:\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:353: in properties\n    self.__properties = self.rpc_request(\"system_properties\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:271: in rpc_request\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 22 Dec 2023 00:04:46 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"efcafae7b15e6689","name":"stdout","source":"efcafae7b15e6689.txt","type":"text/plain","size":1238}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az1148-579"},{"name":"thread","value":"2121-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain_model","value":"<scripts.utils.chain_model.Chain object at 0x7f78e23f2890>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a8a1ff95946ee623","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 22 Dec 2023 00:04:30 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1703203469761,"stop":1703203470505,"duration":744}},{"uid":"884e8e18e07cac9f","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1703203452849,"stop":1703203454671,"duration":1822}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":47,"skipped":0,"passed":608,"unknown":0,"total":655},"items":[{"uid":"5a0efd245167e687","reportUrl":"https://novasamatech.github.io/test-runner/4367//#testresult/5a0efd245167e687","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703189068728,"stop":1703189068728,"duration":0}},{"uid":"61833dfbc48a3df4","reportUrl":"https://novasamatech.github.io/test-runner/4366//#testresult/61833dfbc48a3df4","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703176296959,"stop":1703176296959,"duration":0}},{"uid":"e8a301e39965636b","reportUrl":"https://novasamatech.github.io/test-runner/4365//#testresult/e8a301e39965636b","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703174640516,"stop":1703174640516,"duration":0}},{"uid":"8eed784031e84137","reportUrl":"https://novasamatech.github.io/test-runner/4364//#testresult/8eed784031e84137","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703160288396,"stop":1703160288396,"duration":0}},{"uid":"5017056771b9c996","reportUrl":"https://novasamatech.github.io/test-runner/4363//#testresult/5017056771b9c996","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703145933224,"stop":1703145933224,"duration":0}},{"uid":"ba52888349558690","reportUrl":"https://novasamatech.github.io/test-runner/4362//#testresult/ba52888349558690","status":"passed","time":{"start":1703131391379,"stop":1703131391752,"duration":373}},{"uid":"e785ee74f0bdd1fe","reportUrl":"https://novasamatech.github.io/test-runner/4361//#testresult/e785ee74f0bdd1fe","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703117071593,"stop":1703117071593,"duration":0}},{"uid":"c76cef5acd37b7d2","reportUrl":"https://novasamatech.github.io/test-runner/4360//#testresult/c76cef5acd37b7d2","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703102602618,"stop":1703102602618,"duration":0}},{"uid":"75280ddf41626313","reportUrl":"https://novasamatech.github.io/test-runner/4359//#testresult/75280ddf41626313","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703088168198,"stop":1703088168198,"duration":0}},{"uid":"94c9d07ad9f82d1e","reportUrl":"https://novasamatech.github.io/test-runner/4358//#testresult/94c9d07ad9f82d1e","status":"passed","time":{"start":1703073753707,"stop":1703073754056,"duration":349}},{"uid":"bc5fe49632703edf","reportUrl":"https://novasamatech.github.io/test-runner/4357//#testresult/bc5fe49632703edf","status":"passed","time":{"start":1703059349364,"stop":1703059349818,"duration":454}},{"uid":"f0895bf71e262619","reportUrl":"https://novasamatech.github.io/test-runner/4356//#testresult/f0895bf71e262619","status":"passed","time":{"start":1703044940867,"stop":1703044941039,"duration":172}},{"uid":"7bb644d44b4354f","reportUrl":"https://novasamatech.github.io/test-runner/4355//#testresult/7bb644d44b4354f","status":"passed","time":{"start":1703030582261,"stop":1703030582577,"duration":316}},{"uid":"70ec6b18d4710b1b","reportUrl":"https://novasamatech.github.io/test-runner/4354//#testresult/70ec6b18d4710b1b","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703016205280,"stop":1703016205280,"duration":0}},{"uid":"5a2ab918f7f95851","reportUrl":"https://novasamatech.github.io/test-runner/4353//#testresult/5a2ab918f7f95851","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703001766396,"stop":1703001766396,"duration":0}},{"uid":"708f1a37091fff09","reportUrl":"https://novasamatech.github.io/test-runner/4352//#testresult/708f1a37091fff09","status":"passed","time":{"start":1702987413689,"stop":1702987414107,"duration":418}},{"uid":"651cac8d8d82c8e0","reportUrl":"https://novasamatech.github.io/test-runner/4351//#testresult/651cac8d8d82c8e0","status":"passed","time":{"start":1702972941051,"stop":1702972941350,"duration":299}},{"uid":"d6ab1f0d0b97c0c","reportUrl":"https://novasamatech.github.io/test-runner/4350//#testresult/d6ab1f0d0b97c0c","status":"passed","time":{"start":1702958539223,"stop":1702958539464,"duration":241}},{"uid":"6662579695e2dcbf","reportUrl":"https://novasamatech.github.io/test-runner/4349//#testresult/6662579695e2dcbf","status":"passed","time":{"start":1702944206169,"stop":1702944206519,"duration":350}},{"uid":"db0cdf6c68e5bf1f","reportUrl":"https://novasamatech.github.io/test-runner/4348//#testresult/db0cdf6c68e5bf1f","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1702929814040,"stop":1702929814040,"duration":0}}]},"tags":[]},"source":"3822fd123c882a3e.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f78e23f2890>"]}