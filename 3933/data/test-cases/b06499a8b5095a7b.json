{"uid":"b06499a8b5095a7b","name":"test_address_prefix[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"9eb5311f9a3089d9a4d7a7f5fcd78c89","time":{"start":1697069092507,"stop":1697069093981,"duration":1474},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7fcb498379a0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fcb4978eec0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1124: in init_runtime\n    block_header = self.rpc_request('chain_getHeader', [self.block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fcb2d07e1d0>\nmethod = 'chain_getHeader'\nparams = ['0xd185a2e61e07e7e3401fc2f91cc5f5bf51937fe275b60691bb334c43ad658bbb']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az455-504"},{"name":"thread","value":"2110-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fcb4978eec0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"33c9ad1750016f5a","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697069075897,"stop":1697069077354,"duration":1457}},{"uid":"1d6c60045045d7e9","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697068998604,"stop":1697069060538,"duration":61934}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":288,"unknown":0,"total":293},"items":[{"uid":"a814a1883fba65e1","reportUrl":"https://novasamatech.github.io/test-runner/3932//#testresult/a814a1883fba65e1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697054569961,"stop":1697054571820,"duration":1859}},{"uid":"1d8d81bc44e89b79","reportUrl":"https://novasamatech.github.io/test-runner/3931//#testresult/1d8d81bc44e89b79","status":"passed","time":{"start":1697040121326,"stop":1697040129954,"duration":8628}},{"uid":"9c2749f407f33efb","reportUrl":"https://novasamatech.github.io/test-runner/3930//#testresult/9c2749f407f33efb","status":"passed","time":{"start":1697025714432,"stop":1697025721950,"duration":7518}},{"uid":"aedbff3653493346","reportUrl":"https://novasamatech.github.io/test-runner/3929//#testresult/aedbff3653493346","status":"passed","time":{"start":1697011328219,"stop":1697011336380,"duration":8161}},{"uid":"29aa2e336bcb2ff0","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/29aa2e336bcb2ff0","status":"passed","time":{"start":1696996945956,"stop":1696996954736,"duration":8780}},{"uid":"e8951dc24fccb3bd","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/e8951dc24fccb3bd","status":"passed","time":{"start":1696982590219,"stop":1696982596088,"duration":5869}},{"uid":"db59819f16e91bee","reportUrl":"https://novasamatech.github.io/test-runner/3926//#testresult/db59819f16e91bee","status":"passed","time":{"start":1696968126067,"stop":1696968133438,"duration":7371}},{"uid":"f5e2f76a9797f96f","reportUrl":"https://novasamatech.github.io/test-runner/3925//#testresult/f5e2f76a9797f96f","status":"passed","time":{"start":1696953745129,"stop":1696953750872,"duration":5743}},{"uid":"42884649d813d847","reportUrl":"https://novasamatech.github.io/test-runner/3924//#testresult/42884649d813d847","status":"passed","time":{"start":1696939325560,"stop":1696939331356,"duration":5796}},{"uid":"f2453a0be38583e9","reportUrl":"https://novasamatech.github.io/test-runner/3923//#testresult/f2453a0be38583e9","status":"passed","time":{"start":1696924949168,"stop":1696924954766,"duration":5598}},{"uid":"ff49eefb9dd7df79","reportUrl":"https://novasamatech.github.io/test-runner/3922//#testresult/ff49eefb9dd7df79","status":"passed","time":{"start":1696910555190,"stop":1696910560102,"duration":4912}},{"uid":"69ef8fabc5cefe8f","reportUrl":"https://novasamatech.github.io/test-runner/3921//#testresult/69ef8fabc5cefe8f","status":"passed","time":{"start":1696896157666,"stop":1696896167088,"duration":9422}},{"uid":"f12db612deb1d5","reportUrl":"https://novasamatech.github.io/test-runner/3920//#testresult/f12db612deb1d5","status":"passed","time":{"start":1696881729067,"stop":1696881736754,"duration":7687}},{"uid":"c9b967ff8908a83e","reportUrl":"https://novasamatech.github.io/test-runner/3919//#testresult/c9b967ff8908a83e","status":"passed","time":{"start":1696867321337,"stop":1696867326900,"duration":5563}},{"uid":"abf6189052da73f2","reportUrl":"https://novasamatech.github.io/test-runner/3918//#testresult/abf6189052da73f2","status":"passed","time":{"start":1696852932599,"stop":1696852940130,"duration":7531}},{"uid":"22ca90c8bc94156a","reportUrl":"https://novasamatech.github.io/test-runner/3917//#testresult/22ca90c8bc94156a","status":"passed","time":{"start":1696838526300,"stop":1696838533065,"duration":6765}},{"uid":"d0f58f2703ad49f2","reportUrl":"https://novasamatech.github.io/test-runner/3916//#testresult/d0f58f2703ad49f2","status":"passed","time":{"start":1696824112902,"stop":1696824120597,"duration":7695}},{"uid":"d0899e93ba7f3d64","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/d0899e93ba7f3d64","status":"passed","time":{"start":1696809766347,"stop":1696809773650,"duration":7303}},{"uid":"73c2f010d1f00e58","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/73c2f010d1f00e58","status":"passed","time":{"start":1696795308513,"stop":1696795314377,"duration":5864}},{"uid":"b11e875220eaee70","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/b11e875220eaee70","status":"passed","time":{"start":1696780922921,"stop":1696780928834,"duration":5913}}]},"tags":[]},"source":"b06499a8b5095a7b.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fcb4978eec0>"]}