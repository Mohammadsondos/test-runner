{"uid":"de1e5dbb7e5bd0c6","name":"test_chainId[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"772a904a7b84e5177692678e454acb91","time":{"start":1697068997392,"stop":1697068999245,"duration":1853},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7f8d98511300>\nchain = <scripts.utils.chain_model.Chain object at 0x7f8d983528f0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1124: in init_runtime\n    block_header = self.rpc_request('chain_getHeader', [self.block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f8d7ac4a170>\nmethod = 'chain_getHeader'\nparams = ['0x475353966d12729d5cd880cc653910fbbd4a5128667ce95498011b8b3ca2c8c0']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az560-623"},{"name":"thread","value":"2140-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f8d983528f0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"41f5174ec361a51f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697068980424,"stop":1697068982167,"duration":1743}},{"uid":"4e43c44c8023a9c5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697068963479,"stop":1697068965234,"duration":1755}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":285,"unknown":0,"total":293},"items":[{"uid":"7e5d492d70860510","reportUrl":"https://novasamatech.github.io/test-runner/3932//#testresult/7e5d492d70860510","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697054555512,"stop":1697054617133,"duration":61621}},{"uid":"707e5ff03f4537f9","reportUrl":"https://novasamatech.github.io/test-runner/3931//#testresult/707e5ff03f4537f9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697040171799,"stop":1697040173260,"duration":1461}},{"uid":"fa29bb79465283e7","reportUrl":"https://novasamatech.github.io/test-runner/3930//#testresult/fa29bb79465283e7","status":"passed","time":{"start":1697025765961,"stop":1697025773871,"duration":7910}},{"uid":"c3ff09a734406d02","reportUrl":"https://novasamatech.github.io/test-runner/3929//#testresult/c3ff09a734406d02","status":"passed","time":{"start":1697011317513,"stop":1697011326592,"duration":9079}},{"uid":"60f93b9422c3e451","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/60f93b9422c3e451","status":"passed","time":{"start":1696996906998,"stop":1696996914835,"duration":7837}},{"uid":"9c96daaf40785c2a","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/9c96daaf40785c2a","status":"passed","time":{"start":1696982576497,"stop":1696982581585,"duration":5088}},{"uid":"bc41e46e43adceca","reportUrl":"https://novasamatech.github.io/test-runner/3926//#testresult/bc41e46e43adceca","status":"passed","time":{"start":1696968121618,"stop":1696968130404,"duration":8786}},{"uid":"5bc24015826b6a48","reportUrl":"https://novasamatech.github.io/test-runner/3925//#testresult/5bc24015826b6a48","status":"passed","time":{"start":1696953749668,"stop":1696953756556,"duration":6888}},{"uid":"4c3b4edb50e2e1e3","reportUrl":"https://novasamatech.github.io/test-runner/3924//#testresult/4c3b4edb50e2e1e3","status":"passed","time":{"start":1696939319081,"stop":1696939327504,"duration":8423}},{"uid":"67873f50a0e71555","reportUrl":"https://novasamatech.github.io/test-runner/3923//#testresult/67873f50a0e71555","status":"passed","time":{"start":1696924940161,"stop":1696924945660,"duration":5499}},{"uid":"3eb3d8e8a3573a85","reportUrl":"https://novasamatech.github.io/test-runner/3922//#testresult/3eb3d8e8a3573a85","status":"passed","time":{"start":1696910513006,"stop":1696910519319,"duration":6313}},{"uid":"b6f25451a0c9046c","reportUrl":"https://novasamatech.github.io/test-runner/3921//#testresult/b6f25451a0c9046c","status":"passed","time":{"start":1696896149825,"stop":1696896158122,"duration":8297}},{"uid":"a16b764be37f2721","reportUrl":"https://novasamatech.github.io/test-runner/3920//#testresult/a16b764be37f2721","status":"passed","time":{"start":1696881744258,"stop":1696881749531,"duration":5273}},{"uid":"d3895d57372f56fa","reportUrl":"https://novasamatech.github.io/test-runner/3919//#testresult/d3895d57372f56fa","status":"passed","time":{"start":1696867352500,"stop":1696867358918,"duration":6418}},{"uid":"c19ff561f0b3f3a9","reportUrl":"https://novasamatech.github.io/test-runner/3918//#testresult/c19ff561f0b3f3a9","status":"passed","time":{"start":1696852946094,"stop":1696852953852,"duration":7758}},{"uid":"596bc426fbf1eedc","reportUrl":"https://novasamatech.github.io/test-runner/3917//#testresult/596bc426fbf1eedc","status":"passed","time":{"start":1696838523864,"stop":1696838528290,"duration":4426}},{"uid":"477bd4c033efb9bc","reportUrl":"https://novasamatech.github.io/test-runner/3916//#testresult/477bd4c033efb9bc","status":"passed","time":{"start":1696824165769,"stop":1696824171907,"duration":6138}},{"uid":"db9c656345b010e3","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/db9c656345b010e3","status":"passed","time":{"start":1696809780106,"stop":1696809785346,"duration":5240}},{"uid":"15b4a06e2410fbdc","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/15b4a06e2410fbdc","status":"passed","time":{"start":1696795318824,"stop":1696795327385,"duration":8561}},{"uid":"58acfb920285e305","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/58acfb920285e305","status":"passed","time":{"start":1696780933174,"stop":1696780940384,"duration":7210}}]},"tags":[]},"source":"de1e5dbb7e5bd0c6.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f8d983528f0>"]}