{"uid":"d2ac655b2d74f79","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1710345681914,"stop":1710345681977,"duration":63},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f7b21495c00>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f7b202136d0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f7b20212e00>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az659-297"},{"name":"thread","value":"2204-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"37ad6da4b4e5dc73","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710345676838,"stop":1710345676879,"duration":41}},{"uid":"22d4364f2ddc2178","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710345671673,"stop":1710345671724,"duration":51}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":36,"skipped":0,"passed":942,"unknown":0,"total":981},"items":[{"uid":"a390f770bc2b5f37","reportUrl":"https://novasamatech.github.io/test-runner/4869//#testresult/a390f770bc2b5f37","status":"passed","time":{"start":1710331274473,"stop":1710331275414,"duration":941}},{"uid":"526f0edac14ec27c","reportUrl":"https://novasamatech.github.io/test-runner/4868//#testresult/526f0edac14ec27c","status":"passed","time":{"start":1710316866996,"stop":1710316867879,"duration":883}},{"uid":"8c1038a17452771b","reportUrl":"https://novasamatech.github.io/test-runner/4867//#testresult/8c1038a17452771b","status":"passed","time":{"start":1710302461430,"stop":1710302462087,"duration":657}},{"uid":"a2f4e4b48b4d9f2f","reportUrl":"https://novasamatech.github.io/test-runner/4866//#testresult/a2f4e4b48b4d9f2f","status":"passed","time":{"start":1710288109907,"stop":1710288110639,"duration":732}},{"uid":"2a88072b874e5349","reportUrl":"https://novasamatech.github.io/test-runner/4865//#testresult/2a88072b874e5349","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710273677781,"stop":1710273677951,"duration":170}},{"uid":"e08e2ab4e3cb04d7","reportUrl":"https://novasamatech.github.io/test-runner/4864//#testresult/e08e2ab4e3cb04d7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710259285148,"stop":1710259285234,"duration":86}},{"uid":"597d3f5763772f1d","reportUrl":"https://novasamatech.github.io/test-runner/4863//#testresult/597d3f5763772f1d","status":"passed","time":{"start":1710244888704,"stop":1710244889111,"duration":407}},{"uid":"e61eb9e59aba870","reportUrl":"https://novasamatech.github.io/test-runner/4862//#testresult/e61eb9e59aba870","status":"passed","time":{"start":1710230463246,"stop":1710230464628,"duration":1382}},{"uid":"f48700159bc10599","reportUrl":"https://novasamatech.github.io/test-runner/4861//#testresult/f48700159bc10599","status":"passed","time":{"start":1710216067651,"stop":1710216069200,"duration":1549}},{"uid":"5fba52f1b502e4de","reportUrl":"https://novasamatech.github.io/test-runner/4860//#testresult/5fba52f1b502e4de","status":"passed","time":{"start":1710201700808,"stop":1710201702696,"duration":1888}},{"uid":"2849c0f2c3d1e1a8","reportUrl":"https://novasamatech.github.io/test-runner/4859//#testresult/2849c0f2c3d1e1a8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187278939,"stop":1710187278986,"duration":47}},{"uid":"41921beb5b9e56da","reportUrl":"https://novasamatech.github.io/test-runner/4858//#testresult/41921beb5b9e56da","status":"passed","time":{"start":1710172869373,"stop":1710172870571,"duration":1198}},{"uid":"b563afeee7d0d18e","reportUrl":"https://novasamatech.github.io/test-runner/4856//#testresult/b563afeee7d0d18e","status":"passed","time":{"start":1710144070766,"stop":1710144072149,"duration":1383}},{"uid":"ce04366f039eeb41","reportUrl":"https://novasamatech.github.io/test-runner/4857//#testresult/ce04366f039eeb41","status":"passed","time":{"start":1710158473131,"stop":1710158474404,"duration":1273}},{"uid":"609b845448965ffe","reportUrl":"https://novasamatech.github.io/test-runner/4855//#testresult/609b845448965ffe","status":"passed","time":{"start":1710129661220,"stop":1710129662513,"duration":1293}},{"uid":"7e1032945664e7a3","reportUrl":"https://novasamatech.github.io/test-runner/4854//#testresult/7e1032945664e7a3","status":"passed","time":{"start":1710115307260,"stop":1710115308631,"duration":1371}},{"uid":"5066dface0a7aabf","reportUrl":"https://novasamatech.github.io/test-runner/4853//#testresult/5066dface0a7aabf","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710100874694,"stop":1710100875060,"duration":366}},{"uid":"77687368322d8f34","reportUrl":"https://novasamatech.github.io/test-runner/4852//#testresult/77687368322d8f34","status":"passed","time":{"start":1710086464157,"stop":1710086465071,"duration":914}},{"uid":"d95881dbc05a592a","reportUrl":"https://novasamatech.github.io/test-runner/4851//#testresult/d95881dbc05a592a","status":"passed","time":{"start":1710072073849,"stop":1710072074712,"duration":863}},{"uid":"95f9f7d375ae341c","reportUrl":"https://novasamatech.github.io/test-runner/4850//#testresult/95f9f7d375ae341c","status":"passed","time":{"start":1710057665844,"stop":1710057666988,"duration":1144}}]},"tags":[]},"source":"d2ac655b2d74f79.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}