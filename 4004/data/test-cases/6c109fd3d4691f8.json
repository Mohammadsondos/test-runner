{"uid":"6c109fd3d4691f8","name":"test_can_create_connection[Test for Composable Finance, url: wss://composable.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"7c644b304507cfa85ea9ab3b97b67fbd","time":{"start":1698077105066,"stop":1698077285780,"duration":180714},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Composable Finance', 'url': 'wss://composable.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Composable Finance', 'url': 'wss://composable.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"2fe2ee0f74aaa8fe","name":"stdout","source":"2fe2ee0f74aaa8fe.txt","type":"text/plain","size":393}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az561-391"},{"name":"thread","value":"2093-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://composable.api.onfinality.io/public-ws', 'name': 'Composable Finance'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1b2af82a8d3a8011","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1698076969094,"stop":1698077089829,"duration":120735}},{"uid":"8c40529b4492cd00","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1698076893143,"stop":1698076953870,"duration":60727}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":362,"unknown":0,"total":364},"items":[{"uid":"30fbfdbf0a05ccfe","reportUrl":"https://novasamatech.github.io/test-runner/4003//#testresult/30fbfdbf0a05ccfe","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Mon, 23 Oct 2023 12:09:43 GMT', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '30046', 'x-kong-proxy-latency': '0', 'via': 'kong/2.5.2'} -+-+- b''","time":{"start":1698062952880,"stop":1698062983644,"duration":30764}},{"uid":"bfe49b60d3bed088","reportUrl":"https://novasamatech.github.io/test-runner/4002//#testresult/bfe49b60d3bed088","status":"passed","time":{"start":1698048097408,"stop":1698048098340,"duration":932}},{"uid":"1381f3a46118302a","reportUrl":"https://novasamatech.github.io/test-runner/4001//#testresult/1381f3a46118302a","status":"passed","time":{"start":1698033697699,"stop":1698033698545,"duration":846}},{"uid":"a741aed8541de144","reportUrl":"https://novasamatech.github.io/test-runner/4000//#testresult/a741aed8541de144","status":"passed","time":{"start":1698019329730,"stop":1698019330664,"duration":934}},{"uid":"a18a97b3a11639eb","reportUrl":"https://novasamatech.github.io/test-runner/3999//#testresult/a18a97b3a11639eb","status":"passed","time":{"start":1698004891034,"stop":1698004891934,"duration":900}},{"uid":"594cbbc0eef72797","reportUrl":"https://novasamatech.github.io/test-runner/3998//#testresult/594cbbc0eef72797","status":"passed","time":{"start":1697990501938,"stop":1697990502802,"duration":864}},{"uid":"69d7508582efa8a8","reportUrl":"https://novasamatech.github.io/test-runner/3997//#testresult/69d7508582efa8a8","status":"passed","time":{"start":1697976093798,"stop":1697976094698,"duration":900}},{"uid":"78e1daf2b7c4ebce","reportUrl":"https://novasamatech.github.io/test-runner/3996//#testresult/78e1daf2b7c4ebce","status":"passed","time":{"start":1697961699943,"stop":1697961700666,"duration":723}},{"uid":"afcc907ed61a4621","reportUrl":"https://novasamatech.github.io/test-runner/3995//#testresult/afcc907ed61a4621","status":"passed","time":{"start":1697947288100,"stop":1697947289035,"duration":935}},{"uid":"9b980f1bd2ea918f","reportUrl":"https://novasamatech.github.io/test-runner/3994//#testresult/9b980f1bd2ea918f","status":"passed","time":{"start":1697932952356,"stop":1697932954047,"duration":1691}},{"uid":"4d55df6140c7320a","reportUrl":"https://novasamatech.github.io/test-runner/3993//#testresult/4d55df6140c7320a","status":"passed","time":{"start":1697918496757,"stop":1697918497493,"duration":736}},{"uid":"2cb7dfbecfca603","reportUrl":"https://novasamatech.github.io/test-runner/3992//#testresult/2cb7dfbecfca603","status":"passed","time":{"start":1697904087428,"stop":1697904088261,"duration":833}},{"uid":"8419c008b149888c","reportUrl":"https://novasamatech.github.io/test-runner/3991//#testresult/8419c008b149888c","status":"passed","time":{"start":1697889692731,"stop":1697889693665,"duration":934}},{"uid":"6ba0316e7c70eab","reportUrl":"https://novasamatech.github.io/test-runner/3990//#testresult/6ba0316e7c70eab","status":"passed","time":{"start":1697875290252,"stop":1697875291216,"duration":964}},{"uid":"ff4070eba7210c8d","reportUrl":"https://novasamatech.github.io/test-runner/3989//#testresult/ff4070eba7210c8d","status":"passed","time":{"start":1697860895873,"stop":1697860896839,"duration":966}},{"uid":"5af3599d49d49174","reportUrl":"https://novasamatech.github.io/test-runner/3988//#testresult/5af3599d49d49174","status":"passed","time":{"start":1697846576961,"stop":1697846577877,"duration":916}},{"uid":"932df2dd1818ac9f","reportUrl":"https://novasamatech.github.io/test-runner/3987//#testresult/932df2dd1818ac9f","status":"passed","time":{"start":1697832137581,"stop":1697832138471,"duration":890}},{"uid":"514c1d9b57d3ee4f","reportUrl":"https://novasamatech.github.io/test-runner/3986//#testresult/514c1d9b57d3ee4f","status":"passed","time":{"start":1697817692741,"stop":1697817693475,"duration":734}},{"uid":"a84bc2da96a1ca25","reportUrl":"https://novasamatech.github.io/test-runner/3985//#testresult/a84bc2da96a1ca25","status":"passed","time":{"start":1697803293393,"stop":1697803294142,"duration":749}},{"uid":"17f6cd7e83197124","reportUrl":"https://novasamatech.github.io/test-runner/3984//#testresult/17f6cd7e83197124","status":"passed","time":{"start":1697788889282,"stop":1697788890129,"duration":847}}]},"tags":[]},"source":"6c109fd3d4691f8.json","parameterValues":["{'url': 'wss://composable.api.onfinality.io/public-ws', 'name': 'Composable Finance'}"]}