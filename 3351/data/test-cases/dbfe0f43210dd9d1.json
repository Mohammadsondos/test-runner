{"uid":"dbfe0f43210dd9d1","name":"test_can_create_connection[Test for GM, url: wss://leemo.gmordie.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"5511fed58647d3e88cb327965482906f","time":{"start":1688832292794,"stop":1688832293376,"duration":582},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 16:04:53 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'GM', 'url': 'wss://leemo.gmordie.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 16:04:53 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 16:04:53 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'GM', 'url': 'wss://leemo.gmordie.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 16:04:53 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"28e94b9a25ed5d19","name":"stdout","source":"28e94b9a25ed5d19.txt","type":"text/plain","size":1386}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az736-359"},{"name":"thread","value":"1947-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://leemo.gmordie.com', 'name': 'GM'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d530108b02c2946f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 16:04:37 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1688832277216,"stop":1688832277710,"duration":494}},{"uid":"dd6366421b4def95","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 16:04:22 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1688832261570,"stop":1688832262082,"duration":512}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":351,"unknown":0,"total":356},"items":[{"uid":"4f10634654c3b565","reportUrl":"https://novasamatech.github.io/test-runner/3349//#testresult/4f10634654c3b565","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 08:04:53 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1688803492727,"stop":1688803493465,"duration":738}},{"uid":"14c0406a116a08b1","reportUrl":"https://novasamatech.github.io/test-runner/3350//#testresult/14c0406a116a08b1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 12:05:42 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1688817941913,"stop":1688817942498,"duration":585}},{"uid":"1a617e244ce2d27a","reportUrl":"https://novasamatech.github.io/test-runner/3348//#testresult/1a617e244ce2d27a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 04:04:42 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1688789081562,"stop":1688789082104,"duration":542}},{"uid":"170cf31441739684","reportUrl":"https://novasamatech.github.io/test-runner/3347//#testresult/170cf31441739684","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 08 Jul 2023 00:15:42 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1688775342153,"stop":1688775342658,"duration":505}},{"uid":"c7f6440bb636d2f","reportUrl":"https://novasamatech.github.io/test-runner/3346//#testresult/c7f6440bb636d2f","status":"passed","time":{"start":1688760247817,"stop":1688760248464,"duration":647}},{"uid":"108ed38f94d9af23","reportUrl":"https://novasamatech.github.io/test-runner/3345//#testresult/108ed38f94d9af23","status":"passed","time":{"start":1688745861281,"stop":1688745862128,"duration":847}},{"uid":"a22edd6bba8f313b","reportUrl":"https://novasamatech.github.io/test-runner/3344//#testresult/a22edd6bba8f313b","status":"passed","time":{"start":1688731533337,"stop":1688731534358,"duration":1021}},{"uid":"a5d05c335d2fd36c","reportUrl":"https://novasamatech.github.io/test-runner/3343//#testresult/a5d05c335d2fd36c","status":"passed","time":{"start":1688717088737,"stop":1688717089732,"duration":995}},{"uid":"e9931a93ba649bb7","reportUrl":"https://novasamatech.github.io/test-runner/3342//#testresult/e9931a93ba649bb7","status":"passed","time":{"start":1688702665421,"stop":1688702666420,"duration":999}},{"uid":"ee2b0423e4c3b4ae","reportUrl":"https://novasamatech.github.io/test-runner/3341//#testresult/ee2b0423e4c3b4ae","status":"passed","time":{"start":1688688971009,"stop":1688688971977,"duration":968}},{"uid":"7293d67873fa7a77","reportUrl":"https://novasamatech.github.io/test-runner/3340//#testresult/7293d67873fa7a77","status":"passed","time":{"start":1688673862068,"stop":1688673863065,"duration":997}},{"uid":"53c59d77b7e65fd8","reportUrl":"https://novasamatech.github.io/test-runner/3339//#testresult/53c59d77b7e65fd8","status":"passed","time":{"start":1688659486473,"stop":1688659487278,"duration":805}},{"uid":"8358faac8ad656b","reportUrl":"https://novasamatech.github.io/test-runner/3338//#testresult/8358faac8ad656b","status":"passed","time":{"start":1688645150740,"stop":1688645151569,"duration":829}},{"uid":"343457286fd7ae17","reportUrl":"https://novasamatech.github.io/test-runner/3337//#testresult/343457286fd7ae17","status":"passed","time":{"start":1688630691362,"stop":1688630692219,"duration":857}},{"uid":"e833e91f5b36550","reportUrl":"https://novasamatech.github.io/test-runner/3336//#testresult/e833e91f5b36550","status":"passed","time":{"start":1688616252599,"stop":1688616253244,"duration":645}},{"uid":"8f353ce8dfdf9fa7","reportUrl":"https://novasamatech.github.io/test-runner/3335//#testresult/8f353ce8dfdf9fa7","status":"passed","time":{"start":1688602592443,"stop":1688602593379,"duration":936}},{"uid":"5e875721d014a1cc","reportUrl":"https://novasamatech.github.io/test-runner/3334//#testresult/5e875721d014a1cc","status":"passed","time":{"start":1688587463786,"stop":1688587464425,"duration":639}},{"uid":"f9ee6c6fa3c0ab5b","reportUrl":"https://novasamatech.github.io/test-runner/3333//#testresult/f9ee6c6fa3c0ab5b","status":"passed","time":{"start":1688573063018,"stop":1688573064011,"duration":993}},{"uid":"c19bc5e9c47cdf74","reportUrl":"https://novasamatech.github.io/test-runner/3332//#testresult/c19bc5e9c47cdf74","status":"passed","time":{"start":1688558749039,"stop":1688558749752,"duration":713}},{"uid":"44bbfc0f532fa6e0","reportUrl":"https://novasamatech.github.io/test-runner/3331//#testresult/44bbfc0f532fa6e0","status":"passed","time":{"start":1688544296236,"stop":1688544297212,"duration":976}}]},"tags":[]},"source":"dbfe0f43210dd9d1.json","parameterValues":["{'url': 'wss://leemo.gmordie.com', 'name': 'GM'}"]}