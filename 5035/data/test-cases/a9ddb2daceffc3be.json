{"uid":"a9ddb2daceffc3be","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1712692865807,"stop":1712692865832,"duration":25},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fd62cc836a0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fd62ca5b280>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fd62ca5b2e0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1536-152"},{"name":"thread","value":"2068-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"504a05b51c46f4c8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712692860730,"stop":1712692860773,"duration":43}},{"uid":"f7976cdbc315ee85","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712692855557,"stop":1712692855615,"duration":58}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":55,"skipped":0,"passed":1053,"unknown":0,"total":1110},"items":[{"uid":"77f86af80459013b","reportUrl":"https://novasamatech.github.io/test-runner/5034//#testresult/77f86af80459013b","status":"passed","time":{"start":1712678462288,"stop":1712678463168,"duration":880}},{"uid":"9c08ceeb795eee3","reportUrl":"https://novasamatech.github.io/test-runner/5033//#testresult/9c08ceeb795eee3","status":"passed","time":{"start":1712664087798,"stop":1712664088067,"duration":269}},{"uid":"d52cf0bb042a271a","reportUrl":"https://novasamatech.github.io/test-runner/5032//#testresult/d52cf0bb042a271a","status":"passed","time":{"start":1712649670529,"stop":1712649670972,"duration":443}},{"uid":"fa7c6d91b0c1c525","reportUrl":"https://novasamatech.github.io/test-runner/5031//#testresult/fa7c6d91b0c1c525","status":"passed","time":{"start":1712635263735,"stop":1712635264323,"duration":588}},{"uid":"129ec871e5a567b1","reportUrl":"https://novasamatech.github.io/test-runner/5030//#testresult/129ec871e5a567b1","status":"passed","time":{"start":1712620904526,"stop":1712620905243,"duration":717}},{"uid":"fcf34a27f5038b1f","reportUrl":"https://novasamatech.github.io/test-runner/5029//#testresult/fcf34a27f5038b1f","status":"passed","time":{"start":1712606454358,"stop":1712606454543,"duration":185}},{"uid":"4f2fbd853591a1eb","reportUrl":"https://novasamatech.github.io/test-runner/5028//#testresult/4f2fbd853591a1eb","status":"passed","time":{"start":1712592062662,"stop":1712592062843,"duration":181}},{"uid":"12769db3bef77847","reportUrl":"https://novasamatech.github.io/test-runner/5027//#testresult/12769db3bef77847","status":"passed","time":{"start":1712577669633,"stop":1712577670026,"duration":393}},{"uid":"adb9ec0b6178b725","reportUrl":"https://novasamatech.github.io/test-runner/5026//#testresult/adb9ec0b6178b725","status":"passed","time":{"start":1712563273266,"stop":1712563273436,"duration":170}},{"uid":"382ebc4bead3dba5","reportUrl":"https://novasamatech.github.io/test-runner/5025//#testresult/382ebc4bead3dba5","status":"passed","time":{"start":1712548860655,"stop":1712548861427,"duration":772}},{"uid":"aed84992602fe426","reportUrl":"https://novasamatech.github.io/test-runner/5024//#testresult/aed84992602fe426","status":"passed","time":{"start":1712534512451,"stop":1712534513065,"duration":614}},{"uid":"15f74f31a181bdab","reportUrl":"https://novasamatech.github.io/test-runner/5023//#testresult/15f74f31a181bdab","status":"passed","time":{"start":1712520063656,"stop":1712520064449,"duration":793}},{"uid":"4762a47812c3a99d","reportUrl":"https://novasamatech.github.io/test-runner/5022//#testresult/4762a47812c3a99d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712505676575,"stop":1712505676736,"duration":161}},{"uid":"f4619f5da7798a39","reportUrl":"https://novasamatech.github.io/test-runner/5021//#testresult/f4619f5da7798a39","status":"passed","time":{"start":1712491275946,"stop":1712491276361,"duration":415}},{"uid":"191a7fa0558ca645","reportUrl":"https://novasamatech.github.io/test-runner/5020//#testresult/191a7fa0558ca645","status":"passed","time":{"start":1712476861584,"stop":1712476861950,"duration":366}},{"uid":"383b83ebf88b57ff","reportUrl":"https://novasamatech.github.io/test-runner/5019//#testresult/383b83ebf88b57ff","status":"passed","time":{"start":1712462468419,"stop":1712462469138,"duration":719}},{"uid":"25044a2935451386","reportUrl":"https://novasamatech.github.io/test-runner/5018//#testresult/25044a2935451386","status":"passed","time":{"start":1712448108094,"stop":1712448108715,"duration":621}},{"uid":"a7b3dd1788981737","reportUrl":"https://novasamatech.github.io/test-runner/5017//#testresult/a7b3dd1788981737","status":"passed","time":{"start":1712433659270,"stop":1712433659998,"duration":728}},{"uid":"e5f83ae141cbbe04","reportUrl":"https://novasamatech.github.io/test-runner/5016//#testresult/e5f83ae141cbbe04","status":"passed","time":{"start":1712419267967,"stop":1712419268711,"duration":744}},{"uid":"21571fe804884d7b","reportUrl":"https://novasamatech.github.io/test-runner/5015//#testresult/21571fe804884d7b","status":"passed","time":{"start":1712404870054,"stop":1712404870378,"duration":324}}]},"tags":[]},"source":"a9ddb2daceffc3be.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}