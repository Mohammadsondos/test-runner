{"uid":"39589dc3b70e9c3","name":"test_xcm_parameters[Check XCM data for Tinkernet]","fullName":"tests.test_xcm_data.TestCompareXCMData#test_xcm_parameters","historyId":"699f40a9f7ba28967ea433ffd82cef10","time":{"start":1665418164168,"stop":1665418166368,"duration":2200},"status":"failed","statusMessage":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})","statusTrace":"self = <tests.test_xcm_data.TestCompareXCMData object at 0x7fdd11c01310>\nchain = <tests.utils.chain_model.Chain object at 0x7fdd11c4e5b0>\n\n    def test_xcm_parameters(self, chain: Chain):\n        connection = chain.create_connection()\n        chain.init_properties()\n        data = connection.get_constant('System', 'BlockWeights').serialize()\n    \n        with open(xcm_data_file_path) as fp:\n            json_data = json.load(fp)\n            changed_data = was_network_data_changed(data, json_data[chain.chainId]['BlockWeights'])\n>           assert not bool(changed_data)\nE           AssertionError: assert not True\nE            +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})\n\ntests/test_xcm_data.py:30: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})","statusTrace":"self = <tests.test_xcm_data.TestCompareXCMData object at 0x7fdd11c01310>\nchain = <tests.utils.chain_model.Chain object at 0x7fdd11c4e5b0>\n\n    def test_xcm_parameters(self, chain: Chain):\n        connection = chain.create_connection()\n        chain.init_properties()\n        data = connection.get_constant('System', 'BlockWeights').serialize()\n    \n        with open(xcm_data_file_path) as fp:\n            json_data = json.load(fp)\n            changed_data = was_network_data_changed(data, json_data[chain.chainId]['BlockWeights'])\n>           assert not bool(changed_data)\nE           AssertionError: assert not True\nE            +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})\n\ntests/test_xcm_data.py:30: AssertionError","steps":[],"attachments":[{"uid":"56f52ff8f664e0b5","name":"stdout","source":"56f52ff8f664e0b5.txt","type":"text/plain","size":27}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_xcm_data"},{"name":"subSuite","value":"TestCompareXCMData"},{"name":"host","value":"fv-az744-567"},{"name":"thread","value":"1664-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_xcm_data"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<tests.utils.chain_model.Chain object at 0x7fdd11c4e5b0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7bb13c6525fd53c4","status":"broken","statusDetails":"TimeoutError: [Errno Can't connect to all nodes of network] Tinkernet","time":{"start":1665418153471,"stop":1665418154151,"duration":680}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":9},"items":[{"uid":"352734d6743c52c2","reportUrl":"https://nova-wallet.github.io/test-runner/1686//#testresult/352734d6743c52c2","status":"broken","statusDetails":"TimeoutError: [Errno Can't connect to all nodes of network] Tinkernet","time":{"start":1665403832890,"stop":1665403834059,"duration":1169}},{"uid":"afb6916e5fcef0e5","reportUrl":"https://nova-wallet.github.io/test-runner/1685//#testresult/afb6916e5fcef0e5","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})","time":{"start":1665389460391,"stop":1665389460879,"duration":488}},{"uid":"3b9ba16bc37cf667","reportUrl":"https://nova-wallet.github.io/test-runner/1684//#testresult/3b9ba16bc37cf667","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})","time":{"start":1665387197912,"stop":1665387197968,"duration":56}},{"uid":"828f54a619f9530e","reportUrl":"https://nova-wallet.github.io/test-runner/1683//#testresult/828f54a619f9530e","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})","time":{"start":1665385635747,"stop":1665385638414,"duration":2667}},{"uid":"6fcce25a7588beaf","reportUrl":"https://nova-wallet.github.io/test-runner/1682//#testresult/6fcce25a7588beaf","status":"broken","statusDetails":"TimeoutError: [Errno Can't connect to all nodes of network] Tinkernet","time":{"start":1665383786544,"stop":1665383787451,"duration":907}},{"uid":"9ad6b1bdd69630b0","reportUrl":"https://nova-wallet.github.io/test-runner/22//#testresult/9ad6b1bdd69630b0","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})","time":{"start":1665382173902,"stop":1665382177868,"duration":3966}},{"uid":"8b062b84b838d3e2","reportUrl":"https://nova-wallet.github.io/test-runner/22//#testresult/8b062b84b838d3e2","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})","time":{"start":1665380997693,"stop":1665380997989,"duration":296}},{"uid":"7d36472e96fcecfc","reportUrl":"https://nova-wallet.github.io/test-runner/21//#testresult/7d36472e96fcecfc","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'type_changes': [<root['base_block'] t1:{'ref_time':...}, t2:5346284000>, <root['max_block'] t1:{'ref_time':...}, t2:...ref_time':...}, t2:125000000000>, <root['per_class']['mandatory']['base_extrinsic'] t1:{'ref_time':...}, t2:86298000>]})","time":{"start":1665378458450,"stop":1665378458784,"duration":334}}]},"tags":[]},"source":"39589dc3b70e9c3.json","parameterValues":["<tests.utils.chain_model.Chain object at 0x7fdd11c4e5b0>"]}