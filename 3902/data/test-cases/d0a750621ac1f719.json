{"uid":"d0a750621ac1f719","name":"test_precision[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"d509d66f8aae8d37ee667169b62aafd3","time":{"start":1696622574190,"stop":1696622576100,"duration":1910},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7f0cbb35cb50>\nchain = <scripts.utils.chain_model.Chain object at 0x7f0cbb2c7940>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f0ca47f4340>\nmethod = 'state_getMetadata'\nparams = ['0x076db611231182555254adee29a69c40ada29e2fc0a751fa2429a075e00577d8']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az564-574"},{"name":"thread","value":"2059-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f0cbb2c7940>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c95669b3b7cf6471","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696622556836,"stop":1696622559022,"duration":2186}},{"uid":"233a38269d2ee042","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696622539553,"stop":1696622541501,"duration":1948}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":261,"unknown":0,"total":262},"items":[{"uid":"c9d7ae7dae2342f2","reportUrl":"https://novasamatech.github.io/test-runner/3901//#testresult/c9d7ae7dae2342f2","status":"passed","time":{"start":1696608145713,"stop":1696608153807,"duration":8094}},{"uid":"25ae147fae372460","reportUrl":"https://novasamatech.github.io/test-runner/3900//#testresult/25ae147fae372460","status":"passed","time":{"start":1696593735292,"stop":1696593740523,"duration":5231}},{"uid":"297ccd05a8f8a8db","reportUrl":"https://novasamatech.github.io/test-runner/3899//#testresult/297ccd05a8f8a8db","status":"passed","time":{"start":1696579324235,"stop":1696579331154,"duration":6919}},{"uid":"f6d773737bde7b28","reportUrl":"https://novasamatech.github.io/test-runner/3898//#testresult/f6d773737bde7b28","status":"passed","time":{"start":1696564957966,"stop":1696564964524,"duration":6558}},{"uid":"bed2922d6816c6c6","reportUrl":"https://novasamatech.github.io/test-runner/3897//#testresult/bed2922d6816c6c6","status":"passed","time":{"start":1696550565854,"stop":1696550570994,"duration":5140}},{"uid":"18b4f822e80e4f31","reportUrl":"https://novasamatech.github.io/test-runner/3896//#testresult/18b4f822e80e4f31","status":"passed","time":{"start":1696536145022,"stop":1696536151639,"duration":6617}},{"uid":"a58af717f2836de1","reportUrl":"https://novasamatech.github.io/test-runner/3895//#testresult/a58af717f2836de1","status":"passed","time":{"start":1696521729457,"stop":1696521735832,"duration":6375}},{"uid":"1db62d961b460b86","reportUrl":"https://novasamatech.github.io/test-runner/3894//#testresult/1db62d961b460b86","status":"passed","time":{"start":1696507324750,"stop":1696507332848,"duration":8098}},{"uid":"fa3632ebce26c406","reportUrl":"https://novasamatech.github.io/test-runner/3893//#testresult/fa3632ebce26c406","status":"passed","time":{"start":1696496667720,"stop":1696496673978,"duration":6258}},{"uid":"ed7bafcade468b63","reportUrl":"https://novasamatech.github.io/test-runner/3892//#testresult/ed7bafcade468b63","status":"passed","time":{"start":1696492939304,"stop":1696493005778,"duration":66474}},{"uid":"d34c1b34140ce9e","reportUrl":"https://novasamatech.github.io/test-runner/3891//#testresult/d34c1b34140ce9e","status":"passed","time":{"start":1696478518940,"stop":1696478525402,"duration":6462}},{"uid":"571df1c668c84607","reportUrl":"https://novasamatech.github.io/test-runner/3890//#testresult/571df1c668c84607","status":"passed","time":{"start":1696464178445,"stop":1696464184149,"duration":5704}},{"uid":"8653680bed4a4fff","reportUrl":"https://novasamatech.github.io/test-runner/3889//#testresult/8653680bed4a4fff","status":"passed","time":{"start":1696449708492,"stop":1696449714344,"duration":5852}},{"uid":"13a0ae4724a1f2cc","reportUrl":"https://novasamatech.github.io/test-runner/3888//#testresult/13a0ae4724a1f2cc","status":"passed","time":{"start":1696435323490,"stop":1696435329055,"duration":5565}},{"uid":"6b1c7ec4b0641afb","reportUrl":"https://novasamatech.github.io/test-runner/3887//#testresult/6b1c7ec4b0641afb","status":"passed","time":{"start":1696420922241,"stop":1696420928357,"duration":6116}},{"uid":"2af79a3ed5336568","reportUrl":"https://novasamatech.github.io/test-runner/3886//#testresult/2af79a3ed5336568","status":"passed","time":{"start":1696406547957,"stop":1696406554518,"duration":6561}},{"uid":"39c7a65a7e3873d8","reportUrl":"https://novasamatech.github.io/test-runner/3885//#testresult/39c7a65a7e3873d8","status":"passed","time":{"start":1696392140850,"stop":1696392146113,"duration":5263}},{"uid":"cfe73fa0c0639d6d","reportUrl":"https://novasamatech.github.io/test-runner/3884//#testresult/cfe73fa0c0639d6d","status":"passed","time":{"start":1696377771746,"stop":1696377776717,"duration":4971}},{"uid":"1d61498f0004e24e","reportUrl":"https://novasamatech.github.io/test-runner/3883//#testresult/1d61498f0004e24e","status":"passed","time":{"start":1696363327585,"stop":1696363332953,"duration":5368}},{"uid":"aa2cf9d218824c6b","reportUrl":"https://novasamatech.github.io/test-runner/3882//#testresult/aa2cf9d218824c6b","status":"passed","time":{"start":1696348934667,"stop":1696348941637,"duration":6970}}]},"tags":[]},"source":"d0a750621ac1f719.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f0cbb2c7940>"]}