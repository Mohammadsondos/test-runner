{"uid":"53fbe0ce45174b","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1699372920436,"stop":1699372920869,"duration":433},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 07 Nov 2023 16:02:00 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 07 Nov 2023 16:02:00 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 07 Nov 2023 16:02:00 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 07 Nov 2023 16:02:00 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"6ff4211322c6c2a8","name":"stdout","source":"6ff4211322c6c2a8.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1433-978"},{"name":"thread","value":"2173-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"88a81005a7331fba","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 07 Nov 2023 16:01:45 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699372905082,"stop":1699372905332,"duration":250}},{"uid":"f00e61d88c744921","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 07 Nov 2023 16:01:29 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699372889704,"stop":1699372889955,"duration":251}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":29,"skipped":0,"passed":425,"unknown":0,"total":454},"items":[{"uid":"3bd665d6cadf03f0","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/3bd665d6cadf03f0","status":"passed","time":{"start":1699358529064,"stop":1699358529408,"duration":344}},{"uid":"f6b3e4ae279178fa","reportUrl":"https://novasamatech.github.io/test-runner/4092//#testresult/f6b3e4ae279178fa","status":"passed","time":{"start":1699344091517,"stop":1699344092286,"duration":769}},{"uid":"6a10470e3af443f4","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/6a10470e3af443f4","status":"passed","time":{"start":1699329703697,"stop":1699329704190,"duration":493}},{"uid":"4eb2e620174c7012","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/4eb2e620174c7012","status":"passed","time":{"start":1699315343208,"stop":1699315343557,"duration":349}},{"uid":"fb6fd0883a8949f6","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/fb6fd0883a8949f6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 06 Nov 2023 20:02:04 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699300924122,"stop":1699300924437,"duration":315}},{"uid":"1f25b7053704f222","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/1f25b7053704f222","status":"passed","time":{"start":1699286515847,"stop":1699286516337,"duration":490}},{"uid":"a46d1735a0077bbd","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/a46d1735a0077bbd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 06 Nov 2023 12:02:23 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699272143689,"stop":1699272143954,"duration":265}},{"uid":"423a2a8de29cf34a","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/423a2a8de29cf34a","status":"passed","time":{"start":1699257750165,"stop":1699257750732,"duration":567}},{"uid":"a0bb4db7966a27f8","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/a0bb4db7966a27f8","status":"passed","time":{"start":1699243304633,"stop":1699243305218,"duration":585}},{"uid":"a052e83732a12f25","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/a052e83732a12f25","status":"passed","time":{"start":1699228930481,"stop":1699228931047,"duration":566}},{"uid":"e8bafb88ce7260b","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/e8bafb88ce7260b","status":"passed","time":{"start":1699214498130,"stop":1699214498709,"duration":579}},{"uid":"9138dc52e1cfa465","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/9138dc52e1cfa465","status":"passed","time":{"start":1699200090566,"stop":1699200091102,"duration":536}},{"uid":"68737b7005d9e57f","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/68737b7005d9e57f","status":"passed","time":{"start":1699185687823,"stop":1699185688172,"duration":349}},{"uid":"477ab0a8bd36af59","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/477ab0a8bd36af59","status":"passed","time":{"start":1699171285765,"stop":1699171286239,"duration":474}},{"uid":"3488d2c95e08d1af","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/3488d2c95e08d1af","status":"passed","time":{"start":1699156887080,"stop":1699156887506,"duration":426}},{"uid":"7b3e63596d3db154","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/7b3e63596d3db154","status":"passed","time":{"start":1699142546518,"stop":1699142547108,"duration":590}},{"uid":"15a57c061f6d6126","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/15a57c061f6d6126","status":"passed","time":{"start":1699128099011,"stop":1699128099457,"duration":446}},{"uid":"7b335eaf772ca9e3","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/7b335eaf772ca9e3","status":"passed","time":{"start":1699113698647,"stop":1699113699178,"duration":531}},{"uid":"9afe57b0a20fd7d","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/9afe57b0a20fd7d","status":"passed","time":{"start":1699099296107,"stop":1699099296673,"duration":566}},{"uid":"f24d1c3ce2ddd3b0","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/f24d1c3ce2ddd3b0","status":"passed","time":{"start":1699084893185,"stop":1699084893682,"duration":497}}]},"tags":[]},"source":"53fbe0ce45174b.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}