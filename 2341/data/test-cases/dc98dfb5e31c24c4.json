{"uid":"dc98dfb5e31c24c4","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1674677196757,"stop":1674677197049,"duration":292},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"5e0d5ef04ec90942","name":"stdout","source":"5e0d5ef04ec90942.txt","type":"text/plain","size":228}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az736-515"},{"name":"thread","value":"1697-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d5841f44b8472efd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1674677186351,"stop":1674677186652,"duration":301}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":57,"skipped":0,"passed":414,"unknown":0,"total":471},"items":[{"uid":"a41249f83210b658","reportUrl":"https://nova-wallet.github.io/test-runner/2340//#testresult/a41249f83210b658","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1674662830242,"stop":1674662830689,"duration":447}},{"uid":"65386304d001e6dd","reportUrl":"https://nova-wallet.github.io/test-runner/2339//#testresult/65386304d001e6dd","status":"passed","time":{"start":1674648485778,"stop":1674648486359,"duration":581}},{"uid":"31e370f2950dbda9","reportUrl":"https://nova-wallet.github.io/test-runner/2337//#testresult/31e370f2950dbda9","status":"passed","time":{"start":1674619594261,"stop":1674619594935,"duration":674}},{"uid":"3ed2cf2ba9aeca82","reportUrl":"https://nova-wallet.github.io/test-runner/2336//#testresult/3ed2cf2ba9aeca82","status":"passed","time":{"start":1674605789322,"stop":1674605789891,"duration":569}},{"uid":"112c0eb762c85c18","reportUrl":"https://nova-wallet.github.io/test-runner/2335//#testresult/112c0eb762c85c18","status":"passed","time":{"start":1674590813124,"stop":1674590813520,"duration":396}},{"uid":"5203cf2f0ff21093","reportUrl":"https://nova-wallet.github.io/test-runner/2334//#testresult/5203cf2f0ff21093","status":"passed","time":{"start":1674576529827,"stop":1674576530333,"duration":506}},{"uid":"c33bb608f9242b5b","reportUrl":"https://nova-wallet.github.io/test-runner/2333//#testresult/c33bb608f9242b5b","status":"passed","time":{"start":1674562049521,"stop":1674562049919,"duration":398}},{"uid":"6461542ee2ace4e0","reportUrl":"https://nova-wallet.github.io/test-runner/2332//#testresult/6461542ee2ace4e0","status":"passed","time":{"start":1674547635591,"stop":1674547636280,"duration":689}},{"uid":"1fa7a83add77d44c","reportUrl":"https://nova-wallet.github.io/test-runner/2331//#testresult/1fa7a83add77d44c","status":"passed","time":{"start":1674533200632,"stop":1674533201032,"duration":400}},{"uid":"8ded92d7233f9761","reportUrl":"https://nova-wallet.github.io/test-runner/2330//#testresult/8ded92d7233f9761","status":"passed","time":{"start":1674519417970,"stop":1674519418634,"duration":664}},{"uid":"6b26bb041e179858","reportUrl":"https://nova-wallet.github.io/test-runner/2329//#testresult/6b26bb041e179858","status":"passed","time":{"start":1674504281927,"stop":1674504282493,"duration":566}},{"uid":"a6f1718ac35f367a","reportUrl":"https://nova-wallet.github.io/test-runner/2328//#testresult/a6f1718ac35f367a","status":"passed","time":{"start":1674490027113,"stop":1674490027766,"duration":653}},{"uid":"688cdc72cdc8d548","reportUrl":"https://nova-wallet.github.io/test-runner/2327//#testresult/688cdc72cdc8d548","status":"passed","time":{"start":1674475657382,"stop":1674475657952,"duration":570}},{"uid":"795bf513294cd09a","reportUrl":"https://nova-wallet.github.io/test-runner/2326//#testresult/795bf513294cd09a","status":"passed","time":{"start":1674461134895,"stop":1674461135569,"duration":674}},{"uid":"ae7dc07ceb37844f","reportUrl":"https://nova-wallet.github.io/test-runner/2325//#testresult/ae7dc07ceb37844f","status":"passed","time":{"start":1674446803025,"stop":1674446803603,"duration":578}},{"uid":"6f64ff3c07cef58b","reportUrl":"https://nova-wallet.github.io/test-runner/2324//#testresult/6f64ff3c07cef58b","status":"passed","time":{"start":1674432887295,"stop":1674432887849,"duration":554}},{"uid":"70d2fde7aa5f876d","reportUrl":"https://nova-wallet.github.io/test-runner/2323//#testresult/70d2fde7aa5f876d","status":"passed","time":{"start":1674418007885,"stop":1674418008444,"duration":559}},{"uid":"f32324578e9f36e5","reportUrl":"https://nova-wallet.github.io/test-runner/2322//#testresult/f32324578e9f36e5","status":"passed","time":{"start":1674403647278,"stop":1674403647832,"duration":554}},{"uid":"860ea569531a73f","reportUrl":"https://nova-wallet.github.io/test-runner/2321//#testresult/860ea569531a73f","status":"passed","time":{"start":1674389120597,"stop":1674389120974,"duration":377}},{"uid":"d34a13839cb62f35","reportUrl":"https://nova-wallet.github.io/test-runner/2320//#testresult/d34a13839cb62f35","status":"passed","time":{"start":1674374838375,"stop":1674374839039,"duration":664}}]},"tags":[]},"source":"dc98dfb5e31c24c4.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}