{"uid":"acd67ebcc8b1673","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1715457678806,"stop":1715457678867,"duration":61},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fef9c9f59f0>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fef9c919f00>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fef9c919840>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":true,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1984-696"},{"name":"thread","value":"2069-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cfaa7b4adf6bf068","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1715457673676,"stop":1715457673745,"duration":69}},{"uid":"903699271560a427","status":"failed","statusDetails":"AssertionError: Failed to connect to Ethereum RPC node\nassert False\n +  where False = <bound method Web3.is_connected of <web3.main.Web3 object at 0x7fef9c9f7010>>()\n +    where <bound method Web3.is_connected of <web3.main.Web3 object at 0x7fef9c9f7010>> = <web3.main.Web3 object at 0x7fef9c9f7010>.is_connected","time":{"start":1715457658221,"stop":1715457668609,"duration":10388}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":57,"skipped":0,"passed":1245,"unknown":0,"total":1306},"items":[{"uid":"e3cf642e28a509","reportUrl":"https://novasamatech.github.io/test-runner/5229//#testresult/e3cf642e28a509","status":"passed","time":{"start":1715443266298,"stop":1715443267000,"duration":702}},{"uid":"24d801f848d6fddc","reportUrl":"https://novasamatech.github.io/test-runner/5228//#testresult/24d801f848d6fddc","status":"passed","time":{"start":1715428907967,"stop":1715428908232,"duration":265}},{"uid":"726c7c01631c859d","reportUrl":"https://novasamatech.github.io/test-runner/5226//#testresult/726c7c01631c859d","status":"failed","statusDetails":"AssertionError: Failed to connect to Ethereum RPC node\nassert False\n +  where False = <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f9413480a30>>()\n +    where <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f9413480a30>> = <web3.main.Web3 object at 0x7f9413480a30>.is_connected","time":{"start":1715400089917,"stop":1715400100142,"duration":10225}},{"uid":"e8e6aa906b8a0cfc","reportUrl":"https://novasamatech.github.io/test-runner/5227//#testresult/e8e6aa906b8a0cfc","status":"passed","time":{"start":1715414458935,"stop":1715414459297,"duration":362}},{"uid":"94bde2b9c707eb3d","reportUrl":"https://novasamatech.github.io/test-runner/5225//#testresult/94bde2b9c707eb3d","status":"passed","time":{"start":1715385696613,"stop":1715385697003,"duration":390}},{"uid":"c33375fd019d7a72","reportUrl":"https://novasamatech.github.io/test-runner/5224//#testresult/c33375fd019d7a72","status":"passed","time":{"start":1715371274624,"stop":1715371274969,"duration":345}},{"uid":"9d69f986241e0700","reportUrl":"https://novasamatech.github.io/test-runner/5223//#testresult/9d69f986241e0700","status":"broken","statusDetails":"requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='eth.llamarpc.com', port=443): Read timed out. (read timeout=10)","time":{"start":1715356894971,"stop":1715356945824,"duration":50853}},{"uid":"104b7101e69c52d6","reportUrl":"https://novasamatech.github.io/test-runner/5221//#testresult/104b7101e69c52d6","status":"passed","time":{"start":1715328101370,"stop":1715328101577,"duration":207}},{"uid":"830c9dccf707eb6e","reportUrl":"https://novasamatech.github.io/test-runner/5222//#testresult/830c9dccf707eb6e","status":"passed","time":{"start":1715342480056,"stop":1715342480263,"duration":207}},{"uid":"8d30c294ddc4e29e","reportUrl":"https://novasamatech.github.io/test-runner/5220//#testresult/8d30c294ddc4e29e","status":"passed","time":{"start":1715313663484,"stop":1715313663694,"duration":210}},{"uid":"45d296cbadbd73e5","reportUrl":"https://novasamatech.github.io/test-runner/5219//#testresult/45d296cbadbd73e5","status":"failed","statusDetails":"AssertionError: Failed to connect to Ethereum RPC node\nassert False\n +  where False = <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f7028a00a90>>()\n +    where <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f7028a00a90>> = <web3.main.Web3 object at 0x7f7028a00a90>.is_connected","time":{"start":1715299345855,"stop":1715299356304,"duration":10449}},{"uid":"8b5a7bda6d89e8ff","reportUrl":"https://novasamatech.github.io/test-runner/5217//#testresult/8b5a7bda6d89e8ff","status":"passed","time":{"start":1715270458091,"stop":1715270458580,"duration":489}},{"uid":"54bd0b130c428458","reportUrl":"https://novasamatech.github.io/test-runner/5218//#testresult/54bd0b130c428458","status":"failed","statusDetails":"AssertionError: Failed to connect to Ethereum RPC node\nassert False\n +  where False = <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f83997d1a80>>()\n +    where <bound method Web3.is_connected of <web3.main.Web3 object at 0x7f83997d1a80>> = <web3.main.Web3 object at 0x7f83997d1a80>.is_connected","time":{"start":1715284881476,"stop":1715284891687,"duration":10211}},{"uid":"45f71a612af1e13c","reportUrl":"https://novasamatech.github.io/test-runner/5216//#testresult/45f71a612af1e13c","status":"passed","time":{"start":1715256062675,"stop":1715256063044,"duration":369}},{"uid":"fb416d394d392211","reportUrl":"https://novasamatech.github.io/test-runner/5215//#testresult/fb416d394d392211","status":"passed","time":{"start":1715241664373,"stop":1715241664903,"duration":530}},{"uid":"7303fa1520bc0918","reportUrl":"https://novasamatech.github.io/test-runner/5213//#testresult/7303fa1520bc0918","status":"passed","time":{"start":1715212914648,"stop":1715212915483,"duration":835}},{"uid":"aa161553024f9d55","reportUrl":"https://novasamatech.github.io/test-runner/5214//#testresult/aa161553024f9d55","status":"passed","time":{"start":1715227259108,"stop":1715227259954,"duration":846}},{"uid":"694c006d8cbc61be","reportUrl":"https://novasamatech.github.io/test-runner/5212//#testresult/694c006d8cbc61be","status":"passed","time":{"start":1715198459902,"stop":1715198460158,"duration":256}},{"uid":"7269c98d0c93c132","reportUrl":"https://novasamatech.github.io/test-runner/5210//#testresult/7269c98d0c93c132","status":"passed","time":{"start":1715169666191,"stop":1715169666640,"duration":449}},{"uid":"e3074cda362a9423","reportUrl":"https://novasamatech.github.io/test-runner/5211//#testresult/e3074cda362a9423","status":"passed","time":{"start":1715184072386,"stop":1715184073275,"duration":889}}]},"tags":[]},"source":"acd67ebcc8b1673.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}