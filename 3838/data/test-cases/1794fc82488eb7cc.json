{"uid":"1794fc82488eb7cc","name":"test_can_create_connection[Test for Ajuna, url: wss://rpc-parachain.ajuna.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9e45091b8d9f46b64ef77b6ae354ace8","time":{"start":1695715374184,"stop":1695715374422,"duration":238},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 26 Sep 2023 08:02:54 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 26 Sep 2023 08:02:54 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 26 Sep 2023 08:02:54 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 26 Sep 2023 08:02:54 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"52eadc6362016998","name":"stdout","source":"52eadc6362016998.txt","type":"text/plain","size":1491}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az364-515"},{"name":"thread","value":"2047-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c37115f970b4e823","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 26 Sep 2023 08:02:39 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695715358865,"stop":1695715359104,"duration":239}},{"uid":"980a40a4ebb7f990","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 26 Sep 2023 08:02:23 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695715343463,"stop":1695715343717,"duration":254}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":186,"unknown":0,"total":198},"items":[{"uid":"fe09610b63ac66d6","reportUrl":"https://novasamatech.github.io/test-runner/3837//#testresult/fe09610b63ac66d6","status":"passed","time":{"start":1695700907497,"stop":1695700907943,"duration":446}},{"uid":"b52d3998d64f2aed","reportUrl":"https://novasamatech.github.io/test-runner/3836//#testresult/b52d3998d64f2aed","status":"passed","time":{"start":1695686593990,"stop":1695686594342,"duration":352}},{"uid":"841a36b2fb8e8ac2","reportUrl":"https://novasamatech.github.io/test-runner/3835//#testresult/841a36b2fb8e8ac2","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1695672175317,"stop":1695672175541,"duration":224}},{"uid":"f9e7cad64ac8a38e","reportUrl":"https://novasamatech.github.io/test-runner/3834//#testresult/f9e7cad64ac8a38e","status":"passed","time":{"start":1695657767036,"stop":1695657767588,"duration":552}},{"uid":"daede11e26b620ff","reportUrl":"https://novasamatech.github.io/test-runner/3833//#testresult/daede11e26b620ff","status":"passed","time":{"start":1695643350910,"stop":1695643351445,"duration":535}},{"uid":"657bdc0665e253c6","reportUrl":"https://novasamatech.github.io/test-runner/3832//#testresult/657bdc0665e253c6","status":"passed","time":{"start":1695628991950,"stop":1695628992293,"duration":343}},{"uid":"1a3f6047db860455","reportUrl":"https://novasamatech.github.io/test-runner/3831//#testresult/1a3f6047db860455","status":"passed","time":{"start":1695614532778,"stop":1695614533185,"duration":407}},{"uid":"990f23d424259158","reportUrl":"https://novasamatech.github.io/test-runner/3830//#testresult/990f23d424259158","status":"passed","time":{"start":1695600175064,"stop":1695600175699,"duration":635}},{"uid":"e01c6fecd51e81d6","reportUrl":"https://novasamatech.github.io/test-runner/3829//#testresult/e01c6fecd51e81d6","status":"passed","time":{"start":1695585742687,"stop":1695585743018,"duration":331}},{"uid":"e553b56dd76ab4dd","reportUrl":"https://novasamatech.github.io/test-runner/3828//#testresult/e553b56dd76ab4dd","status":"passed","time":{"start":1695571327011,"stop":1695571327456,"duration":445}},{"uid":"891d5c3e15902585","reportUrl":"https://novasamatech.github.io/test-runner/3827//#testresult/891d5c3e15902585","status":"passed","time":{"start":1695556924173,"stop":1695556924619,"duration":446}},{"uid":"8d627c3a06b6ab56","reportUrl":"https://novasamatech.github.io/test-runner/3826//#testresult/8d627c3a06b6ab56","status":"passed","time":{"start":1695542533299,"stop":1695542533959,"duration":660}},{"uid":"82f148ea18417dd5","reportUrl":"https://novasamatech.github.io/test-runner/3825//#testresult/82f148ea18417dd5","status":"passed","time":{"start":1695528115455,"stop":1695528115906,"duration":451}},{"uid":"e1cdb838397fce68","reportUrl":"https://novasamatech.github.io/test-runner/3824//#testresult/e1cdb838397fce68","status":"passed","time":{"start":1695513769525,"stop":1695513769878,"duration":353}},{"uid":"30db328d425cc18","reportUrl":"https://novasamatech.github.io/test-runner/3823//#testresult/30db328d425cc18","status":"passed","time":{"start":1695499316422,"stop":1695499316807,"duration":385}},{"uid":"b655ded8a0ce3044","reportUrl":"https://novasamatech.github.io/test-runner/3822//#testresult/b655ded8a0ce3044","status":"passed","time":{"start":1695484928576,"stop":1695484928932,"duration":356}},{"uid":"59bf60e0acf4bc61","reportUrl":"https://novasamatech.github.io/test-runner/3821//#testresult/59bf60e0acf4bc61","status":"passed","time":{"start":1695470536197,"stop":1695470536740,"duration":543}},{"uid":"7f8fee6cb0bacdda","reportUrl":"https://novasamatech.github.io/test-runner/3820//#testresult/7f8fee6cb0bacdda","status":"passed","time":{"start":1695456102088,"stop":1695456102446,"duration":358}},{"uid":"11f0f76ab7f23eee","reportUrl":"https://novasamatech.github.io/test-runner/3819//#testresult/11f0f76ab7f23eee","status":"passed","time":{"start":1695441714179,"stop":1695441714546,"duration":367}},{"uid":"569b0985dd3c9cfd","reportUrl":"https://novasamatech.github.io/test-runner/3818//#testresult/569b0985dd3c9cfd","status":"passed","time":{"start":1695427365812,"stop":1695427366342,"duration":530}}]},"tags":[]},"source":"1794fc82488eb7cc.json","parameterValues":["{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"]}