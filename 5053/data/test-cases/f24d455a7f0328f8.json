{"uid":"f24d455a7f0328f8","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1712952069112,"stop":1712952069229,"duration":117},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f61f69717e0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f61f46e2e90>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f61f46e3400>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az702-203"},{"name":"thread","value":"2092-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"64111d5eb1b1fe5e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712952064028,"stop":1712952064078,"duration":50}},{"uid":"651bedd359a89a0a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712952058874,"stop":1712952058919,"duration":45}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":56,"skipped":0,"passed":1070,"unknown":0,"total":1128},"items":[{"uid":"740b40d38fa6175c","reportUrl":"https://novasamatech.github.io/test-runner/5052//#testresult/740b40d38fa6175c","status":"passed","time":{"start":1712937661661,"stop":1712937661903,"duration":242}},{"uid":"a9f453787ae666a2","reportUrl":"https://novasamatech.github.io/test-runner/5051//#testresult/a9f453787ae666a2","status":"passed","time":{"start":1712923262247,"stop":1712923262433,"duration":186}},{"uid":"ae062eaed3e0eeb9","reportUrl":"https://novasamatech.github.io/test-runner/5050//#testresult/ae062eaed3e0eeb9","status":"passed","time":{"start":1712908862105,"stop":1712908862273,"duration":168}},{"uid":"a74d49b46375f57b","reportUrl":"https://novasamatech.github.io/test-runner/5049//#testresult/a74d49b46375f57b","status":"passed","time":{"start":1712894457297,"stop":1712894457668,"duration":371}},{"uid":"368a12cc5217bb6f","reportUrl":"https://novasamatech.github.io/test-runner/5048//#testresult/368a12cc5217bb6f","status":"passed","time":{"start":1712880115854,"stop":1712880116211,"duration":357}},{"uid":"17d1c9c3f2101c7c","reportUrl":"https://novasamatech.github.io/test-runner/5047//#testresult/17d1c9c3f2101c7c","status":"passed","time":{"start":1712865674358,"stop":1712865674531,"duration":173}},{"uid":"d2dfc01de6bab28f","reportUrl":"https://novasamatech.github.io/test-runner/5046//#testresult/d2dfc01de6bab28f","status":"passed","time":{"start":1712851262103,"stop":1712851262323,"duration":220}},{"uid":"5a2e4c045a29c99f","reportUrl":"https://novasamatech.github.io/test-runner/5045//#testresult/5a2e4c045a29c99f","status":"passed","time":{"start":1712836873041,"stop":1712836873942,"duration":901}},{"uid":"d0a0b4d09e7d93bb","reportUrl":"https://novasamatech.github.io/test-runner/5044//#testresult/d0a0b4d09e7d93bb","status":"passed","time":{"start":1712822472381,"stop":1712822473237,"duration":856}},{"uid":"62591f36095b926c","reportUrl":"https://novasamatech.github.io/test-runner/5043//#testresult/62591f36095b926c","status":"passed","time":{"start":1712808066559,"stop":1712808067160,"duration":601}},{"uid":"59a9069624fe2ed8","reportUrl":"https://novasamatech.github.io/test-runner/5042//#testresult/59a9069624fe2ed8","status":"passed","time":{"start":1712793716651,"stop":1712793717223,"duration":572}},{"uid":"224dafd6d1f14444","reportUrl":"https://novasamatech.github.io/test-runner/5041//#testresult/224dafd6d1f14444","status":"passed","time":{"start":1712779268937,"stop":1712779269371,"duration":434}},{"uid":"dc1492fb7c4decd","reportUrl":"https://novasamatech.github.io/test-runner/5040//#testresult/dc1492fb7c4decd","status":"passed","time":{"start":1712764867545,"stop":1712764867951,"duration":406}},{"uid":"8bf84d023046fecf","reportUrl":"https://novasamatech.github.io/test-runner/5039//#testresult/8bf84d023046fecf","status":"passed","time":{"start":1712750462195,"stop":1712750462398,"duration":203}},{"uid":"d736d012e6fa7d87","reportUrl":"https://novasamatech.github.io/test-runner/5038//#testresult/d736d012e6fa7d87","status":"passed","time":{"start":1712736066041,"stop":1712736066639,"duration":598}},{"uid":"eeeab5430f65c314","reportUrl":"https://novasamatech.github.io/test-runner/5037//#testresult/eeeab5430f65c314","status":"passed","time":{"start":1712721665887,"stop":1712721666618,"duration":731}},{"uid":"fc32fd47075a71c0","reportUrl":"https://novasamatech.github.io/test-runner/5036//#testresult/fc32fd47075a71c0","status":"passed","time":{"start":1712707302454,"stop":1712707302647,"duration":193}},{"uid":"a9ddb2daceffc3be","reportUrl":"https://novasamatech.github.io/test-runner/5035//#testresult/a9ddb2daceffc3be","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712692865807,"stop":1712692865832,"duration":25}},{"uid":"77f86af80459013b","reportUrl":"https://novasamatech.github.io/test-runner/5034//#testresult/77f86af80459013b","status":"passed","time":{"start":1712678462288,"stop":1712678463168,"duration":880}},{"uid":"9c08ceeb795eee3","reportUrl":"https://novasamatech.github.io/test-runner/5033//#testresult/9c08ceeb795eee3","status":"passed","time":{"start":1712664087798,"stop":1712664088067,"duration":269}}]},"tags":[]},"source":"f24d455a7f0328f8.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}