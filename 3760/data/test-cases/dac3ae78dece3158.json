{"uid":"dac3ae78dece3158","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1694597341015,"stop":1694597341750,"duration":735},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 13 Sep 2023 09:29:00 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 13 Sep 2023 09:29:00 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 13 Sep 2023 09:29:00 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 13 Sep 2023 09:29:00 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"bf5606f0dc4ac078","name":"stdout","source":"bf5606f0dc4ac078.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az338-812"},{"name":"thread","value":"2023-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c3e4df1ecdd6be02","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 13 Sep 2023 09:28:45 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694597325244,"stop":1694597325927,"duration":683}},{"uid":"7d212f859c85cdfe","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 13 Sep 2023 09:28:29 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694597309361,"stop":1694597310052,"duration":691}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":114,"unknown":0,"total":121},"items":[{"uid":"db4708d0e52a39b2","reportUrl":"https://novasamatech.github.io/test-runner/3759//#testresult/db4708d0e52a39b2","status":"passed","time":{"start":1694592119167,"stop":1694592119824,"duration":657}},{"uid":"27baa9a9f06da543","reportUrl":"https://novasamatech.github.io/test-runner/3758//#testresult/27baa9a9f06da543","status":"passed","time":{"start":1694577715217,"stop":1694577715840,"duration":623}},{"uid":"202575234ba264cc","reportUrl":"https://novasamatech.github.io/test-runner/3757//#testresult/202575234ba264cc","status":"passed","time":{"start":1694563364186,"stop":1694563364840,"duration":654}},{"uid":"7a0393af283387f7","reportUrl":"https://novasamatech.github.io/test-runner/3756//#testresult/7a0393af283387f7","status":"passed","time":{"start":1694548953422,"stop":1694548954346,"duration":924}},{"uid":"d233adc85dfa6910","reportUrl":"https://novasamatech.github.io/test-runner/3755//#testresult/d233adc85dfa6910","status":"passed","time":{"start":1694534527897,"stop":1694534528598,"duration":701}},{"uid":"bc73acfa0546d543","reportUrl":"https://novasamatech.github.io/test-runner/3754//#testresult/bc73acfa0546d543","status":"passed","time":{"start":1694520192232,"stop":1694520192921,"duration":689}},{"uid":"7407a9883601cbf3","reportUrl":"https://novasamatech.github.io/test-runner/3753//#testresult/7407a9883601cbf3","status":"passed","time":{"start":1694505708146,"stop":1694505709058,"duration":912}},{"uid":"c4968177c4d64527","reportUrl":"https://novasamatech.github.io/test-runner/3752//#testresult/c4968177c4d64527","status":"passed","time":{"start":1694491316049,"stop":1694491316929,"duration":880}},{"uid":"ce18daeee4276f86","reportUrl":"https://novasamatech.github.io/test-runner/3751//#testresult/ce18daeee4276f86","status":"passed","time":{"start":1694476953227,"stop":1694476954075,"duration":848}},{"uid":"5f33c3a7bb29a0ab","reportUrl":"https://novasamatech.github.io/test-runner/3750//#testresult/5f33c3a7bb29a0ab","status":"passed","time":{"start":1694462526509,"stop":1694462527027,"duration":518}},{"uid":"8c3b4e81104cebdc","reportUrl":"https://novasamatech.github.io/test-runner/3749//#testresult/8c3b4e81104cebdc","status":"passed","time":{"start":1694448131103,"stop":1694448131918,"duration":815}},{"uid":"c95dea6ed92d01e6","reportUrl":"https://novasamatech.github.io/test-runner/3748//#testresult/c95dea6ed92d01e6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 11 Sep 2023 12:02:43 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694433762600,"stop":1694433763260,"duration":660}},{"uid":"ffa20b37c3302c98","reportUrl":"https://novasamatech.github.io/test-runner/3747//#testresult/ffa20b37c3302c98","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 11 Sep 2023 08:02:43 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694419363444,"stop":1694419363851,"duration":407}},{"uid":"6f4a35a16f9b01b1","reportUrl":"https://novasamatech.github.io/test-runner/3746//#testresult/6f4a35a16f9b01b1","status":"passed","time":{"start":1694404912932,"stop":1694404913429,"duration":497}},{"uid":"dcbe6af3e185cd1f","reportUrl":"https://novasamatech.github.io/test-runner/3745//#testresult/dcbe6af3e185cd1f","status":"passed","time":{"start":1694390562356,"stop":1694390563249,"duration":893}},{"uid":"51b2bfe21c4a5e22","reportUrl":"https://novasamatech.github.io/test-runner/3744//#testresult/51b2bfe21c4a5e22","status":"passed","time":{"start":1694376131721,"stop":1694376132446,"duration":725}},{"uid":"45d051dea87f7290","reportUrl":"https://novasamatech.github.io/test-runner/3743//#testresult/45d051dea87f7290","status":"passed","time":{"start":1694361731727,"stop":1694361732575,"duration":848}},{"uid":"9b20af8321e31f50","reportUrl":"https://novasamatech.github.io/test-runner/3742//#testresult/9b20af8321e31f50","status":"passed","time":{"start":1694347322633,"stop":1694347323309,"duration":676}},{"uid":"a5aaadb2f9fce536","reportUrl":"https://novasamatech.github.io/test-runner/3741//#testresult/a5aaadb2f9fce536","status":"passed","time":{"start":1694332944076,"stop":1694332944734,"duration":658}},{"uid":"22274bbf8b592b8d","reportUrl":"https://novasamatech.github.io/test-runner/3740//#testresult/22274bbf8b592b8d","status":"passed","time":{"start":1694318505211,"stop":1694318506115,"duration":904}}]},"tags":[]},"source":"dac3ae78dece3158.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}