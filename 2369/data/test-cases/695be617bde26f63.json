{"uid":"695be617bde26f63","name":"test_can_create_connection[Test for QUARTZ, url: wss://eu-ws-quartz.unique.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a42ebcba1547e3b3e9bb87937a989684","time":{"start":1675081627754,"stop":1675081628251,"duration":497},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'QUARTZ', 'url': 'wss://eu-ws-quartz.unique.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'QUARTZ', 'url': 'wss://eu-ws-quartz.unique.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f5365328595e7a2f","name":"stdout","source":"f5365328595e7a2f.txt","type":"text/plain","size":234}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az573-89"},{"name":"thread","value":"1687-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://eu-ws-quartz.unique.network', 'name': 'QUARTZ'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ab27c105cf68f3e7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1675081617058,"stop":1675081617580,"duration":522}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":574,"unknown":0,"total":629},"items":[{"uid":"f22829702ef43275","reportUrl":"https://nova-wallet.github.io/test-runner/2368//#testresult/f22829702ef43275","status":"passed","time":{"start":1675066683723,"stop":1675066684335,"duration":612}},{"uid":"9da804bd16679bd9","reportUrl":"https://nova-wallet.github.io/test-runner/2367//#testresult/9da804bd16679bd9","status":"passed","time":{"start":1675052151231,"stop":1675052151649,"duration":418}},{"uid":"ce1a5969933dab8","reportUrl":"https://nova-wallet.github.io/test-runner/2366//#testresult/ce1a5969933dab8","status":"passed","time":{"start":1675040607424,"stop":1675040607832,"duration":408}},{"uid":"aadaca34e237c74e","reportUrl":"https://nova-wallet.github.io/test-runner/2365//#testresult/aadaca34e237c74e","status":"passed","time":{"start":1675023163118,"stop":1675023163578,"duration":460}},{"uid":"4905c41a540c3dce","reportUrl":"https://nova-wallet.github.io/test-runner/2364//#testresult/4905c41a540c3dce","status":"passed","time":{"start":1675009003308,"stop":1675009003916,"duration":608}},{"uid":"7223e800054d9604","reportUrl":"https://nova-wallet.github.io/test-runner/2363//#testresult/7223e800054d9604","status":"passed","time":{"start":1674994999882,"stop":1674995000317,"duration":435}},{"uid":"dad10229d767c8cb","reportUrl":"https://nova-wallet.github.io/test-runner/2361//#testresult/dad10229d767c8cb","status":"passed","time":{"start":1674965745221,"stop":1674965745861,"duration":640}},{"uid":"c3dfb7b5c4d3b5fa","reportUrl":"https://nova-wallet.github.io/test-runner/2360//#testresult/c3dfb7b5c4d3b5fa","status":"passed","time":{"start":1674954801406,"stop":1674954802085,"duration":679}},{"uid":"a0525e4e79bef58e","reportUrl":"https://nova-wallet.github.io/test-runner/2359//#testresult/a0525e4e79bef58e","status":"passed","time":{"start":1674936779304,"stop":1674936780002,"duration":698}},{"uid":"4a84c691d6065bce","reportUrl":"https://nova-wallet.github.io/test-runner/2358//#testresult/4a84c691d6065bce","status":"passed","time":{"start":1674922610570,"stop":1674922611578,"duration":1008}},{"uid":"b5fcca042aa00900","reportUrl":"https://nova-wallet.github.io/test-runner/2357//#testresult/b5fcca042aa00900","status":"passed","time":{"start":1674908590629,"stop":1674908591039,"duration":410}},{"uid":"66ae5dab8e2160e6","reportUrl":"https://nova-wallet.github.io/test-runner/2355//#testresult/66ae5dab8e2160e6","status":"passed","time":{"start":1674879344540,"stop":1674879345173,"duration":633}},{"uid":"dee342b7982a9eba","reportUrl":"https://nova-wallet.github.io/test-runner/2354//#testresult/dee342b7982a9eba","status":"passed","time":{"start":1674868133569,"stop":1674868134286,"duration":717}},{"uid":"66dea540a9f8152e","reportUrl":"https://nova-wallet.github.io/test-runner/2353//#testresult/66dea540a9f8152e","status":"passed","time":{"start":1674850435840,"stop":1674850436545,"duration":705}},{"uid":"882fc4282fafaa7a","reportUrl":"https://nova-wallet.github.io/test-runner/2352//#testresult/882fc4282fafaa7a","status":"passed","time":{"start":1674836289399,"stop":1674836290082,"duration":683}},{"uid":"b96e97c2e9674a96","reportUrl":"https://nova-wallet.github.io/test-runner/2351//#testresult/b96e97c2e9674a96","status":"passed","time":{"start":1674822286412,"stop":1674822287030,"duration":618}},{"uid":"48a2774e49098226","reportUrl":"https://nova-wallet.github.io/test-runner/2350//#testresult/48a2774e49098226","status":"passed","time":{"start":1674807420813,"stop":1674807421502,"duration":689}},{"uid":"82d6bee3e94ff553","reportUrl":"https://nova-wallet.github.io/test-runner/2349//#testresult/82d6bee3e94ff553","status":"passed","time":{"start":1674792992103,"stop":1674792992796,"duration":693}},{"uid":"32636772a07f4416","reportUrl":"https://nova-wallet.github.io/test-runner/2348//#testresult/32636772a07f4416","status":"passed","time":{"start":1674781769613,"stop":1674781770306,"duration":693}},{"uid":"2d0ae3069790d275","reportUrl":"https://nova-wallet.github.io/test-runner/2347//#testresult/2d0ae3069790d275","status":"passed","time":{"start":1674763452038,"stop":1674763452651,"duration":613}}]},"tags":[]},"source":"695be617bde26f63.json","parameterValues":["{'url': 'wss://eu-ws-quartz.unique.network', 'name': 'QUARTZ'}"]}