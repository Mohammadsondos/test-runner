{"uid":"782fd4cef710f1c2","name":"test_can_create_connection[Test for Acala, url: wss://acala.polkawallet.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"0e1a867151b3f97288d7a72234d50dbf","time":{"start":1691568330613,"stop":1691568331345,"duration":732},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Wed, 09 Aug 2023 08:05:31 GMT', 'content-type': 'text/html', 'content-length': '635', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- b'<html>\\n<head>\\n<meta http-equiv=\"Content-Type\" content=\"textml;charset=UTF-8\" />\\n   <style>body{background-color:#FFFFFF}</style> \\n<title>Non-compliance ICP Filing</title>\\n  <script language=\"javascript\" type=\"text/javascript\">\\n         window.onload = function () { \\n           document.getElementById(\"mainFrame\").src= \"http://batit.aliyun.com/alww.html?id=00000000003718849282\"; \\n            }\\n</script>   \\n</head>\\n  <body>\\n    <iframe style=\"width:860px; height:500px;position:absolute;margin-left:-430px;margin-top:-250px;top:50%;left:50%;\" id=\"mainFrame\" src=\"\" frameborder=\"0\" scrolling=\"no\"></iframe>\\n    </body>\\n      </html>\\n\\n'","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala.polkawallet.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Wed, 09 Aug 2023 08:05:31 GMT', 'content-type': 'text/html', 'content-length': '635', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- b'<html>\\n<head>\\n<meta http-equiv=\"Content-Type\" content=\"textml;charset=UTF-8\" />\\n   <style>body{background-color:#FFFFFF}</style> \\n<title>Non-compliance ICP Filing</title>\\n  <script language=\"javascript\" type=\"text/javascript\">\\n         window.onload = function () { \\n           document.getElementById(\"mainFrame\").src= \"http://batit.aliyun.com/alww.html?id=00000000003718849282\"; \\n            }\\n</script>   \\n</head>\\n  <body>\\n    <iframe style=\"width:860px; height:500px;position:absolute;margin-left:-430px;margin-top:-250px;top:50%;left:50%;\" id=\"mainFrame\" src=\"\" frameborder=\"0\" scrolling=\"no\"></iframe>\\n    </body>\\n      </html>\\n\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Wed, 09 Aug 2023 08:05:31 GMT', 'content-type': 'text/html', 'content-length': '635', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- b'<html>\\n<head>\\n<meta http-equiv=\"Content-Type\" content=\"textml;charset=UTF-8\" />\\n   <style>body{background-color:#FFFFFF}</style> \\n<title>Non-compliance ICP Filing</title>\\n  <script language=\"javascript\" type=\"text/javascript\">\\n         window.onload = function () { \\n           document.getElementById(\"mainFrame\").src= \"http://batit.aliyun.com/alww.html?id=00000000003718849282\"; \\n            }\\n</script>   \\n</head>\\n  <body>\\n    <iframe style=\"width:860px; height:500px;position:absolute;margin-left:-430px;margin-top:-250px;top:50%;left:50%;\" id=\"mainFrame\" src=\"\" frameborder=\"0\" scrolling=\"no\"></iframe>\\n    </body>\\n      </html>\\n\\n'","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala.polkawallet.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Wed, 09 Aug 2023 08:05:31 GMT', 'content-type': 'text/html', 'content-length': '635', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- b'<html>\\n<head>\\n<meta http-equiv=\"Content-Type\" content=\"textml;charset=UTF-8\" />\\n   <style>body{background-color:#FFFFFF}</style> \\n<title>Non-compliance ICP Filing</title>\\n  <script language=\"javascript\" type=\"text/javascript\">\\n         window.onload = function () { \\n           document.getElementById(\"mainFrame\").src= \"http://batit.aliyun.com/alww.html?id=00000000003718849282\"; \\n            }\\n</script>   \\n</head>\\n  <body>\\n    <iframe style=\"width:860px; height:500px;position:absolute;margin-left:-430px;margin-top:-250px;top:50%;left:50%;\" id=\"mainFrame\" src=\"\" frameborder=\"0\" scrolling=\"no\"></iframe>\\n    </body>\\n      </html>\\n\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"a52b261ee7cd6e50","name":"stdout","source":"a52b261ee7cd6e50.txt","type":"text/plain","size":2031}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az400-468"},{"name":"thread","value":"1949-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://acala.polkawallet.io', 'name': 'Acala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"869550c27897b210","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Wed, 09 Aug 2023 08:05:15 GMT', 'content-type': 'text/html', 'content-length': '635', 'connection': 'keep-alive', 'cache-control': 'no-cache'} -+-+- b'<html>\\n<head>\\n<meta http-equiv=\"Content-Type\" content=\"textml;charset=UTF-8\" />\\n   <style>body{background-color:#FFFFFF}</style> \\n<title>Non-compliance ICP Filing</title>\\n  <script language=\"javascript\" type=\"text/javascript\">\\n         window.onload = function () { \\n           document.getElementById(\"mainFrame\").src= \"http://batit.aliyun.com/alww.html?id=00000000003718849282\"; \\n            }\\n</script>   \\n</head>\\n  <body>\\n    <iframe style=\"width:860px; height:500px;position:absolute;margin-left:-430px;margin-top:-250px;top:50%;left:50%;\" id=\"mainFrame\" src=\"\" frameborder=\"0\" scrolling=\"no\"></iframe>\\n    </body>\\n      </html>\\n\\n'","time":{"start":1691568314791,"stop":1691568315519,"duration":728}},{"uid":"90957a1df305d5f","status":"broken","statusDetails":"websocket._exceptions.WebSocketProtocolException: rsv is not implemented, yet","time":{"start":1691568298680,"stop":1691568299545,"duration":865}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":13,"skipped":0,"passed":533,"unknown":0,"total":546},"items":[{"uid":"84f0fb804c5c3d3b","reportUrl":"https://novasamatech.github.io/test-runner/3540//#testresult/84f0fb804c5c3d3b","status":"passed","time":{"start":1691553865855,"stop":1691553867206,"duration":1351}},{"uid":"a6508371623b300c","reportUrl":"https://novasamatech.github.io/test-runner/3539//#testresult/a6508371623b300c","status":"passed","time":{"start":1691540080936,"stop":1691540082049,"duration":1113}},{"uid":"1ec5cf922a672d95","reportUrl":"https://novasamatech.github.io/test-runner/3538//#testresult/1ec5cf922a672d95","status":"passed","time":{"start":1691525061598,"stop":1691525062960,"duration":1362}},{"uid":"7ae3d7418e5129d7","reportUrl":"https://novasamatech.github.io/test-runner/3537//#testresult/7ae3d7418e5129d7","status":"passed","time":{"start":1691510660081,"stop":1691510661585,"duration":1504}},{"uid":"96f56dd694199392","reportUrl":"https://novasamatech.github.io/test-runner/3536//#testresult/96f56dd694199392","status":"passed","time":{"start":1691496298481,"stop":1691496299923,"duration":1442}},{"uid":"a4bbabc54c39fccf","reportUrl":"https://novasamatech.github.io/test-runner/3535//#testresult/a4bbabc54c39fccf","status":"passed","time":{"start":1691481871560,"stop":1691481872694,"duration":1134}},{"uid":"e2df31b638fda046","reportUrl":"https://novasamatech.github.io/test-runner/3534//#testresult/e2df31b638fda046","status":"passed","time":{"start":1691467485969,"stop":1691467487238,"duration":1269}},{"uid":"8279797708e6bfba","reportUrl":"https://novasamatech.github.io/test-runner/3533//#testresult/8279797708e6bfba","status":"passed","time":{"start":1691453669125,"stop":1691453670254,"duration":1129}},{"uid":"a0edc2d67991eaa9","reportUrl":"https://novasamatech.github.io/test-runner/3532//#testresult/a0edc2d67991eaa9","status":"passed","time":{"start":1691438656115,"stop":1691438657230,"duration":1115}},{"uid":"ceaa44409756c215","reportUrl":"https://novasamatech.github.io/test-runner/3531//#testresult/ceaa44409756c215","status":"passed","time":{"start":1691424293212,"stop":1691424294540,"duration":1328}},{"uid":"7335e383425150b4","reportUrl":"https://novasamatech.github.io/test-runner/3530//#testresult/7335e383425150b4","status":"passed","time":{"start":1691409891518,"stop":1691409892932,"duration":1414}},{"uid":"b5969bfb490c401e","reportUrl":"https://novasamatech.github.io/test-runner/3529//#testresult/b5969bfb490c401e","status":"passed","time":{"start":1691395495180,"stop":1691395496605,"duration":1425}},{"uid":"aa715463afa79e32","reportUrl":"https://novasamatech.github.io/test-runner/3528//#testresult/aa715463afa79e32","status":"passed","time":{"start":1691381045354,"stop":1691381046687,"duration":1333}},{"uid":"e9f78cd0663ee114","reportUrl":"https://novasamatech.github.io/test-runner/3527//#testresult/e9f78cd0663ee114","status":"passed","time":{"start":1691367299450,"stop":1691367300777,"duration":1327}},{"uid":"f0123f4655b6eb5c","reportUrl":"https://novasamatech.github.io/test-runner/3526//#testresult/f0123f4655b6eb5c","status":"passed","time":{"start":1691352248932,"stop":1691352250141,"duration":1209}},{"uid":"9a2898403168c8f0","reportUrl":"https://novasamatech.github.io/test-runner/3525//#testresult/9a2898403168c8f0","status":"passed","time":{"start":1691337861764,"stop":1691337862974,"duration":1210}},{"uid":"175aeaf5201464a5","reportUrl":"https://novasamatech.github.io/test-runner/3524//#testresult/175aeaf5201464a5","status":"passed","time":{"start":1691323498187,"stop":1691323499406,"duration":1219}},{"uid":"4a275eaff49602ba","reportUrl":"https://novasamatech.github.io/test-runner/3523//#testresult/4a275eaff49602ba","status":"passed","time":{"start":1691309040355,"stop":1691309041636,"duration":1281}},{"uid":"ff2ca5bf3b351286","reportUrl":"https://novasamatech.github.io/test-runner/3522//#testresult/ff2ca5bf3b351286","status":"passed","time":{"start":1691294635491,"stop":1691294636953,"duration":1462}},{"uid":"e01e4ede91dfbf4d","reportUrl":"https://novasamatech.github.io/test-runner/3521//#testresult/e01e4ede91dfbf4d","status":"passed","time":{"start":1691280856556,"stop":1691280857767,"duration":1211}}]},"tags":[]},"source":"782fd4cef710f1c2.json","parameterValues":["{'url': 'wss://acala.polkawallet.io', 'name': 'Acala'}"]}