{"uid":"a38fe52326082352","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1712232079688,"stop":1712232079738,"duration":50},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f691888d720>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f691867c5b0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f691867d8d0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az661-866"},{"name":"thread","value":"2105-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c59bf55b1c645792","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712232074583,"stop":1712232074652,"duration":69}},{"uid":"235e91f25264d5c7","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1712232069244,"stop":1712232069476,"duration":232}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":49,"skipped":0,"passed":1027,"unknown":0,"total":1079},"items":[{"uid":"74d44b49a13186d4","reportUrl":"https://novasamatech.github.io/test-runner/5002//#testresult/74d44b49a13186d4","status":"passed","time":{"start":1712217675021,"stop":1712217675596,"duration":575}},{"uid":"37a12929363c3bfd","reportUrl":"https://novasamatech.github.io/test-runner/5001//#testresult/37a12929363c3bfd","status":"passed","time":{"start":1712203270000,"stop":1712203270639,"duration":639}},{"uid":"1d00d4df0bd14e5f","reportUrl":"https://novasamatech.github.io/test-runner/5000//#testresult/1d00d4df0bd14e5f","status":"passed","time":{"start":1712188906677,"stop":1712188907027,"duration":350}},{"uid":"eb0300a076a5cd39","reportUrl":"https://novasamatech.github.io/test-runner/4999//#testresult/eb0300a076a5cd39","status":"passed","time":{"start":1712174460166,"stop":1712174460581,"duration":415}},{"uid":"aeaeb72d3c7b1cc","reportUrl":"https://novasamatech.github.io/test-runner/4998//#testresult/aeaeb72d3c7b1cc","status":"passed","time":{"start":1712160071698,"stop":1712160072337,"duration":639}},{"uid":"75e0f1e29bda39cb","reportUrl":"https://novasamatech.github.io/test-runner/4997//#testresult/75e0f1e29bda39cb","status":"passed","time":{"start":1712145660994,"stop":1712145661656,"duration":662}},{"uid":"f955f521276bae5b","reportUrl":"https://novasamatech.github.io/test-runner/4996//#testresult/f955f521276bae5b","status":"passed","time":{"start":1712131273480,"stop":1712131273799,"duration":319}},{"uid":"fca0a62cd2bff39c","reportUrl":"https://novasamatech.github.io/test-runner/4995//#testresult/fca0a62cd2bff39c","status":"passed","time":{"start":1712116863392,"stop":1712116863974,"duration":582}},{"uid":"fa50da0966939d5a","reportUrl":"https://novasamatech.github.io/test-runner/4994//#testresult/fa50da0966939d5a","status":"passed","time":{"start":1712102504198,"stop":1712102504436,"duration":238}},{"uid":"fc3234c125650a7d","reportUrl":"https://novasamatech.github.io/test-runner/4993//#testresult/fc3234c125650a7d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712088085688,"stop":1712088085994,"duration":306}},{"uid":"ab80302018564720","reportUrl":"https://novasamatech.github.io/test-runner/4992//#testresult/ab80302018564720","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712073672862,"stop":1712073673024,"duration":162}},{"uid":"28cd58e9dc9fd457","reportUrl":"https://novasamatech.github.io/test-runner/4991//#testresult/28cd58e9dc9fd457","status":"passed","time":{"start":1712059269877,"stop":1712059270175,"duration":298}},{"uid":"592368873e59fb51","reportUrl":"https://novasamatech.github.io/test-runner/4990//#testresult/592368873e59fb51","status":"passed","time":{"start":1712048231544,"stop":1712048231930,"duration":386}},{"uid":"a96840e46f6ba33c","reportUrl":"https://novasamatech.github.io/test-runner/4954//#testresult/a96840e46f6ba33c","status":"passed","time":{"start":1711540871325,"stop":1711540871856,"duration":531}},{"uid":"dac59cc24de08261","reportUrl":"https://novasamatech.github.io/test-runner/4953//#testresult/dac59cc24de08261","status":"passed","time":{"start":1711526459544,"stop":1711526459780,"duration":236}},{"uid":"95f07ce4a9c355dc","reportUrl":"https://novasamatech.github.io/test-runner/4952//#testresult/95f07ce4a9c355dc","status":"passed","time":{"start":1711512061651,"stop":1711512062324,"duration":673}},{"uid":"538598314979b226","reportUrl":"https://novasamatech.github.io/test-runner/4951//#testresult/538598314979b226","status":"passed","time":{"start":1711497696750,"stop":1711497696999,"duration":249}},{"uid":"dbb4690dd6a521f9","reportUrl":"https://novasamatech.github.io/test-runner/4950//#testresult/dbb4690dd6a521f9","status":"passed","time":{"start":1711483266686,"stop":1711483267063,"duration":377}},{"uid":"4246887eda984a6b","reportUrl":"https://novasamatech.github.io/test-runner/4949//#testresult/4246887eda984a6b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711468869439,"stop":1711468869816,"duration":377}},{"uid":"29e5b8e5bb46640e","reportUrl":"https://novasamatech.github.io/test-runner/4948//#testresult/29e5b8e5bb46640e","status":"passed","time":{"start":1711454468653,"stop":1711454469032,"duration":379}}]},"tags":[]},"source":"a38fe52326082352.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}