{"uid":"4b088f0518c28b1c","name":"test_can_create_connection[Test for Kylin, url: wss://polkadot.kylin-node.co.uk]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3ee0d191ab7acb2fad9a82a3aa808e89","time":{"start":1698220942510,"stop":1698220942716,"duration":206},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Wed, 25 Oct 2023 08:02:22 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Wed, 25 Oct 2023 08:02:22 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Wed, 25 Oct 2023 08:02:22 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Wed, 25 Oct 2023 08:02:22 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"df08b6d448697e9b","name":"stdout","source":"df08b6d448697e9b.txt","type":"text/plain","size":1500}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az587-494"},{"name":"thread","value":"2091-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"dd605de6490b2f1f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Wed, 25 Oct 2023 08:02:07 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698220927148,"stop":1698220927334,"duration":186}},{"uid":"5f17bf7c26cca6ea","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Wed, 25 Oct 2023 08:01:51 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698220911761,"stop":1698220911948,"duration":187}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":34,"skipped":0,"passed":340,"unknown":0,"total":374},"items":[{"uid":"4bfb9dfb12d6e895","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/4bfb9dfb12d6e895","status":"passed","time":{"start":1698206498968,"stop":1698206499137,"duration":169}},{"uid":"9317840e14b12728","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/9317840e14b12728","status":"passed","time":{"start":1698192149894,"stop":1698192150261,"duration":367}},{"uid":"d101abc34e16158a","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/d101abc34e16158a","status":"passed","time":{"start":1698177697728,"stop":1698177698061,"duration":333}},{"uid":"6f98dd7e5f9256ad","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/6f98dd7e5f9256ad","status":"passed","time":{"start":1698163340577,"stop":1698163340671,"duration":94}},{"uid":"696773f3ef8473ed","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/696773f3ef8473ed","status":"passed","time":{"start":1698148919281,"stop":1698148919344,"duration":63}},{"uid":"751d0ffff47da84","reportUrl":"https://novasamatech.github.io/test-runner/4007//#testresult/751d0ffff47da84","status":"passed","time":{"start":1698120103835,"stop":1698120103909,"duration":74}},{"uid":"793e2871653f8b51","reportUrl":"https://novasamatech.github.io/test-runner/4008//#testresult/793e2871653f8b51","status":"passed","time":{"start":1698134503804,"stop":1698134503938,"duration":134}},{"uid":"afc93b2e630f24ae","reportUrl":"https://novasamatech.github.io/test-runner/4006//#testresult/afc93b2e630f24ae","status":"passed","time":{"start":1698105756383,"stop":1698105756770,"duration":387}},{"uid":"63f142336b0529d1","reportUrl":"https://novasamatech.github.io/test-runner/4005//#testresult/63f142336b0529d1","status":"passed","time":{"start":1698091303963,"stop":1698091304227,"duration":264}},{"uid":"c00bbd581050087e","reportUrl":"https://novasamatech.github.io/test-runner/4004//#testresult/c00bbd581050087e","status":"passed","time":{"start":1698076913840,"stop":1698076913939,"duration":99}},{"uid":"773bfb6802084aba","reportUrl":"https://novasamatech.github.io/test-runner/4003//#testresult/773bfb6802084aba","status":"passed","time":{"start":1698062503256,"stop":1698062503361,"duration":105}},{"uid":"4127fc11d0cea425","reportUrl":"https://novasamatech.github.io/test-runner/4002//#testresult/4127fc11d0cea425","status":"passed","time":{"start":1698048103399,"stop":1698048103489,"duration":90}},{"uid":"b1917a355248fbc4","reportUrl":"https://novasamatech.github.io/test-runner/4001//#testresult/b1917a355248fbc4","status":"passed","time":{"start":1698033706335,"stop":1698033706589,"duration":254}},{"uid":"c0d2adb1d64e3c9c","reportUrl":"https://novasamatech.github.io/test-runner/4000//#testresult/c0d2adb1d64e3c9c","status":"passed","time":{"start":1698019334892,"stop":1698019334987,"duration":95}},{"uid":"64f7cc5716c2f04","reportUrl":"https://novasamatech.github.io/test-runner/3999//#testresult/64f7cc5716c2f04","status":"passed","time":{"start":1698004896720,"stop":1698004896970,"duration":250}},{"uid":"59e8570144bd22a3","reportUrl":"https://novasamatech.github.io/test-runner/3998//#testresult/59e8570144bd22a3","status":"passed","time":{"start":1697990508265,"stop":1697990508507,"duration":242}},{"uid":"1b4d5ad4727e27ab","reportUrl":"https://novasamatech.github.io/test-runner/3997//#testresult/1b4d5ad4727e27ab","status":"passed","time":{"start":1697976098322,"stop":1697976098566,"duration":244}},{"uid":"c6cd9148bc523bbe","reportUrl":"https://novasamatech.github.io/test-runner/3996//#testresult/c6cd9148bc523bbe","status":"passed","time":{"start":1697961706500,"stop":1697961706902,"duration":402}},{"uid":"35dca948fc6cb72f","reportUrl":"https://novasamatech.github.io/test-runner/3995//#testresult/35dca948fc6cb72f","status":"passed","time":{"start":1697947292078,"stop":1697947292165,"duration":87}},{"uid":"7d9f7445f6c81420","reportUrl":"https://novasamatech.github.io/test-runner/3994//#testresult/7d9f7445f6c81420","status":"passed","time":{"start":1697932960018,"stop":1697932960413,"duration":395}}]},"tags":[]},"source":"4b088f0518c28b1c.json","parameterValues":["{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"]}