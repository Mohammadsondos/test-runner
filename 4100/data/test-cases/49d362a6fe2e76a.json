{"uid":"49d362a6fe2e76a","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1699459319118,"stop":1699459319504,"duration":386},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 08 Nov 2023 16:01:59 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 08 Nov 2023 16:01:59 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 08 Nov 2023 16:01:59 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 08 Nov 2023 16:01:59 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"53828d7d5e441864","name":"stdout","source":"53828d7d5e441864.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az413-705"},{"name":"thread","value":"2095-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7cfaa0601605e304","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 08 Nov 2023 16:01:43 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699459303657,"stop":1699459304027,"duration":370}},{"uid":"9a1bcd429a6ce44b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 08 Nov 2023 16:01:27 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699459288109,"stop":1699459288501,"duration":392}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":21,"skipped":0,"passed":434,"unknown":0,"total":455},"items":[{"uid":"39f91958e397042f","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/39f91958e397042f","status":"passed","time":{"start":1699444893103,"stop":1699444893919,"duration":816}},{"uid":"19e3b5ef9bd83c62","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/19e3b5ef9bd83c62","status":"passed","time":{"start":1699430493028,"stop":1699430493908,"duration":880}},{"uid":"73c83fa36f2e63c","reportUrl":"https://novasamatech.github.io/test-runner/4097//#testresult/73c83fa36f2e63c","status":"passed","time":{"start":1699416107803,"stop":1699416108886,"duration":1083}},{"uid":"65898ea19f1547f1","reportUrl":"https://novasamatech.github.io/test-runner/4096//#testresult/65898ea19f1547f1","status":"passed","time":{"start":1699401727509,"stop":1699401728307,"duration":798}},{"uid":"2a9959042189cd09","reportUrl":"https://novasamatech.github.io/test-runner/4095//#testresult/2a9959042189cd09","status":"passed","time":{"start":1699387284386,"stop":1699387285084,"duration":698}},{"uid":"a35b7c6993067f02","reportUrl":"https://novasamatech.github.io/test-runner/4094//#testresult/a35b7c6993067f02","status":"passed","time":{"start":1699372884109,"stop":1699372884879,"duration":770}},{"uid":"841c8994fcba57a3","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/841c8994fcba57a3","status":"passed","time":{"start":1699358489049,"stop":1699358489825,"duration":776}},{"uid":"347f121aee08b7b6","reportUrl":"https://novasamatech.github.io/test-runner/4092//#testresult/347f121aee08b7b6","status":"passed","time":{"start":1699344086426,"stop":1699344087194,"duration":768}},{"uid":"6ccad9f9d62af05c","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/6ccad9f9d62af05c","status":"passed","time":{"start":1699329695821,"stop":1699329696472,"duration":651}},{"uid":"9e8bcab40ad8e53e","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/9e8bcab40ad8e53e","status":"passed","time":{"start":1699315333411,"stop":1699315334039,"duration":628}},{"uid":"93758ef8641890d7","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/93758ef8641890d7","status":"passed","time":{"start":1699300884899,"stop":1699300885770,"duration":871}},{"uid":"f3b7544539fe6199","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/f3b7544539fe6199","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 06 Nov 2023 16:02:03 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699286523666,"stop":1699286524073,"duration":407}},{"uid":"68f59041756db0e","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/68f59041756db0e","status":"passed","time":{"start":1699272107927,"stop":1699272108525,"duration":598}},{"uid":"cfe7133fece8664e","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/cfe7133fece8664e","status":"passed","time":{"start":1699257713906,"stop":1699257714750,"duration":844}},{"uid":"93e6d0ca60abf2a9","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/93e6d0ca60abf2a9","status":"passed","time":{"start":1699243297727,"stop":1699243298386,"duration":659}},{"uid":"7cef23fee5e341f5","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/7cef23fee5e341f5","status":"passed","time":{"start":1699228926169,"stop":1699228926845,"duration":676}},{"uid":"d5ad7d2b6c2b8a11","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/d5ad7d2b6c2b8a11","status":"passed","time":{"start":1699214491853,"stop":1699214492750,"duration":897}},{"uid":"76022904427bb287","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/76022904427bb287","status":"passed","time":{"start":1699200084017,"stop":1699200084917,"duration":900}},{"uid":"32774e14cd42362f","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/32774e14cd42362f","status":"passed","time":{"start":1699185680293,"stop":1699185681201,"duration":908}},{"uid":"d1bfda3cc629438f","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/d1bfda3cc629438f","status":"passed","time":{"start":1699171280457,"stop":1699171281414,"duration":957}}]},"tags":[]},"source":"49d362a6fe2e76a.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}