{"uid":"eb24d23d8da42e36","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1710446470957,"stop":1710446471019,"duration":62},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x77c659089390>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x77c658e82c20>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x77c658e82e90>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1501-503"},{"name":"thread","value":"2061-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c80855e964c28d00","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710446465876,"stop":1710446465922,"duration":46}},{"uid":"f11f2546607c0ce0","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710446460568,"stop":1710446460756,"duration":188}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":32,"skipped":0,"passed":955,"unknown":0,"total":988},"items":[{"uid":"4811ed8905aad452","reportUrl":"https://novasamatech.github.io/test-runner/4876//#testresult/4811ed8905aad452","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710432079021,"stop":1710432079064,"duration":43}},{"uid":"d09086f0b0e59f35","reportUrl":"https://novasamatech.github.io/test-runner/4875//#testresult/d09086f0b0e59f35","status":"passed","time":{"start":1710417691151,"stop":1710417691315,"duration":164}},{"uid":"e43adf5ebc1bc610","reportUrl":"https://novasamatech.github.io/test-runner/4874//#testresult/e43adf5ebc1bc610","status":"passed","time":{"start":1710403264289,"stop":1710403265173,"duration":884}},{"uid":"bf8479715c6a3969","reportUrl":"https://novasamatech.github.io/test-runner/4873//#testresult/bf8479715c6a3969","status":"passed","time":{"start":1710388865342,"stop":1710388865850,"duration":508}},{"uid":"7b2d2f125bf67629","reportUrl":"https://novasamatech.github.io/test-runner/4872//#testresult/7b2d2f125bf67629","status":"passed","time":{"start":1710374513483,"stop":1710374514300,"duration":817}},{"uid":"2d66b00ce3df62bb","reportUrl":"https://novasamatech.github.io/test-runner/4871//#testresult/2d66b00ce3df62bb","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710360069507,"stop":1710360069667,"duration":160}},{"uid":"651cadbccaa45779","reportUrl":"https://novasamatech.github.io/test-runner/4870//#testresult/651cadbccaa45779","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710345681521,"stop":1710345681566,"duration":45}},{"uid":"61fae81eab0d05bc","reportUrl":"https://novasamatech.github.io/test-runner/4869//#testresult/61fae81eab0d05bc","status":"passed","time":{"start":1710331273839,"stop":1710331274141,"duration":302}},{"uid":"e81395ee02a43bb8","reportUrl":"https://novasamatech.github.io/test-runner/4868//#testresult/e81395ee02a43bb8","status":"passed","time":{"start":1710316866265,"stop":1710316866639,"duration":374}},{"uid":"784e90f175ae624","reportUrl":"https://novasamatech.github.io/test-runner/4867//#testresult/784e90f175ae624","status":"passed","time":{"start":1710302460886,"stop":1710302461093,"duration":207}},{"uid":"86fc2d4c5fc3a2f4","reportUrl":"https://novasamatech.github.io/test-runner/4866//#testresult/86fc2d4c5fc3a2f4","status":"passed","time":{"start":1710288109308,"stop":1710288109543,"duration":235}},{"uid":"6fe775de6639ea58","reportUrl":"https://novasamatech.github.io/test-runner/4865//#testresult/6fe775de6639ea58","status":"passed","time":{"start":1710273676762,"stop":1710273677072,"duration":310}},{"uid":"dfac0a68aef4b809","reportUrl":"https://novasamatech.github.io/test-runner/4864//#testresult/dfac0a68aef4b809","status":"passed","time":{"start":1710259263879,"stop":1710259264302,"duration":423}},{"uid":"272638856ce18eee","reportUrl":"https://novasamatech.github.io/test-runner/4863//#testresult/272638856ce18eee","status":"passed","time":{"start":1710244871894,"stop":1710244872108,"duration":214}},{"uid":"d2dab9b71f476709","reportUrl":"https://novasamatech.github.io/test-runner/4862//#testresult/d2dab9b71f476709","status":"passed","time":{"start":1710230461933,"stop":1710230462573,"duration":640}},{"uid":"f70b373d41c1e8f0","reportUrl":"https://novasamatech.github.io/test-runner/4861//#testresult/f70b373d41c1e8f0","status":"passed","time":{"start":1710216066389,"stop":1710216067456,"duration":1067}},{"uid":"2627108f18442a65","reportUrl":"https://novasamatech.github.io/test-runner/4860//#testresult/2627108f18442a65","status":"passed","time":{"start":1710201699668,"stop":1710201700355,"duration":687}},{"uid":"6b0101d3086f893f","reportUrl":"https://novasamatech.github.io/test-runner/4859//#testresult/6b0101d3086f893f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187268481,"stop":1710187268514,"duration":33}},{"uid":"4871d45e450e915f","reportUrl":"https://novasamatech.github.io/test-runner/4858//#testresult/4871d45e450e915f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710172878816,"stop":1710172878867,"duration":51}},{"uid":"1324f231f74c6744","reportUrl":"https://novasamatech.github.io/test-runner/4856//#testresult/1324f231f74c6744","status":"passed","time":{"start":1710144069484,"stop":1710144070128,"duration":644}}]},"tags":[]},"source":"eb24d23d8da42e36.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}