{"uid":"27fef2ac061d7b36","name":"test_can_create_connection[Test for Karura, url: wss://karura-rpc-1.aca-api.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1e9e7a74f12b7ce492708745e5aab6c0","time":{"start":1666167059521,"stop":1666167059570,"duration":49},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'karura-rpc-1.aca-api.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f22d0036190>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.8/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'karura-rpc-1.aca-api.network', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.8/socket.py:918: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Karura', 'url': 'wss://karura-rpc-1.aca-api.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/create_type_file.py:231: in create_connection_by_url\n    substrate = SubstrateInterface(url=url, use_remote_preset=True)\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:550: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:588: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:605: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:246: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.8/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'karura-rpc-1.aca-api.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f22d0036190>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.8/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az259-11"},{"name":"thread","value":"1813-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://karura-rpc-1.aca-api.network', 'name': 'Karura'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"72a2a65142b3a36f","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1666167049261,"stop":1666167049380,"duration":119}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":58,"unknown":0,"total":61},"items":[{"uid":"68c059c618ef2c96","reportUrl":"https://nova-wallet.github.io/test-runner/1738//#testresult/68c059c618ef2c96","status":"passed","time":{"start":1666154343418,"stop":1666154343870,"duration":452}},{"uid":"40e498ce2b42d4","reportUrl":"https://nova-wallet.github.io/test-runner/1737//#testresult/40e498ce2b42d4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1666138894818,"stop":1666138897590,"duration":2772}},{"uid":"896857b8db3df3b","reportUrl":"https://nova-wallet.github.io/test-runner/1736//#testresult/896857b8db3df3b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1666123468301,"stop":1666123470466,"duration":2165}},{"uid":"2d48aa2668a92c1b","reportUrl":"https://nova-wallet.github.io/test-runner/1735//#testresult/2d48aa2668a92c1b","status":"passed","time":{"start":1666109272413,"stop":1666109272903,"duration":490}},{"uid":"6e3fb7667a6dcbdf","reportUrl":"https://nova-wallet.github.io/test-runner/1734//#testresult/6e3fb7667a6dcbdf","status":"passed","time":{"start":1666094759593,"stop":1666094759965,"duration":372}},{"uid":"128e16e186875d5d","reportUrl":"https://nova-wallet.github.io/test-runner/1733//#testresult/128e16e186875d5d","status":"passed","time":{"start":1666080474547,"stop":1666080474905,"duration":358}},{"uid":"e72aa78928f1447d","reportUrl":"https://nova-wallet.github.io/test-runner/1732//#testresult/e72aa78928f1447d","status":"passed","time":{"start":1666067906922,"stop":1666067908373,"duration":1451}},{"uid":"766445506c25e1d1","reportUrl":"https://nova-wallet.github.io/test-runner/1731//#testresult/766445506c25e1d1","status":"passed","time":{"start":1666052501338,"stop":1666052501659,"duration":321}},{"uid":"8d349da4a0c205ce","reportUrl":"https://nova-wallet.github.io/test-runner/1730//#testresult/8d349da4a0c205ce","status":"passed","time":{"start":1666037061479,"stop":1666037062098,"duration":619}},{"uid":"74ceb3fea2266ed3","reportUrl":"https://nova-wallet.github.io/test-runner/1729//#testresult/74ceb3fea2266ed3","status":"passed","time":{"start":1666022920019,"stop":1666022920425,"duration":406}},{"uid":"3fe31b3dd17a7047","reportUrl":"https://nova-wallet.github.io/test-runner/1728//#testresult/3fe31b3dd17a7047","status":"passed","time":{"start":1666008381334,"stop":1666008381943,"duration":609}},{"uid":"691b9f6084194f26","reportUrl":"https://nova-wallet.github.io/test-runner/1727//#testresult/691b9f6084194f26","status":"passed","time":{"start":1665994348271,"stop":1665994348590,"duration":319}},{"uid":"b800355d98d08348","reportUrl":"https://nova-wallet.github.io/test-runner/1726//#testresult/b800355d98d08348","status":"passed","time":{"start":1665981897146,"stop":1665981897505,"duration":359}},{"uid":"772fef60546a53a6","reportUrl":"https://nova-wallet.github.io/test-runner/1725//#testresult/772fef60546a53a6","status":"passed","time":{"start":1665966095759,"stop":1665966096114,"duration":355}},{"uid":"c348f2ae75d0b908","reportUrl":"https://nova-wallet.github.io/test-runner/1724//#testresult/c348f2ae75d0b908","status":"passed","time":{"start":1665950648533,"stop":1665950649181,"duration":648}},{"uid":"805f9cf6afc1930a","reportUrl":"https://nova-wallet.github.io/test-runner/1723//#testresult/805f9cf6afc1930a","status":"passed","time":{"start":1665936283355,"stop":1665936283968,"duration":613}},{"uid":"4f427f6ec45ebbc2","reportUrl":"https://nova-wallet.github.io/test-runner/1722//#testresult/4f427f6ec45ebbc2","status":"passed","time":{"start":1665921930639,"stop":1665921930961,"duration":322}},{"uid":"de691e1394bd22b","reportUrl":"https://nova-wallet.github.io/test-runner/1721//#testresult/de691e1394bd22b","status":"passed","time":{"start":1665907498773,"stop":1665907499503,"duration":730}},{"uid":"a0596bba6d261110","reportUrl":"https://nova-wallet.github.io/test-runner/1720//#testresult/a0596bba6d261110","status":"passed","time":{"start":1665894729080,"stop":1665894729706,"duration":626}},{"uid":"66dbd9a9ed05f64","reportUrl":"https://nova-wallet.github.io/test-runner/1719//#testresult/66dbd9a9ed05f64","status":"passed","time":{"start":1665879708350,"stop":1665879708707,"duration":357}}]},"tags":[]},"source":"27fef2ac061d7b36.json","parameterValues":["{'url': 'wss://karura-rpc-1.aca-api.network', 'name': 'Karura'}"]}