{"uid":"38b9798c7044f177","name":"test_address_prefix[Test for Karura]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"bdc275591070a0f0c0a5ac4c6c84d691","time":{"start":1694952128774,"stop":1694952133281,"duration":4507},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f394a1a6590>\nchain = <scripts.utils.chain_model.Chain object at 0x7f394a092b60>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f3949fd3880>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x6a986a23808f65b0e4b9d221f0d7701aa873bc8900b14e5e260f1183b1de4841']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f394a1a6590>\nchain = <scripts.utils.chain_model.Chain object at 0x7f394a092b60>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f3949fd3880>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x6a986a23808f65b0e4b9d221f0d7701aa873bc8900b14e5e260f1183b1de4841']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"24d856017460727c","name":"stdout","source":"24d856017460727c.txt","type":"text/plain","size":2352}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az614-767"},{"name":"thread","value":"2054-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f394a092b60>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2c70992e69a38af9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1694952108984,"stop":1694952113605,"duration":4621}},{"uid":"3445f7ea23e7dca5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1694952089138,"stop":1694952093691,"duration":4553}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":145,"unknown":0,"total":146},"items":[{"uid":"aebe92e7c122d056","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/aebe92e7c122d056","status":"passed","time":{"start":1694937689038,"stop":1694937698014,"duration":8976}},{"uid":"e42eb22986d4104","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/e42eb22986d4104","status":"passed","time":{"start":1694923275839,"stop":1694923283684,"duration":7845}},{"uid":"acf52f4186710ba9","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/acf52f4186710ba9","status":"passed","time":{"start":1694908943338,"stop":1694908952613,"duration":9275}},{"uid":"80d384f43e49e45e","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/80d384f43e49e45e","status":"passed","time":{"start":1694894483705,"stop":1694894492037,"duration":8332}},{"uid":"206d88fa610f7947","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/206d88fa610f7947","status":"passed","time":{"start":1694880074096,"stop":1694880081695,"duration":7599}},{"uid":"be5c49a351579239","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/be5c49a351579239","status":"passed","time":{"start":1694865675068,"stop":1694865682383,"duration":7315}},{"uid":"1fd6f5c2f2b8c847","reportUrl":"https://novasamatech.github.io/test-runner/3778//#testresult/1fd6f5c2f2b8c847","status":"passed","time":{"start":1694851276507,"stop":1694851283108,"duration":6601}},{"uid":"fb3ae1ab640fcd26","reportUrl":"https://novasamatech.github.io/test-runner/3777//#testresult/fb3ae1ab640fcd26","status":"passed","time":{"start":1694836876444,"stop":1694836883491,"duration":7047}},{"uid":"4db28eca95e42","reportUrl":"https://novasamatech.github.io/test-runner/3776//#testresult/4db28eca95e42","status":"passed","time":{"start":1694822515787,"stop":1694822523040,"duration":7253}},{"uid":"364704fcfb231f0e","reportUrl":"https://novasamatech.github.io/test-runner/3775//#testresult/364704fcfb231f0e","status":"passed","time":{"start":1694808083973,"stop":1694808091048,"duration":7075}},{"uid":"89eb753e1c06c728","reportUrl":"https://novasamatech.github.io/test-runner/3774//#testresult/89eb753e1c06c728","status":"passed","time":{"start":1694793719698,"stop":1694793727961,"duration":8263}},{"uid":"bfd730075e2f92e6","reportUrl":"https://novasamatech.github.io/test-runner/3773//#testresult/bfd730075e2f92e6","status":"passed","time":{"start":1694779279437,"stop":1694779286628,"duration":7191}},{"uid":"669963a9122b543","reportUrl":"https://novasamatech.github.io/test-runner/3772//#testresult/669963a9122b543","status":"passed","time":{"start":1694764882844,"stop":1694764890098,"duration":7254}},{"uid":"91280eda396109bf","reportUrl":"https://novasamatech.github.io/test-runner/3771//#testresult/91280eda396109bf","status":"passed","time":{"start":1694750478212,"stop":1694750485310,"duration":7098}},{"uid":"e8778219bc818e69","reportUrl":"https://novasamatech.github.io/test-runner/3770//#testresult/e8778219bc818e69","status":"passed","time":{"start":1694736138397,"stop":1694736146943,"duration":8546}},{"uid":"6a4bc859ba211129","reportUrl":"https://novasamatech.github.io/test-runner/3769//#testresult/6a4bc859ba211129","status":"passed","time":{"start":1694721681659,"stop":1694721690027,"duration":8368}},{"uid":"51faa0ee54093706","reportUrl":"https://novasamatech.github.io/test-runner/3768//#testresult/51faa0ee54093706","status":"passed","time":{"start":1694707277146,"stop":1694707283931,"duration":6785}},{"uid":"e0eb4a8cdf07aa95","reportUrl":"https://novasamatech.github.io/test-runner/3767//#testresult/e0eb4a8cdf07aa95","status":"passed","time":{"start":1694692884262,"stop":1694692891235,"duration":6973}},{"uid":"e4858ec9fffafaec","reportUrl":"https://novasamatech.github.io/test-runner/3766//#testresult/e4858ec9fffafaec","status":"passed","time":{"start":1694678484410,"stop":1694678492130,"duration":7720}},{"uid":"aade12602ecf8490","reportUrl":"https://novasamatech.github.io/test-runner/3765//#testresult/aade12602ecf8490","status":"passed","time":{"start":1694664074351,"stop":1694664081817,"duration":7466}}]},"tags":[]},"source":"38b9798c7044f177.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f394a092b60>"]}