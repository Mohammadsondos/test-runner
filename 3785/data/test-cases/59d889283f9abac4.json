{"uid":"59d889283f9abac4","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1694952158578,"stop":1694952158854,"duration":276},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 17 Sep 2023 12:02:38 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 17 Sep 2023 12:02:38 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 17 Sep 2023 12:02:38 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 17 Sep 2023 12:02:38 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"458f1ef39ffc1d9","name":"stdout","source":"458f1ef39ffc1d9.txt","type":"text/plain","size":814}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az360-965"},{"name":"thread","value":"2056-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ce54c55994027dc0","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1694952143243,"stop":1694952143425,"duration":182}},{"uid":"6c7ff50dcd8e0534","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1694952127805,"stop":1694952128105,"duration":300}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":14,"skipped":0,"passed":132,"unknown":0,"total":146},"items":[{"uid":"2ed990b8361ac48b","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/2ed990b8361ac48b","status":"passed","time":{"start":1694937751835,"stop":1694937752464,"duration":629}},{"uid":"bac7c7b7c2ac28c6","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/bac7c7b7c2ac28c6","status":"passed","time":{"start":1694923325171,"stop":1694923325738,"duration":567}},{"uid":"c31c73532f96f463","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/c31c73532f96f463","status":"passed","time":{"start":1694908988383,"stop":1694908989037,"duration":654}},{"uid":"a4da8c96c9a088f4","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/a4da8c96c9a088f4","status":"passed","time":{"start":1694894528613,"stop":1694894529356,"duration":743}},{"uid":"7661633170b36831","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/7661633170b36831","status":"passed","time":{"start":1694880129875,"stop":1694880130248,"duration":373}},{"uid":"87d50cab6e6b61ff","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/87d50cab6e6b61ff","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1694865810641,"stop":1694865810961,"duration":320}},{"uid":"8552f30d2aca9044","reportUrl":"https://novasamatech.github.io/test-runner/3778//#testresult/8552f30d2aca9044","status":"passed","time":{"start":1694851350835,"stop":1694851351218,"duration":383}},{"uid":"2e8cbecf82eafcd6","reportUrl":"https://novasamatech.github.io/test-runner/3777//#testresult/2e8cbecf82eafcd6","status":"passed","time":{"start":1694836931008,"stop":1694836931606,"duration":598}},{"uid":"77842018ae72df17","reportUrl":"https://novasamatech.github.io/test-runner/3776//#testresult/77842018ae72df17","status":"passed","time":{"start":1694822575760,"stop":1694822576413,"duration":653}},{"uid":"595585491f6dd52e","reportUrl":"https://novasamatech.github.io/test-runner/3775//#testresult/595585491f6dd52e","status":"passed","time":{"start":1694808155437,"stop":1694808155944,"duration":507}},{"uid":"2e08d2e4c1243a43","reportUrl":"https://novasamatech.github.io/test-runner/3774//#testresult/2e08d2e4c1243a43","status":"passed","time":{"start":1694793736585,"stop":1694793737079,"duration":494}},{"uid":"8be1f1372754fa7c","reportUrl":"https://novasamatech.github.io/test-runner/3773//#testresult/8be1f1372754fa7c","status":"passed","time":{"start":1694779342541,"stop":1694779343046,"duration":505}},{"uid":"b5e43c110ce0a35f","reportUrl":"https://novasamatech.github.io/test-runner/3772//#testresult/b5e43c110ce0a35f","status":"passed","time":{"start":1694764936804,"stop":1694764937487,"duration":683}},{"uid":"a870a2c0e2be723c","reportUrl":"https://novasamatech.github.io/test-runner/3771//#testresult/a870a2c0e2be723c","status":"passed","time":{"start":1694750534438,"stop":1694750535262,"duration":824}},{"uid":"ab1fc14ad8b30fc0","reportUrl":"https://novasamatech.github.io/test-runner/3770//#testresult/ab1fc14ad8b30fc0","status":"passed","time":{"start":1694736158510,"stop":1694736159077,"duration":567}},{"uid":"20d397fcc18f194d","reportUrl":"https://novasamatech.github.io/test-runner/3769//#testresult/20d397fcc18f194d","status":"passed","time":{"start":1694721726852,"stop":1694721727554,"duration":702}},{"uid":"10f0e67817f80d76","reportUrl":"https://novasamatech.github.io/test-runner/3768//#testresult/10f0e67817f80d76","status":"passed","time":{"start":1694707321295,"stop":1694707321691,"duration":396}},{"uid":"6367ce550498518d","reportUrl":"https://novasamatech.github.io/test-runner/3767//#testresult/6367ce550498518d","status":"passed","time":{"start":1694692940154,"stop":1694692940538,"duration":384}},{"uid":"46bbeecd9b014b88","reportUrl":"https://novasamatech.github.io/test-runner/3766//#testresult/46bbeecd9b014b88","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 14 Sep 2023 08:02:19 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694678539617,"stop":1694678539905,"duration":288}},{"uid":"43a85b018d1136ce","reportUrl":"https://novasamatech.github.io/test-runner/3765//#testresult/43a85b018d1136ce","status":"passed","time":{"start":1694664107775,"stop":1694664108187,"duration":412}}]},"tags":[]},"source":"59d889283f9abac4.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}