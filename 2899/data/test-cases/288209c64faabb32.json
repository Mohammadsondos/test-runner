{"uid":"288209c64faabb32","name":"test_can_create_connection[Test for Exosama, url: wss://rpc.exosama.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e6ed7d340c7eaf9147505ae9416b61bb","time":{"start":1682568336840,"stop":1682568337255,"duration":415},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","statusTrace":"data = {'name': 'Exosama', 'url': 'wss://rpc.exosama.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f5c52bbd990>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","statusTrace":"data = {'name': 'Exosama', 'url': 'wss://rpc.exosama.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f5c52bbd990>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"c10ffb1665b34347","name":"stdout","source":"c10ffb1665b34347.txt","type":"text/plain","size":280}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az251-226"},{"name":"thread","value":"1858-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.exosama.com', 'name': 'Exosama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d959e3e0642802b2","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682568326272,"stop":1682568326725,"duration":453}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":43,"skipped":0,"passed":0,"unknown":0,"total":43},"items":[{"uid":"e076c8b91a27c0aa","reportUrl":"https://nova-wallet.github.io/test-runner/2898//#testresult/e076c8b91a27c0aa","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682554496729,"stop":1682554497316,"duration":587}},{"uid":"1cf563cf62426a6b","reportUrl":"https://nova-wallet.github.io/test-runner/2897//#testresult/1cf563cf62426a6b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682539546508,"stop":1682539547118,"duration":610}},{"uid":"b6dabf59b36eb342","reportUrl":"https://nova-wallet.github.io/test-runner/2896//#testresult/b6dabf59b36eb342","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682525166812,"stop":1682525167453,"duration":641}},{"uid":"bd47ebe1c436f2c0","reportUrl":"https://nova-wallet.github.io/test-runner/2895//#testresult/bd47ebe1c436f2c0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682510842310,"stop":1682510842746,"duration":436}},{"uid":"15156dacfe1ca0ee","reportUrl":"https://nova-wallet.github.io/test-runner/2894//#testresult/15156dacfe1ca0ee","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682496369680,"stop":1682496370304,"duration":624}},{"uid":"ad0ba28d9ba62910","reportUrl":"https://nova-wallet.github.io/test-runner/2893//#testresult/ad0ba28d9ba62910","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682481952402,"stop":1682481953097,"duration":695}},{"uid":"3cc2d478961ac3a5","reportUrl":"https://nova-wallet.github.io/test-runner/2892//#testresult/3cc2d478961ac3a5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682468078113,"stop":1682468078694,"duration":581}},{"uid":"933df6d3c6555689","reportUrl":"https://nova-wallet.github.io/test-runner/2891//#testresult/933df6d3c6555689","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682453151913,"stop":1682453152614,"duration":701}},{"uid":"7647980c9850f051","reportUrl":"https://nova-wallet.github.io/test-runner/2890//#testresult/7647980c9850f051","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682438750172,"stop":1682438750571,"duration":399}},{"uid":"237f29093978d7d3","reportUrl":"https://nova-wallet.github.io/test-runner/2889//#testresult/237f29093978d7d3","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682424413219,"stop":1682424413640,"duration":421}},{"uid":"be6f440075f96867","reportUrl":"https://nova-wallet.github.io/test-runner/2888//#testresult/be6f440075f96867","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682409898811,"stop":1682409899246,"duration":435}},{"uid":"d6d563aaf3f05087","reportUrl":"https://nova-wallet.github.io/test-runner/2887//#testresult/d6d563aaf3f05087","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682395488508,"stop":1682395488928,"duration":420}},{"uid":"e9e92a6919f45d0e","reportUrl":"https://nova-wallet.github.io/test-runner/2886//#testresult/e9e92a6919f45d0e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682381639842,"stop":1682381640254,"duration":412}},{"uid":"c505b0ed45554eae","reportUrl":"https://nova-wallet.github.io/test-runner/2885//#testresult/c505b0ed45554eae","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682366713231,"stop":1682366713934,"duration":703}},{"uid":"47cb80598ef812e","reportUrl":"https://nova-wallet.github.io/test-runner/2883//#testresult/47cb80598ef812e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682337981686,"stop":1682337982313,"duration":627}},{"uid":"28fa1b3d99c258e9","reportUrl":"https://nova-wallet.github.io/test-runner/2882//#testresult/28fa1b3d99c258e9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682323536391,"stop":1682323536994,"duration":603}},{"uid":"f6fad2298ecba0bc","reportUrl":"https://nova-wallet.github.io/test-runner/2881//#testresult/f6fad2298ecba0bc","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682309109070,"stop":1682309109662,"duration":592}},{"uid":"4de242c3bc078494","reportUrl":"https://nova-wallet.github.io/test-runner/2880//#testresult/4de242c3bc078494","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682295234253,"stop":1682295234851,"duration":598}},{"uid":"b0cefca301cc794f","reportUrl":"https://nova-wallet.github.io/test-runner/2879//#testresult/b0cefca301cc794f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682280302935,"stop":1682280303530,"duration":595}},{"uid":"7aec01ad2e4e5444","reportUrl":"https://nova-wallet.github.io/test-runner/2878//#testresult/7aec01ad2e4e5444","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682265902774,"stop":1682265903363,"duration":589}}]},"tags":[]},"source":"288209c64faabb32.json","parameterValues":["{'url': 'wss://rpc.exosama.com', 'name': 'Exosama'}"]}