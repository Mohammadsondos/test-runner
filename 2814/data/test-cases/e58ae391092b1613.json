{"uid":"e58ae391092b1613","name":"test_can_create_connection[Test for Calamari, url: wss://ws.calamari.systems/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"313295000e78b74b8dc0b5885f9dc006","time":{"start":1681373088586,"stop":1681373088901,"duration":315},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://ws.calamari.systems/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://ws.calamari.systems/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"21eb0f5bd051aa50","name":"stdout","source":"21eb0f5bd051aa50.txt","type":"text/plain","size":232}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az560-895"},{"name":"thread","value":"1811-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://ws.calamari.systems/', 'name': 'Calamari'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"907022a3253ffe99","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1681373077940,"stop":1681373078430,"duration":490}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":937,"unknown":0,"total":992},"items":[{"uid":"c4bbc4675814c9f0","reportUrl":"https://nova-wallet.github.io/test-runner/2813//#testresult/c4bbc4675814c9f0","status":"passed","time":{"start":1681358655198,"stop":1681358655365,"duration":167}},{"uid":"4d296a86a8a943c9","reportUrl":"https://nova-wallet.github.io/test-runner/2812//#testresult/4d296a86a8a943c9","status":"passed","time":{"start":1681344738130,"stop":1681344739336,"duration":1206}},{"uid":"de18b3f8b7ed8fea","reportUrl":"https://nova-wallet.github.io/test-runner/2811//#testresult/de18b3f8b7ed8fea","status":"passed","time":{"start":1681329858431,"stop":1681329859461,"duration":1030}},{"uid":"79348e856d9a8e46","reportUrl":"https://nova-wallet.github.io/test-runner/2810//#testresult/79348e856d9a8e46","status":"passed","time":{"start":1681315442372,"stop":1681315442570,"duration":198}},{"uid":"19dd4090e0db78fe","reportUrl":"https://nova-wallet.github.io/test-runner/2809//#testresult/19dd4090e0db78fe","status":"passed","time":{"start":1681301100002,"stop":1681301100653,"duration":651}},{"uid":"89e11142472df66","reportUrl":"https://nova-wallet.github.io/test-runner/2808//#testresult/89e11142472df66","status":"passed","time":{"start":1681286685708,"stop":1681286686290,"duration":582}},{"uid":"b00309164399d70e","reportUrl":"https://nova-wallet.github.io/test-runner/2807//#testresult/b00309164399d70e","status":"passed","time":{"start":1681272247456,"stop":1681272247845,"duration":389}},{"uid":"863031e371b963fe","reportUrl":"https://nova-wallet.github.io/test-runner/2806//#testresult/863031e371b963fe","status":"passed","time":{"start":1681258359981,"stop":1681258361216,"duration":1235}},{"uid":"4f2c5101dd9794a","reportUrl":"https://nova-wallet.github.io/test-runner/2805//#testresult/4f2c5101dd9794a","status":"passed","time":{"start":1681243453441,"stop":1681243454256,"duration":815}},{"uid":"6c3fca0754977062","reportUrl":"https://nova-wallet.github.io/test-runner/2803//#testresult/6c3fca0754977062","status":"passed","time":{"start":1681214724126,"stop":1681214724828,"duration":702}},{"uid":"b9648472ceecf865","reportUrl":"https://nova-wallet.github.io/test-runner/2802//#testresult/b9648472ceecf865","status":"passed","time":{"start":1681200266358,"stop":1681200266876,"duration":518}},{"uid":"f4cbfece53aab0ac","reportUrl":"https://nova-wallet.github.io/test-runner/2801//#testresult/f4cbfece53aab0ac","status":"passed","time":{"start":1681185864629,"stop":1681185865513,"duration":884}},{"uid":"55d7e71173638c6f","reportUrl":"https://nova-wallet.github.io/test-runner/2800//#testresult/55d7e71173638c6f","status":"passed","time":{"start":1681171994959,"stop":1681171995572,"duration":613}},{"uid":"e3f19ab6198941c6","reportUrl":"https://nova-wallet.github.io/test-runner/2799//#testresult/e3f19ab6198941c6","status":"passed","time":{"start":1681157068230,"stop":1681157069192,"duration":962}},{"uid":"5c9d51f01690611c","reportUrl":"https://nova-wallet.github.io/test-runner/2798//#testresult/5c9d51f01690611c","status":"passed","time":{"start":1681142653712,"stop":1681142654254,"duration":542}},{"uid":"4292d435f31a8bfb","reportUrl":"https://nova-wallet.github.io/test-runner/2797//#testresult/4292d435f31a8bfb","status":"passed","time":{"start":1681128305730,"stop":1681128306340,"duration":610}},{"uid":"5103cd55fdefca03","reportUrl":"https://nova-wallet.github.io/test-runner/2796//#testresult/5103cd55fdefca03","status":"passed","time":{"start":1681113843449,"stop":1681113844155,"duration":706}},{"uid":"bb940e5c18807736","reportUrl":"https://nova-wallet.github.io/test-runner/2795//#testresult/bb940e5c18807736","status":"passed","time":{"start":1681099451119,"stop":1681099452000,"duration":881}},{"uid":"858899e7f813f9b2","reportUrl":"https://nova-wallet.github.io/test-runner/2794//#testresult/858899e7f813f9b2","status":"passed","time":{"start":1681085568176,"stop":1681085568616,"duration":440}},{"uid":"106dd073c96c5dfd","reportUrl":"https://nova-wallet.github.io/test-runner/2793//#testresult/106dd073c96c5dfd","status":"passed","time":{"start":1681070640843,"stop":1681070641489,"duration":646}}]},"tags":[]},"source":"e58ae391092b1613.json","parameterValues":["{'url': 'wss://ws.calamari.systems/', 'name': 'Calamari'}"]}