{"uid":"a135c0824c796174","name":"test_can_create_connection[Test for Kylin, url: wss://polkadot.kylin-node.co.uk]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3ee0d191ab7acb2fad9a82a3aa808e89","time":{"start":1694808170516,"stop":1694808170692,"duration":176},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 15 Sep 2023 20:02:50 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 15 Sep 2023 20:02:50 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 15 Sep 2023 20:02:50 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 15 Sep 2023 20:02:50 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"c25ce9a4d7b6c743","name":"stdout","source":"c25ce9a4d7b6c743.txt","type":"text/plain","size":1500}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az206-95"},{"name":"thread","value":"2058-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3a9196cf17b372e8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 15 Sep 2023 20:02:35 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694808155207,"stop":1694808155422,"duration":215}},{"uid":"235f839c048c2650","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 15 Sep 2023 20:02:20 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694808139897,"stop":1694808140109,"duration":212}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":128,"unknown":0,"total":136},"items":[{"uid":"766a60b543b67ee","reportUrl":"https://novasamatech.github.io/test-runner/3774//#testresult/766a60b543b67ee","status":"passed","time":{"start":1694793736292,"stop":1694793736395,"duration":103}},{"uid":"d272d3969e7c944f","reportUrl":"https://novasamatech.github.io/test-runner/3773//#testresult/d272d3969e7c944f","status":"passed","time":{"start":1694779348580,"stop":1694779348730,"duration":150}},{"uid":"ab1d8587a2b866a8","reportUrl":"https://novasamatech.github.io/test-runner/3772//#testresult/ab1d8587a2b866a8","status":"passed","time":{"start":1694764956042,"stop":1694764956432,"duration":390}},{"uid":"6d8ccebbad4bc396","reportUrl":"https://novasamatech.github.io/test-runner/3771//#testresult/6d8ccebbad4bc396","status":"passed","time":{"start":1694750532316,"stop":1694750532740,"duration":424}},{"uid":"f4b4c4f3709d2124","reportUrl":"https://novasamatech.github.io/test-runner/3770//#testresult/f4b4c4f3709d2124","status":"passed","time":{"start":1694736156940,"stop":1694736157013,"duration":73}},{"uid":"462b6e40abb90fc4","reportUrl":"https://novasamatech.github.io/test-runner/3769//#testresult/462b6e40abb90fc4","status":"passed","time":{"start":1694721724737,"stop":1694721725133,"duration":396}},{"uid":"447befc4926286a6","reportUrl":"https://novasamatech.github.io/test-runner/3768//#testresult/447befc4926286a6","status":"passed","time":{"start":1694707319585,"stop":1694707319749,"duration":164}},{"uid":"d5f746ca14ce72dc","reportUrl":"https://novasamatech.github.io/test-runner/3767//#testresult/d5f746ca14ce72dc","status":"passed","time":{"start":1694692970726,"stop":1694692970759,"duration":33}},{"uid":"7b1ea1e696672280","reportUrl":"https://novasamatech.github.io/test-runner/3766//#testresult/7b1ea1e696672280","status":"passed","time":{"start":1694678554594,"stop":1694678554644,"duration":50}},{"uid":"3963ad9218ad99bf","reportUrl":"https://novasamatech.github.io/test-runner/3765//#testresult/3963ad9218ad99bf","status":"passed","time":{"start":1694664106244,"stop":1694664106362,"duration":118}},{"uid":"f59660381de0e50b","reportUrl":"https://novasamatech.github.io/test-runner/3764//#testresult/f59660381de0e50b","status":"passed","time":{"start":1694649752219,"stop":1694649752372,"duration":153}},{"uid":"cd9091924f408511","reportUrl":"https://novasamatech.github.io/test-runner/3763//#testresult/cd9091924f408511","status":"passed","time":{"start":1694635311173,"stop":1694635311278,"duration":105}},{"uid":"991eab6d7bfcd9bf","reportUrl":"https://novasamatech.github.io/test-runner/3762//#testresult/991eab6d7bfcd9bf","status":"passed","time":{"start":1694620945302,"stop":1694620945694,"duration":392}},{"uid":"8e8fef08b4cc5e1e","reportUrl":"https://novasamatech.github.io/test-runner/3761//#testresult/8e8fef08b4cc5e1e","status":"passed","time":{"start":1694606566512,"stop":1694606566739,"duration":227}},{"uid":"e4a2f605d2b1d204","reportUrl":"https://novasamatech.github.io/test-runner/3760//#testresult/e4a2f605d2b1d204","status":"passed","time":{"start":1694597368250,"stop":1694597368468,"duration":218}},{"uid":"b401c987cf0dbb9b","reportUrl":"https://novasamatech.github.io/test-runner/3759//#testresult/b401c987cf0dbb9b","status":"passed","time":{"start":1694592127346,"stop":1694592127456,"duration":110}},{"uid":"dee74996f8361087","reportUrl":"https://novasamatech.github.io/test-runner/3758//#testresult/dee74996f8361087","status":"passed","time":{"start":1694577720858,"stop":1694577720943,"duration":85}},{"uid":"decbdb3fa9df71d9","reportUrl":"https://novasamatech.github.io/test-runner/3757//#testresult/decbdb3fa9df71d9","status":"passed","time":{"start":1694563369052,"stop":1694563369155,"duration":103}},{"uid":"cbcdcf8fa795ed90","reportUrl":"https://novasamatech.github.io/test-runner/3756//#testresult/cbcdcf8fa795ed90","status":"passed","time":{"start":1694548959949,"stop":1694548960472,"duration":523}},{"uid":"bf9497d989f2ba9e","reportUrl":"https://novasamatech.github.io/test-runner/3755//#testresult/bf9497d989f2ba9e","status":"passed","time":{"start":1694534529597,"stop":1694534529845,"duration":248}}]},"tags":[]},"source":"a135c0824c796174.json","parameterValues":["{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"]}