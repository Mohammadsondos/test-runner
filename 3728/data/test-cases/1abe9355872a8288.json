{"uid":"1abe9355872a8288","name":"test_can_create_connection[Test for Kusama, url: wss://rpc.ibp.network/kusama]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"8759051dec9e81a7c6431150689eb995","time":{"start":1694145757858,"stop":1694145783028,"duration":25170},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://rpc.ibp.network/kusama'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://rpc.ibp.network/kusama'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"75d21b489d9ca33c","name":"stdout","source":"75d21b489d9ca33c.txt","type":"text/plain","size":990}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az171-495"},{"name":"thread","value":"2090-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.ibp.network/kusama', 'name': 'Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f7c1c137d2ee8ede","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694145717599,"stop":1694145742768,"duration":25169}},{"uid":"b9dbdb8d028abfc8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694145677342,"stop":1694145702414,"duration":25072}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":87,"unknown":0,"total":89},"items":[{"uid":"ce2072f5fd640b5","reportUrl":"https://novasamatech.github.io/test-runner/3727//#testresult/ce2072f5fd640b5","status":"passed","time":{"start":1694131324222,"stop":1694131324457,"duration":235}},{"uid":"19e5196242152252","reportUrl":"https://novasamatech.github.io/test-runner/3726//#testresult/19e5196242152252","status":"passed","time":{"start":1694116878016,"stop":1694116884528,"duration":6512}},{"uid":"d37ace4d547177cf","reportUrl":"https://novasamatech.github.io/test-runner/3725//#testresult/d37ace4d547177cf","status":"passed","time":{"start":1694102489672,"stop":1694102514777,"duration":25105}},{"uid":"829a75f0346cd3b6","reportUrl":"https://novasamatech.github.io/test-runner/3724//#testresult/829a75f0346cd3b6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694088180251,"stop":1694088205375,"duration":25124}},{"uid":"fd49ffbdd5757e1b","reportUrl":"https://novasamatech.github.io/test-runner/3723//#testresult/fd49ffbdd5757e1b","status":"passed","time":{"start":1694073691097,"stop":1694073709627,"duration":18530}},{"uid":"fd63d98b4d112351","reportUrl":"https://novasamatech.github.io/test-runner/3722//#testresult/fd63d98b4d112351","status":"passed","time":{"start":1694059291936,"stop":1694059292284,"duration":348}},{"uid":"24aea63d6336580","reportUrl":"https://novasamatech.github.io/test-runner/3721//#testresult/24aea63d6336580","status":"passed","time":{"start":1694044920440,"stop":1694044921074,"duration":634}},{"uid":"9daaca930763a113","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/9daaca930763a113","status":"passed","time":{"start":1694030473957,"stop":1694030473987,"duration":30}},{"uid":"c4849969295f4a10","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/c4849969295f4a10","status":"passed","time":{"start":1694016083038,"stop":1694016083076,"duration":38}},{"uid":"764699e15838555f","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/764699e15838555f","status":"passed","time":{"start":1694001693203,"stop":1694001693571,"duration":368}},{"uid":"773e77be7c3283e","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/773e77be7c3283e","status":"passed","time":{"start":1693987284371,"stop":1693987284893,"duration":522}},{"uid":"af1c617769a73259","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/af1c617769a73259","status":"passed","time":{"start":1693972877369,"stop":1693972877449,"duration":80}},{"uid":"197743ced036b5cc","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/197743ced036b5cc","status":"passed","time":{"start":1693958535908,"stop":1693958536188,"duration":280}},{"uid":"113a911a0d47f548","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/113a911a0d47f548","status":"passed","time":{"start":1693944085182,"stop":1693944085332,"duration":150}},{"uid":"416fd0705819c47e","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/416fd0705819c47e","status":"passed","time":{"start":1693929678933,"stop":1693929679062,"duration":129}},{"uid":"4e7ae8f77aef934a","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/4e7ae8f77aef934a","status":"passed","time":{"start":1693915296414,"stop":1693915297208,"duration":794}},{"uid":"2df6447df350be05","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/2df6447df350be05","status":"passed","time":{"start":1693900895654,"stop":1693900896022,"duration":368}},{"uid":"db0c984a9f6a40ee","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/db0c984a9f6a40ee","status":"passed","time":{"start":1693872126950,"stop":1693872127245,"duration":295}},{"uid":"b76b1fe3a26153bd","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/b76b1fe3a26153bd","status":"passed","time":{"start":1693857681684,"stop":1693857681881,"duration":197}},{"uid":"f67f6a7b72695e89","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/f67f6a7b72695e89","status":"passed","time":{"start":1693843278722,"stop":1693843282368,"duration":3646}}]},"tags":[]},"source":"1abe9355872a8288.json","parameterValues":["{'url': 'wss://rpc.ibp.network/kusama', 'name': 'Kusama'}"]}