{"uid":"36cc7e7dc623f123","name":"test_can_create_connection[Test for Ajuna, url: wss://rpc-parachain.ajuna.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9e45091b8d9f46b64ef77b6ae354ace8","time":{"start":1695125019684,"stop":1695125020030,"duration":346},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 19 Sep 2023 12:03:39 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 19 Sep 2023 12:03:39 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 19 Sep 2023 12:03:39 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 19 Sep 2023 12:03:39 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"c26eb23a3de28737","name":"stdout","source":"c26eb23a3de28737.txt","type":"text/plain","size":1491}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az797-993"},{"name":"thread","value":"2069-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4174f31837936e89","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 19 Sep 2023 12:03:24 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695125004229,"stop":1695125004583,"duration":354}},{"uid":"f751db7d3363829e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 19 Sep 2023 12:03:09 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695124988717,"stop":1695124989138,"duration":421}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":152,"unknown":0,"total":158},"items":[{"uid":"94fd80a700a21f87","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/94fd80a700a21f87","status":"passed","time":{"start":1695110573284,"stop":1695110573821,"duration":537}},{"uid":"3439785c6ef08e3f","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/3439785c6ef08e3f","status":"passed","time":{"start":1695096145506,"stop":1695096145971,"duration":465}},{"uid":"6e196df659946a11","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/6e196df659946a11","status":"passed","time":{"start":1695081780139,"stop":1695081780532,"duration":393}},{"uid":"7d4357132e9cc554","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/7d4357132e9cc554","status":"passed","time":{"start":1695052965547,"stop":1695052965869,"duration":322}},{"uid":"e709f29561a8e60c","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/e709f29561a8e60c","status":"passed","time":{"start":1695067352311,"stop":1695067353000,"duration":689}},{"uid":"6f44451a4ea411ee","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/6f44451a4ea411ee","status":"passed","time":{"start":1695038577562,"stop":1695038578099,"duration":537}},{"uid":"d4ba17dc3f1ed02b","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/d4ba17dc3f1ed02b","status":"passed","time":{"start":1695024192625,"stop":1695024192964,"duration":339}},{"uid":"f3465d57d3c092fc","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/f3465d57d3c092fc","status":"passed","time":{"start":1695009753635,"stop":1695009754269,"duration":634}},{"uid":"94ccb9cc368e3ad1","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/94ccb9cc368e3ad1","status":"passed","time":{"start":1694995387877,"stop":1694995388510,"duration":633}},{"uid":"f530cb09b4415ab9","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/f530cb09b4415ab9","status":"passed","time":{"start":1694980962998,"stop":1694980963526,"duration":528}},{"uid":"149ecab21957dc0","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/149ecab21957dc0","status":"passed","time":{"start":1694966549446,"stop":1694966549854,"duration":408}},{"uid":"5b55fde47b6a6585","reportUrl":"https://novasamatech.github.io/test-runner/3785//#testresult/5b55fde47b6a6585","status":"passed","time":{"start":1694952139109,"stop":1694952139489,"duration":380}},{"uid":"ed0a68da19b90bbe","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/ed0a68da19b90bbe","status":"passed","time":{"start":1694937754548,"stop":1694937755245,"duration":697}},{"uid":"5f08f7e03dd3e1b0","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/5f08f7e03dd3e1b0","status":"passed","time":{"start":1694923327358,"stop":1694923327803,"duration":445}},{"uid":"cc1240d5e86515a0","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/cc1240d5e86515a0","status":"passed","time":{"start":1694908991708,"stop":1694908992408,"duration":700}},{"uid":"bf13074a88f883e1","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/bf13074a88f883e1","status":"passed","time":{"start":1694894530712,"stop":1694894531292,"duration":580}},{"uid":"a95fd460e178a498","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/a95fd460e178a498","status":"passed","time":{"start":1694880133336,"stop":1694880133835,"duration":499}},{"uid":"cabd6bee7efc5714","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/cabd6bee7efc5714","status":"passed","time":{"start":1694865786267,"stop":1694865786862,"duration":595}},{"uid":"a01bb9d5327c8036","reportUrl":"https://novasamatech.github.io/test-runner/3778//#testresult/a01bb9d5327c8036","status":"passed","time":{"start":1694851337003,"stop":1694851337403,"duration":400}},{"uid":"b799751d2c5ef46d","reportUrl":"https://novasamatech.github.io/test-runner/3777//#testresult/b799751d2c5ef46d","status":"passed","time":{"start":1694836934458,"stop":1694836934980,"duration":522}}]},"tags":[]},"source":"36cc7e7dc623f123.json","parameterValues":["{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"]}