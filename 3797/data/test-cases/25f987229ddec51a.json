{"uid":"25f987229ddec51a","name":"test_precision[Test for Karura]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"0d2609fac167c2ab9a8a63daa5ef2268","time":{"start":1695124922179,"stop":1695124926870,"duration":4691},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7ff655b81030>\nchain = <scripts.utils.chain_model.Chain object at 0x7ff655b76350>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7ff65604eef0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x452092afc82496d0d6382e60cc31be494053ba285c426708fc994fe237fadfc5']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7ff655b81030>\nchain = <scripts.utils.chain_model.Chain object at 0x7ff655b76350>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7ff65604eef0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x452092afc82496d0d6382e60cc31be494053ba285c426708fc994fe237fadfc5']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"a5db4f4cc943db46","name":"stdout","source":"a5db4f4cc943db46.txt","type":"text/plain","size":2352}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az1128-620"},{"name":"thread","value":"2046-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7ff655b76350>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"84a646a59bd20f08","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1695124902322,"stop":1695124907038,"duration":4716}},{"uid":"736f2fbfe5261598","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1695124882316,"stop":1695124887104,"duration":4788}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":157,"unknown":0,"total":158},"items":[{"uid":"5ff8bef060e3b33e","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/5ff8bef060e3b33e","status":"passed","time":{"start":1695110488927,"stop":1695110496060,"duration":7133}},{"uid":"c57752e9a2e4142d","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/c57752e9a2e4142d","status":"passed","time":{"start":1695096079736,"stop":1695096087039,"duration":7303}},{"uid":"347d1a3349c69d44","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/347d1a3349c69d44","status":"passed","time":{"start":1695081725000,"stop":1695081732259,"duration":7259}},{"uid":"16b1dafb5a2ac1cf","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/16b1dafb5a2ac1cf","status":"passed","time":{"start":1695052882378,"stop":1695052890152,"duration":7774}},{"uid":"7a286509bf0201a0","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/7a286509bf0201a0","status":"passed","time":{"start":1695067275924,"stop":1695067283581,"duration":7657}},{"uid":"4ed64c833361bd1d","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/4ed64c833361bd1d","status":"passed","time":{"start":1695038488869,"stop":1695038496180,"duration":7311}},{"uid":"c94c629de6a92b3f","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/c94c629de6a92b3f","status":"passed","time":{"start":1695024085528,"stop":1695024092167,"duration":6639}},{"uid":"1245acc37cfc3ab6","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/1245acc37cfc3ab6","status":"passed","time":{"start":1695009674054,"stop":1695009681402,"duration":7348}},{"uid":"ad32ebfb08e439f4","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/ad32ebfb08e439f4","status":"passed","time":{"start":1694995324320,"stop":1694995331545,"duration":7225}},{"uid":"6dd417a59f21208d","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/6dd417a59f21208d","status":"passed","time":{"start":1694980914935,"stop":1694980922922,"duration":7987}},{"uid":"1b8f7af1ad72e132","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/1b8f7af1ad72e132","status":"passed","time":{"start":1694966481194,"stop":1694966489012,"duration":7818}},{"uid":"61642c372ecf40a7","reportUrl":"https://novasamatech.github.io/test-runner/3785//#testresult/61642c372ecf40a7","status":"passed","time":{"start":1694952103640,"stop":1694952111154,"duration":7514}},{"uid":"e700e0912643744f","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/e700e0912643744f","status":"passed","time":{"start":1694937682230,"stop":1694937690122,"duration":7892}},{"uid":"3719c07ac1fa032f","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/3719c07ac1fa032f","status":"passed","time":{"start":1694923267952,"stop":1694923275182,"duration":7230}},{"uid":"38d29022d8a203ee","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/38d29022d8a203ee","status":"passed","time":{"start":1694908927931,"stop":1694908935243,"duration":7312}},{"uid":"c820262563e648d5","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/c820262563e648d5","status":"passed","time":{"start":1694894469554,"stop":1694894476719,"duration":7165}},{"uid":"fc54dbd2f029b58e","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/fc54dbd2f029b58e","status":"passed","time":{"start":1694880077613,"stop":1694880084820,"duration":7207}},{"uid":"3104bddb13f0e04b","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/3104bddb13f0e04b","status":"passed","time":{"start":1694865675707,"stop":1694865682833,"duration":7126}},{"uid":"3193dc8648b23d8f","reportUrl":"https://novasamatech.github.io/test-runner/3778//#testresult/3193dc8648b23d8f","status":"passed","time":{"start":1694851281055,"stop":1694851288019,"duration":6964}},{"uid":"a282e29b33faf149","reportUrl":"https://novasamatech.github.io/test-runner/3777//#testresult/a282e29b33faf149","status":"passed","time":{"start":1694836874463,"stop":1694836881577,"duration":7114}}]},"tags":[]},"source":"25f987229ddec51a.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7ff655b76350>"]}