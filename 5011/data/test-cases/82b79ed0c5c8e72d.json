{"uid":"82b79ed0c5c8e72d","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1712347271054,"stop":1712347271130,"duration":76},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f453088f940>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f4530662560>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f4530662e00>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az659-545"},{"name":"thread","value":"2068-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c63aaaddc561700a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712347265972,"stop":1712347266020,"duration":48}},{"uid":"ff2e19a171ca7593","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712347260783,"stop":1712347260854,"duration":71}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":49,"skipped":0,"passed":1034,"unknown":0,"total":1086},"items":[{"uid":"6d91dd2a8202b8dd","reportUrl":"https://novasamatech.github.io/test-runner/5010//#testresult/6d91dd2a8202b8dd","status":"passed","time":{"start":1712332859106,"stop":1712332859409,"duration":303}},{"uid":"a713c296995b2533","reportUrl":"https://novasamatech.github.io/test-runner/5009//#testresult/a713c296995b2533","status":"passed","time":{"start":1712318467381,"stop":1712318467920,"duration":539}},{"uid":"f9c212b7df892399","reportUrl":"https://novasamatech.github.io/test-runner/5007//#testresult/f9c212b7df892399","status":"passed","time":{"start":1712289662172,"stop":1712289662471,"duration":299}},{"uid":"fc8edcee49c890f2","reportUrl":"https://novasamatech.github.io/test-runner/5006//#testresult/fc8edcee49c890f2","status":"passed","time":{"start":1712275306433,"stop":1712275306925,"duration":492}},{"uid":"334d31dcd76698f4","reportUrl":"https://novasamatech.github.io/test-runner/5005//#testresult/334d31dcd76698f4","status":"passed","time":{"start":1712260863863,"stop":1712260864215,"duration":352}},{"uid":"bc88b7ee4f5a87f3","reportUrl":"https://novasamatech.github.io/test-runner/5004//#testresult/bc88b7ee4f5a87f3","status":"passed","time":{"start":1712246459401,"stop":1712246459701,"duration":300}},{"uid":"2351f147e9e81013","reportUrl":"https://novasamatech.github.io/test-runner/5003//#testresult/2351f147e9e81013","status":"passed","time":{"start":1712232068238,"stop":1712232068633,"duration":395}},{"uid":"97f2bb0ff70670fe","reportUrl":"https://novasamatech.github.io/test-runner/5002//#testresult/97f2bb0ff70670fe","status":"passed","time":{"start":1712217674967,"stop":1712217675539,"duration":572}},{"uid":"641d8b0674cab1e9","reportUrl":"https://novasamatech.github.io/test-runner/5001//#testresult/641d8b0674cab1e9","status":"passed","time":{"start":1712203269759,"stop":1712203270372,"duration":613}},{"uid":"8ad1168b71194b9c","reportUrl":"https://novasamatech.github.io/test-runner/5000//#testresult/8ad1168b71194b9c","status":"passed","time":{"start":1712188906481,"stop":1712188906870,"duration":389}},{"uid":"916d8486e3a61aec","reportUrl":"https://novasamatech.github.io/test-runner/4999//#testresult/916d8486e3a61aec","status":"passed","time":{"start":1712174459103,"stop":1712174459579,"duration":476}},{"uid":"1acda1712246ae00","reportUrl":"https://novasamatech.github.io/test-runner/4998//#testresult/1acda1712246ae00","status":"passed","time":{"start":1712160071733,"stop":1712160072406,"duration":673}},{"uid":"7bc03c654f5448e8","reportUrl":"https://novasamatech.github.io/test-runner/4997//#testresult/7bc03c654f5448e8","status":"passed","time":{"start":1712145660725,"stop":1712145661422,"duration":697}},{"uid":"450938f78aa6f925","reportUrl":"https://novasamatech.github.io/test-runner/4996//#testresult/450938f78aa6f925","status":"passed","time":{"start":1712131273271,"stop":1712131273649,"duration":378}},{"uid":"8d73ca4ff67d5faa","reportUrl":"https://novasamatech.github.io/test-runner/4995//#testresult/8d73ca4ff67d5faa","status":"passed","time":{"start":1712116863308,"stop":1712116863872,"duration":564}},{"uid":"1eb609c5f7fc5f2c","reportUrl":"https://novasamatech.github.io/test-runner/4994//#testresult/1eb609c5f7fc5f2c","status":"passed","time":{"start":1712102504177,"stop":1712102504470,"duration":293}},{"uid":"2a8883dca6cee8bf","reportUrl":"https://novasamatech.github.io/test-runner/4993//#testresult/2a8883dca6cee8bf","status":"passed","time":{"start":1712088061642,"stop":1712088062221,"duration":579}},{"uid":"6cc8f38bd0111e0b","reportUrl":"https://novasamatech.github.io/test-runner/4992//#testresult/6cc8f38bd0111e0b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712073672188,"stop":1712073672350,"duration":162}},{"uid":"bfb52a6aa20c5902","reportUrl":"https://novasamatech.github.io/test-runner/4991//#testresult/bfb52a6aa20c5902","status":"passed","time":{"start":1712059269569,"stop":1712059269952,"duration":383}},{"uid":"d93e5c37d8a82585","reportUrl":"https://novasamatech.github.io/test-runner/4990//#testresult/d93e5c37d8a82585","status":"passed","time":{"start":1712048231015,"stop":1712048231313,"duration":298}}]},"tags":[]},"source":"82b79ed0c5c8e72d.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}