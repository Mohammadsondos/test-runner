{"uid":"e7132d206cedb548","name":"test_has_new_assets[Test for Acala]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"811bc5c930abadf9421eacf26316cc27","time":{"start":1693915353863,"stop":1693915358631,"duration":4768},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7fa11fb6fb80>\nchain = <scripts.utils.chain_model.Chain object at 0x7fa11fb6f5e0>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fa112baeef0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xdbb9d76316bcd73cbc16bfb84953f0b2080845619c72d1abfdf2dc2ac29407db']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7fa11fb6fb80>\nchain = <scripts.utils.chain_model.Chain object at 0x7fa11fb6f5e0>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fa112baeef0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xdbb9d76316bcd73cbc16bfb84953f0b2080845619c72d1abfdf2dc2ac29407db']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"c33529cf1bef5a0e","name":"stdout","source":"c33529cf1bef5a0e.txt","type":"text/plain","size":666}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az1246-521"},{"name":"thread","value":"2055-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fa11fb6f5e0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3a858601b9df6fa2","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693915333557,"stop":1693915338666,"duration":5109}},{"uid":"e38ba3e70e5f1dfe","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693915313381,"stop":1693915318339,"duration":4958}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":71,"unknown":0,"total":72},"items":[{"uid":"619a4e07cd2ee2f7","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/619a4e07cd2ee2f7","status":"passed","time":{"start":1693872169639,"stop":1693872175325,"duration":5686}},{"uid":"7263144c469628a6","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/7263144c469628a6","status":"passed","time":{"start":1693857702299,"stop":1693857707559,"duration":5260}},{"uid":"fb0c5ab21d874f5b","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/fb0c5ab21d874f5b","status":"passed","time":{"start":1693843288847,"stop":1693843292755,"duration":3908}},{"uid":"46c73e776a404f4b","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/46c73e776a404f4b","status":"passed","time":{"start":1693828892949,"stop":1693828897050,"duration":4101}},{"uid":"f486ffb8f46d6379","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/f486ffb8f46d6379","status":"passed","time":{"start":1693814518750,"stop":1693814524789,"duration":6039}},{"uid":"230fec32c87be5d","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/230fec32c87be5d","status":"passed","time":{"start":1693800088730,"stop":1693800093637,"duration":4907}},{"uid":"b79ce7392cdbf55a","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/b79ce7392cdbf55a","status":"passed","time":{"start":1693785753828,"stop":1693785759296,"duration":5468}},{"uid":"e0ecc88edd62bdee","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/e0ecc88edd62bdee","status":"passed","time":{"start":1693771289389,"stop":1693771293618,"duration":4229}},{"uid":"3f6afb4be6b4de2c","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/3f6afb4be6b4de2c","status":"passed","time":{"start":1693756905267,"stop":1693756910733,"duration":5466}},{"uid":"aa313c883f7ce409","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/aa313c883f7ce409","status":"passed","time":{"start":1693742494782,"stop":1693742499041,"duration":4259}},{"uid":"8581852013a5b515","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/8581852013a5b515","status":"passed","time":{"start":1693728108635,"stop":1693728114868,"duration":6233}},{"uid":"1292330bf29f5534","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/1292330bf29f5534","status":"passed","time":{"start":1693713693155,"stop":1693713697643,"duration":4488}},{"uid":"5ac64dd2c6efb31","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/5ac64dd2c6efb31","status":"passed","time":{"start":1693699349179,"stop":1693699354416,"duration":5237}},{"uid":"352b0325c16d55ce","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/352b0325c16d55ce","status":"passed","time":{"start":1693684894727,"stop":1693684899902,"duration":5175}},{"uid":"d64e0581769d267c","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/d64e0581769d267c","status":"passed","time":{"start":1693670491429,"stop":1693670496659,"duration":5230}},{"uid":"b144d9bebe2d7411","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/b144d9bebe2d7411","status":"passed","time":{"start":1693656106892,"stop":1693656113725,"duration":6833}},{"uid":"a95f706099f30b49","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/a95f706099f30b49","status":"passed","time":{"start":1693641697344,"stop":1693641702135,"duration":4791}},{"uid":"e44610a397cd2c4c","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/e44610a397cd2c4c","status":"passed","time":{"start":1693627310560,"stop":1693627316241,"duration":5681}},{"uid":"1596a753bd86b4b1","reportUrl":"https://novasamatech.github.io/test-runner/3691//#testresult/1596a753bd86b4b1","status":"passed","time":{"start":1693612952565,"stop":1693612958839,"duration":6274}},{"uid":"4dec7c713413d5b9","reportUrl":"https://novasamatech.github.io/test-runner/3690//#testresult/4dec7c713413d5b9","status":"passed","time":{"start":1693598496504,"stop":1693598500596,"duration":4092}}]},"tags":[]},"source":"e7132d206cedb548.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fa11fb6f5e0>"]}