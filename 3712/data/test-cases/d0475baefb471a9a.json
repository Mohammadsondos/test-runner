{"uid":"d0475baefb471a9a","name":"test_can_create_connection[Test for Karura, url: wss://karura-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"68c8c856fd3ef7a98a33ddd771ff867a","time":{"start":1693915333686,"stop":1693915337146,"duration":3460},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f1e18cf77e76b615","name":"stdout","source":"f1e18cf77e76b615.txt","type":"text/plain","size":588}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az799-205"},{"name":"thread","value":"2015-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://karura-rpc.dwellir.com', 'name': 'Karura'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"dc33c944fceef195","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693915315090,"stop":1693915318573,"duration":3483}},{"uid":"b82da215223aefa6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693915296308,"stop":1693915299865,"duration":3557}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":71,"unknown":0,"total":73},"items":[{"uid":"33a2f7030327bfa6","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/33a2f7030327bfa6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693900932960,"stop":1693900936560,"duration":3600}},{"uid":"fe53ddfae9dc984f","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/fe53ddfae9dc984f","status":"passed","time":{"start":1693872127008,"stop":1693872127642,"duration":634}},{"uid":"2f0063f7621e459a","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/2f0063f7621e459a","status":"passed","time":{"start":1693857681323,"stop":1693857681826,"duration":503}},{"uid":"61e005d568fe1dd1","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/61e005d568fe1dd1","status":"passed","time":{"start":1693843278903,"stop":1693843279544,"duration":641}},{"uid":"7a23e0e691a93bef","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/7a23e0e691a93bef","status":"passed","time":{"start":1693828885852,"stop":1693828886479,"duration":627}},{"uid":"ce4645f639da6728","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/ce4645f639da6728","status":"passed","time":{"start":1693814496542,"stop":1693814497345,"duration":803}},{"uid":"4690ccfcd43b2e01","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/4690ccfcd43b2e01","status":"passed","time":{"start":1693800079825,"stop":1693800080452,"duration":627}},{"uid":"c8c3cec903d3951a","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/c8c3cec903d3951a","status":"passed","time":{"start":1693785734539,"stop":1693785735344,"duration":805}},{"uid":"f043808ace952154","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/f043808ace952154","status":"passed","time":{"start":1693771290059,"stop":1693771290733,"duration":674}},{"uid":"d02aca458eb38184","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/d02aca458eb38184","status":"passed","time":{"start":1693756888895,"stop":1693756889658,"duration":763}},{"uid":"c4e29cf4de4de22a","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/c4e29cf4de4de22a","status":"passed","time":{"start":1693742495139,"stop":1693742495804,"duration":665}},{"uid":"28e44ab3078a669d","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/28e44ab3078a669d","status":"passed","time":{"start":1693728088148,"stop":1693728088625,"duration":477}},{"uid":"3363fe0896ce2809","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/3363fe0896ce2809","status":"passed","time":{"start":1693713680216,"stop":1693713680837,"duration":621}},{"uid":"98bd3769e2dbc7e4","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/98bd3769e2dbc7e4","status":"passed","time":{"start":1693699327293,"stop":1693699327802,"duration":509}},{"uid":"f676c053482990bf","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/f676c053482990bf","status":"passed","time":{"start":1693684882205,"stop":1693684882830,"duration":625}},{"uid":"36542d86edfd27b2","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/36542d86edfd27b2","status":"passed","time":{"start":1693670475449,"stop":1693670475955,"duration":506}},{"uid":"47e47ddb0d91a71c","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/47e47ddb0d91a71c","status":"passed","time":{"start":1693656081252,"stop":1693656081746,"duration":494}},{"uid":"fa7d7d1a775149c2","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/fa7d7d1a775149c2","status":"passed","time":{"start":1693641677448,"stop":1693641677960,"duration":512}},{"uid":"21c76691356cacd2","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/21c76691356cacd2","status":"passed","time":{"start":1693627288652,"stop":1693627289289,"duration":637}},{"uid":"d6c2b4d289357917","reportUrl":"https://novasamatech.github.io/test-runner/3691//#testresult/d6c2b4d289357917","status":"passed","time":{"start":1693612923772,"stop":1693612924269,"duration":497}}]},"tags":[]},"source":"d0475baefb471a9a.json","parameterValues":["{'url': 'wss://karura-rpc.dwellir.com', 'name': 'Karura'}"]}