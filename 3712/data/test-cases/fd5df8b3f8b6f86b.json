{"uid":"fd5df8b3f8b6f86b","name":"test_can_create_connection[Test for Jur, url: wss://jur-mainnet-archive-rpc-1.icebergnodes.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"dd04e52265ef77974494aaad2d4c080f","time":{"start":1693915877505,"stop":1693915877939,"duration":434},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 12:11:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 12:11:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 12:11:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 12:11:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"e935529906ce1fbc","name":"stdout","source":"e935529906ce1fbc.txt","type":"text/plain","size":1071}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az799-205"},{"name":"thread","value":"2009-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e674175cdd7e8fd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 12:11:02 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693915861989,"stop":1693915862388,"duration":399}},{"uid":"65b1164b6d79d95c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 12:10:46 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693915846388,"stop":1693915846822,"duration":434}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":69,"unknown":0,"total":73},"items":[{"uid":"fd79a1c1791f9831","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/fd79a1c1791f9831","status":"passed","time":{"start":1693901045533,"stop":1693901046159,"duration":626}},{"uid":"32074f8d3adbbf78","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/32074f8d3adbbf78","status":"passed","time":{"start":1693872184978,"stop":1693872185605,"duration":627}},{"uid":"c59c19606bcab949","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/c59c19606bcab949","status":"passed","time":{"start":1693857749085,"stop":1693857749655,"duration":570}},{"uid":"3835fc0555e2ac6f","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/3835fc0555e2ac6f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 04 Sep 2023 16:03:24 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693843404170,"stop":1693843404614,"duration":444}},{"uid":"d472928ac15a3802","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/d472928ac15a3802","status":"passed","time":{"start":1693828944836,"stop":1693828945367,"duration":531}},{"uid":"a5a24867d732cd08","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/a5a24867d732cd08","status":"passed","time":{"start":1693814560752,"stop":1693814561534,"duration":782}},{"uid":"bdae877793499425","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/bdae877793499425","status":"passed","time":{"start":1693800108256,"stop":1693800108779,"duration":523}},{"uid":"9d132b92fa5405af","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/9d132b92fa5405af","status":"passed","time":{"start":1693785779357,"stop":1693785780007,"duration":650}},{"uid":"e040609686b5376a","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/e040609686b5376a","status":"passed","time":{"start":1693771368767,"stop":1693771369304,"duration":537}},{"uid":"d6f0feec837a7c45","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/d6f0feec837a7c45","status":"passed","time":{"start":1693756925083,"stop":1693756925864,"duration":781}},{"uid":"f504b1bea4bc5bee","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/f504b1bea4bc5bee","status":"passed","time":{"start":1693742556862,"stop":1693742557495,"duration":633}},{"uid":"3c076c69ad79f29f","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/3c076c69ad79f29f","status":"passed","time":{"start":1693728137007,"stop":1693728137372,"duration":365}},{"uid":"20321af4d89dc473","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/20321af4d89dc473","status":"passed","time":{"start":1693713727904,"stop":1693713728428,"duration":524}},{"uid":"a12528931b2972db","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/a12528931b2972db","status":"passed","time":{"start":1693699359804,"stop":1693699360199,"duration":395}},{"uid":"8d651e3228d1fb3","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/8d651e3228d1fb3","status":"passed","time":{"start":1693684921136,"stop":1693684921655,"duration":519}},{"uid":"c61ef66cfa263f98","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/c61ef66cfa263f98","status":"passed","time":{"start":1693670518493,"stop":1693670518939,"duration":446}},{"uid":"f3c1f58dbf3baa94","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/f3c1f58dbf3baa94","status":"passed","time":{"start":1693656114745,"stop":1693656115247,"duration":502}},{"uid":"b8243daba03ba678","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/b8243daba03ba678","status":"passed","time":{"start":1693641705274,"stop":1693641705810,"duration":536}},{"uid":"3640ecfee5f6914b","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/3640ecfee5f6914b","status":"passed","time":{"start":1693627318548,"stop":1693627319110,"duration":562}},{"uid":"fb1b230a6b502734","reportUrl":"https://novasamatech.github.io/test-runner/3691//#testresult/fb1b230a6b502734","status":"passed","time":{"start":1693612967973,"stop":1693612968365,"duration":392}}]},"tags":[]},"source":"fd5df8b3f8b6f86b.json","parameterValues":["{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"]}