{"uid":"579c46f908646d0e","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1694275335561,"stop":1694275336035,"duration":474},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sat, 09 Sep 2023 16:02:15 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sat, 09 Sep 2023 16:02:15 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sat, 09 Sep 2023 16:02:15 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sat, 09 Sep 2023 16:02:15 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"aa74cb069e4668b9","name":"stdout","source":"aa74cb069e4668b9.txt","type":"text/plain","size":825}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az442-605"},{"name":"thread","value":"2128-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"70fc8ee946e6b98d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sat, 09 Sep 2023 16:01:59 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694275319818,"stop":1694275320421,"duration":603}},{"uid":"dbd27adab6dd8f1f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sat, 09 Sep 2023 16:01:43 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694275304153,"stop":1694275304670,"duration":517}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":94,"unknown":0,"total":98},"items":[{"uid":"8de15eaa3bdb836a","reportUrl":"https://novasamatech.github.io/test-runner/3736//#testresult/8de15eaa3bdb836a","status":"passed","time":{"start":1694260940176,"stop":1694260940825,"duration":649}},{"uid":"3cab0be4a0ff2223","reportUrl":"https://novasamatech.github.io/test-runner/3735//#testresult/3cab0be4a0ff2223","status":"passed","time":{"start":1694246526092,"stop":1694246526738,"duration":646}},{"uid":"8959a6c898daf72c","reportUrl":"https://novasamatech.github.io/test-runner/3734//#testresult/8959a6c898daf72c","status":"passed","time":{"start":1694232102400,"stop":1694232103135,"duration":735}},{"uid":"8048e0cdb630fdae","reportUrl":"https://novasamatech.github.io/test-runner/3733//#testresult/8048e0cdb630fdae","status":"passed","time":{"start":1694217777799,"stop":1694217778725,"duration":926}},{"uid":"d62d6e6b0eee55d3","reportUrl":"https://novasamatech.github.io/test-runner/3732//#testresult/d62d6e6b0eee55d3","status":"passed","time":{"start":1694203335784,"stop":1694203336463,"duration":679}},{"uid":"f7affd7c02387f4f","reportUrl":"https://novasamatech.github.io/test-runner/3731//#testresult/f7affd7c02387f4f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Fri, 08 Sep 2023 16:02:55 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694188975387,"stop":1694188976049,"duration":662}},{"uid":"48c15243e40a7a58","reportUrl":"https://novasamatech.github.io/test-runner/3730//#testresult/48c15243e40a7a58","status":"passed","time":{"start":1694174532409,"stop":1694174533232,"duration":823}},{"uid":"5ac7a597f3a299a2","reportUrl":"https://novasamatech.github.io/test-runner/3729//#testresult/5ac7a597f3a299a2","status":"passed","time":{"start":1694160106079,"stop":1694160106870,"duration":791}},{"uid":"3ae8c4eccae2bc45","reportUrl":"https://novasamatech.github.io/test-runner/3728//#testresult/3ae8c4eccae2bc45","status":"passed","time":{"start":1694145719748,"stop":1694145720427,"duration":679}},{"uid":"f12e4e11bedb072c","reportUrl":"https://novasamatech.github.io/test-runner/3727//#testresult/f12e4e11bedb072c","status":"passed","time":{"start":1694131369809,"stop":1694131370364,"duration":555}},{"uid":"3a3338117aba03e","reportUrl":"https://novasamatech.github.io/test-runner/3726//#testresult/3a3338117aba03e","status":"passed","time":{"start":1694116899762,"stop":1694116900683,"duration":921}},{"uid":"8cc227ae8b1d73f6","reportUrl":"https://novasamatech.github.io/test-runner/3725//#testresult/8cc227ae8b1d73f6","status":"passed","time":{"start":1694102554810,"stop":1694102555334,"duration":524}},{"uid":"b31f12d732ee0b92","reportUrl":"https://novasamatech.github.io/test-runner/3724//#testresult/b31f12d732ee0b92","status":"passed","time":{"start":1694088169084,"stop":1694088169953,"duration":869}},{"uid":"a68573fac77578eb","reportUrl":"https://novasamatech.github.io/test-runner/3723//#testresult/a68573fac77578eb","status":"passed","time":{"start":1694073750581,"stop":1694073751373,"duration":792}},{"uid":"77ee156eccc0741e","reportUrl":"https://novasamatech.github.io/test-runner/3722//#testresult/77ee156eccc0741e","status":"passed","time":{"start":1694059345461,"stop":1694059346308,"duration":847}},{"uid":"3a238078607a4874","reportUrl":"https://novasamatech.github.io/test-runner/3721//#testresult/3a238078607a4874","status":"passed","time":{"start":1694044945605,"stop":1694044946422,"duration":817}},{"uid":"1a721d410d713690","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/1a721d410d713690","status":"passed","time":{"start":1694030502924,"stop":1694030503585,"duration":661}},{"uid":"7954732fa4fc3458","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/7954732fa4fc3458","status":"passed","time":{"start":1694016162280,"stop":1694016162765,"duration":485}},{"uid":"847a5fa17cc371b","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/847a5fa17cc371b","status":"passed","time":{"start":1694001737999,"stop":1694001738812,"duration":813}},{"uid":"245724f8a46eb054","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/245724f8a46eb054","status":"passed","time":{"start":1693987323900,"stop":1693987324712,"duration":812}}]},"tags":[]},"source":"579c46f908646d0e.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}