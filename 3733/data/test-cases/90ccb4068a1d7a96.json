{"uid":"90ccb4068a1d7a96","name":"test_can_create_connection[Test for Kusama, url: wss://rpc.dotters.network/kusama]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"0a4dd30550ca0bf9ff1d585c69bb9df5","time":{"start":1694217875560,"stop":1694217900824,"duration":25264},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://rpc.dotters.network/kusama'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://rpc.dotters.network/kusama'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"c3ea41ab10611194","name":"stdout","source":"c3ea41ab10611194.txt","type":"text/plain","size":1002}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az439-350"},{"name":"thread","value":"2443-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.dotters.network/kusama', 'name': 'Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"19860cdfad98c433","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694217835432,"stop":1694217860464,"duration":25032}},{"uid":"579e42f879312f13","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694217795106,"stop":1694217820331,"duration":25225}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":90,"unknown":0,"total":94},"items":[{"uid":"4e607b08ca91c755","reportUrl":"https://novasamatech.github.io/test-runner/3732//#testresult/4e607b08ca91c755","status":"passed","time":{"start":1694203356954,"stop":1694203357364,"duration":410}},{"uid":"491a5ceb3a23c23f","reportUrl":"https://novasamatech.github.io/test-runner/3731//#testresult/491a5ceb3a23c23f","status":"passed","time":{"start":1694188931916,"stop":1694188932417,"duration":501}},{"uid":"ca22699c98221097","reportUrl":"https://novasamatech.github.io/test-runner/3730//#testresult/ca22699c98221097","status":"passed","time":{"start":1694174561839,"stop":1694174561965,"duration":126}},{"uid":"29aec0d6d49f89c6","reportUrl":"https://novasamatech.github.io/test-runner/3729//#testresult/29aec0d6d49f89c6","status":"passed","time":{"start":1694160081980,"stop":1694160082087,"duration":107}},{"uid":"328b09590c1bd207","reportUrl":"https://novasamatech.github.io/test-runner/3728//#testresult/328b09590c1bd207","status":"passed","time":{"start":1694145863402,"stop":1694145863752,"duration":350}},{"uid":"f3cb387505c4c32e","reportUrl":"https://novasamatech.github.io/test-runner/3727//#testresult/f3cb387505c4c32e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694131404847,"stop":1694131429995,"duration":25148}},{"uid":"9676fdc23f01a0f2","reportUrl":"https://novasamatech.github.io/test-runner/3726//#testresult/9676fdc23f01a0f2","status":"passed","time":{"start":1694116884557,"stop":1694116885673,"duration":1116}},{"uid":"3489e7ce6412beea","reportUrl":"https://novasamatech.github.io/test-runner/3725//#testresult/3489e7ce6412beea","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694102596235,"stop":1694102621367,"duration":25132}},{"uid":"65e0bbbcd85f4277","reportUrl":"https://novasamatech.github.io/test-runner/3724//#testresult/65e0bbbcd85f4277","status":"passed","time":{"start":1694088205470,"stop":1694088205653,"duration":183}},{"uid":"e2d84ead88642704","reportUrl":"https://novasamatech.github.io/test-runner/3723//#testresult/e2d84ead88642704","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694073790345,"stop":1694073815494,"duration":25149}},{"uid":"249473672dc03473","reportUrl":"https://novasamatech.github.io/test-runner/3722//#testresult/249473672dc03473","status":"passed","time":{"start":1694059292290,"stop":1694059292537,"duration":247}},{"uid":"4714a84f6294debf","reportUrl":"https://novasamatech.github.io/test-runner/3721//#testresult/4714a84f6294debf","status":"passed","time":{"start":1694044921103,"stop":1694044921429,"duration":326}},{"uid":"3788704e7617a6f8","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/3788704e7617a6f8","status":"passed","time":{"start":1694030474039,"stop":1694030474692,"duration":653}},{"uid":"176866858792f3af","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/176866858792f3af","status":"passed","time":{"start":1694016083104,"stop":1694016083490,"duration":386}},{"uid":"1d1837eddcafb5b3","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/1d1837eddcafb5b3","status":"passed","time":{"start":1694001693574,"stop":1694001693855,"duration":281}},{"uid":"d32b74a2646027df","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/d32b74a2646027df","status":"passed","time":{"start":1693987284898,"stop":1693987285070,"duration":172}},{"uid":"ac6be8f22c740ed8","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/ac6be8f22c740ed8","status":"passed","time":{"start":1693972877483,"stop":1693972877918,"duration":435}},{"uid":"32caabcb27462369","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/32caabcb27462369","status":"passed","time":{"start":1693958536215,"stop":1693958536422,"duration":207}},{"uid":"328b50c05806cc7f","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/328b50c05806cc7f","status":"passed","time":{"start":1693944085336,"stop":1693944085389,"duration":53}},{"uid":"ac954776262f93a3","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/ac954776262f93a3","status":"passed","time":{"start":1693929679065,"stop":1693929679180,"duration":115}}]},"tags":[]},"source":"90ccb4068a1d7a96.json","parameterValues":["{'url': 'wss://rpc.dotters.network/kusama', 'name': 'Kusama'}"]}