{"uid":"b4150d53db7eefc7","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1710504086668,"stop":1710504086716,"duration":48},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x72d606e7d300>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x72d605d41db0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x72d605d40490>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az985-377"},{"name":"thread","value":"2060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d104e14ef0a21ad4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710504081587,"stop":1710504081633,"duration":46}},{"uid":"b1ee2a2c0d1dccd7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710504076492,"stop":1710504076552,"duration":60}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":26,"skipped":0,"passed":513,"unknown":0,"total":540},"items":[{"uid":"1556ff45be391e8","reportUrl":"https://novasamatech.github.io/test-runner/4880//#testresult/1556ff45be391e8","status":"passed","time":{"start":1710489663648,"stop":1710489663836,"duration":188}},{"uid":"896518e77f5c0deb","reportUrl":"https://novasamatech.github.io/test-runner/4879//#testresult/896518e77f5c0deb","status":"passed","time":{"start":1710475265278,"stop":1710475265683,"duration":405}},{"uid":"f4dcc46672b88c44","reportUrl":"https://novasamatech.github.io/test-runner/4878//#testresult/f4dcc46672b88c44","status":"passed","time":{"start":1710460893802,"stop":1710460893936,"duration":134}},{"uid":"7289b705fdb8b2bb","reportUrl":"https://novasamatech.github.io/test-runner/4877//#testresult/7289b705fdb8b2bb","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710446481227,"stop":1710446481285,"duration":58}},{"uid":"d101cfe1386d4a33","reportUrl":"https://novasamatech.github.io/test-runner/4876//#testresult/d101cfe1386d4a33","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710432089272,"stop":1710432089323,"duration":51}},{"uid":"492a6008e6ce63a2","reportUrl":"https://novasamatech.github.io/test-runner/4875//#testresult/492a6008e6ce63a2","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710417701565,"stop":1710417701610,"duration":45}},{"uid":"49d2720d0fef1640","reportUrl":"https://novasamatech.github.io/test-runner/4874//#testresult/49d2720d0fef1640","status":"passed","time":{"start":1710403265176,"stop":1710403265929,"duration":753}},{"uid":"73888481638f10af","reportUrl":"https://novasamatech.github.io/test-runner/4873//#testresult/73888481638f10af","status":"passed","time":{"start":1710388865853,"stop":1710388866000,"duration":147}},{"uid":"3457f8c21506431e","reportUrl":"https://novasamatech.github.io/test-runner/4872//#testresult/3457f8c21506431e","status":"passed","time":{"start":1710374514303,"stop":1710374515091,"duration":788}},{"uid":"1204ca54c3acb982","reportUrl":"https://novasamatech.github.io/test-runner/4871//#testresult/1204ca54c3acb982","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710360080057,"stop":1710360080217,"duration":160}},{"uid":"5838ffcc5be11f07","reportUrl":"https://novasamatech.github.io/test-runner/4870//#testresult/5838ffcc5be11f07","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710345691966,"stop":1710345692021,"duration":55}},{"uid":"212579ea0cbb9e3e","reportUrl":"https://novasamatech.github.io/test-runner/4869//#testresult/212579ea0cbb9e3e","status":"passed","time":{"start":1710331274144,"stop":1710331274428,"duration":284}},{"uid":"eebb1c96dae9c7e5","reportUrl":"https://novasamatech.github.io/test-runner/4868//#testresult/eebb1c96dae9c7e5","status":"passed","time":{"start":1710316866642,"stop":1710316866974,"duration":332}},{"uid":"2ee282a2e774871f","reportUrl":"https://novasamatech.github.io/test-runner/4867//#testresult/2ee282a2e774871f","status":"passed","time":{"start":1710302461096,"stop":1710302461283,"duration":187}},{"uid":"14a21c5bbaf6802d","reportUrl":"https://novasamatech.github.io/test-runner/4866//#testresult/14a21c5bbaf6802d","status":"passed","time":{"start":1710288109547,"stop":1710288109740,"duration":193}},{"uid":"3e8c13340c898c18","reportUrl":"https://novasamatech.github.io/test-runner/4865//#testresult/3e8c13340c898c18","status":"passed","time":{"start":1710273677074,"stop":1710273677395,"duration":321}},{"uid":"b0762bc79a9a3ce6","reportUrl":"https://novasamatech.github.io/test-runner/4864//#testresult/b0762bc79a9a3ce6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710259274688,"stop":1710259274782,"duration":94}},{"uid":"db53b6de50482e60","reportUrl":"https://novasamatech.github.io/test-runner/4863//#testresult/db53b6de50482e60","status":"passed","time":{"start":1710244872111,"stop":1710244872281,"duration":170}},{"uid":"3318588d1f6ede1f","reportUrl":"https://novasamatech.github.io/test-runner/4862//#testresult/3318588d1f6ede1f","status":"passed","time":{"start":1710230462576,"stop":1710230463243,"duration":667}},{"uid":"2d23d4fce4459b69","reportUrl":"https://novasamatech.github.io/test-runner/4861//#testresult/2d23d4fce4459b69","status":"passed","time":{"start":1710216067459,"stop":1710216068120,"duration":661}}]},"tags":[]},"source":"b4150d53db7eefc7.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}