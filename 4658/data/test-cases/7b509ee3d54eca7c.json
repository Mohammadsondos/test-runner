{"uid":"7b509ee3d54eca7c","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1707336087426,"stop":1707336087741,"duration":315},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fed3fb51750>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fed3fa7d270>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fed3fa7ce80>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1055-286"},{"name":"thread","value":"2128-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"db1bf87e487fa4c9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707336082084,"stop":1707336082391,"duration":307}},{"uid":"55fe03db4d8f7e7b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707336076672,"stop":1707336076970,"duration":298}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":846,"unknown":0,"total":849},"items":[{"uid":"41128d3d82581a6c","reportUrl":"https://novasamatech.github.io/test-runner/4657//#testresult/41128d3d82581a6c","status":"passed","time":{"start":1707321662432,"stop":1707321662698,"duration":266}},{"uid":"e425a655ae0fa16f","reportUrl":"https://novasamatech.github.io/test-runner/4656//#testresult/e425a655ae0fa16f","status":"passed","time":{"start":1707307267439,"stop":1707307267670,"duration":231}},{"uid":"74f6c2b38bb7b517","reportUrl":"https://novasamatech.github.io/test-runner/4655//#testresult/74f6c2b38bb7b517","status":"passed","time":{"start":1707292863958,"stop":1707292864257,"duration":299}},{"uid":"58ac3a67182130f2","reportUrl":"https://novasamatech.github.io/test-runner/4654//#testresult/58ac3a67182130f2","status":"passed","time":{"start":1707278464940,"stop":1707278465086,"duration":146}},{"uid":"765e647ac68c5a2e","reportUrl":"https://novasamatech.github.io/test-runner/4653//#testresult/765e647ac68c5a2e","status":"passed","time":{"start":1707264099459,"stop":1707264100175,"duration":716}},{"uid":"490f363689024818","reportUrl":"https://novasamatech.github.io/test-runner/4652//#testresult/490f363689024818","status":"passed","time":{"start":1707249668491,"stop":1707249669437,"duration":946}},{"uid":"edf4f182ce7a09c0","reportUrl":"https://novasamatech.github.io/test-runner/4651//#testresult/edf4f182ce7a09c0","status":"passed","time":{"start":1707235263199,"stop":1707235264059,"duration":860}},{"uid":"d77db806ac4d8850","reportUrl":"https://novasamatech.github.io/test-runner/4650//#testresult/d77db806ac4d8850","status":"passed","time":{"start":1707220869399,"stop":1707220870107,"duration":708}},{"uid":"4a3d7c5f3d0304de","reportUrl":"https://novasamatech.github.io/test-runner/4649//#testresult/4a3d7c5f3d0304de","status":"passed","time":{"start":1707206460145,"stop":1707206460365,"duration":220}},{"uid":"1c151dbe6d59ff45","reportUrl":"https://novasamatech.github.io/test-runner/4648//#testresult/1c151dbe6d59ff45","status":"passed","time":{"start":1707192060166,"stop":1707192060434,"duration":268}},{"uid":"6fdd22430d57156c","reportUrl":"https://novasamatech.github.io/test-runner/4647//#testresult/6fdd22430d57156c","status":"passed","time":{"start":1707177703117,"stop":1707177703299,"duration":182}},{"uid":"cabc734083a68922","reportUrl":"https://novasamatech.github.io/test-runner/4646//#testresult/cabc734083a68922","status":"passed","time":{"start":1707163303108,"stop":1707163303411,"duration":303}},{"uid":"a711695abe418fdd","reportUrl":"https://novasamatech.github.io/test-runner/4645//#testresult/a711695abe418fdd","status":"passed","time":{"start":1707148874002,"stop":1707148874201,"duration":199}},{"uid":"2972dea08bdbf6ed","reportUrl":"https://novasamatech.github.io/test-runner/4644//#testresult/2972dea08bdbf6ed","status":"passed","time":{"start":1707134460752,"stop":1707134460983,"duration":231}},{"uid":"e59d4a596e916d4f","reportUrl":"https://novasamatech.github.io/test-runner/4643//#testresult/e59d4a596e916d4f","status":"passed","time":{"start":1707120065197,"stop":1707120065352,"duration":155}},{"uid":"4a15d65b7ff43755","reportUrl":"https://novasamatech.github.io/test-runner/4642//#testresult/4a15d65b7ff43755","status":"passed","time":{"start":1707105664581,"stop":1707105665223,"duration":642}},{"uid":"6a066fa151d07766","reportUrl":"https://novasamatech.github.io/test-runner/4641//#testresult/6a066fa151d07766","status":"passed","time":{"start":1707091308231,"stop":1707091308436,"duration":205}},{"uid":"ee7b9b215f766808","reportUrl":"https://novasamatech.github.io/test-runner/4640//#testresult/ee7b9b215f766808","status":"passed","time":{"start":1707076856860,"stop":1707076857012,"duration":152}},{"uid":"ea6b985742921fea","reportUrl":"https://novasamatech.github.io/test-runner/4639//#testresult/ea6b985742921fea","status":"passed","time":{"start":1707062459404,"stop":1707062459662,"duration":258}},{"uid":"e77bcd0c82a951f6","reportUrl":"https://novasamatech.github.io/test-runner/4638//#testresult/e77bcd0c82a951f6","status":"passed","time":{"start":1707048062934,"stop":1707048063169,"duration":235}}]},"tags":[]},"source":"7b509ee3d54eca7c.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}