{"uid":"90bd6b60600d0230","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1707336087023,"stop":1707336087370,"duration":347},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f113aee5f60>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f113af12680>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f113af129e0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1055-286"},{"name":"thread","value":"2119-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c2ac666e2fd2f00f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707336081627,"stop":1707336081975,"duration":348}},{"uid":"6315eceb8d6e3ea","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707336075937,"stop":1707336076502,"duration":565}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":2,"skipped":0,"passed":394,"unknown":0,"total":397},"items":[{"uid":"21d3a6686d5eacc1","reportUrl":"https://novasamatech.github.io/test-runner/4657//#testresult/21d3a6686d5eacc1","status":"passed","time":{"start":1707321661772,"stop":1707321661995,"duration":223}},{"uid":"a98afa9ce669ffb0","reportUrl":"https://novasamatech.github.io/test-runner/4656//#testresult/a98afa9ce669ffb0","status":"passed","time":{"start":1707307266315,"stop":1707307266668,"duration":353}},{"uid":"9cc766ae61626468","reportUrl":"https://novasamatech.github.io/test-runner/4655//#testresult/9cc766ae61626468","status":"passed","time":{"start":1707292862955,"stop":1707292863403,"duration":448}},{"uid":"5da88d5be4711f23","reportUrl":"https://novasamatech.github.io/test-runner/4654//#testresult/5da88d5be4711f23","status":"passed","time":{"start":1707278463919,"stop":1707278464154,"duration":235}},{"uid":"21b762954110cc94","reportUrl":"https://novasamatech.github.io/test-runner/4653//#testresult/21b762954110cc94","status":"passed","time":{"start":1707264098969,"stop":1707264099716,"duration":747}},{"uid":"c9e54ac181d6ff63","reportUrl":"https://novasamatech.github.io/test-runner/4652//#testresult/c9e54ac181d6ff63","status":"passed","time":{"start":1707249668643,"stop":1707249669430,"duration":787}},{"uid":"df1d71a0283bef55","reportUrl":"https://novasamatech.github.io/test-runner/4651//#testresult/df1d71a0283bef55","status":"passed","time":{"start":1707235263024,"stop":1707235263971,"duration":947}},{"uid":"e62d2c8829126ffc","reportUrl":"https://novasamatech.github.io/test-runner/4650//#testresult/e62d2c8829126ffc","status":"passed","time":{"start":1707220869086,"stop":1707220869976,"duration":890}},{"uid":"5974619419b80f3f","reportUrl":"https://novasamatech.github.io/test-runner/4649//#testresult/5974619419b80f3f","status":"passed","time":{"start":1707206459583,"stop":1707206459763,"duration":180}},{"uid":"40c2e71d9ba9574b","reportUrl":"https://novasamatech.github.io/test-runner/4648//#testresult/40c2e71d9ba9574b","status":"passed","time":{"start":1707192059482,"stop":1707192059692,"duration":210}},{"uid":"ff694aa0f74dd814","reportUrl":"https://novasamatech.github.io/test-runner/4647//#testresult/ff694aa0f74dd814","status":"passed","time":{"start":1707177702622,"stop":1707177702903,"duration":281}},{"uid":"3a39d7a60c620850","reportUrl":"https://novasamatech.github.io/test-runner/4646//#testresult/3a39d7a60c620850","status":"passed","time":{"start":1707163259061,"stop":1707163259329,"duration":268}},{"uid":"e0ac7c0242a1c81a","reportUrl":"https://novasamatech.github.io/test-runner/4645//#testresult/e0ac7c0242a1c81a","status":"passed","time":{"start":1707148873701,"stop":1707148873856,"duration":155}},{"uid":"db8552eea1414f15","reportUrl":"https://novasamatech.github.io/test-runner/4644//#testresult/db8552eea1414f15","status":"passed","time":{"start":1707134460623,"stop":1707134460936,"duration":313}},{"uid":"a311bc3dc4681b44","reportUrl":"https://novasamatech.github.io/test-runner/4643//#testresult/a311bc3dc4681b44","status":"passed","time":{"start":1707120064801,"stop":1707120064918,"duration":117}},{"uid":"fa26cc73f96994fd","reportUrl":"https://novasamatech.github.io/test-runner/4642//#testresult/fa26cc73f96994fd","status":"passed","time":{"start":1707105664615,"stop":1707105665329,"duration":714}},{"uid":"ccfaec778bb52188","reportUrl":"https://novasamatech.github.io/test-runner/4641//#testresult/ccfaec778bb52188","status":"passed","time":{"start":1707091308038,"stop":1707091308178,"duration":140}},{"uid":"7c6b03f1230c929d","reportUrl":"https://novasamatech.github.io/test-runner/4640//#testresult/7c6b03f1230c929d","status":"passed","time":{"start":1707076856523,"stop":1707076856669,"duration":146}},{"uid":"823f9179909ac8f0","reportUrl":"https://novasamatech.github.io/test-runner/4639//#testresult/823f9179909ac8f0","status":"passed","time":{"start":1707062459055,"stop":1707062459200,"duration":145}},{"uid":"5f181e872ba503f0","reportUrl":"https://novasamatech.github.io/test-runner/4638//#testresult/5f181e872ba503f0","status":"passed","time":{"start":1707048062729,"stop":1707048062892,"duration":163}}]},"tags":[]},"source":"90bd6b60600d0230.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}