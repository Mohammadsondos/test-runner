{"uid":"6d8e05fe3b38858","name":"test_can_create_connection[Test for KILT, url: wss://spiritnet.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"adf1600e77e05ae28b71b4467db54727","time":{"start":1690833856591,"stop":1690833856915,"duration":324},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","statusTrace":"data = {'name': 'KILT', 'url': 'wss://spiritnet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","statusTrace":"data = {'name': 'KILT', 'url': 'wss://spiritnet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"8ee37248572df40","name":"stdout","source":"8ee37248572df40.txt","type":"text/plain","size":573}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az951-679"},{"name":"thread","value":"1915-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://spiritnet.api.onfinality.io/public-ws', 'name': 'KILT'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d680a1797101c4db","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690833841134,"stop":1690833841458,"duration":324}},{"uid":"e6cc9342b8f4db13","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690833825549,"stop":1690833825894,"duration":345}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":480,"unknown":0,"total":484},"items":[{"uid":"80f9f3edb924975d","reportUrl":"https://novasamatech.github.io/test-runner/3489//#testresult/80f9f3edb924975d","status":"passed","time":{"start":1690819464409,"stop":1690819465141,"duration":732}},{"uid":"530cdfab43633881","reportUrl":"https://novasamatech.github.io/test-runner/3488//#testresult/530cdfab43633881","status":"passed","time":{"start":1690805099040,"stop":1690805099458,"duration":418}},{"uid":"565cbeacf5ba760e","reportUrl":"https://novasamatech.github.io/test-runner/3487//#testresult/565cbeacf5ba760e","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690790714513,"stop":1690790714705,"duration":192}},{"uid":"e70f005381450b00","reportUrl":"https://novasamatech.github.io/test-runner/3486//#testresult/e70f005381450b00","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690776286529,"stop":1690776286721,"duration":192}},{"uid":"2d9cb69d0100a8d1","reportUrl":"https://novasamatech.github.io/test-runner/3485//#testresult/2d9cb69d0100a8d1","status":"passed","time":{"start":1690762464162,"stop":1690762464979,"duration":817}},{"uid":"a1dc28cb7ed63ad2","reportUrl":"https://novasamatech.github.io/test-runner/3484//#testresult/a1dc28cb7ed63ad2","status":"passed","time":{"start":1690747442170,"stop":1690747442763,"duration":593}},{"uid":"18c0f5745f07f7a5","reportUrl":"https://novasamatech.github.io/test-runner/3483//#testresult/18c0f5745f07f7a5","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690733074558,"stop":1690733074752,"duration":194}},{"uid":"499256fcc1e95320","reportUrl":"https://novasamatech.github.io/test-runner/3482//#testresult/499256fcc1e95320","status":"passed","time":{"start":1690718668805,"stop":1690718669356,"duration":551}},{"uid":"e390c2f78ea0e86e","reportUrl":"https://novasamatech.github.io/test-runner/3481//#testresult/e390c2f78ea0e86e","status":"passed","time":{"start":1690704298014,"stop":1690704298421,"duration":407}},{"uid":"637a07730c25e6e6","reportUrl":"https://novasamatech.github.io/test-runner/3480//#testresult/637a07730c25e6e6","status":"passed","time":{"start":1690689868334,"stop":1690689868914,"duration":580}},{"uid":"80459cfba87cde7a","reportUrl":"https://novasamatech.github.io/test-runner/3479//#testresult/80459cfba87cde7a","status":"passed","time":{"start":1690676099979,"stop":1690676100427,"duration":448}},{"uid":"60762834211d0081","reportUrl":"https://novasamatech.github.io/test-runner/3478//#testresult/60762834211d0081","status":"passed","time":{"start":1690661039678,"stop":1690661040306,"duration":628}},{"uid":"5a030855359c06d5","reportUrl":"https://novasamatech.github.io/test-runner/3477//#testresult/5a030855359c06d5","status":"passed","time":{"start":1690646638480,"stop":1690646638900,"duration":420}},{"uid":"27cde1f821685374","reportUrl":"https://novasamatech.github.io/test-runner/3476//#testresult/27cde1f821685374","status":"passed","time":{"start":1690632269257,"stop":1690632269806,"duration":549}},{"uid":"7610b7f3862f833c","reportUrl":"https://novasamatech.github.io/test-runner/3475//#testresult/7610b7f3862f833c","status":"passed","time":{"start":1690617866851,"stop":1690617867244,"duration":393}},{"uid":"23b5643d4f0f9095","reportUrl":"https://novasamatech.github.io/test-runner/3474//#testresult/23b5643d4f0f9095","status":"passed","time":{"start":1690603433012,"stop":1690603433453,"duration":441}},{"uid":"c89e7c71b99f6c89","reportUrl":"https://novasamatech.github.io/test-runner/3473//#testresult/c89e7c71b99f6c89","status":"passed","time":{"start":1690589627445,"stop":1690589628099,"duration":654}},{"uid":"1a98023efaa004f","reportUrl":"https://novasamatech.github.io/test-runner/3472//#testresult/1a98023efaa004f","status":"passed","time":{"start":1690574639381,"stop":1690574639777,"duration":396}},{"uid":"c20950539fb1f861","reportUrl":"https://novasamatech.github.io/test-runner/3471//#testresult/c20950539fb1f861","status":"passed","time":{"start":1690560257924,"stop":1690560258442,"duration":518}},{"uid":"fa12c028e30618bb","reportUrl":"https://novasamatech.github.io/test-runner/3470//#testresult/fa12c028e30618bb","status":"passed","time":{"start":1690545903326,"stop":1690545903951,"duration":625}}]},"tags":[]},"source":"6d8e05fe3b38858.json","parameterValues":["{'url': 'wss://spiritnet.api.onfinality.io/public-ws', 'name': 'KILT'}"]}