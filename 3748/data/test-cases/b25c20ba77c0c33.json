{"uid":"b25c20ba77c0c33","name":"test_can_create_connection[Test for Kylin, url: wss://polkadot.kylin-node.co.uk]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3ee0d191ab7acb2fad9a82a3aa808e89","time":{"start":1694433773682,"stop":1694433773995,"duration":313},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 11 Sep 2023 12:02:53 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 11 Sep 2023 12:02:53 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 11 Sep 2023 12:02:53 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 11 Sep 2023 12:02:53 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"fc205c5a89fb4c20","name":"stdout","source":"fc205c5a89fb4c20.txt","type":"text/plain","size":1500}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az177-554"},{"name":"thread","value":"2056-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ad7c44d972e67148","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 11 Sep 2023 12:02:38 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694433758216,"stop":1694433758584,"duration":368}},{"uid":"6daf181f963e24a6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 11 Sep 2023 12:02:23 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694433742752,"stop":1694433743114,"duration":362}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":102,"unknown":0,"total":109},"items":[{"uid":"e9c9bbaec3118eeb","reportUrl":"https://novasamatech.github.io/test-runner/3747//#testresult/e9c9bbaec3118eeb","status":"passed","time":{"start":1694419740933,"stop":1694419741029,"duration":96}},{"uid":"8adaded61651f7b8","reportUrl":"https://novasamatech.github.io/test-runner/3746//#testresult/8adaded61651f7b8","status":"passed","time":{"start":1694404921796,"stop":1694404921836,"duration":40}},{"uid":"36add6c74ee1b4a6","reportUrl":"https://novasamatech.github.io/test-runner/3745//#testresult/36add6c74ee1b4a6","status":"passed","time":{"start":1694390568699,"stop":1694390569019,"duration":320}},{"uid":"c990c3f25c1d34c8","reportUrl":"https://novasamatech.github.io/test-runner/3744//#testresult/c990c3f25c1d34c8","status":"passed","time":{"start":1694376121274,"stop":1694376121384,"duration":110}},{"uid":"970d44ac80c80935","reportUrl":"https://novasamatech.github.io/test-runner/3743//#testresult/970d44ac80c80935","status":"passed","time":{"start":1694361724800,"stop":1694361725060,"duration":260}},{"uid":"f260561683012ed7","reportUrl":"https://novasamatech.github.io/test-runner/3742//#testresult/f260561683012ed7","status":"passed","time":{"start":1694347322273,"stop":1694347322431,"duration":158}},{"uid":"e790f3e161858e7d","reportUrl":"https://novasamatech.github.io/test-runner/3741//#testresult/e790f3e161858e7d","status":"passed","time":{"start":1694332922311,"stop":1694332922524,"duration":213}},{"uid":"120a0728b4703ac6","reportUrl":"https://novasamatech.github.io/test-runner/3740//#testresult/120a0728b4703ac6","status":"passed","time":{"start":1694318514703,"stop":1694318514833,"duration":130}},{"uid":"15dcf645a2242971","reportUrl":"https://novasamatech.github.io/test-runner/3739//#testresult/15dcf645a2242971","status":"passed","time":{"start":1694304169411,"stop":1694304169673,"duration":262}},{"uid":"9d3c54ebd5222d30","reportUrl":"https://novasamatech.github.io/test-runner/3738//#testresult/9d3c54ebd5222d30","status":"passed","time":{"start":1694289750978,"stop":1694289751007,"duration":29}},{"uid":"8dd35d994ab7b8b6","reportUrl":"https://novasamatech.github.io/test-runner/3737//#testresult/8dd35d994ab7b8b6","status":"passed","time":{"start":1694275338732,"stop":1694275338798,"duration":66}},{"uid":"fc7aea523a1749d9","reportUrl":"https://novasamatech.github.io/test-runner/3736//#testresult/fc7aea523a1749d9","status":"passed","time":{"start":1694260943280,"stop":1694260943398,"duration":118}},{"uid":"45ad2ac2c39bd249","reportUrl":"https://novasamatech.github.io/test-runner/3735//#testresult/45ad2ac2c39bd249","status":"passed","time":{"start":1694246528691,"stop":1694246528742,"duration":51}},{"uid":"974b1c1697b6dfbe","reportUrl":"https://novasamatech.github.io/test-runner/3734//#testresult/974b1c1697b6dfbe","status":"passed","time":{"start":1694232111866,"stop":1694232111937,"duration":71}},{"uid":"fa3d3e1ecd986890","reportUrl":"https://novasamatech.github.io/test-runner/3733//#testresult/fa3d3e1ecd986890","status":"passed","time":{"start":1694217784747,"stop":1694217784913,"duration":166}},{"uid":"92e885320ff4e4ac","reportUrl":"https://novasamatech.github.io/test-runner/3732//#testresult/92e885320ff4e4ac","status":"passed","time":{"start":1694203337184,"stop":1694203337439,"duration":255}},{"uid":"ecfafbc37045af1d","reportUrl":"https://novasamatech.github.io/test-runner/3731//#testresult/ecfafbc37045af1d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Fri, 08 Sep 2023 16:03:03 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694188982806,"stop":1694188983124,"duration":318}},{"uid":"7a0b37a4835162dd","reportUrl":"https://novasamatech.github.io/test-runner/3730//#testresult/7a0b37a4835162dd","status":"passed","time":{"start":1694174542600,"stop":1694174542714,"duration":114}},{"uid":"dcbcc0c5a5d0999","reportUrl":"https://novasamatech.github.io/test-runner/3729//#testresult/dcbcc0c5a5d0999","status":"passed","time":{"start":1694160112653,"stop":1694160112757,"duration":104}},{"uid":"16c9176e7204bca2","reportUrl":"https://novasamatech.github.io/test-runner/3728//#testresult/16c9176e7204bca2","status":"passed","time":{"start":1694145724040,"stop":1694145724098,"duration":58}}]},"tags":[]},"source":"b25c20ba77c0c33.json","parameterValues":["{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"]}