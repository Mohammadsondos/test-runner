{"uid":"c95dea6ed92d01e6","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1694433762600,"stop":1694433763260,"duration":660},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 11 Sep 2023 12:02:43 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 11 Sep 2023 12:02:43 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 11 Sep 2023 12:02:43 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 11 Sep 2023 12:02:43 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"4a65c9ff67ea1882","name":"stdout","source":"4a65c9ff67ea1882.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az177-554"},{"name":"thread","value":"2062-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d5f97a83b0ec8310","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 11 Sep 2023 12:02:26 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694433746744,"stop":1694433747451,"duration":707}},{"uid":"9eea218c83a5a97a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 11 Sep 2023 12:02:11 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694433730734,"stop":1694433731574,"duration":840}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":103,"unknown":0,"total":109},"items":[{"uid":"ffa20b37c3302c98","reportUrl":"https://novasamatech.github.io/test-runner/3747//#testresult/ffa20b37c3302c98","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 11 Sep 2023 08:02:43 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694419363444,"stop":1694419363851,"duration":407}},{"uid":"6f4a35a16f9b01b1","reportUrl":"https://novasamatech.github.io/test-runner/3746//#testresult/6f4a35a16f9b01b1","status":"passed","time":{"start":1694404912932,"stop":1694404913429,"duration":497}},{"uid":"dcbe6af3e185cd1f","reportUrl":"https://novasamatech.github.io/test-runner/3745//#testresult/dcbe6af3e185cd1f","status":"passed","time":{"start":1694390562356,"stop":1694390563249,"duration":893}},{"uid":"51b2bfe21c4a5e22","reportUrl":"https://novasamatech.github.io/test-runner/3744//#testresult/51b2bfe21c4a5e22","status":"passed","time":{"start":1694376131721,"stop":1694376132446,"duration":725}},{"uid":"45d051dea87f7290","reportUrl":"https://novasamatech.github.io/test-runner/3743//#testresult/45d051dea87f7290","status":"passed","time":{"start":1694361731727,"stop":1694361732575,"duration":848}},{"uid":"9b20af8321e31f50","reportUrl":"https://novasamatech.github.io/test-runner/3742//#testresult/9b20af8321e31f50","status":"passed","time":{"start":1694347322633,"stop":1694347323309,"duration":676}},{"uid":"a5aaadb2f9fce536","reportUrl":"https://novasamatech.github.io/test-runner/3741//#testresult/a5aaadb2f9fce536","status":"passed","time":{"start":1694332944076,"stop":1694332944734,"duration":658}},{"uid":"22274bbf8b592b8d","reportUrl":"https://novasamatech.github.io/test-runner/3740//#testresult/22274bbf8b592b8d","status":"passed","time":{"start":1694318505211,"stop":1694318506115,"duration":904}},{"uid":"37966d5d464a4031","reportUrl":"https://novasamatech.github.io/test-runner/3739//#testresult/37966d5d464a4031","status":"passed","time":{"start":1694304163636,"stop":1694304164321,"duration":685}},{"uid":"b3e452edef305f9e","reportUrl":"https://novasamatech.github.io/test-runner/3738//#testresult/b3e452edef305f9e","status":"passed","time":{"start":1694289705079,"stop":1694289705657,"duration":578}},{"uid":"579c46f908646d0e","reportUrl":"https://novasamatech.github.io/test-runner/3737//#testresult/579c46f908646d0e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sat, 09 Sep 2023 16:02:15 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694275335561,"stop":1694275336035,"duration":474}},{"uid":"8de15eaa3bdb836a","reportUrl":"https://novasamatech.github.io/test-runner/3736//#testresult/8de15eaa3bdb836a","status":"passed","time":{"start":1694260940176,"stop":1694260940825,"duration":649}},{"uid":"3cab0be4a0ff2223","reportUrl":"https://novasamatech.github.io/test-runner/3735//#testresult/3cab0be4a0ff2223","status":"passed","time":{"start":1694246526092,"stop":1694246526738,"duration":646}},{"uid":"8959a6c898daf72c","reportUrl":"https://novasamatech.github.io/test-runner/3734//#testresult/8959a6c898daf72c","status":"passed","time":{"start":1694232102400,"stop":1694232103135,"duration":735}},{"uid":"8048e0cdb630fdae","reportUrl":"https://novasamatech.github.io/test-runner/3733//#testresult/8048e0cdb630fdae","status":"passed","time":{"start":1694217777799,"stop":1694217778725,"duration":926}},{"uid":"d62d6e6b0eee55d3","reportUrl":"https://novasamatech.github.io/test-runner/3732//#testresult/d62d6e6b0eee55d3","status":"passed","time":{"start":1694203335784,"stop":1694203336463,"duration":679}},{"uid":"f7affd7c02387f4f","reportUrl":"https://novasamatech.github.io/test-runner/3731//#testresult/f7affd7c02387f4f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Fri, 08 Sep 2023 16:02:55 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694188975387,"stop":1694188976049,"duration":662}},{"uid":"48c15243e40a7a58","reportUrl":"https://novasamatech.github.io/test-runner/3730//#testresult/48c15243e40a7a58","status":"passed","time":{"start":1694174532409,"stop":1694174533232,"duration":823}},{"uid":"5ac7a597f3a299a2","reportUrl":"https://novasamatech.github.io/test-runner/3729//#testresult/5ac7a597f3a299a2","status":"passed","time":{"start":1694160106079,"stop":1694160106870,"duration":791}},{"uid":"3ae8c4eccae2bc45","reportUrl":"https://novasamatech.github.io/test-runner/3728//#testresult/3ae8c4eccae2bc45","status":"passed","time":{"start":1694145719748,"stop":1694145720427,"duration":679}}]},"tags":[]},"source":"c95dea6ed92d01e6.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}