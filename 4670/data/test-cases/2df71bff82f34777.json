{"uid":"2df71bff82f34777","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1707508890508,"stop":1707508890553,"duration":45},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f99ad28d990>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f99ad1a61d0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f99ad1a74c0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1116-949"},{"name":"thread","value":"2051-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1c0dd43b99662426","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707508885397,"stop":1707508885474,"duration":77}},{"uid":"b202c1259adf01bf","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1707508879017,"stop":1707508880377,"duration":1360}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":854,"unknown":0,"total":861},"items":[{"uid":"b630ff1c6b9c1e52","reportUrl":"https://novasamatech.github.io/test-runner/4669//#testresult/b630ff1c6b9c1e52","status":"passed","time":{"start":1707494460199,"stop":1707494460429,"duration":230}},{"uid":"8c0ec52bc00ab7e6","reportUrl":"https://novasamatech.github.io/test-runner/4668//#testresult/8c0ec52bc00ab7e6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480089601,"stop":1707480089897,"duration":296}},{"uid":"bded6b9f2062351e","reportUrl":"https://novasamatech.github.io/test-runner/4667//#testresult/bded6b9f2062351e","status":"passed","time":{"start":1707465667172,"stop":1707465667882,"duration":710}},{"uid":"9ecba7e3f445b313","reportUrl":"https://novasamatech.github.io/test-runner/4666//#testresult/9ecba7e3f445b313","status":"passed","time":{"start":1707451263066,"stop":1707451263287,"duration":221}},{"uid":"86298ca0eb6a7f79","reportUrl":"https://novasamatech.github.io/test-runner/4665//#testresult/86298ca0eb6a7f79","status":"passed","time":{"start":1707436914782,"stop":1707436915814,"duration":1032}},{"uid":"12e80804b6c06449","reportUrl":"https://novasamatech.github.io/test-runner/4664//#testresult/12e80804b6c06449","status":"passed","time":{"start":1707422465691,"stop":1707422466323,"duration":632}},{"uid":"8a2a219a559dafc","reportUrl":"https://novasamatech.github.io/test-runner/4663//#testresult/8a2a219a559dafc","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707408082250,"stop":1707408082597,"duration":347}},{"uid":"fe8e13cbc4a85763","reportUrl":"https://novasamatech.github.io/test-runner/4662//#testresult/fe8e13cbc4a85763","status":"passed","time":{"start":1707393665061,"stop":1707393665558,"duration":497}},{"uid":"dbb0b34a61449c3e","reportUrl":"https://novasamatech.github.io/test-runner/4661//#testresult/dbb0b34a61449c3e","status":"passed","time":{"start":1707379264258,"stop":1707379264618,"duration":360}},{"uid":"f122bbed06ce9704","reportUrl":"https://novasamatech.github.io/test-runner/4660//#testresult/f122bbed06ce9704","status":"passed","time":{"start":1707364858143,"stop":1707364858434,"duration":291}},{"uid":"a88f0590b000de3e","reportUrl":"https://novasamatech.github.io/test-runner/4659//#testresult/a88f0590b000de3e","status":"passed","time":{"start":1707350502689,"stop":1707350503271,"duration":582}},{"uid":"9aeb97ce01770ec0","reportUrl":"https://novasamatech.github.io/test-runner/4658//#testresult/9aeb97ce01770ec0","status":"passed","time":{"start":1707336092844,"stop":1707336093663,"duration":819}},{"uid":"746cc20f0c2c234d","reportUrl":"https://novasamatech.github.io/test-runner/4657//#testresult/746cc20f0c2c234d","status":"passed","time":{"start":1707321662314,"stop":1707321662567,"duration":253}},{"uid":"cf0ef1a91fc70bae","reportUrl":"https://novasamatech.github.io/test-runner/4656//#testresult/cf0ef1a91fc70bae","status":"passed","time":{"start":1707307266871,"stop":1707307267056,"duration":185}},{"uid":"d96dc634600cf271","reportUrl":"https://novasamatech.github.io/test-runner/4655//#testresult/d96dc634600cf271","status":"passed","time":{"start":1707292863537,"stop":1707292863812,"duration":275}},{"uid":"560e394bc15e455f","reportUrl":"https://novasamatech.github.io/test-runner/4654//#testresult/560e394bc15e455f","status":"passed","time":{"start":1707278464450,"stop":1707278464714,"duration":264}},{"uid":"6b71549bd123ae08","reportUrl":"https://novasamatech.github.io/test-runner/4653//#testresult/6b71549bd123ae08","status":"passed","time":{"start":1707264099676,"stop":1707264100539,"duration":863}},{"uid":"deba9db7e242ccf7","reportUrl":"https://novasamatech.github.io/test-runner/4652//#testresult/deba9db7e242ccf7","status":"passed","time":{"start":1707249669440,"stop":1707249670457,"duration":1017}},{"uid":"3ff51cbde1b6a84e","reportUrl":"https://novasamatech.github.io/test-runner/4651//#testresult/3ff51cbde1b6a84e","status":"passed","time":{"start":1707235263737,"stop":1707235264655,"duration":918}},{"uid":"4942ff6cdeb97eff","reportUrl":"https://novasamatech.github.io/test-runner/4650//#testresult/4942ff6cdeb97eff","status":"passed","time":{"start":1707220870042,"stop":1707220870877,"duration":835}}]},"tags":[]},"source":"2df71bff82f34777.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}