{"uid":"1bf3ba9e17fe75ff","name":"test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6b2d505052053a5da93000b537edc6f1","time":{"start":1712131489012,"stop":1712131489012,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n        connection = execute_with_timeout(\n            timeout=FIXTURE_TIMEOUT,\n            function=create_connection_by_url,\n            args=(data[\"url\"],),\n            error_message=f'Timeout {FIXTURE_TIMEOUT} when creating connection: {data[\"url\"]}'\n        )\n>       execute_with_timeout(\n            timeout=FIXTURE_TIMEOUT,\n            function=get_properties,\n            args=(connection,),\n            error_message=f'Timeout {FIXTURE_TIMEOUT} when getting properties: {data[\"url\"]}'\n        )\n\ntests/conftest.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:29: in execute_with_timeout\n    return func_timeout(timeout=timeout, func=function, args=args)\n.venv/lib/python3.10/site-packages/func_timeout/dafunc.py:108: in func_timeout\n    raise_exception(exception)\n.venv/lib/python3.10/site-packages/func_timeout/py3_raise.py:7: in raise_exception\n    raise exception[0] from None\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:667: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:571: in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f1121f76f80>\nmethod = 'state_getRuntimeVersion'\nparams = ['0x3f7f193a39b63f4bc52a2cbf37b4006c29a66ef0fc46c36a1f48b6df69860fd4']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1712131489013,"stop":1712131491455,"duration":2442},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 46, in connection_by_url\n    execute_with_timeout(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 29, in execute_with_timeout\n    return func_timeout(timeout=timeout, func=function, args=args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/func_timeout/dafunc.py\", line 108, in func_timeout\n    raise_exception(exception)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/func_timeout/py3_raise.py\", line 7, in raise_exception\n    raise exception[0] from None\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 667, in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 571, in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az985-416"},{"name":"thread","value":"2078-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b975a014083e4a85","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1712131481624,"stop":1712131481624,"duration":0}},{"uid":"97bc2d7348235957","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1712131474057,"stop":1712131474057,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":276,"skipped":0,"passed":796,"unknown":0,"total":1072},"items":[{"uid":"a7b3c7641b99b921","reportUrl":"https://novasamatech.github.io/test-runner/4995//#testresult/a7b3c7641b99b921","status":"passed","time":{"start":1712117075225,"stop":1712117075225,"duration":0}},{"uid":"5cd0fbe68ae30413","reportUrl":"https://novasamatech.github.io/test-runner/4994//#testresult/5cd0fbe68ae30413","status":"passed","time":{"start":1712102693454,"stop":1712102693454,"duration":0}},{"uid":"920b562163a0df7e","reportUrl":"https://novasamatech.github.io/test-runner/4993//#testresult/920b562163a0df7e","status":"passed","time":{"start":1712088241004,"stop":1712088241004,"duration":0}},{"uid":"3ff1458ac8993c84","reportUrl":"https://novasamatech.github.io/test-runner/4992//#testresult/3ff1458ac8993c84","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1712073848873,"stop":1712073848873,"duration":0}},{"uid":"b6862318a698e9bc","reportUrl":"https://novasamatech.github.io/test-runner/4991//#testresult/b6862318a698e9bc","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1712059442945,"stop":1712059442945,"duration":0}},{"uid":"70d9b808092cc3a0","reportUrl":"https://novasamatech.github.io/test-runner/4990//#testresult/70d9b808092cc3a0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1712048420401,"stop":1712048420401,"duration":0}},{"uid":"6107a7230874caab","reportUrl":"https://novasamatech.github.io/test-runner/4954//#testresult/6107a7230874caab","status":"passed","time":{"start":1711541030972,"stop":1711541030972,"duration":0}},{"uid":"9aae5a87fe09be89","reportUrl":"https://novasamatech.github.io/test-runner/4953//#testresult/9aae5a87fe09be89","status":"passed","time":{"start":1711526658629,"stop":1711526658629,"duration":0}},{"uid":"ba44774dc66e6c9b","reportUrl":"https://novasamatech.github.io/test-runner/4952//#testresult/ba44774dc66e6c9b","status":"passed","time":{"start":1711512242865,"stop":1711512242865,"duration":0}},{"uid":"e658c0c22e7fea15","reportUrl":"https://novasamatech.github.io/test-runner/4951//#testresult/e658c0c22e7fea15","status":"passed","time":{"start":1711497852434,"stop":1711497852434,"duration":0}},{"uid":"21ba3048cecd3c29","reportUrl":"https://novasamatech.github.io/test-runner/4950//#testresult/21ba3048cecd3c29","status":"passed","time":{"start":1711483418878,"stop":1711483418878,"duration":0}},{"uid":"96f4c1c816dc60e6","reportUrl":"https://novasamatech.github.io/test-runner/4949//#testresult/96f4c1c816dc60e6","status":"passed","time":{"start":1711469027699,"stop":1711469027699,"duration":0}},{"uid":"b915cbd8fbc2ac65","reportUrl":"https://novasamatech.github.io/test-runner/4948//#testresult/b915cbd8fbc2ac65","status":"passed","time":{"start":1711454635247,"stop":1711454635248,"duration":1}},{"uid":"e36d0b7b9475d2bb","reportUrl":"https://novasamatech.github.io/test-runner/4947//#testresult/e36d0b7b9475d2bb","status":"passed","time":{"start":1711440235796,"stop":1711440235796,"duration":0}},{"uid":"f55d0521ee1c2856","reportUrl":"https://novasamatech.github.io/test-runner/4946//#testresult/f55d0521ee1c2856","status":"passed","time":{"start":1711425840976,"stop":1711425840976,"duration":0}},{"uid":"9b3b3bf5866edb","reportUrl":"https://novasamatech.github.io/test-runner/4945//#testresult/9b3b3bf5866edb","status":"passed","time":{"start":1711411470616,"stop":1711411470616,"duration":0}},{"uid":"3a0fb79fb70495c7","reportUrl":"https://novasamatech.github.io/test-runner/4944//#testresult/3a0fb79fb70495c7","status":"passed","time":{"start":1711397024528,"stop":1711397024529,"duration":1}},{"uid":"623c0a514fbb7802","reportUrl":"https://novasamatech.github.io/test-runner/4943//#testresult/623c0a514fbb7802","status":"passed","time":{"start":1711382632186,"stop":1711382632186,"duration":0}},{"uid":"dc44299b53032908","reportUrl":"https://novasamatech.github.io/test-runner/4942//#testresult/dc44299b53032908","status":"passed","time":{"start":1711368251032,"stop":1711368251032,"duration":0}},{"uid":"170bff1e7571cf13","reportUrl":"https://novasamatech.github.io/test-runner/4941//#testresult/170bff1e7571cf13","status":"passed","time":{"start":1711353837953,"stop":1711353837953,"duration":0}}]},"tags":[]},"source":"1bf3ba9e17fe75ff.json","parameterValues":["{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"]}