{"uid":"8bf710cdee701dc2","name":"test_precision[Test for Ajuna]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"f83b10c44ff6b2488f5d32979f656bbc","time":{"start":1703145882973,"stop":1703145882973,"duration":0},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 520 None -+-+- {'date': 'Thu, 21 Dec 2023 08:04:44 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '15', 'connection': 'keep-alive', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=6stQFgL41O3Qy0PPBQPBvjxATQLlAGQZwdZkBFvttEAohzwBWTE%2FVgc2As1ohAM8gupdwhH0MNXxkTH0%2B9APVwksHbIkIOsQp7TiHK1wMEWlocfxRYsnKAawLF4P9ORMRvoxboW7hMVPwUUz0OAhGJuOHQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'x-frame-options': 'SAMEORIGIN', 'referrer-policy': 'same-origin', 'cache-control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'server': 'cloudflare', 'cf-ray': '838e9db02b0969b8-LAX'} -+-+- b'error code: 520'","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7fa1b8729510>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fa1b8729660>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 4}'\nopcode = 1\n\n    def send(self, payload: Union[bytes, str], opcode: int = ABNF.OPCODE_TEXT) -> int:\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:285: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fa1b8729660>\nframe = <websocket._abnf.ABNF object at 0x7fa1b86cfb50>\n\n    def send_frame(self, frame) -> int:\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:313: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fa1b8729660>\ndata = b\"\\x81\\xc4;\\xa2,Z@\\x80F)T\\xcc^*X\\x80\\x16z\\x19\\x90\\x02j\\x19\\x8e\\x0cxV\\xc7X2T\\xc6\\x0e`\\x1b\\x80O2Z\\xcbB\\x05\\\\\\xc7X\\x12^\\xc3Hx\\x17\\x82\\x0e*Z\\xd0M7H\\x80\\x16z`\\xff\\x00z\\x19\\xcbHx\\x01\\x82\\x18'\"\n\n    def _send(self, data: Union[str, bytes]):\n>       return send(self.sock, data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:527: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b\"\\x81\\xc4;\\xa2,Z@\\x80F)T\\xcc^*X\\x80\\x16z\\x19\\x90\\x02j\\x19\\x8e\\x0cxV\\xc7X2T\\xc6\\x0e`\\x1b\\x80O2Z\\xcbB\\x05\\\\\\xc7X\\x12^\\xc3Hx\\x17\\x82\\x0e*Z\\xd0M7H\\x80\\x16z`\\xff\\x00z\\x19\\xcbHx\\x01\\x82\\x18'\"\n\n    def send(sock: socket.socket, data: Union[bytes, str]) -> int:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:145: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'chain_model' for <Function test_precision[Test for Ajuna]>>\n\n    @pytest.fixture(scope=\"module\", params=get_substrate_chains(), ids=chain_names)\n    def chain_model(request) -> Chain:\n        chain = request.param\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/conftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:648: in init_runtime\n    block_hash = self.get_chain_head()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:435: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:271: in rpc_request\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 520 None -+-+- {'date': 'Thu, 21 Dec 2023 08:04:44 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '15', 'connection': 'keep-alive', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=6stQFgL41O3Qy0PPBQPBvjxATQLlAGQZwdZkBFvttEAohzwBWTE%2FVgc2As1ohAM8gupdwhH0MNXxkTH0%2B9APVwksHbIkIOsQp7TiHK1wMEWlocfxRYsnKAawLF4P9ORMRvoxboW7hMVPwUUz0OAhGJuOHQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'x-frame-options': 'SAMEORIGIN', 'referrer-policy': 'same-origin', 'cache-control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'server': 'cloudflare', 'cf-ray': '838e9db02b0969b8-LAX'} -+-+- b'error code: 520'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"chain_model","time":{"start":1703145847079,"stop":1703145867845,"duration":20766},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 31, in chain_model\n    chain.init_properties()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/chain_model.py\", line 44, in init_properties\n    self.properties = get_properties(self.substrate)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 648, in init_runtime\n    block_hash = self.get_chain_head()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 435, in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 323, in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 364, in recv\n    opcode, data = self.recv_data()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 387, in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 408, in recv_data_frame\n    frame = self.recv_frame()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 447, in recv_frame\n    return self.frame_buffer.recv_frame()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_abnf.py\", line 340, in recv_frame\n    self.recv_header()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_abnf.py\", line 296, in recv_header\n    header = self.recv_strict(2)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_abnf.py\", line 375, in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 531, in _recv\n    return recv(self.sock, bufsize)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_socket.py\", line 124, in recv\n    raise WebSocketConnectionClosedException(\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"chain_model","time":{"start":1703145882973,"stop":1703145884358,"duration":1385},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 520 None -+-+- {'date': 'Thu, 21 Dec 2023 08:04:44 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '15', 'connection': 'keep-alive', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=6stQFgL41O3Qy0PPBQPBvjxATQLlAGQZwdZkBFvttEAohzwBWTE%2FVgc2As1ohAM8gupdwhH0MNXxkTH0%2B9APVwksHbIkIOsQp7TiHK1wMEWlocfxRYsnKAawLF4P9ORMRvoxboW7hMVPwUUz0OAhGJuOHQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'x-frame-options': 'SAMEORIGIN', 'referrer-policy': 'same-origin', 'cache-control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'server': 'cloudflare', 'cf-ray': '838e9db02b0969b8-LAX'} -+-+- b'error code: 520'\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 31, in chain_model\n    chain.init_properties()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/chain_model.py\", line 44, in init_properties\n    self.properties = get_properties(self.substrate)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 648, in init_runtime\n    block_hash = self.get_chain_head()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 435, in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 271, in rpc_request\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"chain_model","time":{"start":1703145899496,"stop":1703145900862,"duration":1366},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 520 None -+-+- {'date': 'Thu, 21 Dec 2023 08:05:00 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '15', 'connection': 'keep-alive', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=yEMbeCOUvhHtZn1%2B0tVo2n3q6nHYW%2B1rg0PGja%2B8DWzLaZzSvm7yICrrqVWBBCmDc110fjzvAaZKxxfUuzcTVC%2FUwGnosemxyJp0ANG2SnPFPNFhlFcKC0XXIW1%2FPuWYjSMrF10SfW8pLmALFVYDlj7CWQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'x-frame-options': 'SAMEORIGIN', 'referrer-policy': 'same-origin', 'cache-control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'server': 'cloudflare', 'cf-ray': '838e9e174efe0916-LAX'} -+-+- b'error code: 520'\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 31, in chain_model\n    chain.init_properties()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/chain_model.py\", line 44, in init_properties\n    self.properties = get_properties(self.substrate)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 648, in init_runtime\n    block_hash = self.get_chain_head()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 435, in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 271, in rpc_request\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 520 None -+-+- {'date': 'Thu, 21 Dec 2023 08:04:44 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '15', 'connection': 'keep-alive', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=6stQFgL41O3Qy0PPBQPBvjxATQLlAGQZwdZkBFvttEAohzwBWTE%2FVgc2As1ohAM8gupdwhH0MNXxkTH0%2B9APVwksHbIkIOsQp7TiHK1wMEWlocfxRYsnKAawLF4P9ORMRvoxboW7hMVPwUUz0OAhGJuOHQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'x-frame-options': 'SAMEORIGIN', 'referrer-policy': 'same-origin', 'cache-control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'server': 'cloudflare', 'cf-ray': '838e9db02b0969b8-LAX'} -+-+- b'error code: 520'","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7fa1b8729510>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fa1b8729660>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 4}'\nopcode = 1\n\n    def send(self, payload: Union[bytes, str], opcode: int = ABNF.OPCODE_TEXT) -> int:\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:285: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fa1b8729660>\nframe = <websocket._abnf.ABNF object at 0x7fa1b86cfb50>\n\n    def send_frame(self, frame) -> int:\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:313: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fa1b8729660>\ndata = b\"\\x81\\xc4;\\xa2,Z@\\x80F)T\\xcc^*X\\x80\\x16z\\x19\\x90\\x02j\\x19\\x8e\\x0cxV\\xc7X2T\\xc6\\x0e`\\x1b\\x80O2Z\\xcbB\\x05\\\\\\xc7X\\x12^\\xc3Hx\\x17\\x82\\x0e*Z\\xd0M7H\\x80\\x16z`\\xff\\x00z\\x19\\xcbHx\\x01\\x82\\x18'\"\n\n    def _send(self, data: Union[str, bytes]):\n>       return send(self.sock, data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:527: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b\"\\x81\\xc4;\\xa2,Z@\\x80F)T\\xcc^*X\\x80\\x16z\\x19\\x90\\x02j\\x19\\x8e\\x0cxV\\xc7X2T\\xc6\\x0e`\\x1b\\x80O2Z\\xcbB\\x05\\\\\\xc7X\\x12^\\xc3Hx\\x17\\x82\\x0e*Z\\xd0M7H\\x80\\x16z`\\xff\\x00z\\x19\\xcbHx\\x01\\x82\\x18'\"\n\n    def send(sock: socket.socket, data: Union[bytes, str]) -> int:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:145: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'chain_model' for <Function test_precision[Test for Ajuna]>>\n\n    @pytest.fixture(scope=\"module\", params=get_substrate_chains(), ids=chain_names)\n    def chain_model(request) -> Chain:\n        chain = request.param\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/conftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:648: in init_runtime\n    block_hash = self.get_chain_head()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:435: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:271: in rpc_request\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 520 None -+-+- {'date': 'Thu, 21 Dec 2023 08:04:44 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '15', 'connection': 'keep-alive', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=6stQFgL41O3Qy0PPBQPBvjxATQLlAGQZwdZkBFvttEAohzwBWTE%2FVgc2As1ohAM8gupdwhH0MNXxkTH0%2B9APVwksHbIkIOsQp7TiHK1wMEWlocfxRYsnKAawLF4P9ORMRvoxboW7hMVPwUUz0OAhGJuOHQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'x-frame-options': 'SAMEORIGIN', 'referrer-policy': 'same-origin', 'cache-control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'server': 'cloudflare', 'cf-ray': '838e9db02b0969b8-LAX'} -+-+- b'error code: 520'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"34b52a41aa9b6152","name":"stdout","source":"34b52a41aa9b6152.txt","type":"text/plain","size":1399}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az1196-639"},{"name":"thread","value":"2061-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain_model","value":"<scripts.utils.chain_model.Chain object at 0x7fa1dd6c27d0>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"8bf710cdee701dc2.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fa1dd6c27d0>"]}