{"uid":"8abadc2373e4a14d","name":"test_can_create_connection[Test for krest, url: wss://wss-krest.peaq.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"bbac28ac5bc0cf35cd76b95eee77383a","time":{"start":1703146413153,"stop":1703146413153,"duration":0},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Dec 2023 08:13:34 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for krest, url: wss://wss-krest.peaq.network]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Dec 2023 08:13:34 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1703146413153,"stop":1703146414150,"duration":997},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Dec 2023 08:13:34 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Dec 2023 08:13:34 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for krest, url: wss://wss-krest.peaq.network]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Dec 2023 08:13:34 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"4b24dd47c7c35af6","name":"stdout","source":"4b24dd47c7c35af6.txt","type":"text/plain","size":1168}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az698-733"},{"name":"thread","value":"2148-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://wss-krest.peaq.network', 'name': 'krest'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"54f705d522122cad","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Dec 2023 08:13:18 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1703146396924,"stop":1703146396924,"duration":0}},{"uid":"df9bdc78dc9bd9ad","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Dec 2023 08:13:01 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1703146380750,"stop":1703146380750,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":648,"unknown":0,"total":651},"items":[{"uid":"31df815007b7e910","reportUrl":"https://novasamatech.github.io/test-runner/4362//#testresult/31df815007b7e910","status":"passed","time":{"start":1703131713710,"stop":1703131713710,"duration":0}},{"uid":"44afe7f2e0a4a18c","reportUrl":"https://novasamatech.github.io/test-runner/4361//#testresult/44afe7f2e0a4a18c","status":"passed","time":{"start":1703117346434,"stop":1703117346434,"duration":0}},{"uid":"5b684819338be746","reportUrl":"https://novasamatech.github.io/test-runner/4360//#testresult/5b684819338be746","status":"passed","time":{"start":1703103028324,"stop":1703103028324,"duration":0}},{"uid":"938f7f25812440f2","reportUrl":"https://novasamatech.github.io/test-runner/4359//#testresult/938f7f25812440f2","status":"passed","time":{"start":1703088506404,"stop":1703088506404,"duration":0}},{"uid":"dbe1da3b4f33ca69","reportUrl":"https://novasamatech.github.io/test-runner/4358//#testresult/dbe1da3b4f33ca69","status":"passed","time":{"start":1703074145207,"stop":1703074145207,"duration":0}},{"uid":"5747bff070b0fff4","reportUrl":"https://novasamatech.github.io/test-runner/4357//#testresult/5747bff070b0fff4","status":"passed","time":{"start":1703059686657,"stop":1703059686657,"duration":0}},{"uid":"80a098d5714a8a38","reportUrl":"https://novasamatech.github.io/test-runner/4356//#testresult/80a098d5714a8a38","status":"passed","time":{"start":1703045251252,"stop":1703045251252,"duration":0}},{"uid":"7f941e30728d325c","reportUrl":"https://novasamatech.github.io/test-runner/4355//#testresult/7f941e30728d325c","status":"passed","time":{"start":1703030966117,"stop":1703030966117,"duration":0}},{"uid":"6ab7cb13d2b10ce2","reportUrl":"https://novasamatech.github.io/test-runner/4354//#testresult/6ab7cb13d2b10ce2","status":"passed","time":{"start":1703016505171,"stop":1703016505171,"duration":0}},{"uid":"17f8186428f49d77","reportUrl":"https://novasamatech.github.io/test-runner/4353//#testresult/17f8186428f49d77","status":"passed","time":{"start":1703002066954,"stop":1703002066954,"duration":0}},{"uid":"5c4f048829368445","reportUrl":"https://novasamatech.github.io/test-runner/4352//#testresult/5c4f048829368445","status":"passed","time":{"start":1702987695345,"stop":1702987695345,"duration":0}},{"uid":"3ca3802c97e8bc09","reportUrl":"https://novasamatech.github.io/test-runner/4351//#testresult/3ca3802c97e8bc09","status":"passed","time":{"start":1702973261858,"stop":1702973261859,"duration":1}},{"uid":"d3477e8400e37ebe","reportUrl":"https://novasamatech.github.io/test-runner/4350//#testresult/d3477e8400e37ebe","status":"passed","time":{"start":1702958890125,"stop":1702958890125,"duration":0}},{"uid":"33cfaff438c74832","reportUrl":"https://novasamatech.github.io/test-runner/4349//#testresult/33cfaff438c74832","status":"passed","time":{"start":1702944492135,"stop":1702944492135,"duration":0}},{"uid":"8fa4ab2ab996dc68","reportUrl":"https://novasamatech.github.io/test-runner/4348//#testresult/8fa4ab2ab996dc68","status":"passed","time":{"start":1702930084292,"stop":1702930084292,"duration":0}},{"uid":"765f17639c87d14a","reportUrl":"https://novasamatech.github.io/test-runner/4347//#testresult/765f17639c87d14a","status":"passed","time":{"start":1702915553704,"stop":1702915553704,"duration":0}},{"uid":"7cb2c4f53fac1368","reportUrl":"https://novasamatech.github.io/test-runner/4346//#testresult/7cb2c4f53fac1368","status":"passed","time":{"start":1702901389558,"stop":1702901389558,"duration":0}},{"uid":"b4de74274e360648","reportUrl":"https://novasamatech.github.io/test-runner/4345//#testresult/b4de74274e360648","status":"passed","time":{"start":1702893100986,"stop":1702893100986,"duration":0}},{"uid":"9a073529e85f5e","reportUrl":"https://novasamatech.github.io/test-runner/4327//#testresult/9a073529e85f5e","status":"passed","time":{"start":1702641980459,"stop":1702641980459,"duration":0}},{"uid":"3e66be0172753100","reportUrl":"https://novasamatech.github.io/test-runner/4326//#testresult/3e66be0172753100","status":"passed","time":{"start":1702641423292,"stop":1702641423292,"duration":0}}]},"tags":[]},"source":"8abadc2373e4a14d.json","parameterValues":["{'url': 'wss://wss-krest.peaq.network', 'name': 'krest'}"]}