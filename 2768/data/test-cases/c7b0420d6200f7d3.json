{"uid":"c7b0420d6200f7d3","name":"test_address_prefix[Test for Kabocha]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"8194c89ca05808bf07a2d289405b0a3b","time":{"start":1680710813158,"stop":1680710935236,"duration":122078},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f48ef3ba620>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 7}'\nopcode = 1\n\n    def send(self, payload, opcode=ABNF.OPCODE_TEXT):\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\nframe = <websocket._abnf.ABNF object at 0x7f48edadcbe0>\n\n    def send_frame(self, frame):\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\ndata = b'\\x81\\xc4|\\x15<j\\x077V\\x19\\x13{N\\x1a\\x1f7\\x06J^\\'\\x12Z^9\\x1cH\\x11pH\\x02\\x13q\\x1eP\\\\7_\\x02\\x1d|R5\\x1bpH\"\\x19tXHP5\\x1e\\x1a\\x1dg]\\x07\\x0f7\\x06J\\'H\\x10J^|XHF5\\x0b\\x17'\n\n    def _send(self, data):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc4|\\x15<j\\x077V\\x19\\x13{N\\x1a\\x1f7\\x06J^\\'\\x12Z^9\\x1cH\\x11pH\\x02\\x13q\\x1eP\\\\7_\\x02\\x1d|R5\\x1bpH\"\\x19tXHP5\\x1e\\x1a\\x1dg]\\x07\\x0f7\\x06J\\'H\\x10J^|XHF5\\x0b\\x17'\n\n    def send(sock, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f491b14d600>\nchain = <scripts.utils.chain_model.Chain object at 0x7f491b3fe4d0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1117: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:874: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:719: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f48ef3ba620>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 7}'\nopcode = 1\n\n    def send(self, payload, opcode=ABNF.OPCODE_TEXT):\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\nframe = <websocket._abnf.ABNF object at 0x7f48edadcbe0>\n\n    def send_frame(self, frame):\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\ndata = b'\\x81\\xc4|\\x15<j\\x077V\\x19\\x13{N\\x1a\\x1f7\\x06J^\\'\\x12Z^9\\x1cH\\x11pH\\x02\\x13q\\x1eP\\\\7_\\x02\\x1d|R5\\x1bpH\"\\x19tXHP5\\x1e\\x1a\\x1dg]\\x07\\x0f7\\x06J\\'H\\x10J^|XHF5\\x0b\\x17'\n\n    def _send(self, data):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc4|\\x15<j\\x077V\\x19\\x13{N\\x1a\\x1f7\\x06J^\\'\\x12Z^9\\x1cH\\x11pH\\x02\\x13q\\x1eP\\\\7_\\x02\\x1d|R5\\x1bpH\"\\x19tXHP5\\x1e\\x1a\\x1dg]\\x07\\x0f7\\x06J\\'H\\x10J^|XHF5\\x0b\\x17'\n\n    def send(sock, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f491b14d600>\nchain = <scripts.utils.chain_model.Chain object at 0x7f491b3fe4d0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1117: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:874: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:719: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"656533d479b7a51a","name":"stdout","source":"656533d479b7a51a.txt","type":"text/plain","size":190}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az455-0"},{"name":"thread","value":"1845-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f491b3fe4d0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"457c1d59c06bb25a","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1680710735221,"stop":1680710803002,"duration":67781}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":63,"skipped":0,"passed":881,"unknown":0,"total":944},"items":[{"uid":"a4cdd6a4fe121443","reportUrl":"https://nova-wallet.github.io/test-runner/2766//#testresult/a4cdd6a4fe121443","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680681983184,"stop":1680681984182,"duration":998}},{"uid":"853c89c4d203c9a9","reportUrl":"https://nova-wallet.github.io/test-runner/2765//#testresult/853c89c4d203c9a9","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680667544154,"stop":1680667545411,"duration":1257}},{"uid":"10d6ddf233cdfc55","reportUrl":"https://nova-wallet.github.io/test-runner/2764//#testresult/10d6ddf233cdfc55","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680653581032,"stop":1680653582035,"duration":1003}},{"uid":"69836b936326a8ae","reportUrl":"https://nova-wallet.github.io/test-runner/2763//#testresult/69836b936326a8ae","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680638725692,"stop":1680638726732,"duration":1040}},{"uid":"e3b7aae94fb44a2e","reportUrl":"https://nova-wallet.github.io/test-runner/2762//#testresult/e3b7aae94fb44a2e","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680624341084,"stop":1680624342106,"duration":1022}},{"uid":"1f38f83f62561d0b","reportUrl":"https://nova-wallet.github.io/test-runner/2761//#testresult/1f38f83f62561d0b","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680609983474,"stop":1680609984432,"duration":958}},{"uid":"1079793b0153b3e4","reportUrl":"https://nova-wallet.github.io/test-runner/2759//#testresult/1079793b0153b3e4","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680581137937,"stop":1680581139064,"duration":1127}},{"uid":"c7dc2d4e1d8c462f","reportUrl":"https://nova-wallet.github.io/test-runner/2758//#testresult/c7dc2d4e1d8c462f","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680567281310,"stop":1680567282265,"duration":955}},{"uid":"481add6843a284f7","reportUrl":"https://nova-wallet.github.io/test-runner/2757//#testresult/481add6843a284f7","status":"passed","time":{"start":1680552334045,"stop":1680552341356,"duration":7311}},{"uid":"ff3ce3ef38f4e1c","reportUrl":"https://nova-wallet.github.io/test-runner/2756//#testresult/ff3ce3ef38f4e1c","status":"passed","time":{"start":1680537923213,"stop":1680537929181,"duration":5968}},{"uid":"8f0ee35bf711ab3b","reportUrl":"https://nova-wallet.github.io/test-runner/2755//#testresult/8f0ee35bf711ab3b","status":"passed","time":{"start":1680523585514,"stop":1680523593192,"duration":7678}},{"uid":"eb1dee2289375446","reportUrl":"https://nova-wallet.github.io/test-runner/2754//#testresult/eb1dee2289375446","status":"passed","time":{"start":1680509426074,"stop":1680509433574,"duration":7500}},{"uid":"29e5dadc63b4ddb5","reportUrl":"https://nova-wallet.github.io/test-runner/2753//#testresult/29e5dadc63b4ddb5","status":"passed","time":{"start":1680494982856,"stop":1680494989278,"duration":6422}},{"uid":"dd6a5ccc0379633d","reportUrl":"https://nova-wallet.github.io/test-runner/2752//#testresult/dd6a5ccc0379633d","status":"passed","time":{"start":1680481147956,"stop":1680481156122,"duration":8166}},{"uid":"41cc0df222d92902","reportUrl":"https://nova-wallet.github.io/test-runner/2751//#testresult/41cc0df222d92902","status":"passed","time":{"start":1680466186684,"stop":1680466193985,"duration":7301}},{"uid":"65c1df8ed3974202","reportUrl":"https://nova-wallet.github.io/test-runner/2750//#testresult/65c1df8ed3974202","status":"passed","time":{"start":1680451777201,"stop":1680451782995,"duration":5794}},{"uid":"2524049151667895","reportUrl":"https://nova-wallet.github.io/test-runner/2749//#testresult/2524049151667895","status":"passed","time":{"start":1680437426396,"stop":1680437434562,"duration":8166}},{"uid":"a59ea975aea3ae79","reportUrl":"https://nova-wallet.github.io/test-runner/2748//#testresult/a59ea975aea3ae79","status":"passed","time":{"start":1680423008763,"stop":1680423014908,"duration":6145}},{"uid":"f7c05cc8c0fc3e51","reportUrl":"https://nova-wallet.github.io/test-runner/2747//#testresult/f7c05cc8c0fc3e51","status":"passed","time":{"start":1680408592876,"stop":1680408598973,"duration":6097}},{"uid":"b9efe81856b381b0","reportUrl":"https://nova-wallet.github.io/test-runner/2746//#testresult/b9efe81856b381b0","status":"passed","time":{"start":1680394824720,"stop":1680394832311,"duration":7591}}]},"tags":[]},"source":"c7b0420d6200f7d3.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f491b3fe4d0>"]}