{"uid":"705ffe894aa6d8cd","name":"test_chainId[Test for Kabocha]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"3f829704dc4a7a46cda4e30cd68cf2a7","time":{"start":1680711081672,"stop":1680711203796,"duration":122124},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f48ef3ba620>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 9}'\nopcode = 1\n\n    def send(self, payload, opcode=ABNF.OPCODE_TEXT):\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\nframe = <websocket._abnf.ABNF object at 0x7f48ed763c40>\n\n    def send_frame(self, frame):\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\ndata = b\"\\x81\\xc4Fz\\xaa\\x1d=X\\xc0n)\\x14\\xd8m%X\\x90=dH\\x84-dV\\x8a?+\\x1f\\xdeu)\\x1e\\x88'fX\\xc9u'\\x13\\xc4B!\\x1f\\xdeU#\\x1b\\xce?jZ\\x88m'\\x08\\xcbp5X\\x90=\\x1d'\\x86=d\\x13\\xce?|Z\\x93`\"\n\n    def _send(self, data):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b\"\\x81\\xc4Fz\\xaa\\x1d=X\\xc0n)\\x14\\xd8m%X\\x90=dH\\x84-dV\\x8a?+\\x1f\\xdeu)\\x1e\\x88'fX\\xc9u'\\x13\\xc4B!\\x1f\\xdeU#\\x1b\\xce?jZ\\x88m'\\x08\\xcbp5X\\x90=\\x1d'\\x86=d\\x13\\xce?|Z\\x93`\"\n\n    def send(sock, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_network_parameters.TestChainId object at 0x7f491b14fdf0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f491b3fe4d0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1117: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:874: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:719: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f48ef3ba620>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 9}'\nopcode = 1\n\n    def send(self, payload, opcode=ABNF.OPCODE_TEXT):\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\nframe = <websocket._abnf.ABNF object at 0x7f48ed763c40>\n\n    def send_frame(self, frame):\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f48ef3bab90>\ndata = b\"\\x81\\xc4Fz\\xaa\\x1d=X\\xc0n)\\x14\\xd8m%X\\x90=dH\\x84-dV\\x8a?+\\x1f\\xdeu)\\x1e\\x88'fX\\xc9u'\\x13\\xc4B!\\x1f\\xdeU#\\x1b\\xce?jZ\\x88m'\\x08\\xcbp5X\\x90=\\x1d'\\x86=d\\x13\\xce?|Z\\x93`\"\n\n    def _send(self, data):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b\"\\x81\\xc4Fz\\xaa\\x1d=X\\xc0n)\\x14\\xd8m%X\\x90=dH\\x84-dV\\x8a?+\\x1f\\xdeu)\\x1e\\x88'fX\\xc9u'\\x13\\xc4B!\\x1f\\xdeU#\\x1b\\xce?jZ\\x88m'\\x08\\xcbp5X\\x90=\\x1d'\\x86=d\\x13\\xce?|Z\\x93`\"\n\n    def send(sock, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_network_parameters.TestChainId object at 0x7f491b14fdf0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f491b3fe4d0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1117: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:874: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:719: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"973f8346c91f636f","name":"stdout","source":"973f8346c91f636f.txt","type":"text/plain","size":380}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az455-0"},{"name":"thread","value":"1845-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f491b3fe4d0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ba93e33461f79958","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out","time":{"start":1680710949337,"stop":1680711071442,"duration":122105}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":63,"skipped":0,"passed":881,"unknown":0,"total":944},"items":[{"uid":"f15a478c7816c59f","reportUrl":"https://nova-wallet.github.io/test-runner/2766//#testresult/f15a478c7816c59f","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680682140804,"stop":1680682142538,"duration":1734}},{"uid":"eb579a71371ee90c","reportUrl":"https://nova-wallet.github.io/test-runner/2765//#testresult/eb579a71371ee90c","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680667732013,"stop":1680667734056,"duration":2043}},{"uid":"6c6b11fefe9a3c46","reportUrl":"https://nova-wallet.github.io/test-runner/2764//#testresult/6c6b11fefe9a3c46","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680653740316,"stop":1680653742004,"duration":1688}},{"uid":"6ce6e1e44397fdc6","reportUrl":"https://nova-wallet.github.io/test-runner/2763//#testresult/6ce6e1e44397fdc6","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680638815525,"stop":1680638816635,"duration":1110}},{"uid":"83df20464140220e","reportUrl":"https://nova-wallet.github.io/test-runner/2762//#testresult/83df20464140220e","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680624490782,"stop":1680624492499,"duration":1717}},{"uid":"9d997e5382b438c6","reportUrl":"https://nova-wallet.github.io/test-runner/2761//#testresult/9d997e5382b438c6","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680610129409,"stop":1680610130989,"duration":1580}},{"uid":"92d77564c140a395","reportUrl":"https://nova-wallet.github.io/test-runner/2759//#testresult/92d77564c140a395","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680581316356,"stop":1680581318253,"duration":1897}},{"uid":"2f5dc90324e5cfc1","reportUrl":"https://nova-wallet.github.io/test-runner/2758//#testresult/2f5dc90324e5cfc1","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1680567363292,"stop":1680567364415,"duration":1123}},{"uid":"20aadd80c4de69d6","reportUrl":"https://nova-wallet.github.io/test-runner/2757//#testresult/20aadd80c4de69d6","status":"passed","time":{"start":1680552511308,"stop":1680552522931,"duration":11623}},{"uid":"59c89bfbc0b26a99","reportUrl":"https://nova-wallet.github.io/test-runner/2756//#testresult/59c89bfbc0b26a99","status":"passed","time":{"start":1680538071314,"stop":1680538080893,"duration":9579}},{"uid":"2114d35088df3620","reportUrl":"https://nova-wallet.github.io/test-runner/2755//#testresult/2114d35088df3620","status":"passed","time":{"start":1680523760933,"stop":1680523773579,"duration":12646}},{"uid":"23c375ad323cd734","reportUrl":"https://nova-wallet.github.io/test-runner/2754//#testresult/23c375ad323cd734","status":"passed","time":{"start":1680509436211,"stop":1680509437946,"duration":1735}},{"uid":"ac76ba302439dcf5","reportUrl":"https://nova-wallet.github.io/test-runner/2753//#testresult/ac76ba302439dcf5","status":"passed","time":{"start":1680494991220,"stop":1680494992424,"duration":1204}},{"uid":"7bf5ffd3b7ba214f","reportUrl":"https://nova-wallet.github.io/test-runner/2752//#testresult/7bf5ffd3b7ba214f","status":"passed","time":{"start":1680481158796,"stop":1680481160418,"duration":1622}},{"uid":"b0ba62cbeb82b658","reportUrl":"https://nova-wallet.github.io/test-runner/2751//#testresult/b0ba62cbeb82b658","status":"passed","time":{"start":1680466196567,"stop":1680466198230,"duration":1663}},{"uid":"9f54121cf81dbfe1","reportUrl":"https://nova-wallet.github.io/test-runner/2750//#testresult/9f54121cf81dbfe1","status":"passed","time":{"start":1680451784988,"stop":1680451786380,"duration":1392}},{"uid":"3316d548bb30b730","reportUrl":"https://nova-wallet.github.io/test-runner/2749//#testresult/3316d548bb30b730","status":"passed","time":{"start":1680437437296,"stop":1680437438996,"duration":1700}},{"uid":"a75d449332f62d11","reportUrl":"https://nova-wallet.github.io/test-runner/2748//#testresult/a75d449332f62d11","status":"passed","time":{"start":1680423016982,"stop":1680423018270,"duration":1288}},{"uid":"2eed570ecbed8db7","reportUrl":"https://nova-wallet.github.io/test-runner/2747//#testresult/2eed570ecbed8db7","status":"passed","time":{"start":1680408601038,"stop":1680408602400,"duration":1362}},{"uid":"19bce1239923701","reportUrl":"https://nova-wallet.github.io/test-runner/2746//#testresult/19bce1239923701","status":"passed","time":{"start":1680394834987,"stop":1680394836577,"duration":1590}}]},"tags":[]},"source":"705ffe894aa6d8cd.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f491b3fe4d0>"]}