{"uid":"2608dd24fa401deb","name":"test_can_create_connection[Test for Calamari, url: wss://calamari.systems]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1f97e1b2aa75f736283999eef96b536b","time":{"start":1686427499509,"stop":1686427499855,"duration":346},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://calamari.systems'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://calamari.systems'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"3fd147cdd8cfec84","name":"stdout","source":"3fd147cdd8cfec84.txt","type":"text/plain","size":642}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az576-2"},{"name":"thread","value":"1890-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://calamari.systems', 'name': 'Calamari'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a29259c49c5a1683","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)","time":{"start":1686427484019,"stop":1686427484349,"duration":330}},{"uid":"5d1234adc9feef22","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)","time":{"start":1686427468368,"stop":1686427468751,"duration":383}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":189,"unknown":0,"total":190},"items":[{"uid":"9aa26e3588e77da","reportUrl":"https://novasamatech.github.io/test-runner/3183//#testresult/9aa26e3588e77da","status":"passed","time":{"start":1686413064907,"stop":1686413065608,"duration":701}},{"uid":"53720d6fde17e54d","reportUrl":"https://novasamatech.github.io/test-runner/3182//#testresult/53720d6fde17e54d","status":"passed","time":{"start":1686398700032,"stop":1686398700594,"duration":562}},{"uid":"9e21de909cc4fe7a","reportUrl":"https://novasamatech.github.io/test-runner/3181//#testresult/9e21de909cc4fe7a","status":"passed","time":{"start":1686384237607,"stop":1686384238276,"duration":669}},{"uid":"556aa974b51c4338","reportUrl":"https://novasamatech.github.io/test-runner/3180//#testresult/556aa974b51c4338","status":"passed","time":{"start":1686369846709,"stop":1686369847077,"duration":368}},{"uid":"dfa4a61e5e8eecbf","reportUrl":"https://novasamatech.github.io/test-runner/3179//#testresult/dfa4a61e5e8eecbf","status":"passed","time":{"start":1686355987504,"stop":1686355987806,"duration":302}},{"uid":"7f527fa68cf9cd6a","reportUrl":"https://novasamatech.github.io/test-runner/3178//#testresult/7f527fa68cf9cd6a","status":"passed","time":{"start":1686341034552,"stop":1686341035287,"duration":735}},{"uid":"1c8a077a850d6934","reportUrl":"https://novasamatech.github.io/test-runner/3177//#testresult/1c8a077a850d6934","status":"passed","time":{"start":1686326640260,"stop":1686326641874,"duration":1614}},{"uid":"8c0d891668ee3dbc","reportUrl":"https://novasamatech.github.io/test-runner/3176//#testresult/8c0d891668ee3dbc","status":"passed","time":{"start":1686312300161,"stop":1686312300782,"duration":621}},{"uid":"e81bd74f6fc0bc33","reportUrl":"https://novasamatech.github.io/test-runner/3175//#testresult/e81bd74f6fc0bc33","status":"passed","time":{"start":1686297838494,"stop":1686297839166,"duration":672}},{"uid":"c28c36da30049932","reportUrl":"https://novasamatech.github.io/test-runner/3174//#testresult/c28c36da30049932","status":"passed","time":{"start":1686283448082,"stop":1686283448377,"duration":295}},{"uid":"e6b4eded0c6b1f79","reportUrl":"https://novasamatech.github.io/test-runner/3173//#testresult/e6b4eded0c6b1f79","status":"passed","time":{"start":1686269687985,"stop":1686269688353,"duration":368}},{"uid":"b0daf380d8d395e8","reportUrl":"https://novasamatech.github.io/test-runner/3172//#testresult/b0daf380d8d395e8","status":"passed","time":{"start":1686254639775,"stop":1686254641569,"duration":1794}},{"uid":"c7c16207d2f9d3ed","reportUrl":"https://novasamatech.github.io/test-runner/3171//#testresult/c7c16207d2f9d3ed","status":"passed","time":{"start":1686240246262,"stop":1686240247685,"duration":1423}},{"uid":"d5e2b671c74c7de1","reportUrl":"https://novasamatech.github.io/test-runner/3170//#testresult/d5e2b671c74c7de1","status":"passed","time":{"start":1686225901498,"stop":1686225902277,"duration":779}},{"uid":"b67fbd71b9ec1293","reportUrl":"https://novasamatech.github.io/test-runner/3169//#testresult/b67fbd71b9ec1293","status":"passed","time":{"start":1686211448804,"stop":1686211449832,"duration":1028}},{"uid":"d98f32e89ee1d717","reportUrl":"https://novasamatech.github.io/test-runner/3168//#testresult/d98f32e89ee1d717","status":"passed","time":{"start":1686197055062,"stop":1686197055905,"duration":843}},{"uid":"6340edc04a6d4de0","reportUrl":"https://novasamatech.github.io/test-runner/3167//#testresult/6340edc04a6d4de0","status":"passed","time":{"start":1686183253248,"stop":1686183253729,"duration":481}},{"uid":"f4a69e8a751a5a8b","reportUrl":"https://novasamatech.github.io/test-runner/3166//#testresult/f4a69e8a751a5a8b","status":"passed","time":{"start":1686168245120,"stop":1686168246080,"duration":960}},{"uid":"6f312cf2d5c09bd3","reportUrl":"https://novasamatech.github.io/test-runner/3165//#testresult/6f312cf2d5c09bd3","status":"passed","time":{"start":1686153859834,"stop":1686153860089,"duration":255}},{"uid":"14d5d4025efb16fb","reportUrl":"https://novasamatech.github.io/test-runner/3164//#testresult/14d5d4025efb16fb","status":"passed","time":{"start":1686139487549,"stop":1686139487672,"duration":123}}]},"tags":[]},"source":"2608dd24fa401deb.json","parameterValues":["{'url': 'wss://calamari.systems', 'name': 'Calamari'}"]}