{"uid":"8029ec0c0e00a0cc","name":"test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6b2d505052053a5da93000b537edc6f1","time":{"start":1700222984307,"stop":1700222984307,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n        connection = create_connection_by_url(data[\"url\"])\n>       get_properties(connection)\n\ntests/conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:667: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:571: in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f83ac8ef910>\nmethod = 'state_getRuntimeVersion'\nparams = ['0x72232d1e3cab30e15aa25f1efd07b97ac38a75ecb5789984b4513d9364160462']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1700222984308,"stop":1700222984685,"duration":377},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 24, in connection_by_url\n    get_properties(connection)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 667, in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 571, in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az883-241"},{"name":"thread","value":"2154-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"35b66fd06ef84bb1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700222968818,"stop":1700222968818,"duration":0}},{"uid":"53f79c9b11979cf8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700222953223,"stop":1700222953223,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":495,"unknown":0,"total":503},"items":[{"uid":"985f65a32b39fba0","reportUrl":"https://novasamatech.github.io/test-runner/4152//#testresult/985f65a32b39fba0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700208377948,"stop":1700208377948,"duration":0}},{"uid":"518239063780ae23","reportUrl":"https://novasamatech.github.io/test-runner/4151//#testresult/518239063780ae23","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700193921482,"stop":1700193921482,"duration":0}},{"uid":"7d83f27e13bde322","reportUrl":"https://novasamatech.github.io/test-runner/4150//#testresult/7d83f27e13bde322","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700179593906,"stop":1700179593906,"duration":0}},{"uid":"62c94f80b6413549","reportUrl":"https://novasamatech.github.io/test-runner/4149//#testresult/62c94f80b6413549","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700165159228,"stop":1700165159228,"duration":0}},{"uid":"727a38170cb2e1b5","reportUrl":"https://novasamatech.github.io/test-runner/4148//#testresult/727a38170cb2e1b5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700150810930,"stop":1700150810930,"duration":0}},{"uid":"b9b6baeedec8f93d","reportUrl":"https://novasamatech.github.io/test-runner/4147//#testresult/b9b6baeedec8f93d","status":"passed","time":{"start":1700136627662,"stop":1700136627662,"duration":0}},{"uid":"3167d84cd72477c3","reportUrl":"https://novasamatech.github.io/test-runner/4146//#testresult/3167d84cd72477c3","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700122265690,"stop":1700122265690,"duration":0}},{"uid":"12ab8bfe93391707","reportUrl":"https://novasamatech.github.io/test-runner/4145//#testresult/12ab8bfe93391707","status":"passed","time":{"start":1700107643164,"stop":1700107643165,"duration":1}},{"uid":"a0c191cda16c68f2","reportUrl":"https://novasamatech.github.io/test-runner/4144//#testresult/a0c191cda16c68f2","status":"passed","time":{"start":1700093217613,"stop":1700093217613,"duration":0}},{"uid":"ad9d5d7c5f4c7687","reportUrl":"https://novasamatech.github.io/test-runner/4143//#testresult/ad9d5d7c5f4c7687","status":"passed","time":{"start":1700078724532,"stop":1700078724532,"duration":0}},{"uid":"aeff986ca170fd96","reportUrl":"https://novasamatech.github.io/test-runner/4142//#testresult/aeff986ca170fd96","status":"passed","time":{"start":1700064406013,"stop":1700064406013,"duration":0}},{"uid":"d408ac36a886d240","reportUrl":"https://novasamatech.github.io/test-runner/4141//#testresult/d408ac36a886d240","status":"passed","time":{"start":1700049984383,"stop":1700049984383,"duration":0}},{"uid":"338831db4f4b25a0","reportUrl":"https://novasamatech.github.io/test-runner/4130//#testresult/338831db4f4b25a0","status":"passed","time":{"start":1699891575276,"stop":1699891575277,"duration":1}},{"uid":"d04da2dc62b47c83","reportUrl":"https://novasamatech.github.io/test-runner/4129//#testresult/d04da2dc62b47c83","status":"passed","time":{"start":1699877221318,"stop":1699877221318,"duration":0}},{"uid":"1a8ce7d00364be4c","reportUrl":"https://novasamatech.github.io/test-runner/4128//#testresult/1a8ce7d00364be4c","status":"passed","time":{"start":1699862526804,"stop":1699862530678,"duration":3874}},{"uid":"8b78443aff6fcef0","reportUrl":"https://novasamatech.github.io/test-runner/4127//#testresult/8b78443aff6fcef0","status":"passed","time":{"start":1699848174096,"stop":1699848189390,"duration":15294}},{"uid":"f74abe692b705f7","reportUrl":"https://novasamatech.github.io/test-runner/4126//#testresult/f74abe692b705f7","status":"passed","time":{"start":1699833822357,"stop":1699833823376,"duration":1019}},{"uid":"3cd77e881cce9425","reportUrl":"https://novasamatech.github.io/test-runner/4125//#testresult/3cd77e881cce9425","status":"passed","time":{"start":1699819353633,"stop":1699819354562,"duration":929}},{"uid":"fd7575195224a524","reportUrl":"https://novasamatech.github.io/test-runner/4124//#testresult/fd7575195224a524","status":"passed","time":{"start":1699804953046,"stop":1699804953969,"duration":923}},{"uid":"dfcdaad36abea93c","reportUrl":"https://novasamatech.github.io/test-runner/4123//#testresult/dfcdaad36abea93c","status":"passed","time":{"start":1699790529042,"stop":1699790530051,"duration":1009}}]},"tags":[]},"source":"8029ec0c0e00a0cc.json","parameterValues":["{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"]}