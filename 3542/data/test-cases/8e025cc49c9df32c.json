{"uid":"8e025cc49c9df32c","name":"test_can_create_connection[Test for Subsocial, url: wss://para.subsocial.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"eeff8b834d6317592539220cb3a9b9a2","time":{"start":1691582727643,"stop":1691582728082,"duration":439},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Subsocial', 'url': 'wss://para.subsocial.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Subsocial', 'url': 'wss://para.subsocial.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"eb52f1180613594a","name":"stdout","source":"eb52f1180613594a.txt","type":"text/plain","size":345}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az339-454"},{"name":"thread","value":"1949-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://para.subsocial.network', 'name': 'Subsocial'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"35759edbaafceea0","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1691582711802,"stop":1691582712487,"duration":685}},{"uid":"8f525b64621b17fc","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1691582696042,"stop":1691582696592,"duration":550}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":538,"unknown":0,"total":547},"items":[{"uid":"656ebfb2de48efcb","reportUrl":"https://novasamatech.github.io/test-runner/3541//#testresult/656ebfb2de48efcb","status":"passed","time":{"start":1691568307549,"stop":1691568308060,"duration":511}},{"uid":"35d83a3a5194b7bc","reportUrl":"https://novasamatech.github.io/test-runner/3540//#testresult/35d83a3a5194b7bc","status":"passed","time":{"start":1691553851750,"stop":1691553852207,"duration":457}},{"uid":"6d32fbf264c1d6d4","reportUrl":"https://novasamatech.github.io/test-runner/3539//#testresult/6d32fbf264c1d6d4","status":"passed","time":{"start":1691540082054,"stop":1691540082781,"duration":727}},{"uid":"95774c8e96f31a20","reportUrl":"https://novasamatech.github.io/test-runner/3538//#testresult/95774c8e96f31a20","status":"passed","time":{"start":1691525063161,"stop":1691525063717,"duration":556}},{"uid":"847a4a7818f2f9ba","reportUrl":"https://novasamatech.github.io/test-runner/3537//#testresult/847a4a7818f2f9ba","status":"passed","time":{"start":1691510645955,"stop":1691510646475,"duration":520}},{"uid":"ae8690439cc6bc08","reportUrl":"https://novasamatech.github.io/test-runner/3536//#testresult/ae8690439cc6bc08","status":"passed","time":{"start":1691496300815,"stop":1691496301115,"duration":300}},{"uid":"4b69978dd3c99460","reportUrl":"https://novasamatech.github.io/test-runner/3535//#testresult/4b69978dd3c99460","status":"passed","time":{"start":1691481872884,"stop":1691481873620,"duration":736}},{"uid":"e6a738f06516d393","reportUrl":"https://novasamatech.github.io/test-runner/3534//#testresult/e6a738f06516d393","status":"passed","time":{"start":1691467455312,"stop":1691467455830,"duration":518}},{"uid":"8f40daec47ab13c5","reportUrl":"https://novasamatech.github.io/test-runner/3533//#testresult/8f40daec47ab13c5","status":"passed","time":{"start":1691453670259,"stop":1691453670804,"duration":545}},{"uid":"ca9d539ac3c51df6","reportUrl":"https://novasamatech.github.io/test-runner/3532//#testresult/ca9d539ac3c51df6","status":"passed","time":{"start":1691438657235,"stop":1691438657768,"duration":533}},{"uid":"e5937d543dc2961","reportUrl":"https://novasamatech.github.io/test-runner/3531//#testresult/e5937d543dc2961","status":"passed","time":{"start":1691424263791,"stop":1691424264144,"duration":353}},{"uid":"def1c4aea38f7895","reportUrl":"https://novasamatech.github.io/test-runner/3530//#testresult/def1c4aea38f7895","status":"passed","time":{"start":1691409894352,"stop":1691409894896,"duration":544}},{"uid":"6b72e6621488a06","reportUrl":"https://novasamatech.github.io/test-runner/3529//#testresult/6b72e6621488a06","status":"passed","time":{"start":1691395481910,"stop":1691395482431,"duration":521}},{"uid":"1837ab9317b1c205","reportUrl":"https://novasamatech.github.io/test-runner/3528//#testresult/1837ab9317b1c205","status":"passed","time":{"start":1691381047404,"stop":1691381047902,"duration":498}},{"uid":"a4a9c75de325cbd4","reportUrl":"https://novasamatech.github.io/test-runner/3527//#testresult/a4a9c75de325cbd4","status":"passed","time":{"start":1691367269923,"stop":1691367270392,"duration":469}},{"uid":"918810a6413cf58","reportUrl":"https://novasamatech.github.io/test-runner/3526//#testresult/918810a6413cf58","status":"passed","time":{"start":1691352233856,"stop":1691352234530,"duration":674}},{"uid":"d088c071fc897d06","reportUrl":"https://novasamatech.github.io/test-runner/3525//#testresult/d088c071fc897d06","status":"passed","time":{"start":1691337863313,"stop":1691337863858,"duration":545}},{"uid":"f8e60019db8b9aa","reportUrl":"https://novasamatech.github.io/test-runner/3524//#testresult/f8e60019db8b9aa","status":"passed","time":{"start":1691323467367,"stop":1691323468114,"duration":747}},{"uid":"3ad5b63aa1d96a0d","reportUrl":"https://novasamatech.github.io/test-runner/3523//#testresult/3ad5b63aa1d96a0d","status":"passed","time":{"start":1691309041441,"stop":1691309041904,"duration":463}},{"uid":"52dc8b658823911e","reportUrl":"https://novasamatech.github.io/test-runner/3522//#testresult/52dc8b658823911e","status":"passed","time":{"start":1691294637863,"stop":1691294638568,"duration":705}}]},"tags":[]},"source":"8e025cc49c9df32c.json","parameterValues":["{'url': 'wss://para.subsocial.network', 'name': 'Subsocial'}"]}