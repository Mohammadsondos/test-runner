{"uid":"5b03ad8c64065948","name":"test_can_create_connection[Test for Crab, url: wss://darwiniacrab-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"43bb4e4c68b5681eefac14319069a456","time":{"start":1695254648124,"stop":1695254651560,"duration":3436},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Crab', 'url': 'wss://darwiniacrab-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Crab', 'url': 'wss://darwiniacrab-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"6e13823314961869","name":"stdout","source":"6e13823314961869.txt","type":"text/plain","size":606}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az622-721"},{"name":"thread","value":"2174-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://darwiniacrab-rpc.dwellir.com', 'name': 'Crab'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a663befff13d0448","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1695254629605,"stop":1695254633042,"duration":3437}},{"uid":"214c09a92064e257","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1695254611080,"stop":1695254614516,"duration":3436}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":64,"skipped":0,"passed":103,"unknown":0,"total":167},"items":[{"uid":"a2e668eaa7396093","reportUrl":"https://novasamatech.github.io/test-runner/3805//#testresult/a2e668eaa7396093","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1695240212197,"stop":1695240215565,"duration":3368}},{"uid":"f8fbb0c3eebd6ee9","reportUrl":"https://novasamatech.github.io/test-runner/3804//#testresult/f8fbb0c3eebd6ee9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1695225877079,"stop":1695225880618,"duration":3539}},{"uid":"a2198c511a76703","reportUrl":"https://novasamatech.github.io/test-runner/3803//#testresult/a2198c511a76703","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1695211465549,"stop":1695211469108,"duration":3559}},{"uid":"442544a8097e584c","reportUrl":"https://novasamatech.github.io/test-runner/3802//#testresult/442544a8097e584c","status":"passed","time":{"start":1695197014200,"stop":1695197014687,"duration":487}},{"uid":"ab0ecdaf7be35db4","reportUrl":"https://novasamatech.github.io/test-runner/3801//#testresult/ab0ecdaf7be35db4","status":"passed","time":{"start":1695182538286,"stop":1695182538940,"duration":654}},{"uid":"2f8fc23e5b752efe","reportUrl":"https://novasamatech.github.io/test-runner/3800//#testresult/2f8fc23e5b752efe","status":"passed","time":{"start":1695168199585,"stop":1695168200263,"duration":678}},{"uid":"a78915a33ec26d13","reportUrl":"https://novasamatech.github.io/test-runner/3799//#testresult/a78915a33ec26d13","status":"passed","time":{"start":1695153770010,"stop":1695153770691,"duration":681}},{"uid":"31575a9d4af9bc4b","reportUrl":"https://novasamatech.github.io/test-runner/3798//#testresult/31575a9d4af9bc4b","status":"passed","time":{"start":1695139369933,"stop":1695139370590,"duration":657}},{"uid":"258792168396a6d9","reportUrl":"https://novasamatech.github.io/test-runner/3797//#testresult/258792168396a6d9","status":"passed","time":{"start":1695125008635,"stop":1695125009229,"duration":594}},{"uid":"7c2309dafda57162","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/7c2309dafda57162","status":"passed","time":{"start":1695110577746,"stop":1695110578326,"duration":580}},{"uid":"cbbdf0f630a2d429","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/cbbdf0f630a2d429","status":"passed","time":{"start":1695096225199,"stop":1695096225656,"duration":457}},{"uid":"ff568adf215f777f","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/ff568adf215f777f","status":"passed","time":{"start":1695081781565,"stop":1695081782000,"duration":435}},{"uid":"e3de9eba2927cc30","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/e3de9eba2927cc30","status":"passed","time":{"start":1695053024594,"stop":1695053025059,"duration":465}},{"uid":"27b1e14efd5717ff","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/27b1e14efd5717ff","status":"passed","time":{"start":1695067357234,"stop":1695067357931,"duration":697}},{"uid":"bd8023885cf27564","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/bd8023885cf27564","status":"passed","time":{"start":1695038641282,"stop":1695038641860,"duration":578}},{"uid":"4cfe273e87c92f60","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/4cfe273e87c92f60","status":"passed","time":{"start":1695024186206,"stop":1695024186682,"duration":476}},{"uid":"7bac103ba9a277aa","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/7bac103ba9a277aa","status":"passed","time":{"start":1695009758424,"stop":1695009759204,"duration":780}},{"uid":"d091857195dd2bd3","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/d091857195dd2bd3","status":"passed","time":{"start":1694995390972,"stop":1694995391726,"duration":754}},{"uid":"d528dbbf37e35761","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/d528dbbf37e35761","status":"passed","time":{"start":1694981027613,"stop":1694981028184,"duration":571}},{"uid":"5f0618eb56cdcabe","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/5f0618eb56cdcabe","status":"passed","time":{"start":1694966553857,"stop":1694966554287,"duration":430}}]},"tags":[]},"source":"5b03ad8c64065948.json","parameterValues":["{'url': 'wss://darwiniacrab-rpc.dwellir.com', 'name': 'Crab'}"]}