{"uid":"bccde6fe69a5cb8a","name":"test_can_create_connection[Test for Crab, url: wss://crab-rpc.darwinia.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"ae3c62215c32eca769411c39859d64a9","time":{"start":1695254610888,"stop":1695254610948,"duration":60},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'crab-rpc.darwinia.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f0108b865f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'crab-rpc.darwinia.network', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Crab', 'url': 'wss://crab-rpc.darwinia.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:121: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'crab-rpc.darwinia.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f0108b865f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:166: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'crab-rpc.darwinia.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f0108b865f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'crab-rpc.darwinia.network', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Crab', 'url': 'wss://crab-rpc.darwinia.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:121: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'crab-rpc.darwinia.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f0108b865f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:166: WebSocketAddressException","steps":[],"attachments":[{"uid":"ad0eafe04181615f","name":"stdout","source":"ad0eafe04181615f.txt","type":"text/plain","size":360}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az622-721"},{"name":"thread","value":"2174-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://crab-rpc.darwinia.network/', 'name': 'Crab'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"89088233c648e0e2","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1695254595697,"stop":1695254595780,"duration":83}},{"uid":"f0b25a5edd8bd933","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1695254580484,"stop":1695254580585,"duration":101}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":161,"unknown":0,"total":167},"items":[{"uid":"a2980a78f71dd940","reportUrl":"https://novasamatech.github.io/test-runner/3805//#testresult/a2980a78f71dd940","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1695240175112,"stop":1695240175159,"duration":47}},{"uid":"e3362b9a6f3e5372","reportUrl":"https://novasamatech.github.io/test-runner/3804//#testresult/e3362b9a6f3e5372","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1695225839664,"stop":1695225839676,"duration":12}},{"uid":"adf7729529e21f43","reportUrl":"https://novasamatech.github.io/test-runner/3803//#testresult/adf7729529e21f43","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1695211427877,"stop":1695211428028,"duration":151}},{"uid":"1be77ac3fd5d7e3b","reportUrl":"https://novasamatech.github.io/test-runner/3802//#testresult/1be77ac3fd5d7e3b","status":"passed","time":{"start":1695196952415,"stop":1695197014194,"duration":61779}},{"uid":"916a72952ebfe1df","reportUrl":"https://novasamatech.github.io/test-runner/3801//#testresult/916a72952ebfe1df","status":"passed","time":{"start":1695182537327,"stop":1695182538282,"duration":955}},{"uid":"11d9ece8aeffb504","reportUrl":"https://novasamatech.github.io/test-runner/3800//#testresult/11d9ece8aeffb504","status":"passed","time":{"start":1695168197956,"stop":1695168199582,"duration":1626}},{"uid":"e91aef5ae719e4a","reportUrl":"https://novasamatech.github.io/test-runner/3799//#testresult/e91aef5ae719e4a","status":"passed","time":{"start":1695153768351,"stop":1695153770007,"duration":1656}},{"uid":"9646c18aa9464119","reportUrl":"https://novasamatech.github.io/test-runner/3798//#testresult/9646c18aa9464119","status":"passed","time":{"start":1695139368257,"stop":1695139369929,"duration":1672}},{"uid":"a1878e91edc430a0","reportUrl":"https://novasamatech.github.io/test-runner/3797//#testresult/a1878e91edc430a0","status":"passed","time":{"start":1695125006929,"stop":1695125008631,"duration":1702}},{"uid":"a3f452153295598a","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/a3f452153295598a","status":"passed","time":{"start":1695110576022,"stop":1695110577741,"duration":1719}},{"uid":"59288c63b175c26b","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/59288c63b175c26b","status":"passed","time":{"start":1695096163445,"stop":1695096225195,"duration":61750}},{"uid":"1b66dc4400079bb5","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/1b66dc4400079bb5","status":"passed","time":{"start":1695081780577,"stop":1695081781561,"duration":984}},{"uid":"479d6d46de959bb9","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/479d6d46de959bb9","status":"passed","time":{"start":1695052962862,"stop":1695053024591,"duration":61729}},{"uid":"95c68c1df2f0db9d","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/95c68c1df2f0db9d","status":"passed","time":{"start":1695067355614,"stop":1695067357228,"duration":1614}},{"uid":"624bcb44c4941198","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/624bcb44c4941198","status":"passed","time":{"start":1695038580321,"stop":1695038641276,"duration":60955}},{"uid":"337a859c2caa1fb1","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/337a859c2caa1fb1","status":"passed","time":{"start":1695024185848,"stop":1695024187667,"duration":1819}},{"uid":"4e70f7ad85537453","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/4e70f7ad85537453","status":"passed","time":{"start":1695009756749,"stop":1695009758419,"duration":1670}},{"uid":"64234dcdb9d4c6","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/64234dcdb9d4c6","status":"passed","time":{"start":1694995389308,"stop":1694995390966,"duration":1658}},{"uid":"d4aa99cee2873b7e","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/d4aa99cee2873b7e","status":"passed","time":{"start":1694980965844,"stop":1694981027610,"duration":61766}},{"uid":"56a7cf29b824edf8","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/56a7cf29b824edf8","status":"passed","time":{"start":1694966552095,"stop":1694966553853,"duration":1758}}]},"tags":[]},"source":"bccde6fe69a5cb8a.json","parameterValues":["{'url': 'wss://crab-rpc.darwinia.network/', 'name': 'Crab'}"]}