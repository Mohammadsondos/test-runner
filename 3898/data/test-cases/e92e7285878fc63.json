{"uid":"e92e7285878fc63","name":"test_has_new_assets[Test for Composable Finance]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"6ed403c188bd8bbaba3701ff58033048","time":{"start":1696564971740,"stop":1696564973573,"duration":1833},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7fed39dd98a0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fed3a03abf0>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fed240edd20>\nmethod = 'state_getMetadata'\nparams = ['0xdf07d6993dda7c3b9be57baeac4d442dfa67cfc920605f72e397cd286293053a']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az1107-964"},{"name":"thread","value":"2219-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fed3a03abf0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"fd8d90a8264152ae","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696564954678,"stop":1696564956444,"duration":1766}},{"uid":"2dfa3bc56bc87641","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696564937419,"stop":1696564939544,"duration":2125}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":256,"unknown":0,"total":257},"items":[{"uid":"3f3627467af9055f","reportUrl":"https://novasamatech.github.io/test-runner/3897//#testresult/3f3627467af9055f","status":"passed","time":{"start":1696550558928,"stop":1696550564203,"duration":5275}},{"uid":"57bc51bd875e2c74","reportUrl":"https://novasamatech.github.io/test-runner/3896//#testresult/57bc51bd875e2c74","status":"passed","time":{"start":1696536124306,"stop":1696536131747,"duration":7441}},{"uid":"b0c75e61b7f24826","reportUrl":"https://novasamatech.github.io/test-runner/3895//#testresult/b0c75e61b7f24826","status":"passed","time":{"start":1696521757043,"stop":1696521765000,"duration":7957}},{"uid":"c93e4d4ac319d991","reportUrl":"https://novasamatech.github.io/test-runner/3894//#testresult/c93e4d4ac319d991","status":"passed","time":{"start":1696507320908,"stop":1696507326243,"duration":5335}},{"uid":"d777a3842fa9c95a","reportUrl":"https://novasamatech.github.io/test-runner/3893//#testresult/d777a3842fa9c95a","status":"passed","time":{"start":1696496680375,"stop":1696496685615,"duration":5240}},{"uid":"da1bc577d925d5d7","reportUrl":"https://novasamatech.github.io/test-runner/3892//#testresult/da1bc577d925d5d7","status":"passed","time":{"start":1696492928938,"stop":1696492934639,"duration":5701}},{"uid":"6b9f141ad1fca493","reportUrl":"https://novasamatech.github.io/test-runner/3891//#testresult/6b9f141ad1fca493","status":"passed","time":{"start":1696478525495,"stop":1696478531404,"duration":5909}},{"uid":"8fe625ab0c930ac1","reportUrl":"https://novasamatech.github.io/test-runner/3890//#testresult/8fe625ab0c930ac1","status":"passed","time":{"start":1696464178904,"stop":1696464189246,"duration":10342}},{"uid":"9ef65c5fca92a41c","reportUrl":"https://novasamatech.github.io/test-runner/3889//#testresult/9ef65c5fca92a41c","status":"passed","time":{"start":1696449723562,"stop":1696449727943,"duration":4381}},{"uid":"643005948b502b3f","reportUrl":"https://novasamatech.github.io/test-runner/3888//#testresult/643005948b502b3f","status":"passed","time":{"start":1696435336456,"stop":1696435344314,"duration":7858}},{"uid":"750ba0949158e200","reportUrl":"https://novasamatech.github.io/test-runner/3887//#testresult/750ba0949158e200","status":"passed","time":{"start":1696420954083,"stop":1696420962055,"duration":7972}},{"uid":"8dc6fa101c35bc79","reportUrl":"https://novasamatech.github.io/test-runner/3886//#testresult/8dc6fa101c35bc79","status":"passed","time":{"start":1696406523862,"stop":1696406529209,"duration":5347}},{"uid":"c8ab224122f283c5","reportUrl":"https://novasamatech.github.io/test-runner/3885//#testresult/c8ab224122f283c5","status":"passed","time":{"start":1696392122691,"stop":1696392129415,"duration":6724}},{"uid":"d9521eee9777594b","reportUrl":"https://novasamatech.github.io/test-runner/3884//#testresult/d9521eee9777594b","status":"passed","time":{"start":1696377775816,"stop":1696377790699,"duration":14883}},{"uid":"91ae4adc1303fd22","reportUrl":"https://novasamatech.github.io/test-runner/3883//#testresult/91ae4adc1303fd22","status":"passed","time":{"start":1696363339528,"stop":1696363345379,"duration":5851}},{"uid":"4a5e622e28a0ec2f","reportUrl":"https://novasamatech.github.io/test-runner/3882//#testresult/4a5e622e28a0ec2f","status":"passed","time":{"start":1696348921397,"stop":1696348926212,"duration":4815}},{"uid":"a4703050183fc729","reportUrl":"https://novasamatech.github.io/test-runner/3881//#testresult/a4703050183fc729","status":"passed","time":{"start":1696334523420,"stop":1696334530063,"duration":6643}},{"uid":"35a9c543e94c1a9","reportUrl":"https://novasamatech.github.io/test-runner/3880//#testresult/35a9c543e94c1a9","status":"passed","time":{"start":1696320122321,"stop":1696320128109,"duration":5788}},{"uid":"2a624223c8420c92","reportUrl":"https://novasamatech.github.io/test-runner/3879//#testresult/2a624223c8420c92","status":"passed","time":{"start":1696305732276,"stop":1696305738472,"duration":6196}},{"uid":"158e9f7a13127c2c","reportUrl":"https://novasamatech.github.io/test-runner/3878//#testresult/158e9f7a13127c2c","status":"passed","time":{"start":1696291393607,"stop":1696291398907,"duration":5300}}]},"tags":[]},"source":"e92e7285878fc63.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fed3a03abf0>"]}