{"uid":"ed974ccf1d8c947c","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1688313868495,"stop":1688313868656,"duration":161},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 02 Jul 2023 16:04:28 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 02 Jul 2023 16:04:28 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 02 Jul 2023 16:04:28 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 02 Jul 2023 16:04:28 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"605b0d0ab92ae17d","name":"stdout","source":"605b0d0ab92ae17d.txt","type":"text/plain","size":1098}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az565-291"},{"name":"thread","value":"2059-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"37ab59affc2acc5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 02 Jul 2023 16:04:13 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688313853248,"stop":1688313853406,"duration":158}},{"uid":"e856194826c60234","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 02 Jul 2023 16:03:58 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688313837935,"stop":1688313838108,"duration":173}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":90,"skipped":0,"passed":230,"unknown":0,"total":320},"items":[{"uid":"680b6e8fbb522feb","reportUrl":"https://novasamatech.github.io/test-runner/3314//#testresult/680b6e8fbb522feb","status":"passed","time":{"start":1688299524133,"stop":1688299524162,"duration":29}},{"uid":"842b9a799b3f2548","reportUrl":"https://novasamatech.github.io/test-runner/3313//#testresult/842b9a799b3f2548","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 02 Jul 2023 11:35:09 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688297709607,"stop":1688297709664,"duration":57}},{"uid":"be0ae4e57b513799","reportUrl":"https://novasamatech.github.io/test-runner/3313//#testresult/be0ae4e57b513799","status":"passed","time":{"start":1688285066162,"stop":1688285066246,"duration":84}},{"uid":"e91535bf4eacbd0d","reportUrl":"https://novasamatech.github.io/test-runner/3312//#testresult/e91535bf4eacbd0d","status":"passed","time":{"start":1688270640006,"stop":1688270640424,"duration":418}},{"uid":"1f508b6b68ba2278","reportUrl":"https://novasamatech.github.io/test-runner/3311//#testresult/1f508b6b68ba2278","status":"passed","time":{"start":1688257026052,"stop":1688257026345,"duration":293}},{"uid":"b2aab0891a559c7e","reportUrl":"https://novasamatech.github.io/test-runner/3310//#testresult/b2aab0891a559c7e","status":"passed","time":{"start":1688241854952,"stop":1688241855017,"duration":65}},{"uid":"b604aff5cba5d147","reportUrl":"https://novasamatech.github.io/test-runner/3309//#testresult/b604aff5cba5d147","status":"passed","time":{"start":1688227471141,"stop":1688227471446,"duration":305}},{"uid":"453ea069b05e1c4b","reportUrl":"https://novasamatech.github.io/test-runner/3308//#testresult/453ea069b05e1c4b","status":"passed","time":{"start":1688213107913,"stop":1688213107971,"duration":58}},{"uid":"9a99b1664e09bb68","reportUrl":"https://novasamatech.github.io/test-runner/3307//#testresult/9a99b1664e09bb68","status":"passed","time":{"start":1688198640002,"stop":1688198640069,"duration":67}},{"uid":"20b8fcfc90c71810","reportUrl":"https://novasamatech.github.io/test-runner/3306//#testresult/20b8fcfc90c71810","status":"passed","time":{"start":1688184249552,"stop":1688184250002,"duration":450}},{"uid":"c763c43cebca905e","reportUrl":"https://novasamatech.github.io/test-runner/3305//#testresult/c763c43cebca905e","status":"passed","time":{"start":1688170671563,"stop":1688170671874,"duration":311}},{"uid":"bba58cb76eab365a","reportUrl":"https://novasamatech.github.io/test-runner/3304//#testresult/bba58cb76eab365a","status":"passed","time":{"start":1688155448805,"stop":1688155448901,"duration":96}},{"uid":"a9dad63d2d99fcf0","reportUrl":"https://novasamatech.github.io/test-runner/3303//#testresult/a9dad63d2d99fcf0","status":"passed","time":{"start":1688141074377,"stop":1688141074597,"duration":220}},{"uid":"111b12ae0a956401","reportUrl":"https://novasamatech.github.io/test-runner/3302//#testresult/111b12ae0a956401","status":"passed","time":{"start":1688126710717,"stop":1688126710797,"duration":80}},{"uid":"4c9f60922af24669","reportUrl":"https://novasamatech.github.io/test-runner/3301//#testresult/4c9f60922af24669","status":"passed","time":{"start":1688112266242,"stop":1688112266448,"duration":206}},{"uid":"c30799385fefd957","reportUrl":"https://novasamatech.github.io/test-runner/3300//#testresult/c30799385fefd957","status":"passed","time":{"start":1688097854387,"stop":1688097854594,"duration":207}},{"uid":"d3ecb4dc40c1763e","reportUrl":"https://novasamatech.github.io/test-runner/3299//#testresult/d3ecb4dc40c1763e","status":"passed","time":{"start":1688084095255,"stop":1688084095311,"duration":56}},{"uid":"5f11a2759daf42e3","reportUrl":"https://novasamatech.github.io/test-runner/3298//#testresult/5f11a2759daf42e3","status":"passed","time":{"start":1688069047092,"stop":1688069047152,"duration":60}},{"uid":"33c297c1866d6d97","reportUrl":"https://novasamatech.github.io/test-runner/3297//#testresult/33c297c1866d6d97","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 29 Jun 2023 16:04:49 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688054689543,"stop":1688054689782,"duration":239}},{"uid":"fcd4c295eda99752","reportUrl":"https://novasamatech.github.io/test-runner/3296//#testresult/fcd4c295eda99752","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 29 Jun 2023 12:05:58 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688040358593,"stop":1688040358669,"duration":76}}]},"tags":[]},"source":"ed974ccf1d8c947c.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}