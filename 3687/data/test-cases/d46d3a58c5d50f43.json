{"uid":"d46d3a58c5d50f43","name":"test_can_create_connection[Test for Khala, url: wss://khala.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c77a3f91088c1c6601fcbdb29ee4c9ec","time":{"start":1693556908986,"stop":1693556969640,"duration":60654},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Khala', 'url': 'wss://khala.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Khala', 'url': 'wss://khala.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"2bd2521d8a74c090","name":"stdout","source":"2bd2521d8a74c090.txt","type":"text/plain","size":701}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az402-180"},{"name":"thread","value":"2109-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://khala.api.onfinality.io/public-ws', 'name': 'Khala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a987684eeab2a3cb","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1693556521741,"stop":1693556893806,"duration":372065}},{"uid":"dce8a6dd5ee6b028","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Fri, 01 Sep 2023 08:21:46 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '61168', 'x-kong-proxy-latency': '300213', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","time":{"start":1693556144626,"stop":1693556506646,"duration":362020}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":48,"unknown":0,"total":49},"items":[{"uid":"649ae678438a48fb","reportUrl":"https://novasamatech.github.io/test-runner/3686//#testresult/649ae678438a48fb","status":"passed","time":{"start":1693540897266,"stop":1693540897989,"duration":723}},{"uid":"a430fdb5359f15ab","reportUrl":"https://novasamatech.github.io/test-runner/3685//#testresult/a430fdb5359f15ab","status":"passed","time":{"start":1693526578645,"stop":1693526579459,"duration":814}},{"uid":"8324e0b847259c6f","reportUrl":"https://novasamatech.github.io/test-runner/3684//#testresult/8324e0b847259c6f","status":"passed","time":{"start":1693512161030,"stop":1693512161765,"duration":735}},{"uid":"c6ef2818ec3f6bfb","reportUrl":"https://novasamatech.github.io/test-runner/3683//#testresult/c6ef2818ec3f6bfb","status":"passed","time":{"start":1693497734235,"stop":1693497735223,"duration":988}},{"uid":"6759b47d484e1858","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/6759b47d484e1858","status":"passed","time":{"start":1693483312900,"stop":1693483313761,"duration":861}},{"uid":"9abd0660493b634f","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/9abd0660493b634f","status":"passed","time":{"start":1693468881348,"stop":1693468882313,"duration":965}},{"uid":"aeae5ceaed78392c","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/aeae5ceaed78392c","status":"passed","time":{"start":1693454513922,"stop":1693454514654,"duration":732}},{"uid":"1899cded23d70e26","reportUrl":"https://novasamatech.github.io/test-runner/3679//#testresult/1899cded23d70e26","status":"passed","time":{"start":1693440144675,"stop":1693440145393,"duration":718}},{"uid":"2805d38765bc8648","reportUrl":"https://novasamatech.github.io/test-runner/3678//#testresult/2805d38765bc8648","status":"passed","time":{"start":1693425687241,"stop":1693425688183,"duration":942}},{"uid":"7477e71defbb7722","reportUrl":"https://novasamatech.github.io/test-runner/3677//#testresult/7477e71defbb7722","status":"passed","time":{"start":1693411323861,"stop":1693411324580,"duration":719}},{"uid":"e5a63704598c31ed","reportUrl":"https://novasamatech.github.io/test-runner/3676//#testresult/e5a63704598c31ed","status":"passed","time":{"start":1693396912129,"stop":1693396912864,"duration":735}},{"uid":"c49b19faa2b1284","reportUrl":"https://novasamatech.github.io/test-runner/3675//#testresult/c49b19faa2b1284","status":"passed","time":{"start":1693382481391,"stop":1693382482516,"duration":1125}},{"uid":"37e16924157791e9","reportUrl":"https://novasamatech.github.io/test-runner/3674//#testresult/37e16924157791e9","status":"passed","time":{"start":1693368079285,"stop":1693368080201,"duration":916}},{"uid":"416640d6f8c55a7","reportUrl":"https://novasamatech.github.io/test-runner/3673//#testresult/416640d6f8c55a7","status":"passed","time":{"start":1693353736662,"stop":1693353737633,"duration":971}},{"uid":"9396a706556eb909","reportUrl":"https://novasamatech.github.io/test-runner/3672//#testresult/9396a706556eb909","status":"passed","time":{"start":1693339287174,"stop":1693339288175,"duration":1001}},{"uid":"db9857ff58779f72","reportUrl":"https://novasamatech.github.io/test-runner/3671//#testresult/db9857ff58779f72","status":"passed","time":{"start":1693324891289,"stop":1693324892233,"duration":944}},{"uid":"f8ba9d08cb7d5d31","reportUrl":"https://novasamatech.github.io/test-runner/3670//#testresult/f8ba9d08cb7d5d31","status":"passed","time":{"start":1693310490981,"stop":1693310492042,"duration":1061}},{"uid":"b91f89bedc7823f6","reportUrl":"https://novasamatech.github.io/test-runner/3669//#testresult/b91f89bedc7823f6","status":"passed","time":{"start":1693296117096,"stop":1693296118025,"duration":929}},{"uid":"cb302814258b2a29","reportUrl":"https://novasamatech.github.io/test-runner/3668//#testresult/cb302814258b2a29","status":"passed","time":{"start":1693281687394,"stop":1693281688267,"duration":873}},{"uid":"99192b1e65c493ec","reportUrl":"https://novasamatech.github.io/test-runner/3667//#testresult/99192b1e65c493ec","status":"passed","time":{"start":1693267339681,"stop":1693267340503,"duration":822}}]},"tags":[]},"source":"d46d3a58c5d50f43.json","parameterValues":["{'url': 'wss://khala.api.onfinality.io/public-ws', 'name': 'Khala'}"]}