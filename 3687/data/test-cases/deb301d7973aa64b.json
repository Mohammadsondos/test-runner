{"uid":"deb301d7973aa64b","name":"test_can_create_connection[Test for Integritee Parachain, url: wss://integritee-kusama.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"326bea541bc487a2f647b5a8f020251e","time":{"start":1693556129908,"stop":1693556190548,"duration":60640},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Integritee Parachain', 'url': 'wss://integritee-kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Integritee Parachain', 'url': 'wss://integritee-kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"dd91e7c012ec6ce0","name":"stdout","source":"dd91e7c012ec6ce0.txt","type":"text/plain","size":414}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az402-180"},{"name":"thread","value":"2112-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://integritee-kusama.api.onfinality.io/public-ws', 'name': 'Integritee Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b85eed0e2602ec6c","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1693555988563,"stop":1693556114743,"duration":126180}},{"uid":"30d2b23b010ef3da","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1693555722700,"stop":1693555973399,"duration":250699}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":48,"unknown":0,"total":49},"items":[{"uid":"fb196a7ddbdc1793","reportUrl":"https://novasamatech.github.io/test-runner/3686//#testresult/fb196a7ddbdc1793","status":"passed","time":{"start":1693540901650,"stop":1693540902365,"duration":715}},{"uid":"f47d8bf1f4753e03","reportUrl":"https://novasamatech.github.io/test-runner/3685//#testresult/f47d8bf1f4753e03","status":"passed","time":{"start":1693526551151,"stop":1693526551967,"duration":816}},{"uid":"f76dcb3af25e3c73","reportUrl":"https://novasamatech.github.io/test-runner/3684//#testresult/f76dcb3af25e3c73","status":"passed","time":{"start":1693512118382,"stop":1693512119123,"duration":741}},{"uid":"b1b51eee633959a3","reportUrl":"https://novasamatech.github.io/test-runner/3683//#testresult/b1b51eee633959a3","status":"passed","time":{"start":1693497714964,"stop":1693497715921,"duration":957}},{"uid":"5451112f24c6c74f","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/5451112f24c6c74f","status":"passed","time":{"start":1693483300264,"stop":1693483301110,"duration":846}},{"uid":"8873b13c473edb69","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/8873b13c473edb69","status":"passed","time":{"start":1693468891895,"stop":1693468892859,"duration":964}},{"uid":"8ae433f0190fba99","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/8ae433f0190fba99","status":"passed","time":{"start":1693454510724,"stop":1693454513163,"duration":2439}},{"uid":"79c442e5c472250f","reportUrl":"https://novasamatech.github.io/test-runner/3679//#testresult/79c442e5c472250f","status":"passed","time":{"start":1693440177297,"stop":1693440178028,"duration":731}},{"uid":"3ce542508458443","reportUrl":"https://novasamatech.github.io/test-runner/3678//#testresult/3ce542508458443","status":"passed","time":{"start":1693425722023,"stop":1693425722965,"duration":942}},{"uid":"d6345d9ce526a4c","reportUrl":"https://novasamatech.github.io/test-runner/3677//#testresult/d6345d9ce526a4c","status":"passed","time":{"start":1693411310480,"stop":1693411311218,"duration":738}},{"uid":"fdc06cb061385781","reportUrl":"https://novasamatech.github.io/test-runner/3676//#testresult/fdc06cb061385781","status":"passed","time":{"start":1693396899456,"stop":1693396900202,"duration":746}},{"uid":"b07b6c9ad91fc4c3","reportUrl":"https://novasamatech.github.io/test-runner/3675//#testresult/b07b6c9ad91fc4c3","status":"passed","time":{"start":1693382491881,"stop":1693382492835,"duration":954}},{"uid":"4190829f96ae1603","reportUrl":"https://novasamatech.github.io/test-runner/3674//#testresult/4190829f96ae1603","status":"passed","time":{"start":1693368090496,"stop":1693368091435,"duration":939}},{"uid":"c0f1df65f486f1da","reportUrl":"https://novasamatech.github.io/test-runner/3673//#testresult/c0f1df65f486f1da","status":"passed","time":{"start":1693353747990,"stop":1693353748847,"duration":857}},{"uid":"23b9faaf2443ca73","reportUrl":"https://novasamatech.github.io/test-runner/3672//#testresult/23b9faaf2443ca73","status":"passed","time":{"start":1693339290746,"stop":1693339291683,"duration":937}},{"uid":"d34c1014da8d421c","reportUrl":"https://novasamatech.github.io/test-runner/3671//#testresult/d34c1014da8d421c","status":"passed","time":{"start":1693324906808,"stop":1693324907745,"duration":937}},{"uid":"c4847ac5d3970369","reportUrl":"https://novasamatech.github.io/test-runner/3670//#testresult/c4847ac5d3970369","status":"passed","time":{"start":1693310506233,"stop":1693310507195,"duration":962}},{"uid":"b8b25cc5b279040b","reportUrl":"https://novasamatech.github.io/test-runner/3669//#testresult/b8b25cc5b279040b","status":"passed","time":{"start":1693296090997,"stop":1693296091994,"duration":997}},{"uid":"1736a275bb776472","reportUrl":"https://novasamatech.github.io/test-runner/3668//#testresult/1736a275bb776472","status":"passed","time":{"start":1693281692605,"stop":1693281693475,"duration":870}},{"uid":"84f998b76faf705a","reportUrl":"https://novasamatech.github.io/test-runner/3667//#testresult/84f998b76faf705a","status":"passed","time":{"start":1693267341575,"stop":1693267342395,"duration":820}}]},"tags":[]},"source":"deb301d7973aa64b.json","parameterValues":["{'url': 'wss://integritee-kusama.api.onfinality.io/public-ws', 'name': 'Integritee Parachain'}"]}