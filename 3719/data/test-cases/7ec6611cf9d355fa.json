{"uid":"7ec6611cf9d355fa","name":"test_can_create_connection[Test for Karura, url: wss://karura-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"68c8c856fd3ef7a98a33ddd771ff867a","time":{"start":1694016121918,"stop":1694016125275,"duration":3357},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"bd2659c12ae06c8c","name":"stdout","source":"bd2659c12ae06c8c.txt","type":"text/plain","size":588}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az404-135"},{"name":"thread","value":"2059-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://karura-rpc.dwellir.com', 'name': 'Karura'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"18a355635583045a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694016103439,"stop":1694016106832,"duration":3393}},{"uid":"485602d31b8b7b92","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694016084882,"stop":1694016088270,"duration":3388}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":71,"unknown":0,"total":80},"items":[{"uid":"f4bdf1fc9022ce15","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/f4bdf1fc9022ce15","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694001731429,"stop":1694001734888,"duration":3459}},{"uid":"73673849c30ab307","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/73673849c30ab307","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693987321627,"stop":1693987325050,"duration":3423}},{"uid":"e4afe75366079f1a","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/e4afe75366079f1a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693972914646,"stop":1693972918048,"duration":3402}},{"uid":"780d2cf07e89ff52","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/780d2cf07e89ff52","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693958576750,"stop":1693958580095,"duration":3345}},{"uid":"eedac31422140ab8","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/eedac31422140ab8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693944122160,"stop":1693944125557,"duration":3397}},{"uid":"a6a80fd281277813","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/a6a80fd281277813","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693929719440,"stop":1693929722778,"duration":3338}},{"uid":"d0475baefb471a9a","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/d0475baefb471a9a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693915333686,"stop":1693915337146,"duration":3460}},{"uid":"33a2f7030327bfa6","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/33a2f7030327bfa6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693900932960,"stop":1693900936560,"duration":3600}},{"uid":"fe53ddfae9dc984f","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/fe53ddfae9dc984f","status":"passed","time":{"start":1693872127008,"stop":1693872127642,"duration":634}},{"uid":"2f0063f7621e459a","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/2f0063f7621e459a","status":"passed","time":{"start":1693857681323,"stop":1693857681826,"duration":503}},{"uid":"61e005d568fe1dd1","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/61e005d568fe1dd1","status":"passed","time":{"start":1693843278903,"stop":1693843279544,"duration":641}},{"uid":"7a23e0e691a93bef","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/7a23e0e691a93bef","status":"passed","time":{"start":1693828885852,"stop":1693828886479,"duration":627}},{"uid":"ce4645f639da6728","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/ce4645f639da6728","status":"passed","time":{"start":1693814496542,"stop":1693814497345,"duration":803}},{"uid":"4690ccfcd43b2e01","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/4690ccfcd43b2e01","status":"passed","time":{"start":1693800079825,"stop":1693800080452,"duration":627}},{"uid":"c8c3cec903d3951a","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/c8c3cec903d3951a","status":"passed","time":{"start":1693785734539,"stop":1693785735344,"duration":805}},{"uid":"f043808ace952154","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/f043808ace952154","status":"passed","time":{"start":1693771290059,"stop":1693771290733,"duration":674}},{"uid":"d02aca458eb38184","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/d02aca458eb38184","status":"passed","time":{"start":1693756888895,"stop":1693756889658,"duration":763}},{"uid":"c4e29cf4de4de22a","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/c4e29cf4de4de22a","status":"passed","time":{"start":1693742495139,"stop":1693742495804,"duration":665}},{"uid":"28e44ab3078a669d","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/28e44ab3078a669d","status":"passed","time":{"start":1693728088148,"stop":1693728088625,"duration":477}},{"uid":"3363fe0896ce2809","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/3363fe0896ce2809","status":"passed","time":{"start":1693713680216,"stop":1693713680837,"duration":621}}]},"tags":[]},"source":"7ec6611cf9d355fa.json","parameterValues":["{'url': 'wss://karura-rpc.dwellir.com', 'name': 'Karura'}"]}