{"uid":"4bb4d7465e10a6f6","name":"test_has_new_assets[Test for Karura]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"542add1edc8e11ecaf0268a3083bd9e1","time":{"start":1696161712089,"stop":1696161716030,"duration":3941},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7fb3093fe5c0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fb3093fc460>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fb309557c10>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xa0c3f19f2057a5ff9a3e92de9421dafafd930761d5fce078cb968c336aefdaef']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7fb3093fe5c0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fb3093fc460>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fb309557c10>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xa0c3f19f2057a5ff9a3e92de9421dafafd930761d5fce078cb968c336aefdaef']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"53402f0db43f3e95","name":"stdout","source":"53402f0db43f3e95.txt","type":"text/plain","size":2352}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az551-696"},{"name":"thread","value":"2145-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fb3093fc460>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"496acd280b78105e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1696161693117,"stop":1696161696922,"duration":3805}},{"uid":"9e7e31c10661aae5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1696161673826,"stop":1696161677883,"duration":4057}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":227,"unknown":0,"total":228},"items":[{"uid":"696b6c7d66286871","reportUrl":"https://novasamatech.github.io/test-runner/3868//#testresult/696b6c7d66286871","status":"passed","time":{"start":1696147286381,"stop":1696147295425,"duration":9044}},{"uid":"9383e9fd70fe32c","reportUrl":"https://novasamatech.github.io/test-runner/3867//#testresult/9383e9fd70fe32c","status":"passed","time":{"start":1696132886104,"stop":1696132894507,"duration":8403}},{"uid":"6e061ebf3a03b944","reportUrl":"https://novasamatech.github.io/test-runner/3866//#testresult/6e061ebf3a03b944","status":"passed","time":{"start":1696118527917,"stop":1696118535036,"duration":7119}},{"uid":"553d5d3f6958d695","reportUrl":"https://novasamatech.github.io/test-runner/3865//#testresult/553d5d3f6958d695","status":"passed","time":{"start":1696104080065,"stop":1696104087435,"duration":7370}},{"uid":"94c73a5621d2e483","reportUrl":"https://novasamatech.github.io/test-runner/3864//#testresult/94c73a5621d2e483","status":"passed","time":{"start":1696089676006,"stop":1696089683228,"duration":7222}},{"uid":"b2489756803aa470","reportUrl":"https://novasamatech.github.io/test-runner/3863//#testresult/b2489756803aa470","status":"passed","time":{"start":1696075275597,"stop":1696075282444,"duration":6847}},{"uid":"22a7a2fc59b58a98","reportUrl":"https://novasamatech.github.io/test-runner/3862//#testresult/22a7a2fc59b58a98","status":"passed","time":{"start":1696060879164,"stop":1696060887435,"duration":8271}},{"uid":"52cd7ef53f88b0a6","reportUrl":"https://novasamatech.github.io/test-runner/3861//#testresult/52cd7ef53f88b0a6","status":"passed","time":{"start":1696046490931,"stop":1696046499426,"duration":8495}},{"uid":"395a4a3a7ac137b3","reportUrl":"https://novasamatech.github.io/test-runner/3860//#testresult/395a4a3a7ac137b3","status":"passed","time":{"start":1696032120904,"stop":1696032127746,"duration":6842}},{"uid":"c27a355ec68aa3c1","reportUrl":"https://novasamatech.github.io/test-runner/3859//#testresult/c27a355ec68aa3c1","status":"passed","time":{"start":1696017689969,"stop":1696017698272,"duration":8303}},{"uid":"e8f9d153d2c4ad50","reportUrl":"https://novasamatech.github.io/test-runner/3858//#testresult/e8f9d153d2c4ad50","status":"passed","time":{"start":1696003275033,"stop":1696003282150,"duration":7117}},{"uid":"4f969b4a69618e44","reportUrl":"https://novasamatech.github.io/test-runner/3857//#testresult/4f969b4a69618e44","status":"passed","time":{"start":1695988882220,"stop":1695988889885,"duration":7665}},{"uid":"64a32803b24bfdcb","reportUrl":"https://novasamatech.github.io/test-runner/3856//#testresult/64a32803b24bfdcb","status":"passed","time":{"start":1695974500669,"stop":1695974507964,"duration":7295}},{"uid":"eea5ec6fbfa8b1d","reportUrl":"https://novasamatech.github.io/test-runner/3855//#testresult/eea5ec6fbfa8b1d","status":"passed","time":{"start":1695960076176,"stop":1695960083719,"duration":7543}},{"uid":"627cb4cefd312093","reportUrl":"https://novasamatech.github.io/test-runner/3854//#testresult/627cb4cefd312093","status":"passed","time":{"start":1695945731322,"stop":1695945739565,"duration":8243}},{"uid":"8f538f947ab0d5ed","reportUrl":"https://novasamatech.github.io/test-runner/3853//#testresult/8f538f947ab0d5ed","status":"passed","time":{"start":1695931279648,"stop":1695931286967,"duration":7319}},{"uid":"3d532674586bdd90","reportUrl":"https://novasamatech.github.io/test-runner/3852//#testresult/3d532674586bdd90","status":"passed","time":{"start":1695916884883,"stop":1695916892058,"duration":7175}},{"uid":"3bc0e0daba76bf8d","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/3bc0e0daba76bf8d","status":"passed","time":{"start":1695902497562,"stop":1695902506006,"duration":8444}},{"uid":"d040d93d209c7153","reportUrl":"https://novasamatech.github.io/test-runner/3850//#testresult/d040d93d209c7153","status":"passed","time":{"start":1695888082368,"stop":1695888090276,"duration":7908}},{"uid":"435f06fa459f9222","reportUrl":"https://novasamatech.github.io/test-runner/3849//#testresult/435f06fa459f9222","status":"passed","time":{"start":1695873681833,"stop":1695873689591,"duration":7758}}]},"tags":[]},"source":"4bb4d7465e10a6f6.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fb3093fc460>"]}