{"uid":"7f592cbc8ffb47d0","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1687809872904,"stop":1687809873180,"duration":276},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 26 Jun 2023 20:04:33 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 26 Jun 2023 20:04:33 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 26 Jun 2023 20:04:33 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 26 Jun 2023 20:04:33 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"a9df7dcb3504cb06","name":"stdout","source":"a9df7dcb3504cb06.txt","type":"text/plain","size":1134}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az805-638"},{"name":"thread","value":"1922-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"56a0828efe2382f4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 26 Jun 2023 20:04:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1687809857442,"stop":1687809857811,"duration":369}},{"uid":"ce4aed035a7a5f91","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 26 Jun 2023 20:04:02 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1687809842007,"stop":1687809842286,"duration":279}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":279,"unknown":0,"total":284},"items":[{"uid":"75e4c83daac9d3d3","reportUrl":"https://novasamatech.github.io/test-runner/3279//#testresult/75e4c83daac9d3d3","status":"passed","time":{"start":1687795455623,"stop":1687795456051,"duration":428}},{"uid":"8a126bbf30c50147","reportUrl":"https://novasamatech.github.io/test-runner/3241//#testresult/8a126bbf30c50147","status":"passed","time":{"start":1687248263804,"stop":1687248264401,"duration":597}},{"uid":"6bdc8dcec2603ee0","reportUrl":"https://novasamatech.github.io/test-runner/3240//#testresult/6bdc8dcec2603ee0","status":"passed","time":{"start":1687233855302,"stop":1687233855688,"duration":386}},{"uid":"1f265a44ba95a421","reportUrl":"https://novasamatech.github.io/test-runner/3239//#testresult/1f265a44ba95a421","status":"passed","time":{"start":1687219962953,"stop":1687219963431,"duration":478}},{"uid":"c30e4c881d939f21","reportUrl":"https://novasamatech.github.io/test-runner/3238//#testresult/c30e4c881d939f21","status":"passed","time":{"start":1687205043343,"stop":1687205043649,"duration":306}},{"uid":"e1f1a4d6190a8bf7","reportUrl":"https://novasamatech.github.io/test-runner/3237//#testresult/e1f1a4d6190a8bf7","status":"passed","time":{"start":1687190640669,"stop":1687190641158,"duration":489}},{"uid":"22a1c4c79ac5b250","reportUrl":"https://novasamatech.github.io/test-runner/3236//#testresult/22a1c4c79ac5b250","status":"passed","time":{"start":1687176312682,"stop":1687176313177,"duration":495}},{"uid":"cd42b4c8e2a47cc4","reportUrl":"https://novasamatech.github.io/test-runner/3235//#testresult/cd42b4c8e2a47cc4","status":"passed","time":{"start":1687161867472,"stop":1687161867963,"duration":491}},{"uid":"d2d5de2bf1e915f9","reportUrl":"https://novasamatech.github.io/test-runner/3234//#testresult/d2d5de2bf1e915f9","status":"passed","time":{"start":1687147451534,"stop":1687147452007,"duration":473}},{"uid":"d421343db7fafa5d","reportUrl":"https://novasamatech.github.io/test-runner/3233//#testresult/d421343db7fafa5d","status":"passed","time":{"start":1687133678397,"stop":1687133679004,"duration":607}},{"uid":"b362fd8e9cdf4364","reportUrl":"https://novasamatech.github.io/test-runner/3232//#testresult/b362fd8e9cdf4364","status":"passed","time":{"start":1687118636448,"stop":1687118636797,"duration":349}},{"uid":"ed5d7a9071ade193","reportUrl":"https://novasamatech.github.io/test-runner/3231//#testresult/ed5d7a9071ade193","status":"passed","time":{"start":1687104234394,"stop":1687104234848,"duration":454}},{"uid":"27471258c34a3985","reportUrl":"https://novasamatech.github.io/test-runner/3230//#testresult/27471258c34a3985","status":"passed","time":{"start":1687089874723,"stop":1687089875183,"duration":460}},{"uid":"ed1b01919277f779","reportUrl":"https://novasamatech.github.io/test-runner/3229//#testresult/ed1b01919277f779","status":"passed","time":{"start":1687075439605,"stop":1687075440057,"duration":452}},{"uid":"a22cb16362987783","reportUrl":"https://novasamatech.github.io/test-runner/3228//#testresult/a22cb16362987783","status":"passed","time":{"start":1687061052066,"stop":1687061052670,"duration":604}},{"uid":"fd97be84b949ca07","reportUrl":"https://novasamatech.github.io/test-runner/3227//#testresult/fd97be84b949ca07","status":"passed","time":{"start":1687047336000,"stop":1687047336539,"duration":539}},{"uid":"eb1a44bc7d7304ab","reportUrl":"https://novasamatech.github.io/test-runner/3226//#testresult/eb1a44bc7d7304ab","status":"passed","time":{"start":1687032236222,"stop":1687032236718,"duration":496}},{"uid":"c5738b567f7cb097","reportUrl":"https://novasamatech.github.io/test-runner/3225//#testresult/c5738b567f7cb097","status":"passed","time":{"start":1687017864650,"stop":1687017865258,"duration":608}},{"uid":"99717bb37afc8504","reportUrl":"https://novasamatech.github.io/test-runner/3224//#testresult/99717bb37afc8504","status":"passed","time":{"start":1687003474942,"stop":1687003475411,"duration":469}},{"uid":"bd96910f262c5dc4","reportUrl":"https://novasamatech.github.io/test-runner/3223//#testresult/bd96910f262c5dc4","status":"passed","time":{"start":1686989051715,"stop":1686989052175,"duration":460}}]},"tags":[]},"source":"7f592cbc8ffb47d0.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}