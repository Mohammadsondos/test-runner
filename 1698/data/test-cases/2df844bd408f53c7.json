{"uid":"2df844bd408f53c7","name":"test_xcm_parameters[Check XCM data for Polkadot]","fullName":"tests.test_xcm_data.TestCompareXCMData#test_xcm_parameters","historyId":"ef3622b89ef3366b11fda76d9391fcfc","time":{"start":1665576489043,"stop":1665576549417,"duration":60374},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f5e13f1e070>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:637: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f5e13f1eb50>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 5}'\nopcode = 1\n\n    def send(self, payload, opcode=ABNF.OPCODE_TEXT):\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f5e13f1eb50>\nframe = <websocket._abnf.ABNF object at 0x7f5e12b3c580>\n\n    def send_frame(self, frame):\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.org/\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:308: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f5e13f1eb50>\ndata = b'\\x81\\xc4\\x03\\t\\xe4\\x9fx+\\x8e\\xeclg\\x96\\xef`+\\xde\\xbf!;\\xca\\xaf!%\\xc4\\xbdnl\\x90\\xf7lm\\xc6\\xa5#+\\x87\\xf7b`\\x8a\\xc0dl\\x90\\xd7fh\\x80\\xbd/)\\xc6\\xefb{\\x85\\xf2p+\\xde\\xbfXT\\xc8\\xbf!`\\x80\\xbd9)\\xd1\\xe2'\n\n    def _send(self, data):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:522: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc4\\x03\\t\\xe4\\x9fx+\\x8e\\xeclg\\x96\\xef`+\\xde\\xbf!;\\xca\\xaf!%\\xc4\\xbdnl\\x90\\xf7lm\\xc6\\xa5#+\\x87\\xf7b`\\x8a\\xc0dl\\x90\\xd7fh\\x80\\xbd/)\\xc6\\xefb{\\x85\\xf2p+\\xde\\xbfXT\\xc8\\xbf!`\\x80\\xbd9)\\xd1\\xe2'\n\n    def send(sock, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.8/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_xcm_data.TestCompareXCMData object at 0x7f5e12c98310>\nchain = <tests.utils.chain_model.Chain object at 0x7f5e13f1e340>\n\n    def test_xcm_parameters(self, chain: Chain):\n        connection = chain.create_connection()\n>       chain.init_properties()\n\ntests/test_xcm_data.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/chain_model.py:35: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/create_type_file.py:52: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:2374: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:2348: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:1093: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:797: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:642: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:588: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:605: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:250: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.8/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out\n\n../../../../.local/lib/python3.8/site-packages/websocket/_handshake.py:148: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f5e13f1e070>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:637: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f5e13f1eb50>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 5}'\nopcode = 1\n\n    def send(self, payload, opcode=ABNF.OPCODE_TEXT):\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f5e13f1eb50>\nframe = <websocket._abnf.ABNF object at 0x7f5e12b3c580>\n\n    def send_frame(self, frame):\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.org/\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:308: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f5e13f1eb50>\ndata = b'\\x81\\xc4\\x03\\t\\xe4\\x9fx+\\x8e\\xeclg\\x96\\xef`+\\xde\\xbf!;\\xca\\xaf!%\\xc4\\xbdnl\\x90\\xf7lm\\xc6\\xa5#+\\x87\\xf7b`\\x8a\\xc0dl\\x90\\xd7fh\\x80\\xbd/)\\xc6\\xefb{\\x85\\xf2p+\\xde\\xbfXT\\xc8\\xbf!`\\x80\\xbd9)\\xd1\\xe2'\n\n    def _send(self, data):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:522: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc4\\x03\\t\\xe4\\x9fx+\\x8e\\xeclg\\x96\\xef`+\\xde\\xbf!;\\xca\\xaf!%\\xc4\\xbdnl\\x90\\xf7lm\\xc6\\xa5#+\\x87\\xf7b`\\x8a\\xc0dl\\x90\\xd7fh\\x80\\xbd/)\\xc6\\xefb{\\x85\\xf2p+\\xde\\xbfXT\\xc8\\xbf!`\\x80\\xbd9)\\xd1\\xe2'\n\n    def send(sock, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.8/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_xcm_data.TestCompareXCMData object at 0x7f5e12c98310>\nchain = <tests.utils.chain_model.Chain object at 0x7f5e13f1e340>\n\n    def test_xcm_parameters(self, chain: Chain):\n        connection = chain.create_connection()\n>       chain.init_properties()\n\ntests/test_xcm_data.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/chain_model.py:35: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/create_type_file.py:52: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:2374: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:2348: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:1093: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:797: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:642: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.8/site-packages/substrateinterface/base.py:588: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:605: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.8/site-packages/websocket/_core.py:250: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.8/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out\n\n../../../../.local/lib/python3.8/site-packages/websocket/_handshake.py:148: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"58151ca5fea02a82","name":"stdout","source":"58151ca5fea02a82.txt","type":"text/plain","size":27}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_xcm_data"},{"name":"subSuite","value":"TestCompareXCMData"},{"name":"host","value":"fv-az399-337"},{"name":"thread","value":"1635-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_xcm_data"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<tests.utils.chain_model.Chain object at 0x7f5e13f1e340>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e71ce51f07335c53","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1665576358065,"stop":1665576478834,"duration":120769}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":20},"items":[{"uid":"1661044ca4cf3b06","reportUrl":"https://nova-wallet.github.io/test-runner/1697//#testresult/1661044ca4cf3b06","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665561873342,"stop":1665561883077,"duration":9735}},{"uid":"696d2860d6693ac9","reportUrl":"https://nova-wallet.github.io/test-runner/1696//#testresult/696d2860d6693ac9","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665549049983,"stop":1665549050553,"duration":570}},{"uid":"837e61c361aa62e6","reportUrl":"https://nova-wallet.github.io/test-runner/1695//#testresult/837e61c361aa62e6","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665534162872,"stop":1665534163483,"duration":611}},{"uid":"13049dde47fb6a4b","reportUrl":"https://nova-wallet.github.io/test-runner/1694//#testresult/13049dde47fb6a4b","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665518714051,"stop":1665518714848,"duration":797}},{"uid":"578c78923b79ee04","reportUrl":"https://nova-wallet.github.io/test-runner/1693//#testresult/578c78923b79ee04","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665504383348,"stop":1665504383962,"duration":614}},{"uid":"71c597c11e7097c2","reportUrl":"https://nova-wallet.github.io/test-runner/1692//#testresult/71c597c11e7097c2","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665489956270,"stop":1665489957065,"duration":795}},{"uid":"28dff76e70ce605e","reportUrl":"https://nova-wallet.github.io/test-runner/1691//#testresult/28dff76e70ce605e","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665475734294,"stop":1665475735173,"duration":879}},{"uid":"ceebb3de263eb8ec","reportUrl":"https://nova-wallet.github.io/test-runner/1690//#testresult/ceebb3de263eb8ec","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665462850444,"stop":1665462851477,"duration":1033}},{"uid":"a36732873f239132","reportUrl":"https://nova-wallet.github.io/test-runner/1689//#testresult/a36732873f239132","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665447641631,"stop":1665447642425,"duration":794}},{"uid":"43f39fc59024d5b2","reportUrl":"https://nova-wallet.github.io/test-runner/1688//#testresult/43f39fc59024d5b2","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665432260287,"stop":1665432260919,"duration":632}},{"uid":"b80094606052b36f","reportUrl":"https://nova-wallet.github.io/test-runner/1687//#testresult/b80094606052b36f","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665417976329,"stop":1665417976950,"duration":621}},{"uid":"c4a39364d0293982","reportUrl":"https://nova-wallet.github.io/test-runner/1686//#testresult/c4a39364d0293982","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665403565456,"stop":1665403566014,"duration":558}},{"uid":"d65810b61daf2b1b","reportUrl":"https://nova-wallet.github.io/test-runner/1685//#testresult/d65810b61daf2b1b","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665389257313,"stop":1665389258187,"duration":874}},{"uid":"15a55938a74e82fc","reportUrl":"https://nova-wallet.github.io/test-runner/1684//#testresult/15a55938a74e82fc","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665386958243,"stop":1665386958815,"duration":572}},{"uid":"fab3ec2d6ea7817","reportUrl":"https://nova-wallet.github.io/test-runner/1683//#testresult/fab3ec2d6ea7817","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665385304632,"stop":1665385305250,"duration":618}},{"uid":"dddcc998c7661f3d","reportUrl":"https://nova-wallet.github.io/test-runner/1682//#testresult/dddcc998c7661f3d","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665383536593,"stop":1665383537137,"duration":544}},{"uid":"4843bd256e9fc221","reportUrl":"https://nova-wallet.github.io/test-runner/22//#testresult/4843bd256e9fc221","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665381955152,"stop":1665381955967,"duration":815}},{"uid":"8901febfd512f0f3","reportUrl":"https://nova-wallet.github.io/test-runner/22//#testresult/8901febfd512f0f3","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665380798061,"stop":1665380799159,"duration":1098}},{"uid":"6dd8320ca59ff08e","reportUrl":"https://nova-wallet.github.io/test-runner/21//#testresult/6dd8320ca59ff08e","status":"failed","statusDetails":"AssertionError: assert not True\n +  where True = bool({'values_changed': [<root['base_block'] t1:5849907000, t2:5852263000>]})","time":{"start":1665378261071,"stop":1665378261863,"duration":792}}]},"tags":[]},"source":"2df844bd408f53c7.json","parameterValues":["<tests.utils.chain_model.Chain object at 0x7f5e13f1e340>"]}