{"uid":"9bd9c6e0e89f31f9","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1712160076366,"stop":1712160076756,"duration":390},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f4119191480>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f4118f8c1c0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f4118f8eec0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az735-175"},{"name":"thread","value":"2086-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7d06b3f05f7103b4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712160070975,"stop":1712160071330,"duration":355}},{"uid":"f527284f4a56fc48","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712160065467,"stop":1712160065855,"duration":388}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":50,"skipped":0,"passed":1023,"unknown":0,"total":1074},"items":[{"uid":"d29eff7b0142cd9","reportUrl":"https://novasamatech.github.io/test-runner/4997//#testresult/d29eff7b0142cd9","status":"passed","time":{"start":1712145660234,"stop":1712145661071,"duration":837}},{"uid":"45a50e1d22c3c95b","reportUrl":"https://novasamatech.github.io/test-runner/4996//#testresult/45a50e1d22c3c95b","status":"passed","time":{"start":1712131272917,"stop":1712131273247,"duration":330}},{"uid":"791a24644c2ed492","reportUrl":"https://novasamatech.github.io/test-runner/4995//#testresult/791a24644c2ed492","status":"passed","time":{"start":1712116862687,"stop":1712116863422,"duration":735}},{"uid":"4db73fc5da674fb0","reportUrl":"https://novasamatech.github.io/test-runner/4994//#testresult/4db73fc5da674fb0","status":"passed","time":{"start":1712102503670,"stop":1712102504062,"duration":392}},{"uid":"7f4f866bc68f97a9","reportUrl":"https://novasamatech.github.io/test-runner/4993//#testresult/7f4f866bc68f97a9","status":"passed","time":{"start":1712088061034,"stop":1712088061709,"duration":675}},{"uid":"168f82b2534c706e","reportUrl":"https://novasamatech.github.io/test-runner/4992//#testresult/168f82b2534c706e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712073671860,"stop":1712073672061,"duration":201}},{"uid":"f5dc4feb209f020a","reportUrl":"https://novasamatech.github.io/test-runner/4991//#testresult/f5dc4feb209f020a","status":"passed","time":{"start":1712059269236,"stop":1712059269703,"duration":467}},{"uid":"6e2b22d801b52afb","reportUrl":"https://novasamatech.github.io/test-runner/4990//#testresult/6e2b22d801b52afb","status":"passed","time":{"start":1712048230729,"stop":1712048231312,"duration":583}},{"uid":"305bd33dee4f8898","reportUrl":"https://novasamatech.github.io/test-runner/4954//#testresult/305bd33dee4f8898","status":"passed","time":{"start":1711540870654,"stop":1711540871422,"duration":768}},{"uid":"a7a1791a1a6680b0","reportUrl":"https://novasamatech.github.io/test-runner/4953//#testresult/a7a1791a1a6680b0","status":"passed","time":{"start":1711526458149,"stop":1711526458387,"duration":238}},{"uid":"da8f388f88a3d050","reportUrl":"https://novasamatech.github.io/test-runner/4952//#testresult/da8f388f88a3d050","status":"passed","time":{"start":1711512060995,"stop":1711512061703,"duration":708}},{"uid":"8ce11da681ac5e2","reportUrl":"https://novasamatech.github.io/test-runner/4951//#testresult/8ce11da681ac5e2","status":"passed","time":{"start":1711497695228,"stop":1711497695758,"duration":530}},{"uid":"5460cb4f526405d5","reportUrl":"https://novasamatech.github.io/test-runner/4950//#testresult/5460cb4f526405d5","status":"passed","time":{"start":1711483260936,"stop":1711483261455,"duration":519}},{"uid":"7e5a68a9232594e0","reportUrl":"https://novasamatech.github.io/test-runner/4949//#testresult/7e5a68a9232594e0","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711468868973,"stop":1711468869343,"duration":370}},{"uid":"c2db881b2522db3a","reportUrl":"https://novasamatech.github.io/test-runner/4948//#testresult/c2db881b2522db3a","status":"passed","time":{"start":1711454468221,"stop":1711454468593,"duration":372}},{"uid":"b2dc7d2a5a81ab3","reportUrl":"https://novasamatech.github.io/test-runner/4947//#testresult/b2dc7d2a5a81ab3","status":"passed","time":{"start":1711440066751,"stop":1711440066973,"duration":222}},{"uid":"875a49da8d4d63f5","reportUrl":"https://novasamatech.github.io/test-runner/4946//#testresult/875a49da8d4d63f5","status":"passed","time":{"start":1711425678164,"stop":1711425678368,"duration":204}},{"uid":"41a6861c5a6952ce","reportUrl":"https://novasamatech.github.io/test-runner/4945//#testresult/41a6861c5a6952ce","status":"passed","time":{"start":1711411296315,"stop":1711411296563,"duration":248}},{"uid":"a06e2f61085382b5","reportUrl":"https://novasamatech.github.io/test-runner/4944//#testresult/a06e2f61085382b5","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711396873652,"stop":1711396873806,"duration":154}},{"uid":"f664f3dacea3335a","reportUrl":"https://novasamatech.github.io/test-runner/4943//#testresult/f664f3dacea3335a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711382473378,"stop":1711382473536,"duration":158}}]},"tags":[]},"source":"9bd9c6e0e89f31f9.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}