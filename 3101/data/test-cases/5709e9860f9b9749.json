{"uid":"5709e9860f9b9749","name":"test_can_create_connection[Test for Composable Finance, url: wss://rpc.composable.finance]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e1c6edf5649802bd02e402a73e097467","time":{"start":1685333066820,"stop":1685333066910,"duration":90},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f01111590f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Composable Finance', 'url': 'wss://rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f01111590f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f01111590f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Composable Finance', 'url': 'wss://rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f01111590f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"b372bdc88aa59746","name":"stdout","source":"b372bdc88aa59746.txt","type":"text/plain","size":232}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az401-828"},{"name":"thread","value":"1872-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.composable.finance', 'name': 'Composable Finance'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"68771d775715040e","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1685333056569,"stop":1685333056628,"duration":59}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":146,"unknown":0,"total":148},"items":[{"uid":"15d005e1c3c9117","reportUrl":"https://nova-wallet.github.io/test-runner/3098//#testresult/15d005e1c3c9117","status":"passed","time":{"start":1685289898920,"stop":1685289899655,"duration":735}},{"uid":"55cadb78136354fb","reportUrl":"https://nova-wallet.github.io/test-runner/3086//#testresult/55cadb78136354fb","status":"passed","time":{"start":1685174675960,"stop":1685174676875,"duration":915}},{"uid":"b49c1a7eae04617c","reportUrl":"https://nova-wallet.github.io/test-runner/3083//#testresult/b49c1a7eae04617c","status":"passed","time":{"start":1685131462983,"stop":1685131463848,"duration":865}},{"uid":"7bddcad3df05a0df","reportUrl":"https://nova-wallet.github.io/test-runner/3082//#testresult/7bddcad3df05a0df","status":"passed","time":{"start":1685117076053,"stop":1685117077129,"duration":1076}},{"uid":"8ce361a303504bce","reportUrl":"https://nova-wallet.github.io/test-runner/3081//#testresult/8ce361a303504bce","status":"passed","time":{"start":1685102709411,"stop":1685102710255,"duration":844}},{"uid":"e4421c81b9dc6a42","reportUrl":"https://nova-wallet.github.io/test-runner/3077//#testresult/e4421c81b9dc6a42","status":"passed","time":{"start":1685045056983,"stop":1685045057819,"duration":836}},{"uid":"c5bdb32fb484aec7","reportUrl":"https://nova-wallet.github.io/test-runner/3076//#testresult/c5bdb32fb484aec7","status":"passed","time":{"start":1685030680771,"stop":1685030681596,"duration":825}},{"uid":"514ddc37cebe9313","reportUrl":"https://nova-wallet.github.io/test-runner/3074//#testresult/514ddc37cebe9313","status":"passed","time":{"start":1685005769183,"stop":1685005769910,"duration":727}},{"uid":"5c19a1639257dc42","reportUrl":"https://nova-wallet.github.io/test-runner/3054//#testresult/5c19a1639257dc42","status":"passed","time":{"start":1684742690239,"stop":1684742691040,"duration":801}},{"uid":"15b434df644b31ff","reportUrl":"https://nova-wallet.github.io/test-runner/3052//#testresult/15b434df644b31ff","status":"passed","time":{"start":1684714437361,"stop":1684714438015,"duration":654}},{"uid":"1e0c5dd42ea2e93f","reportUrl":"https://nova-wallet.github.io/test-runner/3050//#testresult/1e0c5dd42ea2e93f","status":"passed","time":{"start":1684685058458,"stop":1684685059038,"duration":580}},{"uid":"ccd25093d8ca43ce","reportUrl":"https://nova-wallet.github.io/test-runner/3049//#testresult/ccd25093d8ca43ce","status":"passed","time":{"start":1684670669742,"stop":1684670670820,"duration":1078}},{"uid":"ababc5b0ba2a175","reportUrl":"https://nova-wallet.github.io/test-runner/3048//#testresult/ababc5b0ba2a175","status":"passed","time":{"start":1684656289875,"stop":1684656290625,"duration":750}},{"uid":"b5a3dcd17afb12af","reportUrl":"https://nova-wallet.github.io/test-runner/3047//#testresult/b5a3dcd17afb12af","status":"passed","time":{"start":1684641849463,"stop":1684641850020,"duration":557}},{"uid":"e7abdb4bd1baeba8","reportUrl":"https://nova-wallet.github.io/test-runner/3046//#testresult/e7abdb4bd1baeba8","status":"passed","time":{"start":1684628071335,"stop":1684628071998,"duration":663}},{"uid":"6d4d71ff05472d17","reportUrl":"https://nova-wallet.github.io/test-runner/3045//#testresult/6d4d71ff05472d17","status":"passed","time":{"start":1684613053481,"stop":1684613054225,"duration":744}},{"uid":"f0c536fe175496d0","reportUrl":"https://nova-wallet.github.io/test-runner/3044//#testresult/f0c536fe175496d0","status":"passed","time":{"start":1684598654033,"stop":1684598654775,"duration":742}},{"uid":"d7f7deb2bbb9e5e4","reportUrl":"https://nova-wallet.github.io/test-runner/3043//#testresult/d7f7deb2bbb9e5e4","status":"passed","time":{"start":1684584284480,"stop":1684584285440,"duration":960}},{"uid":"4f7fb74ec44a0559","reportUrl":"https://nova-wallet.github.io/test-runner/3042//#testresult/4f7fb74ec44a0559","status":"passed","time":{"start":1684569846477,"stop":1684569847076,"duration":599}},{"uid":"7e3ebb39d4f8c751","reportUrl":"https://nova-wallet.github.io/test-runner/3041//#testresult/7e3ebb39d4f8c751","status":"passed","time":{"start":1684555447883,"stop":1684555448831,"duration":948}}]},"tags":[]},"source":"5709e9860f9b9749.json","parameterValues":["{'url': 'wss://rpc.composable.finance', 'name': 'Composable Finance'}"]}