{"uid":"cb4641c9452ba43b","name":"test_has_new_assets[Test for Composable Finance]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"6ed403c188bd8bbaba3701ff58033048","time":{"start":1692072317611,"stop":1692072319540,"duration":1929},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f6c54699060>\nchain = <scripts.utils.chain_model.Chain object at 0x7f6c5497e3b0>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f6c4904a920>\nmethod = 'state_getMetadata'\nparams = ['0x024c74595bde998c2887799eb09ce2639e9ff19c85230c44891bde0f94a36daf']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az471-528"},{"name":"thread","value":"1965-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f6c5497e3b0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3e347e4c84c8c46f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692072300196,"stop":1692072302052,"duration":1856}},{"uid":"6e0eb9a94e38b204","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692072282662,"stop":1692072284438,"duration":1776}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":577,"unknown":0,"total":583},"items":[{"uid":"f6318f763ade91a5","reportUrl":"https://novasamatech.github.io/test-runner/3578//#testresult/f6318f763ade91a5","status":"passed","time":{"start":1692058370017,"stop":1692058383620,"duration":13603}},{"uid":"275cb110e96e8646","reportUrl":"https://novasamatech.github.io/test-runner/3577//#testresult/275cb110e96e8646","status":"passed","time":{"start":1692043509806,"stop":1692043523186,"duration":13380}},{"uid":"44a91fe851c048ec","reportUrl":"https://novasamatech.github.io/test-runner/3576//#testresult/44a91fe851c048ec","status":"passed","time":{"start":1692029092319,"stop":1692029103502,"duration":11183}},{"uid":"763392047f95cbe8","reportUrl":"https://novasamatech.github.io/test-runner/3575//#testresult/763392047f95cbe8","status":"passed","time":{"start":1692014792456,"stop":1692014798897,"duration":6441}},{"uid":"39006fbb665d11c1","reportUrl":"https://novasamatech.github.io/test-runner/3574//#testresult/39006fbb665d11c1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692000324396,"stop":1692000326080,"duration":1684}},{"uid":"f2f9d8c1f851b555","reportUrl":"https://novasamatech.github.io/test-runner/3573//#testresult/f2f9d8c1f851b555","status":"passed","time":{"start":1691985896872,"stop":1691985910446,"duration":13574}},{"uid":"9dd59ec66848b446","reportUrl":"https://novasamatech.github.io/test-runner/3572//#testresult/9dd59ec66848b446","status":"passed","time":{"start":1691971963892,"stop":1691971973668,"duration":9776}},{"uid":"8b0dac924803b6ea","reportUrl":"https://novasamatech.github.io/test-runner/3571//#testresult/8b0dac924803b6ea","status":"passed","time":{"start":1691957099396,"stop":1691957109452,"duration":10056}},{"uid":"3d15d5cf77bc2c5a","reportUrl":"https://novasamatech.github.io/test-runner/3570//#testresult/3d15d5cf77bc2c5a","status":"passed","time":{"start":1691942678587,"stop":1691942690588,"duration":12001}},{"uid":"a50758a084c001ca","reportUrl":"https://novasamatech.github.io/test-runner/3569//#testresult/a50758a084c001ca","status":"passed","time":{"start":1691928294369,"stop":1691928305660,"duration":11291}},{"uid":"98f423f14a02266a","reportUrl":"https://novasamatech.github.io/test-runner/3568//#testresult/98f423f14a02266a","status":"passed","time":{"start":1691913885944,"stop":1691913893880,"duration":7936}},{"uid":"d6ac88321dc21a31","reportUrl":"https://novasamatech.github.io/test-runner/3567//#testresult/d6ac88321dc21a31","status":"passed","time":{"start":1691899491119,"stop":1691899503785,"duration":12666}},{"uid":"437fa49ebad76811","reportUrl":"https://novasamatech.github.io/test-runner/3566//#testresult/437fa49ebad76811","status":"passed","time":{"start":1691885579555,"stop":1691885588001,"duration":8446}},{"uid":"14b97ef59aec6fc0","reportUrl":"https://novasamatech.github.io/test-runner/3565//#testresult/14b97ef59aec6fc0","status":"passed","time":{"start":1691870659745,"stop":1691870670933,"duration":11188}},{"uid":"1c1ab29d1e46bebe","reportUrl":"https://novasamatech.github.io/test-runner/3564//#testresult/1c1ab29d1e46bebe","status":"passed","time":{"start":1691856276935,"stop":1691856286643,"duration":9708}},{"uid":"7bc86b9d1d67244","reportUrl":"https://novasamatech.github.io/test-runner/3562//#testresult/7bc86b9d1d67244","status":"passed","time":{"start":1691827494897,"stop":1691827503281,"duration":8384}},{"uid":"2be1fc6fed399fde","reportUrl":"https://novasamatech.github.io/test-runner/3563//#testresult/2be1fc6fed399fde","status":"passed","time":{"start":1691841907909,"stop":1691841921873,"duration":13964}},{"uid":"29e914e6fd9a6157","reportUrl":"https://novasamatech.github.io/test-runner/3561//#testresult/29e914e6fd9a6157","status":"passed","time":{"start":1691813066953,"stop":1691813078476,"duration":11523}},{"uid":"d6b4dd809e3bc119","reportUrl":"https://novasamatech.github.io/test-runner/3560//#testresult/d6b4dd809e3bc119","status":"passed","time":{"start":1691799114369,"stop":1691799123515,"duration":9146}},{"uid":"1d165fd86d34b8e8","reportUrl":"https://novasamatech.github.io/test-runner/3559//#testresult/1d165fd86d34b8e8","status":"passed","time":{"start":1691784275914,"stop":1691784287117,"duration":11203}}]},"tags":[]},"source":"cb4641c9452ba43b.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f6c5497e3b0>"]}