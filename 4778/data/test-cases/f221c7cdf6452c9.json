{"uid":"f221c7cdf6452c9","name":"test_has_new_assets[Test for OriginTrail Parachain]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"8d447059892acc9e121bd8a98e0ce45f","time":{"start":1709035325100,"stop":1709035325115,"duration":15},"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: NEURO\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7fc662c73be0>\nchain_model = <scripts.utils.chain_model.Chain object at 0x7fc66316f130>\n\n    def test_has_new_assets(self, chain_model: Chain):\n    \n        chain_assets = {asset['symbol'].upper(\n        ): '' for asset in chain_model.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain_model.name in self.exclusions:\n            chain_assets.update(\n                {ex_asset: '' for ex_asset in self.exclusions[chain_model.name]})\n        symbols = chain_model.substrate.token_symbol if isinstance(chain_model.substrate.token_symbol, list) else [\n            chain_model.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: NEURO\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n.venv/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"chain_model","time":{"start":1709035310608,"stop":1709035315030,"duration":4422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az1536-61"},{"name":"thread","value":"2137-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain_model","value":"<scripts.utils.chain_model.Chain object at 0x7fc66316f130>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"263033ac4b22b113","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: NEURO\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1709035320054,"stop":1709035320088,"duration":34}},{"uid":"7aa8b52130a77f39","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: NEURO\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1709035315031,"stop":1709035315047,"duration":16}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":15,"skipped":0,"passed":878,"unknown":0,"total":895},"items":[{"uid":"136fcdb397b9ad37","reportUrl":"https://novasamatech.github.io/test-runner/4776//#testresult/136fcdb397b9ad37","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: NEURO\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1709032525156,"stop":1709032525178,"duration":22}},{"uid":"bcb915b4c402e156","reportUrl":"https://novasamatech.github.io/test-runner/4703//#testresult/bcb915b4c402e156","status":"passed","time":{"start":1707984094628,"stop":1707984094636,"duration":8}},{"uid":"347bb2640af6b3df","reportUrl":"https://novasamatech.github.io/test-runner/4702//#testresult/347bb2640af6b3df","status":"passed","time":{"start":1707969709859,"stop":1707969709865,"duration":6}},{"uid":"2261fdf549b15b5f","reportUrl":"https://novasamatech.github.io/test-runner/4701//#testresult/2261fdf549b15b5f","status":"passed","time":{"start":1707955345193,"stop":1707955345202,"duration":9}},{"uid":"b821693b7deb1e85","reportUrl":"https://novasamatech.github.io/test-runner/4700//#testresult/b821693b7deb1e85","status":"passed","time":{"start":1707940904273,"stop":1707940904281,"duration":8}},{"uid":"58a56b6c739a98da","reportUrl":"https://novasamatech.github.io/test-runner/4699//#testresult/58a56b6c739a98da","status":"passed","time":{"start":1707926496768,"stop":1707926496773,"duration":5}},{"uid":"5daf396b91c86ea6","reportUrl":"https://novasamatech.github.io/test-runner/4698//#testresult/5daf396b91c86ea6","status":"passed","time":{"start":1707912119365,"stop":1707912119375,"duration":10}},{"uid":"93fe4f2fd0d61c19","reportUrl":"https://novasamatech.github.io/test-runner/4697//#testresult/93fe4f2fd0d61c19","status":"passed","time":{"start":1707897707477,"stop":1707897707484,"duration":7}},{"uid":"fb89ca91630aa4ff","reportUrl":"https://novasamatech.github.io/test-runner/4696//#testresult/fb89ca91630aa4ff","status":"passed","time":{"start":1707883305406,"stop":1707883305414,"duration":8}},{"uid":"86e9eed98dc25d7e","reportUrl":"https://novasamatech.github.io/test-runner/4695//#testresult/86e9eed98dc25d7e","status":"passed","time":{"start":1707868940760,"stop":1707868940765,"duration":5}},{"uid":"e2f26d1f526304cb","reportUrl":"https://novasamatech.github.io/test-runner/4694//#testresult/e2f26d1f526304cb","status":"passed","time":{"start":1707854495477,"stop":1707854495486,"duration":9}},{"uid":"381ac80226b98954","reportUrl":"https://novasamatech.github.io/test-runner/4693//#testresult/381ac80226b98954","status":"passed","time":{"start":1707840107303,"stop":1707840107309,"duration":6}},{"uid":"d26ce59dd03077df","reportUrl":"https://novasamatech.github.io/test-runner/4692//#testresult/d26ce59dd03077df","status":"passed","time":{"start":1707825712868,"stop":1707825712874,"duration":6}},{"uid":"a21d3932255d016f","reportUrl":"https://novasamatech.github.io/test-runner/4691//#testresult/a21d3932255d016f","status":"passed","time":{"start":1707811295180,"stop":1707811295187,"duration":7}},{"uid":"7e7d75d64f24f0a","reportUrl":"https://novasamatech.github.io/test-runner/4690//#testresult/7e7d75d64f24f0a","status":"passed","time":{"start":1707796906935,"stop":1707796906942,"duration":7}},{"uid":"26198e2a6a05bb5b","reportUrl":"https://novasamatech.github.io/test-runner/4689//#testresult/26198e2a6a05bb5b","status":"passed","time":{"start":1707782552955,"stop":1707782552962,"duration":7}},{"uid":"a2dbafcf11e2435e","reportUrl":"https://novasamatech.github.io/test-runner/4688//#testresult/a2dbafcf11e2435e","status":"passed","time":{"start":1707768100617,"stop":1707768100623,"duration":6}},{"uid":"d15875682bc4497b","reportUrl":"https://novasamatech.github.io/test-runner/4687//#testresult/d15875682bc4497b","status":"passed","time":{"start":1707753704472,"stop":1707753704477,"duration":5}},{"uid":"e174b65aa9606327","reportUrl":"https://novasamatech.github.io/test-runner/4686//#testresult/e174b65aa9606327","status":"passed","time":{"start":1707739299392,"stop":1707739299397,"duration":5}},{"uid":"f8b5f4ac2db23da4","reportUrl":"https://novasamatech.github.io/test-runner/4685//#testresult/f8b5f4ac2db23da4","status":"passed","time":{"start":1707724909720,"stop":1707724909727,"duration":7}}]},"tags":[]},"source":"f221c7cdf6452c9.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fc66316f130>"]}