{"uid":"f4bc5b8f349de10c","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1694102598274,"stop":1694102598705,"duration":431},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 07 Sep 2023 16:03:18 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 07 Sep 2023 16:03:18 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 07 Sep 2023 16:03:18 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 07 Sep 2023 16:03:18 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f3373b11b0c5ca21","name":"stdout","source":"f3373b11b0c5ca21.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az735-287"},{"name":"thread","value":"2038-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7128c9dbd6a52b5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 07 Sep 2023 16:03:03 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694102582876,"stop":1694102583161,"duration":285}},{"uid":"78bb58843234dfc0","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 07 Sep 2023 16:02:47 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1694102567407,"stop":1694102567767,"duration":360}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":83,"unknown":0,"total":86},"items":[{"uid":"b41e71c2a3a640f8","reportUrl":"https://novasamatech.github.io/test-runner/3724//#testresult/b41e71c2a3a640f8","status":"passed","time":{"start":1694088180949,"stop":1694088181527,"duration":578}},{"uid":"63769e05f204830","reportUrl":"https://novasamatech.github.io/test-runner/3723//#testresult/63769e05f204830","status":"passed","time":{"start":1694073762029,"stop":1694073762518,"duration":489}},{"uid":"c90f308484534d7d","reportUrl":"https://novasamatech.github.io/test-runner/3722//#testresult/c90f308484534d7d","status":"passed","time":{"start":1694059351043,"stop":1694059351560,"duration":517}},{"uid":"eca66e4ed9ad7667","reportUrl":"https://novasamatech.github.io/test-runner/3721//#testresult/eca66e4ed9ad7667","status":"passed","time":{"start":1694044971943,"stop":1694044972408,"duration":465}},{"uid":"bf5f57be3979200f","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/bf5f57be3979200f","status":"passed","time":{"start":1694030521962,"stop":1694030522408,"duration":446}},{"uid":"b2a3475ff8fa04bb","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/b2a3475ff8fa04bb","status":"passed","time":{"start":1694016165007,"stop":1694016165475,"duration":468}},{"uid":"55531839b47bbb5d","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/55531839b47bbb5d","status":"passed","time":{"start":1694001750341,"stop":1694001750882,"duration":541}},{"uid":"51d43589b9411ede","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/51d43589b9411ede","status":"passed","time":{"start":1693987333072,"stop":1693987333654,"duration":582}},{"uid":"30ffb41020fafef4","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/30ffb41020fafef4","status":"passed","time":{"start":1693972925696,"stop":1693972926137,"duration":441}},{"uid":"ba0e61b202d7d70f","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/ba0e61b202d7d70f","status":"passed","time":{"start":1693958596571,"stop":1693958597069,"duration":498}},{"uid":"443bcebcd8633939","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/443bcebcd8633939","status":"passed","time":{"start":1693944133919,"stop":1693944134346,"duration":427}},{"uid":"4ae156a81487e2a5","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/4ae156a81487e2a5","status":"passed","time":{"start":1693929764055,"stop":1693929764550,"duration":495}},{"uid":"a926f60c91404cde","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/a926f60c91404cde","status":"passed","time":{"start":1693915793396,"stop":1693915793912,"duration":516}},{"uid":"764dafed624ec721","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/764dafed624ec721","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 05 Sep 2023 08:03:48 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693901028406,"stop":1693901028886,"duration":480}},{"uid":"3c5d9ef7c26520fb","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/3c5d9ef7c26520fb","status":"passed","time":{"start":1693872168714,"stop":1693872169279,"duration":565}},{"uid":"9c2e6b93e7ec05a6","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/9c2e6b93e7ec05a6","status":"passed","time":{"start":1693857718008,"stop":1693857718367,"duration":359}},{"uid":"dc4e65ed70879d85","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/dc4e65ed70879d85","status":"passed","time":{"start":1693843330693,"stop":1693843331374,"duration":681}},{"uid":"b59d6212aca78a46","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/b59d6212aca78a46","status":"passed","time":{"start":1693828933818,"stop":1693828934300,"duration":482}},{"uid":"5c4518a67b5a2088","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/5c4518a67b5a2088","status":"passed","time":{"start":1693814541829,"stop":1693814542584,"duration":755}},{"uid":"594df4e93d0d99ed","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/594df4e93d0d99ed","status":"passed","time":{"start":1693800102465,"stop":1693800102948,"duration":483}}]},"tags":[]},"source":"f4bc5b8f349de10c.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}