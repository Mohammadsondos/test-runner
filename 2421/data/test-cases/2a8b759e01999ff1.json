{"uid":"2a8b759e01999ff1","name":"test_can_create_connection[Test for XX network, url: wss://xxnetwork-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"49738eb6cbd6c82b394f36fbd8fb6e1c","time":{"start":1675829858481,"stop":1675829858507,"duration":26},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'xxnetwork-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f46c08c1000>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'xxnetwork-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'XX network', 'url': 'wss://xxnetwork-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'xxnetwork-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f46c08c1000>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'xxnetwork-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f46c08c1000>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'xxnetwork-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'XX network', 'url': 'wss://xxnetwork-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'xxnetwork-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f46c08c1000>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"6949f422a40c9c04","name":"stdout","source":"6949f422a40c9c04.txt","type":"text/plain","size":238}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az364-570"},{"name":"thread","value":"1739-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://xxnetwork-rpc.dwellir.com', 'name': 'XX network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"243ab54dec68c676","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675829848315,"stop":1675829848350,"duration":35}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":91,"skipped":0,"passed":334,"unknown":0,"total":425},"items":[{"uid":"3650309b98f7d1c7","reportUrl":"https://nova-wallet.github.io/test-runner/2420//#testresult/3650309b98f7d1c7","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675818592113,"stop":1675818592181,"duration":68}},{"uid":"a3d3104b82ae1cfa","reportUrl":"https://nova-wallet.github.io/test-runner/2419//#testresult/a3d3104b82ae1cfa","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675800914977,"stop":1675800915040,"duration":63}},{"uid":"181a0d0cb98951bc","reportUrl":"https://nova-wallet.github.io/test-runner/2417//#testresult/181a0d0cb98951bc","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675772893318,"stop":1675772893389,"duration":71}},{"uid":"eaf51861f17c40d5","reportUrl":"https://nova-wallet.github.io/test-runner/2416//#testresult/eaf51861f17c40d5","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675757913867,"stop":1675757913939,"duration":72}},{"uid":"6796fc5376b1f95d","reportUrl":"https://nova-wallet.github.io/test-runner/2415//#testresult/6796fc5376b1f95d","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675743443481,"stop":1675743443550,"duration":69}},{"uid":"b4d4ed040b48a63e","reportUrl":"https://nova-wallet.github.io/test-runner/2414//#testresult/b4d4ed040b48a63e","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675732218733,"stop":1675732218825,"duration":92}},{"uid":"27b401f1c88f1061","reportUrl":"https://nova-wallet.github.io/test-runner/2413//#testresult/27b401f1c88f1061","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675714552520,"stop":1675714552556,"duration":36}},{"uid":"5b669b270d8822c0","reportUrl":"https://nova-wallet.github.io/test-runner/2412//#testresult/5b669b270d8822c0","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675700385503,"stop":1675700385536,"duration":33}},{"uid":"40799968661f6901","reportUrl":"https://nova-wallet.github.io/test-runner/2410//#testresult/40799968661f6901","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675671544330,"stop":1675671544465,"duration":135}},{"uid":"f46ddca3ccc42910","reportUrl":"https://nova-wallet.github.io/test-runner/2409//#testresult/f46ddca3ccc42910","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675657044223,"stop":1675657044345,"duration":122}},{"uid":"718d0b7b91121774","reportUrl":"https://nova-wallet.github.io/test-runner/2408//#testresult/718d0b7b91121774","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675645586177,"stop":1675645586258,"duration":81}},{"uid":"c2801fdf27a71c8e","reportUrl":"https://nova-wallet.github.io/test-runner/2407//#testresult/c2801fdf27a71c8e","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675628022790,"stop":1675628022891,"duration":101}},{"uid":"f9ed8d0f42e36297","reportUrl":"https://nova-wallet.github.io/test-runner/2406//#testresult/f9ed8d0f42e36297","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675613865948,"stop":1675613866048,"duration":100}},{"uid":"60c96120227f4f66","reportUrl":"https://nova-wallet.github.io/test-runner/2405//#testresult/60c96120227f4f66","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675599889199,"stop":1675599889212,"duration":13}},{"uid":"d2d404f3706358f","reportUrl":"https://nova-wallet.github.io/test-runner/2404//#testresult/d2d404f3706358f","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675585002083,"stop":1675585002171,"duration":88}},{"uid":"fe902c8341c3b6a1","reportUrl":"https://nova-wallet.github.io/test-runner/2403//#testresult/fe902c8341c3b6a1","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675570602995,"stop":1675570603048,"duration":53}},{"uid":"13c8f309595e99d8","reportUrl":"https://nova-wallet.github.io/test-runner/2402//#testresult/13c8f309595e99d8","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675559610556,"stop":1675559610600,"duration":44}},{"uid":"e5259b57c804b15d","reportUrl":"https://nova-wallet.github.io/test-runner/2401//#testresult/e5259b57c804b15d","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675541628702,"stop":1675541628797,"duration":95}},{"uid":"18158f3c365114f","reportUrl":"https://nova-wallet.github.io/test-runner/2400//#testresult/18158f3c365114f","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675527485250,"stop":1675527485315,"duration":65}},{"uid":"84d7205d79c4c278","reportUrl":"https://nova-wallet.github.io/test-runner/2399//#testresult/84d7205d79c4c278","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1675513443373,"stop":1675513443444,"duration":71}}]},"tags":[]},"source":"2a8b759e01999ff1.json","parameterValues":["{'url': 'wss://xxnetwork-rpc.dwellir.com', 'name': 'XX network'}"]}