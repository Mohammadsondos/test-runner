{"uid":"8e5ebdde4a4485f1","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1710432089768,"stop":1710432089816,"duration":48},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7316c0e955a0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7316c0d302b0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7316c0d335b0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az842-947"},{"name":"thread","value":"2327-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cae3acc50a5287d5","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710432084683,"stop":1710432084733,"duration":50}},{"uid":"f6fb5dd7d8fdf2ad","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710432079606,"stop":1710432079647,"duration":41}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":33,"skipped":0,"passed":953,"unknown":0,"total":987},"items":[{"uid":"4efdd3cee7960535","reportUrl":"https://novasamatech.github.io/test-runner/4875//#testresult/4efdd3cee7960535","status":"passed","time":{"start":1710417686619,"stop":1710417686935,"duration":316}},{"uid":"6cec177a15cb65fc","reportUrl":"https://novasamatech.github.io/test-runner/4874//#testresult/6cec177a15cb65fc","status":"passed","time":{"start":1710403265347,"stop":1710403266322,"duration":975}},{"uid":"cb0e3c0f05ba6a6d","reportUrl":"https://novasamatech.github.io/test-runner/4873//#testresult/cb0e3c0f05ba6a6d","status":"passed","time":{"start":1710388865828,"stop":1710388866102,"duration":274}},{"uid":"1a4ac055845fe86a","reportUrl":"https://novasamatech.github.io/test-runner/4872//#testresult/1a4ac055845fe86a","status":"passed","time":{"start":1710374514232,"stop":1710374515093,"duration":861}},{"uid":"3923f4a67860d3d","reportUrl":"https://novasamatech.github.io/test-runner/4871//#testresult/3923f4a67860d3d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710360080639,"stop":1710360080780,"duration":141}},{"uid":"ac1b3b45a1a0e583","reportUrl":"https://novasamatech.github.io/test-runner/4870//#testresult/ac1b3b45a1a0e583","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710345692148,"stop":1710345692211,"duration":63}},{"uid":"3c764a332d8964d6","reportUrl":"https://novasamatech.github.io/test-runner/4869//#testresult/3c764a332d8964d6","status":"passed","time":{"start":1710331269646,"stop":1710331269994,"duration":348}},{"uid":"8b89e3485f897629","reportUrl":"https://novasamatech.github.io/test-runner/4868//#testresult/8b89e3485f897629","status":"passed","time":{"start":1710316866949,"stop":1710316867336,"duration":387}},{"uid":"d1076be8c58890a2","reportUrl":"https://novasamatech.github.io/test-runner/4867//#testresult/d1076be8c58890a2","status":"passed","time":{"start":1710302462012,"stop":1710302462189,"duration":177}},{"uid":"a4968772957bd110","reportUrl":"https://novasamatech.github.io/test-runner/4866//#testresult/a4968772957bd110","status":"passed","time":{"start":1710288110317,"stop":1710288110550,"duration":233}},{"uid":"9e1400cb3a5f7fb2","reportUrl":"https://novasamatech.github.io/test-runner/4865//#testresult/9e1400cb3a5f7fb2","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710273688049,"stop":1710273688204,"duration":155}},{"uid":"ae43fbf67ec8e979","reportUrl":"https://novasamatech.github.io/test-runner/4864//#testresult/ae43fbf67ec8e979","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710259274803,"stop":1710259274858,"duration":55}},{"uid":"3f3fbbe5126939b5","reportUrl":"https://novasamatech.github.io/test-runner/4863//#testresult/3f3fbbe5126939b5","status":"passed","time":{"start":1710244877651,"stop":1710244877933,"duration":282}},{"uid":"641264a3bc1d23d3","reportUrl":"https://novasamatech.github.io/test-runner/4862//#testresult/641264a3bc1d23d3","status":"passed","time":{"start":1710230463104,"stop":1710230463842,"duration":738}},{"uid":"1c1837a9e2f7903","reportUrl":"https://novasamatech.github.io/test-runner/4861//#testresult/1c1837a9e2f7903","status":"passed","time":{"start":1710216067649,"stop":1710216068532,"duration":883}},{"uid":"6b2072d37673491","reportUrl":"https://novasamatech.github.io/test-runner/4860//#testresult/6b2072d37673491","status":"passed","time":{"start":1710201701804,"stop":1710201702442,"duration":638}},{"uid":"64e43905c0f4b6e4","reportUrl":"https://novasamatech.github.io/test-runner/4859//#testresult/64e43905c0f4b6e4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187269924,"stop":1710187269949,"duration":25}},{"uid":"a5e93f19d2a7601d","reportUrl":"https://novasamatech.github.io/test-runner/4858//#testresult/a5e93f19d2a7601d","status":"passed","time":{"start":1710172884309,"stop":1710172884659,"duration":350}},{"uid":"d3a6f6d76fc535ce","reportUrl":"https://novasamatech.github.io/test-runner/4856//#testresult/d3a6f6d76fc535ce","status":"passed","time":{"start":1710144071131,"stop":1710144071752,"duration":621}},{"uid":"475a7168582daa5","reportUrl":"https://novasamatech.github.io/test-runner/4857//#testresult/475a7168582daa5","status":"passed","time":{"start":1710158473843,"stop":1710158474334,"duration":491}}]},"tags":[]},"source":"8e5ebdde4a4485f1.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}