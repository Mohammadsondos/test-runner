{"uid":"95aa821a3c481ec2","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1710432080219,"stop":1710432080263,"duration":44},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7770da57d5a0>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7770da414160>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7770da414880>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az842-947"},{"name":"thread","value":"2330-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a4c7b34c48bcfc3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710432075138,"stop":1710432075185,"duration":47}},{"uid":"730a26d2536506cd","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710432069952,"stop":1710432070020,"duration":68}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":31,"skipped":0,"passed":954,"unknown":0,"total":987},"items":[{"uid":"e7c7042ab38ddff1","reportUrl":"https://novasamatech.github.io/test-runner/4875//#testresult/e7c7042ab38ddff1","status":"passed","time":{"start":1710417686723,"stop":1710417687016,"duration":293}},{"uid":"4d091d3ed677086d","reportUrl":"https://novasamatech.github.io/test-runner/4874//#testresult/4d091d3ed677086d","status":"passed","time":{"start":1710403264769,"stop":1710403265344,"duration":575}},{"uid":"83b5358736e1b8cc","reportUrl":"https://novasamatech.github.io/test-runner/4873//#testresult/83b5358736e1b8cc","status":"passed","time":{"start":1710388865683,"stop":1710388865919,"duration":236}},{"uid":"c6622796bcf1faf9","reportUrl":"https://novasamatech.github.io/test-runner/4872//#testresult/c6622796bcf1faf9","status":"passed","time":{"start":1710374514052,"stop":1710374514650,"duration":598}},{"uid":"75dc9eaadba98426","reportUrl":"https://novasamatech.github.io/test-runner/4871//#testresult/75dc9eaadba98426","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710360070068,"stop":1710360070209,"duration":141}},{"uid":"e65ad390abdbaba9","reportUrl":"https://novasamatech.github.io/test-runner/4870//#testresult/e65ad390abdbaba9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710345681638,"stop":1710345681702,"duration":64}},{"uid":"9c68437a009a6264","reportUrl":"https://novasamatech.github.io/test-runner/4869//#testresult/9c68437a009a6264","status":"passed","time":{"start":1710331272058,"stop":1710331272387,"duration":329}},{"uid":"783a45f4e7412a96","reportUrl":"https://novasamatech.github.io/test-runner/4868//#testresult/783a45f4e7412a96","status":"passed","time":{"start":1710316866577,"stop":1710316866945,"duration":368}},{"uid":"e82f0941e0810c4a","reportUrl":"https://novasamatech.github.io/test-runner/4867//#testresult/e82f0941e0810c4a","status":"passed","time":{"start":1710302461216,"stop":1710302461529,"duration":313}},{"uid":"660472e9714335a6","reportUrl":"https://novasamatech.github.io/test-runner/4866//#testresult/660472e9714335a6","status":"passed","time":{"start":1710288109612,"stop":1710288109904,"duration":292}},{"uid":"b78bea9430f11488","reportUrl":"https://novasamatech.github.io/test-runner/4865//#testresult/b78bea9430f11488","status":"passed","time":{"start":1710273677137,"stop":1710273677494,"duration":357}},{"uid":"373b4eaabadabb41","reportUrl":"https://novasamatech.github.io/test-runner/4864//#testresult/373b4eaabadabb41","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710259275154,"stop":1710259275195,"duration":41}},{"uid":"30d2e8d7290ba3f8","reportUrl":"https://novasamatech.github.io/test-runner/4863//#testresult/30d2e8d7290ba3f8","status":"passed","time":{"start":1710244877597,"stop":1710244877826,"duration":229}},{"uid":"a6222fbd55b380e2","reportUrl":"https://novasamatech.github.io/test-runner/4862//#testresult/a6222fbd55b380e2","status":"passed","time":{"start":1710230462526,"stop":1710230463101,"duration":575}},{"uid":"eddb6f9114c1e30c","reportUrl":"https://novasamatech.github.io/test-runner/4861//#testresult/eddb6f9114c1e30c","status":"passed","time":{"start":1710216067062,"stop":1710216067648,"duration":586}},{"uid":"d4485b48ffb41f66","reportUrl":"https://novasamatech.github.io/test-runner/4860//#testresult/d4485b48ffb41f66","status":"passed","time":{"start":1710201700257,"stop":1710201700804,"duration":547}},{"uid":"fe5439b2613d2919","reportUrl":"https://novasamatech.github.io/test-runner/4859//#testresult/fe5439b2613d2919","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187268719,"stop":1710187268760,"duration":41}},{"uid":"383a6b9b7a45f90f","reportUrl":"https://novasamatech.github.io/test-runner/4858//#testresult/383a6b9b7a45f90f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710172879135,"stop":1710172879183,"duration":48}},{"uid":"83ced34aac32d435","reportUrl":"https://novasamatech.github.io/test-runner/4856//#testresult/83ced34aac32d435","status":"passed","time":{"start":1710144070167,"stop":1710144070664,"duration":497}},{"uid":"2cc12a25da92006","reportUrl":"https://novasamatech.github.io/test-runner/4857//#testresult/2cc12a25da92006","status":"passed","time":{"start":1710158472660,"stop":1710158473128,"duration":468}}]},"tags":[]},"source":"95aa821a3c481ec2.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}