{"uid":"72f89a49c6842e5f","name":"test_can_create_connection[Test for Efinity, url: wss://efinity-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"f0d671d9a2a539de5bff43146ab75e98","time":{"start":1694779337439,"stop":1694779340793,"duration":3354},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Efinity', 'url': 'wss://efinity-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Efinity', 'url': 'wss://efinity-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"6f5551f1b850571f","name":"stdout","source":"6f5551f1b850571f.txt","type":"text/plain","size":591}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az359-858"},{"name":"thread","value":"2169-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://efinity-rpc.dwellir.com', 'name': 'Efinity'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6cefabb8dedab570","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694779318932,"stop":1694779322306,"duration":3374}},{"uid":"946ecc62654a5bd6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694779300446,"stop":1694779303793,"duration":3347}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":132,"unknown":0,"total":134},"items":[{"uid":"6f87199f988373f","reportUrl":"https://novasamatech.github.io/test-runner/3772//#testresult/6f87199f988373f","status":"passed","time":{"start":1694764905679,"stop":1694764906312,"duration":633}},{"uid":"357af9fbcb94329f","reportUrl":"https://novasamatech.github.io/test-runner/3771//#testresult/357af9fbcb94329f","status":"passed","time":{"start":1694750511410,"stop":1694750512184,"duration":774}},{"uid":"e8c352997756d553","reportUrl":"https://novasamatech.github.io/test-runner/3770//#testresult/e8c352997756d553","status":"passed","time":{"start":1694736142154,"stop":1694736142632,"duration":478}},{"uid":"924de1329387403f","reportUrl":"https://novasamatech.github.io/test-runner/3769//#testresult/924de1329387403f","status":"passed","time":{"start":1694721704512,"stop":1694721705274,"duration":762}},{"uid":"a1af71fd7225bee8","reportUrl":"https://novasamatech.github.io/test-runner/3768//#testresult/a1af71fd7225bee8","status":"passed","time":{"start":1694707306575,"stop":1694707307074,"duration":499}},{"uid":"c804e62485a67eff","reportUrl":"https://novasamatech.github.io/test-runner/3767//#testresult/c804e62485a67eff","status":"passed","time":{"start":1694692911850,"stop":1694692912340,"duration":490}},{"uid":"640bc64c391df76b","reportUrl":"https://novasamatech.github.io/test-runner/3766//#testresult/640bc64c391df76b","status":"passed","time":{"start":1694678497005,"stop":1694678497493,"duration":488}},{"uid":"1e9a40573f6ea758","reportUrl":"https://novasamatech.github.io/test-runner/3765//#testresult/1e9a40573f6ea758","status":"passed","time":{"start":1694664093922,"stop":1694664094410,"duration":488}},{"uid":"25912ae6c6ad122a","reportUrl":"https://novasamatech.github.io/test-runner/3764//#testresult/25912ae6c6ad122a","status":"passed","time":{"start":1694649740690,"stop":1694649741184,"duration":494}},{"uid":"a6d42126447157c7","reportUrl":"https://novasamatech.github.io/test-runner/3763//#testresult/a6d42126447157c7","status":"passed","time":{"start":1694635297115,"stop":1694635297580,"duration":465}},{"uid":"8669d342e4cb8ddb","reportUrl":"https://novasamatech.github.io/test-runner/3762//#testresult/8669d342e4cb8ddb","status":"passed","time":{"start":1694620913692,"stop":1694620914448,"duration":756}},{"uid":"a0cb4e9f5cdca1c6","reportUrl":"https://novasamatech.github.io/test-runner/3761//#testresult/a0cb4e9f5cdca1c6","status":"passed","time":{"start":1694606516806,"stop":1694606517393,"duration":587}},{"uid":"111fa47f3baf4af2","reportUrl":"https://novasamatech.github.io/test-runner/3760//#testresult/111fa47f3baf4af2","status":"passed","time":{"start":1694597299117,"stop":1694597299738,"duration":621}},{"uid":"61d842d3bb4dfc50","reportUrl":"https://novasamatech.github.io/test-runner/3759//#testresult/61d842d3bb4dfc50","status":"passed","time":{"start":1694592102159,"stop":1694592102753,"duration":594}},{"uid":"c67291e7a173e931","reportUrl":"https://novasamatech.github.io/test-runner/3758//#testresult/c67291e7a173e931","status":"passed","time":{"start":1694577706643,"stop":1694577707119,"duration":476}},{"uid":"22f70b904fdb6690","reportUrl":"https://novasamatech.github.io/test-runner/3757//#testresult/22f70b904fdb6690","status":"passed","time":{"start":1694563359466,"stop":1694563360040,"duration":574}},{"uid":"bba5d4656e4bc8af","reportUrl":"https://novasamatech.github.io/test-runner/3756//#testresult/bba5d4656e4bc8af","status":"passed","time":{"start":1694548947545,"stop":1694548948271,"duration":726}},{"uid":"eb8ccaf4693babb","reportUrl":"https://novasamatech.github.io/test-runner/3755//#testresult/eb8ccaf4693babb","status":"passed","time":{"start":1694534521715,"stop":1694534522305,"duration":590}},{"uid":"5a24b9b4f76c5746","reportUrl":"https://novasamatech.github.io/test-runner/3754//#testresult/5a24b9b4f76c5746","status":"passed","time":{"start":1694520122359,"stop":1694520122867,"duration":508}},{"uid":"6f20ffa093a8f599","reportUrl":"https://novasamatech.github.io/test-runner/3753//#testresult/6f20ffa093a8f599","status":"passed","time":{"start":1694505704525,"stop":1694505705004,"duration":479}}]},"tags":[]},"source":"72f89a49c6842e5f.json","parameterValues":["{'url': 'wss://efinity-rpc.dwellir.com', 'name': 'Efinity'}"]}