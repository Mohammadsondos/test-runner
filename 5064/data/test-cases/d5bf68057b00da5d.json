{"uid":"d5bf68057b00da5d","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1713115176717,"stop":1713115176876,"duration":159},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f7f80987790>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f7f80985510>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f7f80984670>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az883-999"},{"name":"thread","value":"2194-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"acf99aa690a86a19","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713115171521,"stop":1713115171666,"duration":145}},{"uid":"ad245c0d6b34b8f6","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.1333333333333333}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1713115163980,"stop":1713115166425,"duration":2445}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":69,"skipped":0,"passed":1065,"unknown":0,"total":1139},"items":[{"uid":"cfadee5cf4560305","reportUrl":"https://novasamatech.github.io/test-runner/5063//#testresult/cfadee5cf4560305","status":"passed","time":{"start":1713103496868,"stop":1713103498544,"duration":1676}},{"uid":"be8ebfdd75696409","reportUrl":"https://novasamatech.github.io/test-runner/5062//#testresult/be8ebfdd75696409","status":"passed","time":{"start":1713082631504,"stop":1713082633392,"duration":1888}},{"uid":"4d753c1b7ddaa708","reportUrl":"https://novasamatech.github.io/test-runner/5061//#testresult/4d753c1b7ddaa708","status":"passed","time":{"start":1713067451104,"stop":1713067452633,"duration":1529}},{"uid":"e30a4a9ebfb7c2c6","reportUrl":"https://novasamatech.github.io/test-runner/5060//#testresult/e30a4a9ebfb7c2c6","status":"passed","time":{"start":1713053045427,"stop":1713053047210,"duration":1783}},{"uid":"cc8f0a8c7363efc6","reportUrl":"https://novasamatech.github.io/test-runner/5059//#testresult/cc8f0a8c7363efc6","status":"passed","time":{"start":1713038460405,"stop":1713038462034,"duration":1629}},{"uid":"4167c5b46bfa1c15","reportUrl":"https://novasamatech.github.io/test-runner/5058//#testresult/4167c5b46bfa1c15","status":"passed","time":{"start":1713024064529,"stop":1713024065768,"duration":1239}},{"uid":"b256f2b06bda446c","reportUrl":"https://novasamatech.github.io/test-runner/5057//#testresult/b256f2b06bda446c","status":"passed","time":{"start":1713009662986,"stop":1713009664805,"duration":1819}},{"uid":"5e9d13bad298c36f","reportUrl":"https://novasamatech.github.io/test-runner/5056//#testresult/5e9d13bad298c36f","status":"passed","time":{"start":1712995266746,"stop":1712995268766,"duration":2020}},{"uid":"5c887fdfefcb809e","reportUrl":"https://novasamatech.github.io/test-runner/5055//#testresult/5c887fdfefcb809e","status":"passed","time":{"start":1712980864058,"stop":1712980865317,"duration":1259}},{"uid":"9bf677b3a263fb59","reportUrl":"https://novasamatech.github.io/test-runner/5054//#testresult/9bf677b3a263fb59","status":"passed","time":{"start":1712966506892,"stop":1712966509022,"duration":2130}},{"uid":"117dc38b9463ccc3","reportUrl":"https://novasamatech.github.io/test-runner/5053//#testresult/117dc38b9463ccc3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712952069735,"stop":1712952069814,"duration":79}},{"uid":"36fb433319ab138d","reportUrl":"https://novasamatech.github.io/test-runner/5052//#testresult/36fb433319ab138d","status":"passed","time":{"start":1712937661801,"stop":1712937662939,"duration":1138}},{"uid":"937dfdf3a2f0ebd0","reportUrl":"https://novasamatech.github.io/test-runner/5051//#testresult/937dfdf3a2f0ebd0","status":"passed","time":{"start":1712923263726,"stop":1712923264977,"duration":1251}},{"uid":"e311551df7730079","reportUrl":"https://novasamatech.github.io/test-runner/5050//#testresult/e311551df7730079","status":"passed","time":{"start":1712908862205,"stop":1712908863988,"duration":1783}},{"uid":"27c517eec583df56","reportUrl":"https://novasamatech.github.io/test-runner/5049//#testresult/27c517eec583df56","status":"passed","time":{"start":1712894457410,"stop":1712894458873,"duration":1463}},{"uid":"d4e93675650f2358","reportUrl":"https://novasamatech.github.io/test-runner/5048//#testresult/d4e93675650f2358","status":"passed","time":{"start":1712880115817,"stop":1712880117983,"duration":2166}},{"uid":"4903aa90486f39f6","reportUrl":"https://novasamatech.github.io/test-runner/5047//#testresult/4903aa90486f39f6","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1712865674403,"stop":1712865675902,"duration":1499}},{"uid":"792d80bec743a96f","reportUrl":"https://novasamatech.github.io/test-runner/5046//#testresult/792d80bec743a96f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712851274556,"stop":1712851274588,"duration":32}},{"uid":"a21654f73dcaacc2","reportUrl":"https://novasamatech.github.io/test-runner/5045//#testresult/a21654f73dcaacc2","status":"passed","time":{"start":1712836873363,"stop":1712836874835,"duration":1472}},{"uid":"17386c9651797a1f","reportUrl":"https://novasamatech.github.io/test-runner/5044//#testresult/17386c9651797a1f","status":"passed","time":{"start":1712822472594,"stop":1712822474805,"duration":2211}}]},"tags":[]},"source":"d5bf68057b00da5d.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}