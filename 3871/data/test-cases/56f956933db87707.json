{"uid":"56f956933db87707","name":"test_can_create_connection[Test for Ajuna, url: wss://rpc-parachain.ajuna.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9e45091b8d9f46b64ef77b6ae354ace8","time":{"start":1696190604142,"stop":1696190604394,"duration":252},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 01 Oct 2023 20:03:24 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 01 Oct 2023 20:03:24 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 01 Oct 2023 20:03:24 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 01 Oct 2023 20:03:24 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"8a56a7f4fd459eed","name":"stdout","source":"8a56a7f4fd459eed.txt","type":"text/plain","size":1166}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az370-900"},{"name":"thread","value":"2073-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6fd319e2fae2791f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 01 Oct 2023 20:03:09 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1696190588801,"stop":1696190589054,"duration":253}},{"uid":"84a1ba19f68647cb","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1696190573364,"stop":1696190573625,"duration":261}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":216,"unknown":0,"total":231},"items":[{"uid":"b575d4bd04232597","reportUrl":"https://novasamatech.github.io/test-runner/3870//#testresult/b575d4bd04232597","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1696176198559,"stop":1696176198856,"duration":297}},{"uid":"f1c27ec1a5532d4d","reportUrl":"https://novasamatech.github.io/test-runner/3869//#testresult/f1c27ec1a5532d4d","status":"passed","time":{"start":1696161732188,"stop":1696161732523,"duration":335}},{"uid":"7f2d28ef3fdfaec1","reportUrl":"https://novasamatech.github.io/test-runner/3868//#testresult/7f2d28ef3fdfaec1","status":"passed","time":{"start":1696147338552,"stop":1696147339273,"duration":721}},{"uid":"12d11a8855670555","reportUrl":"https://novasamatech.github.io/test-runner/3867//#testresult/12d11a8855670555","status":"passed","time":{"start":1696132913911,"stop":1696132914328,"duration":417}},{"uid":"2c79d81b8cdfd0ab","reportUrl":"https://novasamatech.github.io/test-runner/3866//#testresult/2c79d81b8cdfd0ab","status":"passed","time":{"start":1696118578997,"stop":1696118579617,"duration":620}},{"uid":"a65397b8a75b0a47","reportUrl":"https://novasamatech.github.io/test-runner/3865//#testresult/a65397b8a75b0a47","status":"passed","time":{"start":1696104163079,"stop":1696104163609,"duration":530}},{"uid":"c0514f4526ade401","reportUrl":"https://novasamatech.github.io/test-runner/3864//#testresult/c0514f4526ade401","status":"passed","time":{"start":1696089774438,"stop":1696089774766,"duration":328}},{"uid":"7005a12100bad4ec","reportUrl":"https://novasamatech.github.io/test-runner/3863//#testresult/7005a12100bad4ec","status":"passed","time":{"start":1696075357019,"stop":1696075357636,"duration":617}},{"uid":"3bbf2d3f8970ba72","reportUrl":"https://novasamatech.github.io/test-runner/3862//#testresult/3bbf2d3f8970ba72","status":"passed","time":{"start":1696060927944,"stop":1696060928518,"duration":574}},{"uid":"555648a01537c7e8","reportUrl":"https://novasamatech.github.io/test-runner/3861//#testresult/555648a01537c7e8","status":"passed","time":{"start":1696046568851,"stop":1696046569406,"duration":555}},{"uid":"48c6ce1c7d76655b","reportUrl":"https://novasamatech.github.io/test-runner/3860//#testresult/48c6ce1c7d76655b","status":"passed","time":{"start":1696032273489,"stop":1696032274086,"duration":597}},{"uid":"bf0f520b456a1c40","reportUrl":"https://novasamatech.github.io/test-runner/3859//#testresult/bf0f520b456a1c40","status":"passed","time":{"start":1696017809708,"stop":1696017810065,"duration":357}},{"uid":"bf895564c3bd74c8","reportUrl":"https://novasamatech.github.io/test-runner/3858//#testresult/bf895564c3bd74c8","status":"passed","time":{"start":1696003416032,"stop":1696003416367,"duration":335}},{"uid":"ac3512a068463024","reportUrl":"https://novasamatech.github.io/test-runner/3857//#testresult/ac3512a068463024","status":"passed","time":{"start":1695988966054,"stop":1695988966371,"duration":317}},{"uid":"ad01802317ae2437","reportUrl":"https://novasamatech.github.io/test-runner/3856//#testresult/ad01802317ae2437","status":"passed","time":{"start":1695974586142,"stop":1695974586746,"duration":604}},{"uid":"9bbb2117b5b25b14","reportUrl":"https://novasamatech.github.io/test-runner/3855//#testresult/9bbb2117b5b25b14","status":"passed","time":{"start":1695960128768,"stop":1695960129120,"duration":352}},{"uid":"917c9079af221a09","reportUrl":"https://novasamatech.github.io/test-runner/3854//#testresult/917c9079af221a09","status":"passed","time":{"start":1695945791913,"stop":1695945792621,"duration":708}},{"uid":"8aa29a1f1fbd04a3","reportUrl":"https://novasamatech.github.io/test-runner/3853//#testresult/8aa29a1f1fbd04a3","status":"passed","time":{"start":1695931373483,"stop":1695931374187,"duration":704}},{"uid":"88c0bc50842fc484","reportUrl":"https://novasamatech.github.io/test-runner/3852//#testresult/88c0bc50842fc484","status":"passed","time":{"start":1695916963761,"stop":1695916964307,"duration":546}},{"uid":"e9974f48cbcd897f","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/e9974f48cbcd897f","status":"passed","time":{"start":1695902574001,"stop":1695902574427,"duration":426}}]},"tags":[]},"source":"56f956933db87707.json","parameterValues":["{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"]}