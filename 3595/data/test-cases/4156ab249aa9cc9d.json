{"uid":"4156ab249aa9cc9d","name":"test_chainId[Test for Ajuna]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"8fd23d62e3fba21e29fa66b1d33195b2","time":{"start":1692302801403,"stop":1692302843464,"duration":42061},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Thu, 17 Aug 2023 20:07:23 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=vG7hI05V56dhLj4fYD%2FaslPTdn%2BNXJOyGn3qNSFrW3QbPv2mLO6pi8KLtFGRUwSDxfYQ9H%2BXNEnE%2B0%2F%2B6bRKeUZ0nc7CupTcY0SQEnANl0wsZUyYIptG2zxhx1CSFRR3z4v3NT6KQz6vTW5Dlq7WZNBLRQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'server': 'cloudflare', 'cf-ray': '7f848b00bbe76450-SJC'} -+-+- None","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f260c69a080>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f260c69a020>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 3}'\nopcode = 1\n\n    def send(self, payload: bytes or str, opcode: int = ABNF.OPCODE_TEXT) -> int:\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f260c69a020>\nframe = <websocket._abnf.ABNF object at 0x7f260c69bd30>\n\n    def send_frame(self, frame) -> int:\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f260c69a020>\ndata = b'\\x81\\xc4\\xfclgX\\x87N\\r+\\x93\\x02\\x15(\\x9fN]x\\xde^Ih\\xde@Gz\\x91\\t\\x130\\x93\\x08Eb\\xdcN\\x040\\x9d\\x05\\t\\x07\\x9b\\t\\x13\\x10\\x99\\r\\x03z\\xd0LE(\\x9d\\x1e\\x065\\x8fN]x\\xa71Kx\\xde\\x05\\x03z\\xc6LT%'\n\n    def _send(self, data: str or bytes):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc4\\xfclgX\\x87N\\r+\\x93\\x02\\x15(\\x9fN]x\\xde^Ih\\xde@Gz\\x91\\t\\x130\\x93\\x08Eb\\xdcN\\x040\\x9d\\x05\\t\\x07\\x9b\\t\\x13\\x10\\x99\\r\\x03z\\xd0LE(\\x9d\\x1e\\x065\\x8fN]x\\xa71Kx\\xde\\x05\\x03z\\xc6LT%'\n\n    def send(sock: socket.socket, data: bytes) -> int:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_network_parameters.TestChainId object at 0x7f261cd0fbb0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f261cf7f670>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1117: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:874: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:719: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Thu, 17 Aug 2023 20:07:23 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=vG7hI05V56dhLj4fYD%2FaslPTdn%2BNXJOyGn3qNSFrW3QbPv2mLO6pi8KLtFGRUwSDxfYQ9H%2BXNEnE%2B0%2F%2B6bRKeUZ0nc7CupTcY0SQEnANl0wsZUyYIptG2zxhx1CSFRR3z4v3NT6KQz6vTW5Dlq7WZNBLRQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'server': 'cloudflare', 'cf-ray': '7f848b00bbe76450-SJC'} -+-+- None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Thu, 17 Aug 2023 20:07:23 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=vG7hI05V56dhLj4fYD%2FaslPTdn%2BNXJOyGn3qNSFrW3QbPv2mLO6pi8KLtFGRUwSDxfYQ9H%2BXNEnE%2B0%2F%2B6bRKeUZ0nc7CupTcY0SQEnANl0wsZUyYIptG2zxhx1CSFRR3z4v3NT6KQz6vTW5Dlq7WZNBLRQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'server': 'cloudflare', 'cf-ray': '7f848b00bbe76450-SJC'} -+-+- None","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f260c69a080>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f260c69a020>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 3}'\nopcode = 1\n\n    def send(self, payload: bytes or str, opcode: int = ABNF.OPCODE_TEXT) -> int:\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f260c69a020>\nframe = <websocket._abnf.ABNF object at 0x7f260c69bd30>\n\n    def send_frame(self, frame) -> int:\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f260c69a020>\ndata = b'\\x81\\xc4\\xfclgX\\x87N\\r+\\x93\\x02\\x15(\\x9fN]x\\xde^Ih\\xde@Gz\\x91\\t\\x130\\x93\\x08Eb\\xdcN\\x040\\x9d\\x05\\t\\x07\\x9b\\t\\x13\\x10\\x99\\r\\x03z\\xd0LE(\\x9d\\x1e\\x065\\x8fN]x\\xa71Kx\\xde\\x05\\x03z\\xc6LT%'\n\n    def _send(self, data: str or bytes):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc4\\xfclgX\\x87N\\r+\\x93\\x02\\x15(\\x9fN]x\\xde^Ih\\xde@Gz\\x91\\t\\x130\\x93\\x08Eb\\xdcN\\x040\\x9d\\x05\\t\\x07\\x9b\\t\\x13\\x10\\x99\\r\\x03z\\xd0LE(\\x9d\\x1e\\x065\\x8fN]x\\xa71Kx\\xde\\x05\\x03z\\xc6LT%'\n\n    def send(sock: socket.socket, data: bytes) -> int:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_network_parameters.TestChainId object at 0x7f261cd0fbb0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f261cf7f670>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1117: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:874: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:719: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Thu, 17 Aug 2023 20:07:23 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=vG7hI05V56dhLj4fYD%2FaslPTdn%2BNXJOyGn3qNSFrW3QbPv2mLO6pi8KLtFGRUwSDxfYQ9H%2BXNEnE%2B0%2F%2B6bRKeUZ0nc7CupTcY0SQEnANl0wsZUyYIptG2zxhx1CSFRR3z4v3NT6KQz6vTW5Dlq7WZNBLRQ%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}', 'nel': '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', 'server': 'cloudflare', 'cf-ray': '7f848b00bbe76450-SJC'} -+-+- None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"6fe1516fcb8d0b12","name":"stdout","source":"6fe1516fcb8d0b12.txt","type":"text/plain","size":1248}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az1233-226"},{"name":"thread","value":"2034-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f261cf7f670>"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"4156ab249aa9cc9d.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f261cf7f670>"]}