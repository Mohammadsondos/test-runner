{"uid":"7309c866b57147ae","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1692302699143,"stop":1692302699278,"duration":135},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 17 Aug 2023 20:04:59 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 17 Aug 2023 20:04:59 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 17 Aug 2023 20:04:59 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 17 Aug 2023 20:04:59 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"a72a104012ca127f","name":"stdout","source":"a72a104012ca127f.txt","type":"text/plain","size":1617}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az247-528"},{"name":"thread","value":"1984-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8bb4f96b282f970c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 17 Aug 2023 20:04:44 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1692302683852,"stop":1692302684041,"duration":189}},{"uid":"4f1b01b3e63b4933","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Thu, 17 Aug 2023 20:04:28 GMT', 'content-type': 'text/html', 'content-length': '190', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1692302668516,"stop":1692302668679,"duration":163}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":120,"skipped":0,"passed":479,"unknown":0,"total":599},"items":[{"uid":"a18326728a700227","reportUrl":"https://novasamatech.github.io/test-runner/3593//#testresult/a18326728a700227","status":"passed","time":{"start":1692273917807,"stop":1692273917887,"duration":80}},{"uid":"60f8c67631b38564","reportUrl":"https://novasamatech.github.io/test-runner/3592//#testresult/60f8c67631b38564","status":"passed","time":{"start":1692259477759,"stop":1692259478055,"duration":296}},{"uid":"e2ca9826cf047535","reportUrl":"https://novasamatech.github.io/test-runner/3591//#testresult/e2ca9826cf047535","status":"passed","time":{"start":1692245055650,"stop":1692245056012,"duration":362}},{"uid":"f9a8f78be0c2f273","reportUrl":"https://novasamatech.github.io/test-runner/3590//#testresult/f9a8f78be0c2f273","status":"passed","time":{"start":1692231122726,"stop":1692231123044,"duration":318}},{"uid":"8f05035df265222c","reportUrl":"https://novasamatech.github.io/test-runner/3589//#testresult/8f05035df265222c","status":"passed","time":{"start":1692216252631,"stop":1692216252689,"duration":58}},{"uid":"72d98b59e42af43","reportUrl":"https://novasamatech.github.io/test-runner/3588//#testresult/72d98b59e42af43","status":"passed","time":{"start":1692201870483,"stop":1692201870801,"duration":318}},{"uid":"8222288db0a61bdf","reportUrl":"https://novasamatech.github.io/test-runner/3587//#testresult/8222288db0a61bdf","status":"passed","time":{"start":1692187494651,"stop":1692187494711,"duration":60}},{"uid":"9ee205a3d2c5168f","reportUrl":"https://novasamatech.github.io/test-runner/3586//#testresult/9ee205a3d2c5168f","status":"passed","time":{"start":1692173073803,"stop":1692173074097,"duration":294}},{"uid":"6a48a7a60ef1c0ef","reportUrl":"https://novasamatech.github.io/test-runner/3585//#testresult/6a48a7a60ef1c0ef","status":"passed","time":{"start":1692158661522,"stop":1692158661822,"duration":300}},{"uid":"d66603598bd42202","reportUrl":"https://novasamatech.github.io/test-runner/3584//#testresult/d66603598bd42202","status":"passed","time":{"start":1692144743616,"stop":1692144743824,"duration":208}},{"uid":"a6de985ba08d558d","reportUrl":"https://novasamatech.github.io/test-runner/3583//#testresult/a6de985ba08d558d","status":"passed","time":{"start":1692129859150,"stop":1692129859483,"duration":333}},{"uid":"77b9f59ffbd761a0","reportUrl":"https://novasamatech.github.io/test-runner/3582//#testresult/77b9f59ffbd761a0","status":"passed","time":{"start":1692115465740,"stop":1692115466142,"duration":402}},{"uid":"9fcf5b99b932287a","reportUrl":"https://novasamatech.github.io/test-runner/3581//#testresult/9fcf5b99b932287a","status":"passed","time":{"start":1692101090325,"stop":1692101090572,"duration":247}},{"uid":"313eba7c4809a4e","reportUrl":"https://novasamatech.github.io/test-runner/3580//#testresult/313eba7c4809a4e","status":"passed","time":{"start":1692086707671,"stop":1692086707920,"duration":249}},{"uid":"ec21e62fa43ce233","reportUrl":"https://novasamatech.github.io/test-runner/3579//#testresult/ec21e62fa43ce233","status":"passed","time":{"start":1692072286292,"stop":1692072286531,"duration":239}},{"uid":"40a2f40d4afb26a7","reportUrl":"https://novasamatech.github.io/test-runner/3578//#testresult/40a2f40d4afb26a7","status":"passed","time":{"start":1692058329664,"stop":1692058329892,"duration":228}},{"uid":"c9e1e57d934896ae","reportUrl":"https://novasamatech.github.io/test-runner/3577//#testresult/c9e1e57d934896ae","status":"passed","time":{"start":1692043459320,"stop":1692043459380,"duration":60}},{"uid":"58024b1599fee4f2","reportUrl":"https://novasamatech.github.io/test-runner/3576//#testresult/58024b1599fee4f2","status":"passed","time":{"start":1692029098821,"stop":1692029098993,"duration":172}},{"uid":"c42b6ff60b6eeb91","reportUrl":"https://novasamatech.github.io/test-runner/3575//#testresult/c42b6ff60b6eeb91","status":"passed","time":{"start":1692014736146,"stop":1692014736227,"duration":81}},{"uid":"6e128420b409cdf4","reportUrl":"https://novasamatech.github.io/test-runner/3574//#testresult/6e128420b409cdf4","status":"passed","time":{"start":1692000266302,"stop":1692000266363,"duration":61}}]},"tags":[]},"source":"7309c866b57147ae.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}