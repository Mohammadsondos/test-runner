{"uid":"7c4e3337a259cd75","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1715112069548,"stop":1715112069618,"duration":70},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f93e8b699f0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f93e89ea320>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f93e89e9d80>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az665-906"},{"name":"thread","value":"2078-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"79099882c9a8cb8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1715112064045,"stop":1715112064513,"duration":468}},{"uid":"b95b7077c146ef51","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1715112058841,"stop":1715112058923,"duration":82}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":49,"skipped":0,"passed":774,"unknown":0,"total":829},"items":[{"uid":"f7ffb7618a6e8088","reportUrl":"https://novasamatech.github.io/test-runner/5204//#testresult/f7ffb7618a6e8088","status":"passed","time":{"start":1715083275481,"stop":1715083276229,"duration":748}},{"uid":"b18d491702f6f298","reportUrl":"https://novasamatech.github.io/test-runner/5203//#testresult/b18d491702f6f298","status":"passed","time":{"start":1715068868193,"stop":1715068868744,"duration":551}},{"uid":"6132a9e743e21b4b","reportUrl":"https://novasamatech.github.io/test-runner/5202//#testresult/6132a9e743e21b4b","status":"passed","time":{"start":1715054468591,"stop":1715054468941,"duration":350}},{"uid":"170cfc5f87d6d0b8","reportUrl":"https://novasamatech.github.io/test-runner/5201//#testresult/170cfc5f87d6d0b8","status":"passed","time":{"start":1715040094095,"stop":1715040094308,"duration":213}},{"uid":"5076cd119a2b89d4","reportUrl":"https://novasamatech.github.io/test-runner/5199//#testresult/5076cd119a2b89d4","status":"passed","time":{"start":1715011261376,"stop":1715011261788,"duration":412}},{"uid":"56282e53ccc725c4","reportUrl":"https://novasamatech.github.io/test-runner/5200//#testresult/56282e53ccc725c4","status":"passed","time":{"start":1715025658447,"stop":1715025658806,"duration":359}},{"uid":"c0fbcda6ddb33bbb","reportUrl":"https://novasamatech.github.io/test-runner/5197//#testresult/c0fbcda6ddb33bbb","status":"passed","time":{"start":1714982466617,"stop":1714982466807,"duration":190}},{"uid":"a77f71c065ed721d","reportUrl":"https://novasamatech.github.io/test-runner/5198//#testresult/a77f71c065ed721d","status":"passed","time":{"start":1714996867805,"stop":1714996868123,"duration":318}},{"uid":"84c28fe3075e90be","reportUrl":"https://novasamatech.github.io/test-runner/5195//#testresult/84c28fe3075e90be","status":"passed","time":{"start":1714953717988,"stop":1714953718379,"duration":391}},{"uid":"581c03b3a49def74","reportUrl":"https://novasamatech.github.io/test-runner/5196//#testresult/581c03b3a49def74","status":"passed","time":{"start":1714968058945,"stop":1714968059640,"duration":695}},{"uid":"1eff6a86b8352a24","reportUrl":"https://novasamatech.github.io/test-runner/5194//#testresult/1eff6a86b8352a24","status":"passed","time":{"start":1714939259040,"stop":1714939259223,"duration":183}},{"uid":"be1f45707f2f3bb1","reportUrl":"https://novasamatech.github.io/test-runner/5192//#testresult/be1f45707f2f3bb1","status":"passed","time":{"start":1714910479962,"stop":1714910480340,"duration":378}},{"uid":"f9db7921b77305b","reportUrl":"https://novasamatech.github.io/test-runner/5193//#testresult/f9db7921b77305b","status":"passed","time":{"start":1714924865571,"stop":1714924865900,"duration":329}},{"uid":"8c9fa3279e054594","reportUrl":"https://novasamatech.github.io/test-runner/5191//#testresult/8c9fa3279e054594","status":"passed","time":{"start":1714896064456,"stop":1714896064686,"duration":230}},{"uid":"ca876cf793b16477","reportUrl":"https://novasamatech.github.io/test-runner/5189//#testresult/ca876cf793b16477","status":"passed","time":{"start":1714867308643,"stop":1714867308816,"duration":173}},{"uid":"9742c32bf991c25b","reportUrl":"https://novasamatech.github.io/test-runner/5190//#testresult/9742c32bf991c25b","status":"passed","time":{"start":1714881663603,"stop":1714881663781,"duration":178}},{"uid":"1bc1a389e0bd4fbe","reportUrl":"https://novasamatech.github.io/test-runner/5188//#testresult/1bc1a389e0bd4fbe","status":"passed","time":{"start":1714852874093,"stop":1714852874344,"duration":251}},{"uid":"fa35a03a600feb89","reportUrl":"https://novasamatech.github.io/test-runner/5187//#testresult/fa35a03a600feb89","status":"passed","time":{"start":1714838464596,"stop":1714838465254,"duration":658}},{"uid":"f594b633f8478462","reportUrl":"https://novasamatech.github.io/test-runner/5186//#testresult/f594b633f8478462","status":"passed","time":{"start":1714824063060,"stop":1714824063268,"duration":208}},{"uid":"cf20e36680926042","reportUrl":"https://novasamatech.github.io/test-runner/5185//#testresult/cf20e36680926042","status":"passed","time":{"start":1714809660006,"stop":1714809660776,"duration":770}}]},"tags":[]},"source":"7c4e3337a259cd75.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}