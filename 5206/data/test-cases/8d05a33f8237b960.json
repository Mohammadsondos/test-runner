{"uid":"8d05a33f8237b960","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1715112079792,"stop":1715112079818,"duration":26},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f93e8b69b10>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f93e89eb160>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f93e89eb4c0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az665-906"},{"name":"thread","value":"2078-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c9d7afae4bc11c99","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1715112074707,"stop":1715112074758,"duration":51}},{"uid":"13d97ac038b19177","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1715112069648,"stop":1715112069673,"duration":25}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":55,"skipped":0,"passed":1223,"unknown":0,"total":1281},"items":[{"uid":"15a2552ea0ba2521","reportUrl":"https://novasamatech.github.io/test-runner/5204//#testresult/15a2552ea0ba2521","status":"passed","time":{"start":1715083275551,"stop":1715083276134,"duration":583}},{"uid":"b16dfb4a61f117f9","reportUrl":"https://novasamatech.github.io/test-runner/5203//#testresult/b16dfb4a61f117f9","status":"passed","time":{"start":1715068868606,"stop":1715068869002,"duration":396}},{"uid":"beb76d248fcca7b0","reportUrl":"https://novasamatech.github.io/test-runner/5202//#testresult/beb76d248fcca7b0","status":"passed","time":{"start":1715054468593,"stop":1715054468974,"duration":381}},{"uid":"b9c1887f6dc9281e","reportUrl":"https://novasamatech.github.io/test-runner/5201//#testresult/b9c1887f6dc9281e","status":"passed","time":{"start":1715040094311,"stop":1715040094505,"duration":194}},{"uid":"afd7f2bd8b4f32e8","reportUrl":"https://novasamatech.github.io/test-runner/5199//#testresult/afd7f2bd8b4f32e8","status":"passed","time":{"start":1715011261803,"stop":1715011262266,"duration":463}},{"uid":"3d02d91f0ab072e5","reportUrl":"https://novasamatech.github.io/test-runner/5200//#testresult/3d02d91f0ab072e5","status":"passed","time":{"start":1715025658809,"stop":1715025659183,"duration":374}},{"uid":"ff88bf064267bcb9","reportUrl":"https://novasamatech.github.io/test-runner/5197//#testresult/ff88bf064267bcb9","status":"passed","time":{"start":1714982466749,"stop":1714982466877,"duration":128}},{"uid":"cb386daf3f6e0d97","reportUrl":"https://novasamatech.github.io/test-runner/5198//#testresult/cb386daf3f6e0d97","status":"passed","time":{"start":1714996867730,"stop":1714996867965,"duration":235}},{"uid":"b065da6ada3507b9","reportUrl":"https://novasamatech.github.io/test-runner/5195//#testresult/b065da6ada3507b9","status":"passed","time":{"start":1714953718043,"stop":1714953718344,"duration":301}},{"uid":"e5a0a09b2dc76825","reportUrl":"https://novasamatech.github.io/test-runner/5196//#testresult/e5a0a09b2dc76825","status":"passed","time":{"start":1714968058853,"stop":1714968059402,"duration":549}},{"uid":"7fc8395d1a2d15ec","reportUrl":"https://novasamatech.github.io/test-runner/5194//#testresult/7fc8395d1a2d15ec","status":"passed","time":{"start":1714939258960,"stop":1714939259245,"duration":285}},{"uid":"83dbcc3dd2436fae","reportUrl":"https://novasamatech.github.io/test-runner/5192//#testresult/83dbcc3dd2436fae","status":"passed","time":{"start":1714910479933,"stop":1714910480384,"duration":451}},{"uid":"cd09960c64a575e1","reportUrl":"https://novasamatech.github.io/test-runner/5193//#testresult/cd09960c64a575e1","status":"passed","time":{"start":1714924865466,"stop":1714924865777,"duration":311}},{"uid":"fb051bed03453e28","reportUrl":"https://novasamatech.github.io/test-runner/5191//#testresult/fb051bed03453e28","status":"passed","time":{"start":1714896065034,"stop":1714896065260,"duration":226}},{"uid":"21fe74ee87613730","reportUrl":"https://novasamatech.github.io/test-runner/5189//#testresult/21fe74ee87613730","status":"passed","time":{"start":1714867308760,"stop":1714867308952,"duration":192}},{"uid":"bd4dac2e9ccbf204","reportUrl":"https://novasamatech.github.io/test-runner/5190//#testresult/bd4dac2e9ccbf204","status":"passed","time":{"start":1714881663815,"stop":1714881664027,"duration":212}},{"uid":"656b533c8a452799","reportUrl":"https://novasamatech.github.io/test-runner/5188//#testresult/656b533c8a452799","status":"passed","time":{"start":1714852873150,"stop":1714852873421,"duration":271}},{"uid":"122acae7dc705719","reportUrl":"https://novasamatech.github.io/test-runner/5187//#testresult/122acae7dc705719","status":"passed","time":{"start":1714838464801,"stop":1714838465392,"duration":591}},{"uid":"7ae7a0cee517db82","reportUrl":"https://novasamatech.github.io/test-runner/5186//#testresult/7ae7a0cee517db82","status":"passed","time":{"start":1714824063588,"stop":1714824063790,"duration":202}},{"uid":"39df02c04339f8df","reportUrl":"https://novasamatech.github.io/test-runner/5185//#testresult/39df02c04339f8df","status":"passed","time":{"start":1714809659606,"stop":1714809660166,"duration":560}}]},"tags":[]},"source":"8d05a33f8237b960.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}