{"uid":"69a887a466c76bda","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1715112069809,"stop":1715112069855,"duration":46},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f1db0e8dbd0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f1db0daad70>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f1db0da9750>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az665-906"},{"name":"thread","value":"2075-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2624d78e4a101420","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1715112064723,"stop":1715112064776,"duration":53}},{"uid":"5ec193d392629aa3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1715112059583,"stop":1715112059611,"duration":28}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":59,"skipped":0,"passed":1220,"unknown":0,"total":1281},"items":[{"uid":"c072f8991a16cea2","reportUrl":"https://novasamatech.github.io/test-runner/5204//#testresult/c072f8991a16cea2","status":"passed","time":{"start":1715083275637,"stop":1715083276301,"duration":664}},{"uid":"59fe1abd72c6fb1a","reportUrl":"https://novasamatech.github.io/test-runner/5203//#testresult/59fe1abd72c6fb1a","status":"passed","time":{"start":1715068868747,"stop":1715068869526,"duration":779}},{"uid":"c1f8072b95a696c7","reportUrl":"https://novasamatech.github.io/test-runner/5202//#testresult/c1f8072b95a696c7","status":"passed","time":{"start":1715054468944,"stop":1715054469520,"duration":576}},{"uid":"abe9e7775e5d3b80","reportUrl":"https://novasamatech.github.io/test-runner/5201//#testresult/abe9e7775e5d3b80","status":"passed","time":{"start":1715040094456,"stop":1715040094851,"duration":395}},{"uid":"d997d986be208dc8","reportUrl":"https://novasamatech.github.io/test-runner/5199//#testresult/d997d986be208dc8","status":"passed","time":{"start":1715011261607,"stop":1715011262070,"duration":463}},{"uid":"6857a6521b4eec35","reportUrl":"https://novasamatech.github.io/test-runner/5200//#testresult/6857a6521b4eec35","status":"passed","time":{"start":1715025658990,"stop":1715025659378,"duration":388}},{"uid":"d320ff53e352ff41","reportUrl":"https://novasamatech.github.io/test-runner/5197//#testresult/d320ff53e352ff41","status":"passed","time":{"start":1714982466810,"stop":1714982467375,"duration":565}},{"uid":"42d5b3f180ae4bf0","reportUrl":"https://novasamatech.github.io/test-runner/5198//#testresult/42d5b3f180ae4bf0","status":"passed","time":{"start":1714996867967,"stop":1714996868231,"duration":264}},{"uid":"9ced0c0216e29003","reportUrl":"https://novasamatech.github.io/test-runner/5195//#testresult/9ced0c0216e29003","status":"passed","time":{"start":1714953717954,"stop":1714953718350,"duration":396}},{"uid":"3b2a858208341313","reportUrl":"https://novasamatech.github.io/test-runner/5196//#testresult/3b2a858208341313","status":"passed","time":{"start":1714968059213,"stop":1714968059754,"duration":541}},{"uid":"e2c5b917740e0aae","reportUrl":"https://novasamatech.github.io/test-runner/5194//#testresult/e2c5b917740e0aae","status":"passed","time":{"start":1714939259254,"stop":1714939259440,"duration":186}},{"uid":"858407131014f442","reportUrl":"https://novasamatech.github.io/test-runner/5192//#testresult/858407131014f442","status":"passed","time":{"start":1714910480239,"stop":1714910480802,"duration":563}},{"uid":"84e24b2baf4becf8","reportUrl":"https://novasamatech.github.io/test-runner/5193//#testresult/84e24b2baf4becf8","status":"passed","time":{"start":1714924865695,"stop":1714924866357,"duration":662}},{"uid":"9dad5891a04aa4d4","reportUrl":"https://novasamatech.github.io/test-runner/5191//#testresult/9dad5891a04aa4d4","status":"passed","time":{"start":1714896064734,"stop":1714896064969,"duration":235}},{"uid":"a0ff0a27753ce0e8","reportUrl":"https://novasamatech.github.io/test-runner/5189//#testresult/a0ff0a27753ce0e8","status":"passed","time":{"start":1714867308819,"stop":1714867308965,"duration":146}},{"uid":"dac4db49d3f66eb8","reportUrl":"https://novasamatech.github.io/test-runner/5190//#testresult/dac4db49d3f66eb8","status":"passed","time":{"start":1714881663666,"stop":1714881664030,"duration":364}},{"uid":"8b8d4b0e691abd94","reportUrl":"https://novasamatech.github.io/test-runner/5188//#testresult/8b8d4b0e691abd94","status":"passed","time":{"start":1714852873231,"stop":1714852874439,"duration":1208}},{"uid":"285f944d6f0b7787","reportUrl":"https://novasamatech.github.io/test-runner/5187//#testresult/285f944d6f0b7787","status":"passed","time":{"start":1714838464735,"stop":1714838465446,"duration":711}},{"uid":"45d87949bc2e9c2c","reportUrl":"https://novasamatech.github.io/test-runner/5186//#testresult/45d87949bc2e9c2c","status":"passed","time":{"start":1714824063151,"stop":1714824063344,"duration":193}},{"uid":"645be5d6f659e8b0","reportUrl":"https://novasamatech.github.io/test-runner/5185//#testresult/645be5d6f659e8b0","status":"passed","time":{"start":1714809660078,"stop":1714809660870,"duration":792}}]},"tags":[]},"source":"69a887a466c76bda.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}