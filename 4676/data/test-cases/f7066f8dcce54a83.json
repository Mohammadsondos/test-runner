{"uid":"f7066f8dcce54a83","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1707595294383,"stop":1707595294762,"duration":379},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fd9d468f700>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fd9d44a98d0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fd9d44a8d90>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1429-846"},{"name":"thread","value":"2061-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"65e1ad748f2d6639","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707595288977,"stop":1707595289349,"duration":372}},{"uid":"7bf4cab3b46b61d9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707595283537,"stop":1707595283941,"duration":404}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":3,"skipped":0,"passed":861,"unknown":0,"total":867},"items":[{"uid":"75e93e6ba10aa02c","reportUrl":"https://novasamatech.github.io/test-runner/4675//#testresult/75e93e6ba10aa02c","status":"passed","time":{"start":1707580862995,"stop":1707580863705,"duration":710}},{"uid":"6460426e4cf2c6c1","reportUrl":"https://novasamatech.github.io/test-runner/4674//#testresult/6460426e4cf2c6c1","status":"passed","time":{"start":1707566460985,"stop":1707566461189,"duration":204}},{"uid":"e5ca01ec20894979","reportUrl":"https://novasamatech.github.io/test-runner/4673//#testresult/e5ca01ec20894979","status":"passed","time":{"start":1707552064489,"stop":1707552064777,"duration":288}},{"uid":"58de602976a0c916","reportUrl":"https://novasamatech.github.io/test-runner/4672//#testresult/58de602976a0c916","status":"passed","time":{"start":1707537662370,"stop":1707537662902,"duration":532}},{"uid":"c0507bffe7899be9","reportUrl":"https://novasamatech.github.io/test-runner/4671//#testresult/c0507bffe7899be9","status":"passed","time":{"start":1707523307152,"stop":1707523307435,"duration":283}},{"uid":"9aa400d0010e306e","reportUrl":"https://novasamatech.github.io/test-runner/4670//#testresult/9aa400d0010e306e","status":"passed","time":{"start":1707508878889,"stop":1707508879031,"duration":142}},{"uid":"d731c596ca82c2b6","reportUrl":"https://novasamatech.github.io/test-runner/4669//#testresult/d731c596ca82c2b6","status":"passed","time":{"start":1707494460374,"stop":1707494460578,"duration":204}},{"uid":"2030e853b22e49e","reportUrl":"https://novasamatech.github.io/test-runner/4668//#testresult/2030e853b22e49e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480089524,"stop":1707480089900,"duration":376}},{"uid":"fe9915ce9c0308a","reportUrl":"https://novasamatech.github.io/test-runner/4667//#testresult/fe9915ce9c0308a","status":"passed","time":{"start":1707465667055,"stop":1707465667785,"duration":730}},{"uid":"e54fe36544f466dd","reportUrl":"https://novasamatech.github.io/test-runner/4666//#testresult/e54fe36544f466dd","status":"passed","time":{"start":1707451262839,"stop":1707451263028,"duration":189}},{"uid":"9fbdf51abe1a9375","reportUrl":"https://novasamatech.github.io/test-runner/4665//#testresult/9fbdf51abe1a9375","status":"passed","time":{"start":1707436914739,"stop":1707436915363,"duration":624}},{"uid":"89eadada33cc95d3","reportUrl":"https://novasamatech.github.io/test-runner/4664//#testresult/89eadada33cc95d3","status":"passed","time":{"start":1707422465697,"stop":1707422466490,"duration":793}},{"uid":"43a3095d0e8c82d8","reportUrl":"https://novasamatech.github.io/test-runner/4663//#testresult/43a3095d0e8c82d8","status":"passed","time":{"start":1707408069041,"stop":1707408069559,"duration":518}},{"uid":"59197318f06a092c","reportUrl":"https://novasamatech.github.io/test-runner/4662//#testresult/59197318f06a092c","status":"passed","time":{"start":1707393664652,"stop":1707393665192,"duration":540}},{"uid":"ed1d6815bad658e3","reportUrl":"https://novasamatech.github.io/test-runner/4661//#testresult/ed1d6815bad658e3","status":"passed","time":{"start":1707379263994,"stop":1707379264390,"duration":396}},{"uid":"f711b4f21d32dc1f","reportUrl":"https://novasamatech.github.io/test-runner/4660//#testresult/f711b4f21d32dc1f","status":"passed","time":{"start":1707364857957,"stop":1707364858160,"duration":203}},{"uid":"d5beed1f1683f6a1","reportUrl":"https://novasamatech.github.io/test-runner/4659//#testresult/d5beed1f1683f6a1","status":"passed","time":{"start":1707350502689,"stop":1707350503031,"duration":342}},{"uid":"e2daab43b51bb97b","reportUrl":"https://novasamatech.github.io/test-runner/4658//#testresult/e2daab43b51bb97b","status":"passed","time":{"start":1707336092764,"stop":1707336093411,"duration":647}},{"uid":"618c47be131518b4","reportUrl":"https://novasamatech.github.io/test-runner/4657//#testresult/618c47be131518b4","status":"passed","time":{"start":1707321661998,"stop":1707321662311,"duration":313}},{"uid":"abac744b91a428ab","reportUrl":"https://novasamatech.github.io/test-runner/4656//#testresult/abac744b91a428ab","status":"passed","time":{"start":1707307266635,"stop":1707307267110,"duration":475}}]},"tags":[]},"source":"f7066f8dcce54a83.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}