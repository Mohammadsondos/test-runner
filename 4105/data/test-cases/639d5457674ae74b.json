{"uid":"639d5457674ae74b","name":"test_can_create_connection[Test for 3DPass, url: wss://rpc2.3dpass.org]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"f5a6d4af0313219dce7fc1642cad31bd","time":{"start":1699531425219,"stop":1699531425635,"duration":416},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 09 Nov 2023 12:03:45 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': '3DPass', 'url': 'wss://rpc2.3dpass.org'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 09 Nov 2023 12:03:45 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 09 Nov 2023 12:03:45 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': '3DPass', 'url': 'wss://rpc2.3dpass.org'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 09 Nov 2023 12:03:45 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"54cdc2e019072099","name":"stdout","source":"54cdc2e019072099.txt","type":"text/plain","size":1428}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az592-723"},{"name":"thread","value":"2225-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc2.3dpass.org', 'name': '3DPass'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1dba35ffb7902113","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 09 Nov 2023 12:03:30 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699531409643,"stop":1699531410120,"duration":477}},{"uid":"d1222896265084dc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 09 Nov 2023 12:03:14 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699531394039,"stop":1699531394537,"duration":498}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":36,"skipped":0,"passed":429,"unknown":0,"total":465},"items":[{"uid":"fb0da6d8bbb644d3","reportUrl":"https://novasamatech.github.io/test-runner/4104//#testresult/fb0da6d8bbb644d3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Thu, 09 Nov 2023 08:02:28 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699516948005,"stop":1699516948305,"duration":300}},{"uid":"5e853c7785b5d1e3","reportUrl":"https://novasamatech.github.io/test-runner/4103//#testresult/5e853c7785b5d1e3","status":"passed","time":{"start":1699502498443,"stop":1699502499023,"duration":580}},{"uid":"3795bf07c7bcfaa5","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/3795bf07c7bcfaa5","status":"passed","time":{"start":1699488151414,"stop":1699488152243,"duration":829}},{"uid":"66fae56ec2c56039","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/66fae56ec2c56039","status":"passed","time":{"start":1699473688137,"stop":1699473688700,"duration":563}},{"uid":"dfb65d973f5cab6f","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/dfb65d973f5cab6f","status":"passed","time":{"start":1699459326358,"stop":1699459326911,"duration":553}},{"uid":"2a946ee4dfe57bff","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/2a946ee4dfe57bff","status":"passed","time":{"start":1699444906578,"stop":1699444907162,"duration":584}},{"uid":"bfb4f2510dfc8c29","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/bfb4f2510dfc8c29","status":"passed","time":{"start":1699430499935,"stop":1699430500590,"duration":655}},{"uid":"acb9b1bac3e3329c","reportUrl":"https://novasamatech.github.io/test-runner/4097//#testresult/acb9b1bac3e3329c","status":"passed","time":{"start":1699416114389,"stop":1699416115057,"duration":668}},{"uid":"10f1fc73f330e99a","reportUrl":"https://novasamatech.github.io/test-runner/4096//#testresult/10f1fc73f330e99a","status":"passed","time":{"start":1699401733971,"stop":1699401734568,"duration":597}},{"uid":"f77107d59722e6cf","reportUrl":"https://novasamatech.github.io/test-runner/4095//#testresult/f77107d59722e6cf","status":"passed","time":{"start":1699387308929,"stop":1699387309501,"duration":572}},{"uid":"fa25a411efff8aa2","reportUrl":"https://novasamatech.github.io/test-runner/4094//#testresult/fa25a411efff8aa2","status":"passed","time":{"start":1699372908719,"stop":1699372909269,"duration":550}},{"uid":"24e4f9baf360d0b8","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/24e4f9baf360d0b8","status":"passed","time":{"start":1699358517072,"stop":1699358517644,"duration":572}},{"uid":"cd210e1a8520c8bc","reportUrl":"https://novasamatech.github.io/test-runner/4092//#testresult/cd210e1a8520c8bc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Tue, 07 Nov 2023 08:05:43 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699344342748,"stop":1699344343327,"duration":579}},{"uid":"b9b3d4db5bd1ec72","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/b9b3d4db5bd1ec72","status":"passed","time":{"start":1699329704422,"stop":1699329705096,"duration":674}},{"uid":"79cb079b6d588cd0","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/79cb079b6d588cd0","status":"passed","time":{"start":1699315344648,"stop":1699315345202,"duration":554}},{"uid":"5f1090c2af936fb6","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/5f1090c2af936fb6","status":"passed","time":{"start":1699300895500,"stop":1699300896133,"duration":633}},{"uid":"1d11810affc00b6c","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/1d11810affc00b6c","status":"passed","time":{"start":1699286530331,"stop":1699286530896,"duration":565}},{"uid":"6a71c02d30ef7e22","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/6a71c02d30ef7e22","status":"passed","time":{"start":1699272123470,"stop":1699272123972,"duration":502}},{"uid":"afc87fe00dbdb477","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/afc87fe00dbdb477","status":"passed","time":{"start":1699257723302,"stop":1699257723942,"duration":640}},{"uid":"49a27fa538417c0","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/49a27fa538417c0","status":"passed","time":{"start":1699243305800,"stop":1699243306458,"duration":658}}]},"tags":[]},"source":"639d5457674ae74b.json","parameterValues":["{'url': 'wss://rpc2.3dpass.org', 'name': '3DPass'}"]}