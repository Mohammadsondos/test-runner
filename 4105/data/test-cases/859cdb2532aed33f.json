{"uid":"859cdb2532aed33f","name":"test_chainId[Test for Karura]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"ce6132ea886b2cc89553dba0912710dd","time":{"start":1699531299801,"stop":1699531300092,"duration":291},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7f12cb933e80>\nchain = <scripts.utils.chain_model.Chain object at 0x7f12cba3a5c0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f12cb9a85b0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x67b53348a278bd22689224ab0d7a2256a603e310d78c43b198bccebfe8a7a33c']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az573-407"},{"name":"thread","value":"2317-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f12cba3a5c0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a7dac058e5c38d64","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699531284409,"stop":1699531284696,"duration":287}},{"uid":"11ca8dc4e09a66be","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699531268795,"stop":1699531269194,"duration":399}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":20,"skipped":0,"passed":445,"unknown":0,"total":465},"items":[{"uid":"90924ef7225c5e5b","reportUrl":"https://novasamatech.github.io/test-runner/4104//#testresult/90924ef7225c5e5b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699516910444,"stop":1699516910590,"duration":146}},{"uid":"46bc30b2931e179c","reportUrl":"https://novasamatech.github.io/test-runner/4103//#testresult/46bc30b2931e179c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699502503223,"stop":1699502503674,"duration":451}},{"uid":"7aaff934fcef356c","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/7aaff934fcef356c","status":"passed","time":{"start":1699488126565,"stop":1699488130705,"duration":4140}},{"uid":"7a506fabe7200495","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/7a506fabe7200495","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699473698343,"stop":1699473699017,"duration":674}},{"uid":"b2f5f93168d4e9c8","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/b2f5f93168d4e9c8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699459299964,"stop":1699459300523,"duration":559}},{"uid":"7bb61ded6f9a01c8","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/7bb61ded6f9a01c8","status":"passed","time":{"start":1699444878967,"stop":1699444883153,"duration":4186}},{"uid":"384caee404b1e838","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/384caee404b1e838","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699430497649,"stop":1699430497982,"duration":333}},{"uid":"d984d340104be070","reportUrl":"https://novasamatech.github.io/test-runner/4097//#testresult/d984d340104be070","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699416108742,"stop":1699416109295,"duration":553}},{"uid":"7449cafd3a66011d","reportUrl":"https://novasamatech.github.io/test-runner/4096//#testresult/7449cafd3a66011d","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699401760428,"stop":1699401760962,"duration":534}},{"uid":"7e20857ecc75d188","reportUrl":"https://novasamatech.github.io/test-runner/4095//#testresult/7e20857ecc75d188","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699387298855,"stop":1699387299137,"duration":282}},{"uid":"42b0a53c35133ba6","reportUrl":"https://novasamatech.github.io/test-runner/4094//#testresult/42b0a53c35133ba6","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699372911558,"stop":1699372911929,"duration":371}},{"uid":"3bea71acd3a5a36b","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/3bea71acd3a5a36b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699358509812,"stop":1699358510159,"duration":347}},{"uid":"9541bca0ff8e64c7","reportUrl":"https://novasamatech.github.io/test-runner/4092//#testresult/9541bca0ff8e64c7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699344100015,"stop":1699344100618,"duration":603}},{"uid":"856616165cc289f8","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/856616165cc289f8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699329697310,"stop":1699329697685,"duration":375}},{"uid":"43df8d0a38711901","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/43df8d0a38711901","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699315343654,"stop":1699315344249,"duration":595}},{"uid":"ce370d750eaf299c","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/ce370d750eaf299c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699300895322,"stop":1699300895475,"duration":153}},{"uid":"f289bbc5885287d7","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/f289bbc5885287d7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699286502269,"stop":1699286502474,"duration":205}},{"uid":"5dedff611d0fcc01","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/5dedff611d0fcc01","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699272101079,"stop":1699272101807,"duration":728}},{"uid":"f06d1d89c6d936f2","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/f06d1d89c6d936f2","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699257713091,"stop":1699257713253,"duration":162}},{"uid":"a0d24b6e7ec54eed","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/a0d24b6e7ec54eed","status":"passed","time":{"start":1699243265131,"stop":1699243274898,"duration":9767}}]},"tags":[]},"source":"859cdb2532aed33f.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f12cba3a5c0>"]}