{"uid":"575fbe3ec2abf5f2","name":"test_can_create_connection[Test for Shiden, url: wss://shiden.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"ba829bf283df63155b3acf8f5f7f68cc","time":{"start":1699531601725,"stop":1699531673069,"duration":71344},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Shiden', 'url': 'wss://shiden.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Shiden', 'url': 'wss://shiden.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"d0a3b77b149f210f","name":"stdout","source":"d0a3b77b149f210f.txt","type":"text/plain","size":381}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az592-723"},{"name":"thread","value":"2234-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://shiden.api.onfinality.io/public-ws', 'name': 'Shiden'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e369b8c7fba8482f","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699531525814,"stop":1699531586532,"duration":60718}},{"uid":"4c2f9fb01aab1037","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699531448860,"stop":1699531510599,"duration":61739}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":463,"unknown":0,"total":465},"items":[{"uid":"8aca1b51fcf8c606","reportUrl":"https://novasamatech.github.io/test-runner/4104//#testresult/8aca1b51fcf8c606","status":"passed","time":{"start":1699517136456,"stop":1699517137434,"duration":978}},{"uid":"8c6667982cba0038","reportUrl":"https://novasamatech.github.io/test-runner/4103//#testresult/8c6667982cba0038","status":"passed","time":{"start":1699502692422,"stop":1699502693373,"duration":951}},{"uid":"df927b9ede6006ea","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/df927b9ede6006ea","status":"passed","time":{"start":1699488132237,"stop":1699488132973,"duration":736}},{"uid":"9ba0429ecd254c68","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/9ba0429ecd254c68","status":"passed","time":{"start":1699473773939,"stop":1699473774923,"duration":984}},{"uid":"5849f491f0f102fd","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/5849f491f0f102fd","status":"passed","time":{"start":1699459342502,"stop":1699459343464,"duration":962}},{"uid":"6f119744d14e893","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/6f119744d14e893","status":"passed","time":{"start":1699444965678,"stop":1699444966573,"duration":895}},{"uid":"9b32f3e5077e9a56","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/9b32f3e5077e9a56","status":"passed","time":{"start":1699430486797,"stop":1699430487649,"duration":852}},{"uid":"242a5644d8f0fd5","reportUrl":"https://novasamatech.github.io/test-runner/4097//#testresult/242a5644d8f0fd5","status":"passed","time":{"start":1699416096479,"stop":1699416097208,"duration":729}},{"uid":"2763400a9eb4c155","reportUrl":"https://novasamatech.github.io/test-runner/4096//#testresult/2763400a9eb4c155","status":"passed","time":{"start":1699401718341,"stop":1699401719270,"duration":929}},{"uid":"b4ec9d3a9647a8a6","reportUrl":"https://novasamatech.github.io/test-runner/4095//#testresult/b4ec9d3a9647a8a6","status":"passed","time":{"start":1699387273909,"stop":1699387274971,"duration":1062}},{"uid":"c5bcf84dfedb467","reportUrl":"https://novasamatech.github.io/test-runner/4094//#testresult/c5bcf84dfedb467","status":"passed","time":{"start":1699372873654,"stop":1699372874789,"duration":1135}},{"uid":"f9c2c4720e71368a","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/f9c2c4720e71368a","status":"passed","time":{"start":1699358480218,"stop":1699358481326,"duration":1108}},{"uid":"43f05ad7ba84fd41","reportUrl":"https://novasamatech.github.io/test-runner/4092//#testresult/43f05ad7ba84fd41","status":"passed","time":{"start":1699344074029,"stop":1699344074794,"duration":765}},{"uid":"e666bdb93509fda","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/e666bdb93509fda","status":"passed","time":{"start":1699329680734,"stop":1699329681598,"duration":864}},{"uid":"88887fefc05abb35","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/88887fefc05abb35","status":"passed","time":{"start":1699315320173,"stop":1699315321169,"duration":996}},{"uid":"983b91d3719e3cc8","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/983b91d3719e3cc8","status":"passed","time":{"start":1699300869083,"stop":1699300870011,"duration":928}},{"uid":"ede29b7c18c2413c","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/ede29b7c18c2413c","status":"passed","time":{"start":1699286476606,"stop":1699286477541,"duration":935}},{"uid":"816543f3254121d5","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/816543f3254121d5","status":"passed","time":{"start":1699272080410,"stop":1699272081374,"duration":964}},{"uid":"53dc19a0e8c4191a","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/53dc19a0e8c4191a","status":"passed","time":{"start":1699257700994,"stop":1699257701854,"duration":860}},{"uid":"c236e89f309c2ec4","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/c236e89f309c2ec4","status":"passed","time":{"start":1699243288858,"stop":1699243289716,"duration":858}}]},"tags":[]},"source":"575fbe3ec2abf5f2.json","parameterValues":["{'url': 'wss://shiden.api.onfinality.io/public-ws', 'name': 'Shiden'}"]}