{"uid":"251b22febbe567c6","name":"test_precision[Test for Karura]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"0d2609fac167c2ab9a8a63daa5ef2268","time":{"start":1699531300254,"stop":1699531300437,"duration":183},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7f2464331a50>\nchain = <scripts.utils.chain_model.Chain object at 0x7f246483f220>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f246485f220>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x67b53348a278bd22689224ab0d7a2256a603e310d78c43b198bccebfe8a7a33c']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az1020-91"},{"name":"thread","value":"2175-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f246483f220>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5b9e99757c8a91b2","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699531284974,"stop":1699531285154,"duration":180}},{"uid":"8649af2309a4c335","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699531269496,"stop":1699531269806,"duration":310}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":19,"skipped":0,"passed":446,"unknown":0,"total":465},"items":[{"uid":"9ad1969414546293","reportUrl":"https://novasamatech.github.io/test-runner/4104//#testresult/9ad1969414546293","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699516900456,"stop":1699516900607,"duration":151}},{"uid":"1f2c35dcd632fbe1","reportUrl":"https://novasamatech.github.io/test-runner/4103//#testresult/1f2c35dcd632fbe1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699502511195,"stop":1699502511695,"duration":500}},{"uid":"2e79605cbf82410c","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/2e79605cbf82410c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699488145287,"stop":1699488145620,"duration":333}},{"uid":"4332f354621f7766","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/4332f354621f7766","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699473706183,"stop":1699473706927,"duration":744}},{"uid":"d43da958f06d118c","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/d43da958f06d118c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699459302370,"stop":1699459302654,"duration":284}},{"uid":"7d8db1d0e5d5f0c7","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/7d8db1d0e5d5f0c7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699444899066,"stop":1699444899426,"duration":360}},{"uid":"e45486a93b41d637","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/e45486a93b41d637","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699430503737,"stop":1699430504133,"duration":396}},{"uid":"71be432fc919bfd3","reportUrl":"https://novasamatech.github.io/test-runner/4097//#testresult/71be432fc919bfd3","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699416119068,"stop":1699416119389,"duration":321}},{"uid":"18c2e77ee15158aa","reportUrl":"https://novasamatech.github.io/test-runner/4096//#testresult/18c2e77ee15158aa","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699401745028,"stop":1699401745311,"duration":283}},{"uid":"60a21767dfd14c96","reportUrl":"https://novasamatech.github.io/test-runner/4095//#testresult/60a21767dfd14c96","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699387300536,"stop":1699387300815,"duration":279}},{"uid":"c875c4b0b087a13f","reportUrl":"https://novasamatech.github.io/test-runner/4094//#testresult/c875c4b0b087a13f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699372912829,"stop":1699372913434,"duration":605}},{"uid":"2b4b66ac58dc1d36","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/2b4b66ac58dc1d36","status":"passed","time":{"start":1699358470979,"stop":1699358476373,"duration":5394}},{"uid":"22a3690dbb70a944","reportUrl":"https://novasamatech.github.io/test-runner/4092//#testresult/22a3690dbb70a944","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699344105922,"stop":1699344106664,"duration":742}},{"uid":"5ebe8cd37f2340ce","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/5ebe8cd37f2340ce","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699329697765,"stop":1699329698370,"duration":605}},{"uid":"1569ccb9598e3cc","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/1569ccb9598e3cc","status":"passed","time":{"start":1699315312605,"stop":1699315323463,"duration":10858}},{"uid":"12a08eb4522a31a2","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/12a08eb4522a31a2","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699300899023,"stop":1699300899167,"duration":144}},{"uid":"c057f47ce65f92c","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/c057f47ce65f92c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699286506939,"stop":1699286507088,"duration":149}},{"uid":"cc3d9d2064308cc9","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/cc3d9d2064308cc9","status":"passed","time":{"start":1699272092038,"stop":1699272103642,"duration":11604}},{"uid":"39d3faf11397b568","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/39d3faf11397b568","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699257706662,"stop":1699257707160,"duration":498}},{"uid":"808b193dc753ed7e","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/808b193dc753ed7e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699243305844,"stop":1699243306212,"duration":368}}]},"tags":[]},"source":"251b22febbe567c6.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f246483f220>"]}