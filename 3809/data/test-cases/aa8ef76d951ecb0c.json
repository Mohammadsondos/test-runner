{"uid":"aa8ef76d951ecb0c","name":"test_can_create_connection[Test for Jur, url: wss://jur-mainnet-archive-rpc-1.icebergnodes.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"dd04e52265ef77974494aaad2d4c080f","time":{"start":1695297822698,"stop":1695297823159,"duration":461},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Sep 2023 12:03:43 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Sep 2023 12:03:43 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Sep 2023 12:03:43 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Sep 2023 12:03:43 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f5c723d6d2303f6","name":"stdout","source":"f5c723d6d2303f6.txt","type":"text/plain","size":1071}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az255-111"},{"name":"thread","value":"2058-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9e58915a7b7567ed","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Sep 2023 12:03:27 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695297807009,"stop":1695297807591,"duration":582}},{"uid":"d90984adb71eceeb","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 21 Sep 2023 12:03:11 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695297791351,"stop":1695297791839,"duration":488}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":164,"unknown":0,"total":170},"items":[{"uid":"929b24259d1b13c2","reportUrl":"https://novasamatech.github.io/test-runner/3808//#testresult/929b24259d1b13c2","status":"passed","time":{"start":1695283360372,"stop":1695283360732,"duration":360}},{"uid":"44af4ac4678f78e9","reportUrl":"https://novasamatech.github.io/test-runner/3807//#testresult/44af4ac4678f78e9","status":"passed","time":{"start":1695268970833,"stop":1695268971552,"duration":719}},{"uid":"e4ae0ffb3ed4e91","reportUrl":"https://novasamatech.github.io/test-runner/3806//#testresult/e4ae0ffb3ed4e91","status":"passed","time":{"start":1695254662020,"stop":1695254662650,"duration":630}},{"uid":"c60e2028b56ce2b3","reportUrl":"https://novasamatech.github.io/test-runner/3805//#testresult/c60e2028b56ce2b3","status":"passed","time":{"start":1695240169794,"stop":1695240170180,"duration":386}},{"uid":"92295be3ff8fb351","reportUrl":"https://novasamatech.github.io/test-runner/3804//#testresult/92295be3ff8fb351","status":"passed","time":{"start":1695225886815,"stop":1695225887478,"duration":663}},{"uid":"bb98e6898b1a2b9c","reportUrl":"https://novasamatech.github.io/test-runner/3803//#testresult/bb98e6898b1a2b9c","status":"passed","time":{"start":1695211438365,"stop":1695211439085,"duration":720}},{"uid":"ff2deb6d41473fd6","reportUrl":"https://novasamatech.github.io/test-runner/3802//#testresult/ff2deb6d41473fd6","status":"passed","time":{"start":1695196981167,"stop":1695196981720,"duration":553}},{"uid":"a61c5a23363ec32a","reportUrl":"https://novasamatech.github.io/test-runner/3801//#testresult/a61c5a23363ec32a","status":"passed","time":{"start":1695182543952,"stop":1695182544481,"duration":529}},{"uid":"3005b46d64a549ea","reportUrl":"https://novasamatech.github.io/test-runner/3800//#testresult/3005b46d64a549ea","status":"passed","time":{"start":1695168211381,"stop":1695168212098,"duration":717}},{"uid":"e46f68177f5b399b","reportUrl":"https://novasamatech.github.io/test-runner/3799//#testresult/e46f68177f5b399b","status":"passed","time":{"start":1695153786232,"stop":1695153786975,"duration":743}},{"uid":"80cb65d8aefd0c6d","reportUrl":"https://novasamatech.github.io/test-runner/3798//#testresult/80cb65d8aefd0c6d","status":"passed","time":{"start":1695139397722,"stop":1695139398335,"duration":613}},{"uid":"ce6cd6bbec76e402","reportUrl":"https://novasamatech.github.io/test-runner/3797//#testresult/ce6cd6bbec76e402","status":"passed","time":{"start":1695125019442,"stop":1695125019984,"duration":542}},{"uid":"23130f6cd3643bc9","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/23130f6cd3643bc9","status":"passed","time":{"start":1695110590078,"stop":1695110590712,"duration":634}},{"uid":"66bf18ad96207c98","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/66bf18ad96207c98","status":"passed","time":{"start":1695096233331,"stop":1695096233835,"duration":504}},{"uid":"e37b56ca8502d960","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/e37b56ca8502d960","status":"passed","time":{"start":1695081783859,"stop":1695081784371,"duration":512}},{"uid":"53fce45aa4ade1cd","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/53fce45aa4ade1cd","status":"passed","time":{"start":1695052972005,"stop":1695052972366,"duration":361}},{"uid":"95e0cad7cf38f07","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/95e0cad7cf38f07","status":"passed","time":{"start":1695067363863,"stop":1695067364511,"duration":648}},{"uid":"11e662834e83b256","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/11e662834e83b256","status":"passed","time":{"start":1695038607166,"stop":1695038607687,"duration":521}},{"uid":"4e132db3c69e6666","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/4e132db3c69e6666","status":"passed","time":{"start":1695024191222,"stop":1695024191742,"duration":520}},{"uid":"69265b02c24566e3","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/69265b02c24566e3","status":"passed","time":{"start":1695009767828,"stop":1695009768608,"duration":780}}]},"tags":[]},"source":"aa8ef76d951ecb0c.json","parameterValues":["{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"]}