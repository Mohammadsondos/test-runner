{"uid":"862f3ced564c0c1f","name":"test_can_create_connection[Test for GM, url: wss://ws.gm.bldnodes.org]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c295c99978ffa56afd8f2cb1fcd6fca8","time":{"start":1696003382868,"stop":1696003383506,"duration":638},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 29 Sep 2023 16:03:03 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'GM', 'url': 'wss://ws.gm.bldnodes.org'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 29 Sep 2023 16:03:03 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 29 Sep 2023 16:03:03 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'GM', 'url': 'wss://ws.gm.bldnodes.org'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 29 Sep 2023 16:03:03 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"68f58fe045206370","name":"stdout","source":"68f58fe045206370.txt","type":"text/plain","size":1389}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az589-427"},{"name":"thread","value":"2167-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://ws.gm.bldnodes.org', 'name': 'GM'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cf49d5182f6ee9bc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 29 Sep 2023 16:02:47 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1696003367207,"stop":1696003367781,"duration":574}},{"uid":"9fc00f7b985a1a85","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 29 Sep 2023 16:02:32 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1696003351434,"stop":1696003352078,"duration":644}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":213,"unknown":0,"total":218},"items":[{"uid":"2d7aa617e9f79f75","reportUrl":"https://novasamatech.github.io/test-runner/3857//#testresult/2d7aa617e9f79f75","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 29 Sep 2023 12:02:55 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695988974791,"stop":1695988975236,"duration":445}},{"uid":"6eb36fc2aa0a6a1a","reportUrl":"https://novasamatech.github.io/test-runner/3856//#testresult/6eb36fc2aa0a6a1a","status":"passed","time":{"start":1695974548358,"stop":1695974549287,"duration":929}},{"uid":"9adf5521435b489c","reportUrl":"https://novasamatech.github.io/test-runner/3855//#testresult/9adf5521435b489c","status":"passed","time":{"start":1695960123711,"stop":1695960124522,"duration":811}},{"uid":"d211fefafc8cd404","reportUrl":"https://novasamatech.github.io/test-runner/3854//#testresult/d211fefafc8cd404","status":"passed","time":{"start":1695945783780,"stop":1695945784686,"duration":906}},{"uid":"b9a83987088a93eb","reportUrl":"https://novasamatech.github.io/test-runner/3853//#testresult/b9a83987088a93eb","status":"passed","time":{"start":1695931344084,"stop":1695931345100,"duration":1016}},{"uid":"e6b7ed7ab4c4e3e8","reportUrl":"https://novasamatech.github.io/test-runner/3852//#testresult/e6b7ed7ab4c4e3e8","status":"passed","time":{"start":1695916939211,"stop":1695916940136,"duration":925}},{"uid":"f1e34978d0ba7b78","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/f1e34978d0ba7b78","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1695902579101,"stop":1695902579453,"duration":352}},{"uid":"7b9da04c4380c291","reportUrl":"https://novasamatech.github.io/test-runner/3850//#testresult/7b9da04c4380c291","status":"passed","time":{"start":1695888124564,"stop":1695888125303,"duration":739}},{"uid":"b4fd9bb2cbbc540f","reportUrl":"https://novasamatech.github.io/test-runner/3849//#testresult/b4fd9bb2cbbc540f","status":"passed","time":{"start":1695873727654,"stop":1695873728405,"duration":751}},{"uid":"333394339be63f4e","reportUrl":"https://novasamatech.github.io/test-runner/3848//#testresult/333394339be63f4e","status":"passed","time":{"start":1695859350136,"stop":1695859350840,"duration":704}},{"uid":"b39cc86adba86b03","reportUrl":"https://novasamatech.github.io/test-runner/3847//#testresult/b39cc86adba86b03","status":"passed","time":{"start":1695844936396,"stop":1695844937097,"duration":701}},{"uid":"b61ec81b4faad3d6","reportUrl":"https://novasamatech.github.io/test-runner/3846//#testresult/b61ec81b4faad3d6","status":"passed","time":{"start":1695830544731,"stop":1695830545326,"duration":595}},{"uid":"3da650aff07f7e0f","reportUrl":"https://novasamatech.github.io/test-runner/3845//#testresult/3da650aff07f7e0f","status":"passed","time":{"start":1695816117376,"stop":1695816118432,"duration":1056}},{"uid":"9df1f629f3a15fb0","reportUrl":"https://novasamatech.github.io/test-runner/3844//#testresult/9df1f629f3a15fb0","status":"passed","time":{"start":1695801737875,"stop":1695801738856,"duration":981}},{"uid":"6f28725608e25999","reportUrl":"https://novasamatech.github.io/test-runner/3843//#testresult/6f28725608e25999","status":"passed","time":{"start":1695787327068,"stop":1695787327861,"duration":793}},{"uid":"17acd5b513f96b84","reportUrl":"https://novasamatech.github.io/test-runner/3842//#testresult/17acd5b513f96b84","status":"passed","time":{"start":1695772964532,"stop":1695772965287,"duration":755}},{"uid":"2fa4b404c1f93207","reportUrl":"https://novasamatech.github.io/test-runner/3841//#testresult/2fa4b404c1f93207","status":"passed","time":{"start":1695758541225,"stop":1695758542278,"duration":1053}},{"uid":"ba48263882a2c5b6","reportUrl":"https://novasamatech.github.io/test-runner/3840//#testresult/ba48263882a2c5b6","status":"passed","time":{"start":1695744120820,"stop":1695744121526,"duration":706}},{"uid":"aa32df2f4b4bfea3","reportUrl":"https://novasamatech.github.io/test-runner/3839//#testresult/aa32df2f4b4bfea3","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1695729751023,"stop":1695729751276,"duration":253}},{"uid":"170564142cf076b4","reportUrl":"https://novasamatech.github.io/test-runner/3838//#testresult/170564142cf076b4","status":"passed","time":{"start":1695715323235,"stop":1695715323945,"duration":710}}]},"tags":[]},"source":"862f3ced564c0c1f.json","parameterValues":["{'url': 'wss://ws.gm.bldnodes.org', 'name': 'GM'}"]}