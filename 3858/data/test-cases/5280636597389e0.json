{"uid":"5280636597389e0","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1696003397247,"stop":1696003397514,"duration":267},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"77a1537fe22ba8c1","name":"stdout","source":"77a1537fe22ba8c1.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az589-427"},{"name":"thread","value":"2176-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"33997c408675e908","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:02 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696003381882,"stop":1696003382160,"duration":278}},{"uid":"50f30df6e651b19c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:02:46 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696003366407,"stop":1696003366796,"duration":389}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":212,"unknown":0,"total":218},"items":[{"uid":"e38f5c1f1b0580fc","reportUrl":"https://novasamatech.github.io/test-runner/3857//#testresult/e38f5c1f1b0580fc","status":"passed","time":{"start":1695988933606,"stop":1695988934089,"duration":483}},{"uid":"476a77c741575e4e","reportUrl":"https://novasamatech.github.io/test-runner/3856//#testresult/476a77c741575e4e","status":"passed","time":{"start":1695974567523,"stop":1695974568154,"duration":631}},{"uid":"d81421398f4748c7","reportUrl":"https://novasamatech.github.io/test-runner/3855//#testresult/d81421398f4748c7","status":"passed","time":{"start":1695960127497,"stop":1695960127841,"duration":344}},{"uid":"627708e0ef3dd9ee","reportUrl":"https://novasamatech.github.io/test-runner/3854//#testresult/627708e0ef3dd9ee","status":"passed","time":{"start":1695945790665,"stop":1695945791599,"duration":934}},{"uid":"7d29251bbc21d7ce","reportUrl":"https://novasamatech.github.io/test-runner/3853//#testresult/7d29251bbc21d7ce","status":"passed","time":{"start":1695931370590,"stop":1695931371203,"duration":613}},{"uid":"a84ad49bfc021fb","reportUrl":"https://novasamatech.github.io/test-runner/3852//#testresult/a84ad49bfc021fb","status":"passed","time":{"start":1695916944997,"stop":1695916945697,"duration":700}},{"uid":"5580294552f9b379","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/5580294552f9b379","status":"passed","time":{"start":1695902572198,"stop":1695902572542,"duration":344}},{"uid":"6f20f409d1f57a8c","reportUrl":"https://novasamatech.github.io/test-runner/3850//#testresult/6f20f409d1f57a8c","status":"passed","time":{"start":1695888128286,"stop":1695888128773,"duration":487}},{"uid":"aef81670a0fd4494","reportUrl":"https://novasamatech.github.io/test-runner/3849//#testresult/aef81670a0fd4494","status":"passed","time":{"start":1695873733772,"stop":1695873734306,"duration":534}},{"uid":"a7e9ca2f72ff79c8","reportUrl":"https://novasamatech.github.io/test-runner/3848//#testresult/a7e9ca2f72ff79c8","status":"passed","time":{"start":1695859354002,"stop":1695859354364,"duration":362}},{"uid":"2024c0ade94b7e38","reportUrl":"https://novasamatech.github.io/test-runner/3847//#testresult/2024c0ade94b7e38","status":"passed","time":{"start":1695844961951,"stop":1695844962489,"duration":538}},{"uid":"5315fa6b07243c29","reportUrl":"https://novasamatech.github.io/test-runner/3846//#testresult/5315fa6b07243c29","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 27 Sep 2023 16:03:30 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695830609981,"stop":1695830610419,"duration":438}},{"uid":"39a67acf2035571f","reportUrl":"https://novasamatech.github.io/test-runner/3845//#testresult/39a67acf2035571f","status":"passed","time":{"start":1695816128736,"stop":1695816129439,"duration":703}},{"uid":"eee53dd2efcbc9c5","reportUrl":"https://novasamatech.github.io/test-runner/3844//#testresult/eee53dd2efcbc9c5","status":"passed","time":{"start":1695801741201,"stop":1695801741828,"duration":627}},{"uid":"6f837d954648cf8a","reportUrl":"https://novasamatech.github.io/test-runner/3843//#testresult/6f837d954648cf8a","status":"passed","time":{"start":1695787329862,"stop":1695787330344,"duration":482}},{"uid":"f27e8351c974e879","reportUrl":"https://novasamatech.github.io/test-runner/3842//#testresult/f27e8351c974e879","status":"passed","time":{"start":1695772970354,"stop":1695772970852,"duration":498}},{"uid":"a2d1c5d88538b218","reportUrl":"https://novasamatech.github.io/test-runner/3841//#testresult/a2d1c5d88538b218","status":"passed","time":{"start":1695758544763,"stop":1695758545396,"duration":633}},{"uid":"4bc2374f3f8d3923","reportUrl":"https://novasamatech.github.io/test-runner/3840//#testresult/4bc2374f3f8d3923","status":"passed","time":{"start":1695744139139,"stop":1695744139656,"duration":517}},{"uid":"ffd145c76db1bcf2","reportUrl":"https://novasamatech.github.io/test-runner/3839//#testresult/ffd145c76db1bcf2","status":"passed","time":{"start":1695729749190,"stop":1695729749683,"duration":493}},{"uid":"d20ab53651f58bd","reportUrl":"https://novasamatech.github.io/test-runner/3838//#testresult/d20ab53651f58bd","status":"passed","time":{"start":1695715341593,"stop":1695715342032,"duration":439}}]},"tags":[]},"source":"5280636597389e0.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}