{"uid":"b4d4c6d85b2f533f","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1696003427905,"stop":1696003427954,"duration":49},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:47 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:47 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:47 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:47 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"1cc5a22ad9ff08a2","name":"stdout","source":"1cc5a22ad9ff08a2.txt","type":"text/plain","size":1098}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az589-427"},{"name":"thread","value":"2176-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d338962b2c257260","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:32 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696003412768,"stop":1696003412817,"duration":49}},{"uid":"c564339db8722a8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 16:03:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696003397625,"stop":1696003397680,"duration":55}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":214,"unknown":0,"total":218},"items":[{"uid":"d2381ae3b4362a62","reportUrl":"https://novasamatech.github.io/test-runner/3857//#testresult/d2381ae3b4362a62","status":"passed","time":{"start":1695988934093,"stop":1695988934136,"duration":43}},{"uid":"6bacb5014e09082c","reportUrl":"https://novasamatech.github.io/test-runner/3856//#testresult/6bacb5014e09082c","status":"passed","time":{"start":1695974568159,"stop":1695974568469,"duration":310}},{"uid":"635ba1d3d30d8b49","reportUrl":"https://novasamatech.github.io/test-runner/3855//#testresult/635ba1d3d30d8b49","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 29 Sep 2023 04:02:38 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695960158113,"stop":1695960158166,"duration":53}},{"uid":"4d8ab29d40f5d5a7","reportUrl":"https://novasamatech.github.io/test-runner/3854//#testresult/4d8ab29d40f5d5a7","status":"passed","time":{"start":1695945791604,"stop":1695945791909,"duration":305}},{"uid":"f57b9bdd7df3e178","reportUrl":"https://novasamatech.github.io/test-runner/3853//#testresult/f57b9bdd7df3e178","status":"passed","time":{"start":1695931371210,"stop":1695931371517,"duration":307}},{"uid":"421f0cf4648988e","reportUrl":"https://novasamatech.github.io/test-runner/3852//#testresult/421f0cf4648988e","status":"passed","time":{"start":1695916945702,"stop":1695916945995,"duration":293}},{"uid":"921593f97bc458f0","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/921593f97bc458f0","status":"passed","time":{"start":1695902572545,"stop":1695902572611,"duration":66}},{"uid":"921171fc83cdd87","reportUrl":"https://novasamatech.github.io/test-runner/3850//#testresult/921171fc83cdd87","status":"passed","time":{"start":1695888128777,"stop":1695888128817,"duration":40}},{"uid":"31a81d08248c3bd1","reportUrl":"https://novasamatech.github.io/test-runner/3849//#testresult/31a81d08248c3bd1","status":"passed","time":{"start":1695873734309,"stop":1695873734387,"duration":78}},{"uid":"d59f90d45b0d26bc","reportUrl":"https://novasamatech.github.io/test-runner/3848//#testresult/d59f90d45b0d26bc","status":"passed","time":{"start":1695859354369,"stop":1695859354438,"duration":69}},{"uid":"6c06c1f661517a5","reportUrl":"https://novasamatech.github.io/test-runner/3847//#testresult/6c06c1f661517a5","status":"passed","time":{"start":1695844962493,"stop":1695844962560,"duration":67}},{"uid":"fb08a9a46ff94f2","reportUrl":"https://novasamatech.github.io/test-runner/3846//#testresult/fb08a9a46ff94f2","status":"passed","time":{"start":1695830610520,"stop":1695830610586,"duration":66}},{"uid":"1e8b69549046a3f6","reportUrl":"https://novasamatech.github.io/test-runner/3845//#testresult/1e8b69549046a3f6","status":"passed","time":{"start":1695816129443,"stop":1695816129764,"duration":321}},{"uid":"3d7d0b1788dedb03","reportUrl":"https://novasamatech.github.io/test-runner/3844//#testresult/3d7d0b1788dedb03","status":"passed","time":{"start":1695801741832,"stop":1695801742114,"duration":282}},{"uid":"b6b220af9074c677","reportUrl":"https://novasamatech.github.io/test-runner/3843//#testresult/b6b220af9074c677","status":"passed","time":{"start":1695787330349,"stop":1695787330422,"duration":73}},{"uid":"c77f2c4851b3610","reportUrl":"https://novasamatech.github.io/test-runner/3842//#testresult/c77f2c4851b3610","status":"passed","time":{"start":1695772970856,"stop":1695772970918,"duration":62}},{"uid":"fe742dc0b04b1b98","reportUrl":"https://novasamatech.github.io/test-runner/3841//#testresult/fe742dc0b04b1b98","status":"passed","time":{"start":1695758545401,"stop":1695758545708,"duration":307}},{"uid":"67c803d48d1b30ca","reportUrl":"https://novasamatech.github.io/test-runner/3840//#testresult/67c803d48d1b30ca","status":"passed","time":{"start":1695744128641,"stop":1695744128700,"duration":59}},{"uid":"d1290822ef04e131","reportUrl":"https://novasamatech.github.io/test-runner/3839//#testresult/d1290822ef04e131","status":"passed","time":{"start":1695729749687,"stop":1695729749755,"duration":68}},{"uid":"e774b8c2f42d09fd","reportUrl":"https://novasamatech.github.io/test-runner/3838//#testresult/e774b8c2f42d09fd","status":"passed","time":{"start":1695715342036,"stop":1695715342072,"duration":36}}]},"tags":[]},"source":"b4d4c6d85b2f533f.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}