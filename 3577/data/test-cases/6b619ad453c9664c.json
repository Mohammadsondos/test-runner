{"uid":"6b619ad453c9664c","name":"test_address_prefix[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"9eb5311f9a3089d9a4d7a7f5fcd78c89","time":{"start":1692043536139,"stop":1692043538956,"duration":2817},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7fcb56bc67d0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fcb56be7250>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fcb4da97e50>\nmethod = 'state_getMetadata'\nparams = ['0x1bcbb90f9217d54fc41434be07b0d924fe34febb87f9d1471fff7a19508966dc']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az950-261"},{"name":"thread","value":"1960-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fcb56be7250>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"129d8fc8e06b9e03","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692043518341,"stop":1692043520511,"duration":2170}},{"uid":"7271cba71b1a4a74","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692043500584,"stop":1692043502624,"duration":2040}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":576,"unknown":0,"total":582},"items":[{"uid":"8e0e30bb2c652e18","reportUrl":"https://novasamatech.github.io/test-runner/3576//#testresult/8e0e30bb2c652e18","status":"passed","time":{"start":1692029077323,"stop":1692029088356,"duration":11033}},{"uid":"921cae70ccc332ef","reportUrl":"https://novasamatech.github.io/test-runner/3575//#testresult/921cae70ccc332ef","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692014792596,"stop":1692014794711,"duration":2115}},{"uid":"8ab28f38509dabe5","reportUrl":"https://novasamatech.github.io/test-runner/3574//#testresult/8ab28f38509dabe5","status":"passed","time":{"start":1692000287883,"stop":1692000296912,"duration":9029}},{"uid":"59268504bec96cac","reportUrl":"https://novasamatech.github.io/test-runner/3573//#testresult/59268504bec96cac","status":"passed","time":{"start":1691985876522,"stop":1691985886742,"duration":10220}},{"uid":"6c678760fcf36a14","reportUrl":"https://novasamatech.github.io/test-runner/3572//#testresult/6c678760fcf36a14","status":"passed","time":{"start":1691971985096,"stop":1691971998873,"duration":13777}},{"uid":"7417bc7d0310cff4","reportUrl":"https://novasamatech.github.io/test-runner/3571//#testresult/7417bc7d0310cff4","status":"passed","time":{"start":1691957067969,"stop":1691957078190,"duration":10221}},{"uid":"410b053506d84904","reportUrl":"https://novasamatech.github.io/test-runner/3570//#testresult/410b053506d84904","status":"passed","time":{"start":1691942666340,"stop":1691942675653,"duration":9313}},{"uid":"ec3c8434a05e9619","reportUrl":"https://novasamatech.github.io/test-runner/3569//#testresult/ec3c8434a05e9619","status":"passed","time":{"start":1691928294399,"stop":1691928304245,"duration":9846}},{"uid":"757fa0546fe4893a","reportUrl":"https://novasamatech.github.io/test-runner/3568//#testresult/757fa0546fe4893a","status":"passed","time":{"start":1691913869109,"stop":1691913881612,"duration":12503}},{"uid":"50b20d0e4f364a38","reportUrl":"https://novasamatech.github.io/test-runner/3567//#testresult/50b20d0e4f364a38","status":"passed","time":{"start":1691899478730,"stop":1691899489320,"duration":10590}},{"uid":"d1c0a939b2d18dec","reportUrl":"https://novasamatech.github.io/test-runner/3566//#testresult/d1c0a939b2d18dec","status":"passed","time":{"start":1691885583003,"stop":1691885591877,"duration":8874}},{"uid":"dd0bb634a0b3fa4c","reportUrl":"https://novasamatech.github.io/test-runner/3565//#testresult/dd0bb634a0b3fa4c","status":"passed","time":{"start":1691870659185,"stop":1691870669915,"duration":10730}},{"uid":"8428efbfd8797e75","reportUrl":"https://novasamatech.github.io/test-runner/3564//#testresult/8428efbfd8797e75","status":"passed","time":{"start":1691856270001,"stop":1691856279540,"duration":9539}},{"uid":"ff6367555275ab5c","reportUrl":"https://novasamatech.github.io/test-runner/3562//#testresult/ff6367555275ab5c","status":"passed","time":{"start":1691827495655,"stop":1691827508750,"duration":13095}},{"uid":"4834dcd953783831","reportUrl":"https://novasamatech.github.io/test-runner/3563//#testresult/4834dcd953783831","status":"passed","time":{"start":1691841889730,"stop":1691841901448,"duration":11718}},{"uid":"e66f4eb401634ed9","reportUrl":"https://novasamatech.github.io/test-runner/3561//#testresult/e66f4eb401634ed9","status":"passed","time":{"start":1691813067627,"stop":1691813077091,"duration":9464}},{"uid":"95a7dfc914d7ac8e","reportUrl":"https://novasamatech.github.io/test-runner/3560//#testresult/95a7dfc914d7ac8e","status":"passed","time":{"start":1691799139937,"stop":1691799153257,"duration":13320}},{"uid":"7e978ff744389a6","reportUrl":"https://novasamatech.github.io/test-runner/3559//#testresult/7e978ff744389a6","status":"passed","time":{"start":1691784261777,"stop":1691784270079,"duration":8302}},{"uid":"93556bffe37a381e","reportUrl":"https://novasamatech.github.io/test-runner/3558//#testresult/93556bffe37a381e","status":"passed","time":{"start":1691769875464,"stop":1691769888209,"duration":12745}},{"uid":"fb02cd9ea6e7f641","reportUrl":"https://novasamatech.github.io/test-runner/3557//#testresult/fb02cd9ea6e7f641","status":"passed","time":{"start":1691755523294,"stop":1691755535702,"duration":12408}}]},"tags":[]},"source":"6b619ad453c9664c.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fcb56be7250>"]}