{"uid":"33ec7dbd41f96b35","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1711468869986,"stop":1711468870396,"duration":410},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f68f8f71600>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f68f8bbfa90>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f68f8bbfdc0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az525-520"},{"name":"thread","value":"2112-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4a744dd5d05798c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711468864606,"stop":1711468864956,"duration":350}},{"uid":"ad1f770931db182e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711468859121,"stop":1711468859495,"duration":374}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":51,"skipped":0,"passed":1007,"unknown":0,"total":1060},"items":[{"uid":"d76410b8557c4ee0","reportUrl":"https://novasamatech.github.io/test-runner/4948//#testresult/d76410b8557c4ee0","status":"passed","time":{"start":1711454469347,"stop":1711454469627,"duration":280}},{"uid":"7cd2a75cb6a36f76","reportUrl":"https://novasamatech.github.io/test-runner/4947//#testresult/7cd2a75cb6a36f76","status":"passed","time":{"start":1711440072367,"stop":1711440072719,"duration":352}},{"uid":"511e42d3aac4762c","reportUrl":"https://novasamatech.github.io/test-runner/4946//#testresult/511e42d3aac4762c","status":"passed","time":{"start":1711425678530,"stop":1711425678748,"duration":218}},{"uid":"659b076f1dac0cae","reportUrl":"https://novasamatech.github.io/test-runner/4945//#testresult/659b076f1dac0cae","status":"passed","time":{"start":1711411296870,"stop":1711411297115,"duration":245}},{"uid":"b7d85a3ea954b385","reportUrl":"https://novasamatech.github.io/test-runner/4944//#testresult/b7d85a3ea954b385","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711396875711,"stop":1711396875854,"duration":143}},{"uid":"29cbe90859b89b82","reportUrl":"https://novasamatech.github.io/test-runner/4943//#testresult/29cbe90859b89b82","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711382484599,"stop":1711382484765,"duration":166}},{"uid":"908935329f35f04","reportUrl":"https://novasamatech.github.io/test-runner/4942//#testresult/908935329f35f04","status":"passed","time":{"start":1711368072733,"stop":1711368073397,"duration":664}},{"uid":"dc4c28e8a6939a61","reportUrl":"https://novasamatech.github.io/test-runner/4941//#testresult/dc4c28e8a6939a61","status":"passed","time":{"start":1711353664603,"stop":1711353664824,"duration":221}},{"uid":"37d2b588eac8bf2a","reportUrl":"https://novasamatech.github.io/test-runner/4940//#testresult/37d2b588eac8bf2a","status":"passed","time":{"start":1711339277946,"stop":1711339278234,"duration":288}},{"uid":"75ee3b7faf858485","reportUrl":"https://novasamatech.github.io/test-runner/4939//#testresult/75ee3b7faf858485","status":"passed","time":{"start":1711324912263,"stop":1711324913052,"duration":789}},{"uid":"2dbec348cc30e749","reportUrl":"https://novasamatech.github.io/test-runner/4938//#testresult/2dbec348cc30e749","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711310483346,"stop":1711310483504,"duration":158}},{"uid":"f7d9564529229622","reportUrl":"https://novasamatech.github.io/test-runner/4937//#testresult/f7d9564529229622","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711296064850,"stop":1711296064878,"duration":28}},{"uid":"e0171112b9a57c9d","reportUrl":"https://novasamatech.github.io/test-runner/4936//#testresult/e0171112b9a57c9d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711281687658,"stop":1711281687721,"duration":63}},{"uid":"b6d71052594f70b7","reportUrl":"https://novasamatech.github.io/test-runner/4935//#testresult/b6d71052594f70b7","status":"passed","time":{"start":1711267264458,"stop":1711267264952,"duration":494}},{"uid":"ab92035ba856773a","reportUrl":"https://novasamatech.github.io/test-runner/4934//#testresult/ab92035ba856773a","status":"passed","time":{"start":1711252865454,"stop":1711252865707,"duration":253}},{"uid":"473614f5b37f29f0","reportUrl":"https://novasamatech.github.io/test-runner/4933//#testresult/473614f5b37f29f0","status":"passed","time":{"start":1711238497749,"stop":1711238497998,"duration":249}},{"uid":"3259e913c1c3b048","reportUrl":"https://novasamatech.github.io/test-runner/4932//#testresult/3259e913c1c3b048","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711224079931,"stop":1711224079989,"duration":58}},{"uid":"f0df4e570d75ff87","reportUrl":"https://novasamatech.github.io/test-runner/4931//#testresult/f0df4e570d75ff87","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711209671774,"stop":1711209672072,"duration":298}},{"uid":"9339741ae2c2d0be","reportUrl":"https://novasamatech.github.io/test-runner/4930//#testresult/9339741ae2c2d0be","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1711195275662,"stop":1711195275731,"duration":69}},{"uid":"9a6ee700dc4600c7","reportUrl":"https://novasamatech.github.io/test-runner/4929//#testresult/9a6ee700dc4600c7","status":"passed","time":{"start":1711180864108,"stop":1711180864797,"duration":689}}]},"tags":[]},"source":"33ec7dbd41f96b35.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}