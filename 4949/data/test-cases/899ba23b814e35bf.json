{"uid":"899ba23b814e35bf","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1711468880208,"stop":1711468880604,"duration":396},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fdb9de854e0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fdb9cbf1cf0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fdb9cbf2bf0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az525-520"},{"name":"thread","value":"2115-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c9cad7e8bfa65e3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711468874793,"stop":1711468875174,"duration":381}},{"uid":"cd71440111da46aa","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711468869372,"stop":1711468869759,"duration":387}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":41,"skipped":0,"passed":566,"unknown":0,"total":608},"items":[{"uid":"f0fde1504688e525","reportUrl":"https://novasamatech.github.io/test-runner/4948//#testresult/f0fde1504688e525","status":"passed","time":{"start":1711454468597,"stop":1711454468977,"duration":380}},{"uid":"dd7894a8325634c4","reportUrl":"https://novasamatech.github.io/test-runner/4947//#testresult/dd7894a8325634c4","status":"passed","time":{"start":1711440072245,"stop":1711440072364,"duration":119}},{"uid":"74dea6a3e54333d3","reportUrl":"https://novasamatech.github.io/test-runner/4946//#testresult/74dea6a3e54333d3","status":"passed","time":{"start":1711425678371,"stop":1711425678526,"duration":155}},{"uid":"81abec7a2d7a724e","reportUrl":"https://novasamatech.github.io/test-runner/4945//#testresult/81abec7a2d7a724e","status":"passed","time":{"start":1711411296566,"stop":1711411296754,"duration":188}},{"uid":"44e03024a7591d56","reportUrl":"https://novasamatech.github.io/test-runner/4944//#testresult/44e03024a7591d56","status":"passed","time":{"start":1711396879030,"stop":1711396879355,"duration":325}},{"uid":"d98379e27670dec4","reportUrl":"https://novasamatech.github.io/test-runner/4943//#testresult/d98379e27670dec4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711382483968,"stop":1711382484212,"duration":244}},{"uid":"fb93430e5c1020a3","reportUrl":"https://novasamatech.github.io/test-runner/4942//#testresult/fb93430e5c1020a3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711368093403,"stop":1711368093710,"duration":307}},{"uid":"37a46017a4663682","reportUrl":"https://novasamatech.github.io/test-runner/4941//#testresult/37a46017a4663682","status":"passed","time":{"start":1711353664381,"stop":1711353664516,"duration":135}},{"uid":"3aca126d2e2c9d34","reportUrl":"https://novasamatech.github.io/test-runner/4940//#testresult/3aca126d2e2c9d34","status":"passed","time":{"start":1711339292418,"stop":1711339292580,"duration":162}},{"uid":"b44ae222dbafa6","reportUrl":"https://novasamatech.github.io/test-runner/4939//#testresult/b44ae222dbafa6","status":"passed","time":{"start":1711324912034,"stop":1711324912622,"duration":588}},{"uid":"11f92fa2fba4aefc","reportUrl":"https://novasamatech.github.io/test-runner/4938//#testresult/11f92fa2fba4aefc","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711310482812,"stop":1711310482955,"duration":143}},{"uid":"7dfc6be29d5ef5f8","reportUrl":"https://novasamatech.github.io/test-runner/4937//#testresult/7dfc6be29d5ef5f8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711296074527,"stop":1711296074597,"duration":70}},{"uid":"7242258133343fa4","reportUrl":"https://novasamatech.github.io/test-runner/4936//#testresult/7242258133343fa4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711281687374,"stop":1711281687403,"duration":29}},{"uid":"bb2d933e64f43489","reportUrl":"https://novasamatech.github.io/test-runner/4935//#testresult/bb2d933e64f43489","status":"passed","time":{"start":1711267264333,"stop":1711267264683,"duration":350}},{"uid":"f6a310963472d99","reportUrl":"https://novasamatech.github.io/test-runner/4934//#testresult/f6a310963472d99","status":"passed","time":{"start":1711252864468,"stop":1711252864629,"duration":161}},{"uid":"ae2a8fdbd5ac8ffa","reportUrl":"https://novasamatech.github.io/test-runner/4933//#testresult/ae2a8fdbd5ac8ffa","status":"passed","time":{"start":1711238496939,"stop":1711238497226,"duration":287}},{"uid":"7d3138e6c078b752","reportUrl":"https://novasamatech.github.io/test-runner/4932//#testresult/7d3138e6c078b752","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711224079832,"stop":1711224079904,"duration":72}},{"uid":"bd7b4eef522ffffa","reportUrl":"https://novasamatech.github.io/test-runner/4931//#testresult/bd7b4eef522ffffa","status":"passed","time":{"start":1711209681685,"stop":1711209682288,"duration":603}},{"uid":"217f2db3478161cb","reportUrl":"https://novasamatech.github.io/test-runner/4930//#testresult/217f2db3478161cb","status":"passed","time":{"start":1711195275081,"stop":1711195275216,"duration":135}},{"uid":"fbe87f98588c0159","reportUrl":"https://novasamatech.github.io/test-runner/4929//#testresult/fbe87f98588c0159","status":"passed","time":{"start":1711180863600,"stop":1711180864413,"duration":813}}]},"tags":[]},"source":"899ba23b814e35bf.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}