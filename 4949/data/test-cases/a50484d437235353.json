{"uid":"a50484d437235353","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1711468869554,"stop":1711468869940,"duration":386},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f58f1f015a0>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f58f1d90ee0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f58f1d93bb0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az525-520"},{"name":"thread","value":"2109-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"be4a5a534de7f57a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711468864101,"stop":1711468864521,"duration":420}},{"uid":"2cf5c21f263bda64","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711468858570,"stop":1711468858990,"duration":420}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":47,"skipped":0,"passed":1010,"unknown":0,"total":1060},"items":[{"uid":"72858765a0a35a14","reportUrl":"https://novasamatech.github.io/test-runner/4948//#testresult/72858765a0a35a14","status":"passed","time":{"start":1711454468546,"stop":1711454469021,"duration":475}},{"uid":"4d133a619c70635c","reportUrl":"https://novasamatech.github.io/test-runner/4947//#testresult/4d133a619c70635c","status":"passed","time":{"start":1711440067029,"stop":1711440067294,"duration":265}},{"uid":"fcc1bde7947422bc","reportUrl":"https://novasamatech.github.io/test-runner/4946//#testresult/fcc1bde7947422bc","status":"passed","time":{"start":1711425678398,"stop":1711425678703,"duration":305}},{"uid":"f808aea20f2fbaf8","reportUrl":"https://novasamatech.github.io/test-runner/4945//#testresult/f808aea20f2fbaf8","status":"passed","time":{"start":1711411296612,"stop":1711411296916,"duration":304}},{"uid":"a9dae55d723a53d6","reportUrl":"https://novasamatech.github.io/test-runner/4944//#testresult/a9dae55d723a53d6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711396874717,"stop":1711396874858,"duration":141}},{"uid":"4ff42e6001489cf6","reportUrl":"https://novasamatech.github.io/test-runner/4943//#testresult/4ff42e6001489cf6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711382474048,"stop":1711382474195,"duration":147}},{"uid":"304191c04315cf9","reportUrl":"https://novasamatech.github.io/test-runner/4942//#testresult/304191c04315cf9","status":"passed","time":{"start":1711368072345,"stop":1711368072891,"duration":546}},{"uid":"c1685a687f0ba30a","reportUrl":"https://novasamatech.github.io/test-runner/4941//#testresult/c1685a687f0ba30a","status":"passed","time":{"start":1711353664367,"stop":1711353664604,"duration":237}},{"uid":"b4e21f11322929b1","reportUrl":"https://novasamatech.github.io/test-runner/4940//#testresult/b4e21f11322929b1","status":"passed","time":{"start":1711339277725,"stop":1711339277943,"duration":218}},{"uid":"c6a17c87ad852a44","reportUrl":"https://novasamatech.github.io/test-runner/4939//#testresult/c6a17c87ad852a44","status":"passed","time":{"start":1711324911850,"stop":1711324912410,"duration":560}},{"uid":"6f23531a4ced56a4","reportUrl":"https://novasamatech.github.io/test-runner/4938//#testresult/6f23531a4ced56a4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711310472767,"stop":1711310472907,"duration":140}},{"uid":"17f64e7c6376e06c","reportUrl":"https://novasamatech.github.io/test-runner/4937//#testresult/17f64e7c6376e06c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711296065272,"stop":1711296065303,"duration":31}},{"uid":"e31d52d6b195dc89","reportUrl":"https://novasamatech.github.io/test-runner/4936//#testresult/e31d52d6b195dc89","status":"passed","time":{"start":1711281672656,"stop":1711281672884,"duration":228}},{"uid":"90658569b2519c25","reportUrl":"https://novasamatech.github.io/test-runner/4935//#testresult/90658569b2519c25","status":"passed","time":{"start":1711267264115,"stop":1711267264455,"duration":340}},{"uid":"4d58814fcea5a1f2","reportUrl":"https://novasamatech.github.io/test-runner/4934//#testresult/4d58814fcea5a1f2","status":"passed","time":{"start":1711252864590,"stop":1711252864836,"duration":246}},{"uid":"8577ad793781bd97","reportUrl":"https://novasamatech.github.io/test-runner/4933//#testresult/8577ad793781bd97","status":"passed","time":{"start":1711238497031,"stop":1711238497270,"duration":239}},{"uid":"7c106b23151f64b1","reportUrl":"https://novasamatech.github.io/test-runner/4932//#testresult/7c106b23151f64b1","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711224069625,"stop":1711224069669,"duration":44}},{"uid":"4f51265125806312","reportUrl":"https://novasamatech.github.io/test-runner/4931//#testresult/4f51265125806312","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711209671303,"stop":1711209671602,"duration":299}},{"uid":"3675129fc9c67a7e","reportUrl":"https://novasamatech.github.io/test-runner/4930//#testresult/3675129fc9c67a7e","status":"passed","time":{"start":1711195275018,"stop":1711195275253,"duration":235}},{"uid":"4b42df3c547514e4","reportUrl":"https://novasamatech.github.io/test-runner/4929//#testresult/4b42df3c547514e4","status":"passed","time":{"start":1711180863419,"stop":1711180863965,"duration":546}}]},"tags":[]},"source":"a50484d437235353.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}