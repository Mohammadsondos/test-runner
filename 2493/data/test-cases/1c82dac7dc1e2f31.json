{"uid":"1c82dac7dc1e2f31","name":"test_precision[Test for XX network]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"e555e4a1ce87171c73257fbc649e4460","time":{"start":1676866408951,"stop":1676866414864,"duration":5913},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f8ee33f4e80>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f8ee33f74c0>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 7}'\nopcode = 1\n\n    def send(self, payload, opcode=ABNF.OPCODE_TEXT):\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f8ee33f74c0>\nframe = <websocket._abnf.ABNF object at 0x7f8f1b61b2b0>\n\n    def send_frame(self, frame):\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f8ee33f74c0>\ndata = b'\\x81\\xc4P\\xdd\\x8c\\x95+\\xff\\xe6\\xe6?\\xb3\\xfe\\xe53\\xff\\xb6\\xb5r\\xef\\xa2\\xa5r\\xf1\\xac\\xb7=\\xb8\\xf8\\xfd?\\xb9\\xae\\xafp\\xf...xb4\\xe2\\xca7\\xb8\\xf8\\xdd5\\xbc\\xe8\\xb7|\\xfd\\xae\\xe51\\xaf\\xed\\xf8#\\xff\\xb6\\xb5\\x0b\\x80\\xa0\\xb5r\\xb4\\xe8\\xb7j\\xfd\\xbb\\xe8'\n\n    def _send(self, data):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc4P\\xdd\\x8c\\x95+\\xff\\xe6\\xe6?\\xb3\\xfe\\xe53\\xff\\xb6\\xb5r\\xef\\xa2\\xa5r\\xf1\\xac\\xb7=\\xb8\\xf8\\xfd?\\xb9\\xae\\xafp\\xf...xb4\\xe2\\xca7\\xb8\\xf8\\xdd5\\xbc\\xe8\\xb7|\\xfd\\xae\\xe51\\xaf\\xed\\xf8#\\xff\\xb6\\xb5\\x0b\\x80\\xa0\\xb5r\\xb4\\xe8\\xb7j\\xfd\\xbb\\xe8'\n\n    def send(sock, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_network_parameters.TestPrecision object at 0x7f8f52716a70>\nchain = <scripts.utils.chain_model.Chain object at 0x7f8f52a0e230>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1117: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:874: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:719: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7f8ee33f4e80>\nmethod = 'chain_getHead', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f8ee33f74c0>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"chain_getHead\", \"params\": [], \"id\": 7}'\nopcode = 1\n\n    def send(self, payload, opcode=ABNF.OPCODE_TEXT):\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f8ee33f74c0>\nframe = <websocket._abnf.ABNF object at 0x7f8f1b61b2b0>\n\n    def send_frame(self, frame):\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7f8ee33f74c0>\ndata = b'\\x81\\xc4P\\xdd\\x8c\\x95+\\xff\\xe6\\xe6?\\xb3\\xfe\\xe53\\xff\\xb6\\xb5r\\xef\\xa2\\xa5r\\xf1\\xac\\xb7=\\xb8\\xf8\\xfd?\\xb9\\xae\\xafp\\xf...xb4\\xe2\\xca7\\xb8\\xf8\\xdd5\\xbc\\xe8\\xb7|\\xfd\\xae\\xe51\\xaf\\xed\\xf8#\\xff\\xb6\\xb5\\x0b\\x80\\xa0\\xb5r\\xb4\\xe8\\xb7j\\xfd\\xbb\\xe8'\n\n    def _send(self, data):\n>       return send(self.sock, data)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc4P\\xdd\\x8c\\x95+\\xff\\xe6\\xe6?\\xb3\\xfe\\xe53\\xff\\xb6\\xb5r\\xef\\xa2\\xa5r\\xf1\\xac\\xb7=\\xb8\\xf8\\xfd?\\xb9\\xae\\xafp\\xf...xb4\\xe2\\xca7\\xb8\\xf8\\xdd5\\xbc\\xe8\\xb7|\\xfd\\xae\\xe51\\xaf\\xed\\xf8#\\xff\\xb6\\xb5\\x0b\\x80\\xa0\\xb5r\\xb4\\xe8\\xb7j\\xfd\\xbb\\xe8'\n\n    def send(sock, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:143: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_network_parameters.TestPrecision object at 0x7f8f52716a70>\nchain = <scripts.utils.chain_model.Chain object at 0x7f8f52a0e230>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1117: in init_runtime\n    block_hash = self.get_chain_head()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:874: in get_chain_head\n    response = self.rpc_request(\"chain_getHead\", [])\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:719: in rpc_request\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"2a340373157c1af9","name":"stdout","source":"2a340373157c1af9.txt","type":"text/plain","size":326}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az454-654"},{"name":"thread","value":"1640-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f8f52a0e230>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"94270962313e0e67","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1676866389768,"stop":1676866398819,"duration":9051}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":57,"skipped":0,"passed":427,"unknown":0,"total":484},"items":[{"uid":"22f878e28c8adba0","reportUrl":"https://nova-wallet.github.io/test-runner/2492//#testresult/22f878e28c8adba0","status":"passed","time":{"start":1676852581768,"stop":1676852585811,"duration":4043}},{"uid":"f46ad731a0763341","reportUrl":"https://nova-wallet.github.io/test-runner/2491//#testresult/f46ad731a0763341","status":"passed","time":{"start":1676837398929,"stop":1676837400873,"duration":1944}},{"uid":"69f8a308eb9eaa90","reportUrl":"https://nova-wallet.github.io/test-runner/2490//#testresult/69f8a308eb9eaa90","status":"passed","time":{"start":1676823080374,"stop":1676823083911,"duration":3537}},{"uid":"b66d3a3f8736e8c4","reportUrl":"https://nova-wallet.github.io/test-runner/2489//#testresult/b66d3a3f8736e8c4","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1676808870978,"stop":1676808876208,"duration":5230}},{"uid":"a34f5603cf75b0f0","reportUrl":"https://nova-wallet.github.io/test-runner/2488//#testresult/a34f5603cf75b0f0","status":"passed","time":{"start":1676794322317,"stop":1676794325634,"duration":3317}},{"uid":"e192570547faadf1","reportUrl":"https://nova-wallet.github.io/test-runner/2487//#testresult/e192570547faadf1","status":"passed","time":{"start":1676779813941,"stop":1676779816079,"duration":2138}},{"uid":"19dcacf6d265818e","reportUrl":"https://nova-wallet.github.io/test-runner/2485//#testresult/19dcacf6d265818e","status":"passed","time":{"start":1676751112868,"stop":1676751121386,"duration":8518}},{"uid":"aa97a34ba45d482f","reportUrl":"https://nova-wallet.github.io/test-runner/2484//#testresult/aa97a34ba45d482f","status":"passed","time":{"start":1676736635377,"stop":1676736639001,"duration":3624}},{"uid":"bd48b9dc9468f8c5","reportUrl":"https://nova-wallet.github.io/test-runner/2483//#testresult/bd48b9dc9468f8c5","status":"passed","time":{"start":1676722285467,"stop":1676722287821,"duration":2354}},{"uid":"89481485db2f95a","reportUrl":"https://nova-wallet.github.io/test-runner/2482//#testresult/89481485db2f95a","status":"passed","time":{"start":1676707958378,"stop":1676707961252,"duration":2874}},{"uid":"288d330e5db241de","reportUrl":"https://nova-wallet.github.io/test-runner/2480//#testresult/288d330e5db241de","status":"passed","time":{"start":1676679758646,"stop":1676679764081,"duration":5435}},{"uid":"169c1f7d7a5b7394","reportUrl":"https://nova-wallet.github.io/test-runner/2479//#testresult/169c1f7d7a5b7394","status":"passed","time":{"start":1676664706365,"stop":1676664710867,"duration":4502}},{"uid":"96d34de1c487a7b7","reportUrl":"https://nova-wallet.github.io/test-runner/2478//#testresult/96d34de1c487a7b7","status":"passed","time":{"start":1676650353384,"stop":1676650356092,"duration":2708}},{"uid":"3330df509ce3c95d","reportUrl":"https://nova-wallet.github.io/test-runner/2477//#testresult/3330df509ce3c95d","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1676635903547,"stop":1676635905500,"duration":1953}},{"uid":"ad3607f5f5b4e253","reportUrl":"https://nova-wallet.github.io/test-runner/2476//#testresult/ad3607f5f5b4e253","status":"passed","time":{"start":1676621477507,"stop":1676621485716,"duration":8209}},{"uid":"22d52bbce4033194","reportUrl":"https://nova-wallet.github.io/test-runner/2475//#testresult/22d52bbce4033194","status":"passed","time":{"start":1676607080155,"stop":1676607087502,"duration":7347}},{"uid":"5bb84d2db9cf4d2f","reportUrl":"https://nova-wallet.github.io/test-runner/2474//#testresult/5bb84d2db9cf4d2f","status":"passed","time":{"start":1676593423194,"stop":1676593430615,"duration":7421}},{"uid":"363319a51db3c9ed","reportUrl":"https://nova-wallet.github.io/test-runner/2473//#testresult/363319a51db3c9ed","status":"passed","time":{"start":1676578234163,"stop":1676578236486,"duration":2323}},{"uid":"1879ed742d086bad","reportUrl":"https://nova-wallet.github.io/test-runner/2472//#testresult/1879ed742d086bad","status":"passed","time":{"start":1676563882334,"stop":1676563885376,"duration":3042}},{"uid":"9f05ddad556aa0ac","reportUrl":"https://nova-wallet.github.io/test-runner/2471//#testresult/9f05ddad556aa0ac","status":"passed","time":{"start":1676549630763,"stop":1676549633456,"duration":2693}}]},"tags":[]},"source":"1c82dac7dc1e2f31.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f8f52a0e230>"]}