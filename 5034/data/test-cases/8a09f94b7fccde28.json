{"uid":"8a09f94b7fccde28","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1712678473218,"stop":1712678473587,"duration":369},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f24023fd540>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f2400147d60>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f2400147880>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1022-575"},{"name":"thread","value":"2088-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"608ecd41bcbf6a33","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712678467774,"stop":1712678468158,"duration":384}},{"uid":"5a4510c6c9f6671f","status":"failed","statusDetails":"AssertionError: Difference in block numbers is greater than 3:            wss_block_number=19619139, rpc_block_number=19619135\nassert 4 <= 3\n +  where 4 = abs((19619139 - 19619135))","time":{"start":1712678461902,"stop":1712678462705,"duration":803}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":46,"skipped":0,"passed":608,"unknown":0,"total":657},"items":[{"uid":"6500b3ddcea97dac","reportUrl":"https://novasamatech.github.io/test-runner/5033//#testresult/6500b3ddcea97dac","status":"passed","time":{"start":1712664086727,"stop":1712664087056,"duration":329}},{"uid":"1c5b49aef5550627","reportUrl":"https://novasamatech.github.io/test-runner/5032//#testresult/1c5b49aef5550627","status":"passed","time":{"start":1712649670327,"stop":1712649670477,"duration":150}},{"uid":"948e06daf4b3100a","reportUrl":"https://novasamatech.github.io/test-runner/5031//#testresult/948e06daf4b3100a","status":"passed","time":{"start":1712635269080,"stop":1712635269617,"duration":537}},{"uid":"68b1992c4c1c2afc","reportUrl":"https://novasamatech.github.io/test-runner/5030//#testresult/68b1992c4c1c2afc","status":"passed","time":{"start":1712620904389,"stop":1712620904729,"duration":340}},{"uid":"ba5cc1d9c194b54","reportUrl":"https://novasamatech.github.io/test-runner/5029//#testresult/ba5cc1d9c194b54","status":"passed","time":{"start":1712606454177,"stop":1712606454354,"duration":177}},{"uid":"1a7ba4ef3376690e","reportUrl":"https://novasamatech.github.io/test-runner/5028//#testresult/1a7ba4ef3376690e","status":"passed","time":{"start":1712592063182,"stop":1712592063392,"duration":210}},{"uid":"304a5304cc0e5be1","reportUrl":"https://novasamatech.github.io/test-runner/5027//#testresult/304a5304cc0e5be1","status":"passed","time":{"start":1712577669248,"stop":1712577669570,"duration":322}},{"uid":"37e472a957818516","reportUrl":"https://novasamatech.github.io/test-runner/5026//#testresult/37e472a957818516","status":"passed","time":{"start":1712563273023,"stop":1712563273263,"duration":240}},{"uid":"23f6fc06083c37ff","reportUrl":"https://novasamatech.github.io/test-runner/5025//#testresult/23f6fc06083c37ff","status":"passed","time":{"start":1712548860494,"stop":1712548861335,"duration":841}},{"uid":"4c7ad4a5482eeed3","reportUrl":"https://novasamatech.github.io/test-runner/5024//#testresult/4c7ad4a5482eeed3","status":"passed","time":{"start":1712534527514,"stop":1712534528176,"duration":662}},{"uid":"f228b480ce1bf8c","reportUrl":"https://novasamatech.github.io/test-runner/5023//#testresult/f228b480ce1bf8c","status":"passed","time":{"start":1712520084181,"stop":1712520084852,"duration":671}},{"uid":"7f018c8e7b0230c8","reportUrl":"https://novasamatech.github.io/test-runner/5022//#testresult/7f018c8e7b0230c8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712505678432,"stop":1712505678598,"duration":166}},{"uid":"77dfc125f84e32b6","reportUrl":"https://novasamatech.github.io/test-runner/5021//#testresult/77dfc125f84e32b6","status":"failed","statusDetails":"AssertionError: Difference in block numbers is greater than 3:            wss_block_number=19603684, rpc_block_number=19603678\nassert 6 <= 3\n +  where 6 = abs((19603684 - 19603678))","time":{"start":1712491275688,"stop":1712491275941,"duration":253}},{"uid":"e10b23bea531515a","reportUrl":"https://novasamatech.github.io/test-runner/5020//#testresult/e10b23bea531515a","status":"passed","time":{"start":1712476861721,"stop":1712476862131,"duration":410}},{"uid":"d729368455a97526","reportUrl":"https://novasamatech.github.io/test-runner/5019//#testresult/d729368455a97526","status":"passed","time":{"start":1712462467258,"stop":1712462467965,"duration":707}},{"uid":"80e6a19bacdf2a4c","reportUrl":"https://novasamatech.github.io/test-runner/5018//#testresult/80e6a19bacdf2a4c","status":"passed","time":{"start":1712448107675,"stop":1712448108402,"duration":727}},{"uid":"38bce3541048f839","reportUrl":"https://novasamatech.github.io/test-runner/5017//#testresult/38bce3541048f839","status":"passed","time":{"start":1712433659478,"stop":1712433660119,"duration":641}},{"uid":"7ddac702a7338459","reportUrl":"https://novasamatech.github.io/test-runner/5016//#testresult/7ddac702a7338459","status":"passed","time":{"start":1712419267358,"stop":1712419267966,"duration":608}},{"uid":"b4f5b81fc5aef13c","reportUrl":"https://novasamatech.github.io/test-runner/5015//#testresult/b4f5b81fc5aef13c","status":"passed","time":{"start":1712404869872,"stop":1712404870051,"duration":179}},{"uid":"2cb9064789ac1047","reportUrl":"https://novasamatech.github.io/test-runner/5014//#testresult/2cb9064789ac1047","status":"passed","time":{"start":1712390461884,"stop":1712390462020,"duration":136}}]},"tags":[]},"source":"8a09f94b7fccde28.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}