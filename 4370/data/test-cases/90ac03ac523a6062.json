{"uid":"90ac03ac523a6062","name":"test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6b2d505052053a5da93000b537edc6f1","time":{"start":1703232794679,"stop":1703232794679,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n        connection = create_connection_by_url(data[\"url\"])\n>       get_properties(connection)\n\ntests/conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:667: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:571: in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f9b31b3fb80>\nmethod = 'state_getRuntimeVersion'\nparams = ['0xddc7eb28d478177092112a0c2f1f739ebb67f7c8fb23a6ddfc2d4d9f8a13272c']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1703232794679,"stop":1703232794878,"duration":199},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 24, in connection_by_url\n    get_properties(connection)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 667, in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 571, in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az847-406"},{"name":"thread","value":"2062-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"241bf71e25e62f88","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703232779399,"stop":1703232779399,"duration":0}},{"uid":"fff341613952e418","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703232764075,"stop":1703232764075,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":102,"skipped":0,"passed":556,"unknown":0,"total":658},"items":[{"uid":"9d1bd03d89547068","reportUrl":"https://novasamatech.github.io/test-runner/4369//#testresult/9d1bd03d89547068","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703218182701,"stop":1703218182701,"duration":0}},{"uid":"f92e2d0e835cfe87","reportUrl":"https://novasamatech.github.io/test-runner/4368//#testresult/f92e2d0e835cfe87","status":"passed","time":{"start":1703203992039,"stop":1703203992039,"duration":0}},{"uid":"1e167d9615f8c154","reportUrl":"https://novasamatech.github.io/test-runner/4367//#testresult/1e167d9615f8c154","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703189443492,"stop":1703189443492,"duration":0}},{"uid":"83c7d04900be873a","reportUrl":"https://novasamatech.github.io/test-runner/4366//#testresult/83c7d04900be873a","status":"passed","time":{"start":1703176729538,"stop":1703176729538,"duration":0}},{"uid":"46bdcdcfcc37cd60","reportUrl":"https://novasamatech.github.io/test-runner/4365//#testresult/46bdcdcfcc37cd60","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703175248072,"stop":1703175248072,"duration":0}},{"uid":"fbbdc70119c93006","reportUrl":"https://novasamatech.github.io/test-runner/4364//#testresult/fbbdc70119c93006","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703160817178,"stop":1703160817178,"duration":0}},{"uid":"1c44bbda0758450e","reportUrl":"https://novasamatech.github.io/test-runner/4363//#testresult/1c44bbda0758450e","status":"passed","time":{"start":1703146174247,"stop":1703146174247,"duration":0}},{"uid":"ad99569c59e5fea0","reportUrl":"https://novasamatech.github.io/test-runner/4362//#testresult/ad99569c59e5fea0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703131709744,"stop":1703131709744,"duration":0}},{"uid":"c024cee89e1e34cd","reportUrl":"https://novasamatech.github.io/test-runner/4361//#testresult/c024cee89e1e34cd","status":"passed","time":{"start":1703117345166,"stop":1703117345166,"duration":0}},{"uid":"cf03b7510cd31820","reportUrl":"https://novasamatech.github.io/test-runner/4360//#testresult/cf03b7510cd31820","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703103008373,"stop":1703103008373,"duration":0}},{"uid":"63c76d0be5618a49","reportUrl":"https://novasamatech.github.io/test-runner/4359//#testresult/63c76d0be5618a49","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703088502804,"stop":1703088502804,"duration":0}},{"uid":"e1a82d9aaa0c1d81","reportUrl":"https://novasamatech.github.io/test-runner/4358//#testresult/e1a82d9aaa0c1d81","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703074142184,"stop":1703074142184,"duration":0}},{"uid":"943d126f8ca32054","reportUrl":"https://novasamatech.github.io/test-runner/4357//#testresult/943d126f8ca32054","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703059735333,"stop":1703059735333,"duration":0}},{"uid":"f0d1ab7190e85544","reportUrl":"https://novasamatech.github.io/test-runner/4356//#testresult/f0d1ab7190e85544","status":"passed","time":{"start":1703045246614,"stop":1703045246614,"duration":0}},{"uid":"ce61eda1d37d4fed","reportUrl":"https://novasamatech.github.io/test-runner/4355//#testresult/ce61eda1d37d4fed","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703030962408,"stop":1703030962408,"duration":0}},{"uid":"7c8fdc43337b0abb","reportUrl":"https://novasamatech.github.io/test-runner/4354//#testresult/7c8fdc43337b0abb","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1703016501095,"stop":1703016501095,"duration":0}},{"uid":"6bbce4bf7850cb73","reportUrl":"https://novasamatech.github.io/test-runner/4353//#testresult/6bbce4bf7850cb73","status":"passed","time":{"start":1703002254813,"stop":1703002254813,"duration":0}},{"uid":"dfd2937fe29db48","reportUrl":"https://novasamatech.github.io/test-runner/4352//#testresult/dfd2937fe29db48","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702987692117,"stop":1702987692117,"duration":0}},{"uid":"db0cf6f450e702fa","reportUrl":"https://novasamatech.github.io/test-runner/4351//#testresult/db0cf6f450e702fa","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702973258118,"stop":1702973258118,"duration":0}},{"uid":"89d04d1928329c7f","reportUrl":"https://novasamatech.github.io/test-runner/4350//#testresult/89d04d1928329c7f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1702958886596,"stop":1702958886596,"duration":0}}]},"tags":[]},"source":"90ac03ac523a6062.json","parameterValues":["{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"]}