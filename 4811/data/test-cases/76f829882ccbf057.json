{"uid":"76f829882ccbf057","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1709496068357,"stop":1709496068770,"duration":413},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f4ee0d85a50>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f4ee25f09d0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f4ee0c231c0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1493-626"},{"name":"thread","value":"2171-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d1a7efd4aa3ca0d0","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709496062936,"stop":1709496063325,"duration":389}},{"uid":"655fbd74101f564c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709496057460,"stop":1709496057825,"duration":365}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":15,"skipped":0,"passed":905,"unknown":0,"total":922},"items":[{"uid":"17327024bfaaf514","reportUrl":"https://novasamatech.github.io/test-runner/4810//#testresult/17327024bfaaf514","status":"passed","time":{"start":1709481661286,"stop":1709481661628,"duration":342}},{"uid":"988bcef2af117bcd","reportUrl":"https://novasamatech.github.io/test-runner/4809//#testresult/988bcef2af117bcd","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709467272883,"stop":1709467273262,"duration":379}},{"uid":"7640adaf665d380d","reportUrl":"https://novasamatech.github.io/test-runner/4808//#testresult/7640adaf665d380d","status":"passed","time":{"start":1709452855371,"stop":1709452855578,"duration":207}},{"uid":"9a902b04ac424c7","reportUrl":"https://novasamatech.github.io/test-runner/4807//#testresult/9a902b04ac424c7","status":"passed","time":{"start":1709438467933,"stop":1709438468518,"duration":585}},{"uid":"ae4db4157d00a4ed","reportUrl":"https://novasamatech.github.io/test-runner/4806//#testresult/ae4db4157d00a4ed","status":"passed","time":{"start":1709424105941,"stop":1709424106287,"duration":346}},{"uid":"366338077a74f4a8","reportUrl":"https://novasamatech.github.io/test-runner/4805//#testresult/366338077a74f4a8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709409669286,"stop":1709409669598,"duration":312}},{"uid":"431db33230e480a1","reportUrl":"https://novasamatech.github.io/test-runner/4804//#testresult/431db33230e480a1","status":"passed","time":{"start":1709395274811,"stop":1709395275119,"duration":308}},{"uid":"6dc88de4fec451cb","reportUrl":"https://novasamatech.github.io/test-runner/4803//#testresult/6dc88de4fec451cb","status":"passed","time":{"start":1709380868481,"stop":1709380868813,"duration":332}},{"uid":"85081b389c85fc51","reportUrl":"https://novasamatech.github.io/test-runner/4802//#testresult/85081b389c85fc51","status":"passed","time":{"start":1709366467410,"stop":1709366467816,"duration":406}},{"uid":"4955713e956ff759","reportUrl":"https://novasamatech.github.io/test-runner/4801//#testresult/4955713e956ff759","status":"passed","time":{"start":1709352069707,"stop":1709352070062,"duration":355}},{"uid":"7d2bb3ea5a8b4aad","reportUrl":"https://novasamatech.github.io/test-runner/4800//#testresult/7d2bb3ea5a8b4aad","status":"passed","time":{"start":1709337707787,"stop":1709337708369,"duration":582}},{"uid":"fd33967b15483f95","reportUrl":"https://novasamatech.github.io/test-runner/4799//#testresult/fd33967b15483f95","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709323275608,"stop":1709323275661,"duration":53}},{"uid":"d25be93ba2838739","reportUrl":"https://novasamatech.github.io/test-runner/4798//#testresult/d25be93ba2838739","status":"passed","time":{"start":1709308864263,"stop":1709308864870,"duration":607}},{"uid":"8a7e0cdd9ec58c47","reportUrl":"https://novasamatech.github.io/test-runner/4796//#testresult/8a7e0cdd9ec58c47","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709289991037,"stop":1709289991208,"duration":171}},{"uid":"ee4918f26fdd882f","reportUrl":"https://novasamatech.github.io/test-runner/4789//#testresult/ee4918f26fdd882f","status":"passed","time":{"start":1709193661172,"stop":1709193661428,"duration":256}},{"uid":"5e298ec64bd01679","reportUrl":"https://novasamatech.github.io/test-runner/4788//#testresult/5e298ec64bd01679","status":"passed","time":{"start":1709179265449,"stop":1709179266066,"duration":617}},{"uid":"b4524cbbe8fee9f2","reportUrl":"https://novasamatech.github.io/test-runner/4787//#testresult/b4524cbbe8fee9f2","status":"passed","time":{"start":1709164904364,"stop":1709164904991,"duration":627}},{"uid":"fcf3e5fb56341bd","reportUrl":"https://novasamatech.github.io/test-runner/4786//#testresult/fcf3e5fb56341bd","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709150480471,"stop":1709150480497,"duration":26}},{"uid":"27d24c480ed3f570","reportUrl":"https://novasamatech.github.io/test-runner/4785//#testresult/27d24c480ed3f570","status":"passed","time":{"start":1709136077113,"stop":1709136077443,"duration":330}},{"uid":"231a6219e2dc0677","reportUrl":"https://novasamatech.github.io/test-runner/4784//#testresult/231a6219e2dc0677","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709121689589,"stop":1709121689743,"duration":154}}]},"tags":[]},"source":"76f829882ccbf057.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}