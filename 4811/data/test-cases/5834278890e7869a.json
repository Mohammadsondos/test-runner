{"uid":"5834278890e7869a","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1709496068406,"stop":1709496068787,"duration":381},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f72bfb43760>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f72bfa5ee90>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f72bfa5d3c0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1493-626"},{"name":"thread","value":"2168-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"24608e490d8ef72b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709496062975,"stop":1709496063373,"duration":398}},{"uid":"6f4d5a2d83d4d475","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709496057477,"stop":1709496057868,"duration":391}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":13,"skipped":0,"passed":906,"unknown":0,"total":922},"items":[{"uid":"1a5957208d324ac","reportUrl":"https://novasamatech.github.io/test-runner/4810//#testresult/1a5957208d324ac","status":"passed","time":{"start":1709481659972,"stop":1709481660187,"duration":215}},{"uid":"a0fe864c94855b23","reportUrl":"https://novasamatech.github.io/test-runner/4809//#testresult/a0fe864c94855b23","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709467272864,"stop":1709467273248,"duration":384}},{"uid":"f226ef4af6a6013e","reportUrl":"https://novasamatech.github.io/test-runner/4808//#testresult/f226ef4af6a6013e","status":"passed","time":{"start":1709452856387,"stop":1709452856542,"duration":155}},{"uid":"898aacd30412299","reportUrl":"https://novasamatech.github.io/test-runner/4807//#testresult/898aacd30412299","status":"passed","time":{"start":1709438468072,"stop":1709438468912,"duration":840}},{"uid":"2dece365a39f66dd","reportUrl":"https://novasamatech.github.io/test-runner/4806//#testresult/2dece365a39f66dd","status":"passed","time":{"start":1709424105996,"stop":1709424106139,"duration":143}},{"uid":"e9fcb245318b2da8","reportUrl":"https://novasamatech.github.io/test-runner/4805//#testresult/e9fcb245318b2da8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709409669274,"stop":1709409669596,"duration":322}},{"uid":"734ed4d6eec093f0","reportUrl":"https://novasamatech.github.io/test-runner/4804//#testresult/734ed4d6eec093f0","status":"passed","time":{"start":1709395273196,"stop":1709395273490,"duration":294}},{"uid":"935e1f42016dd3ef","reportUrl":"https://novasamatech.github.io/test-runner/4803//#testresult/935e1f42016dd3ef","status":"passed","time":{"start":1709380868816,"stop":1709380869158,"duration":342}},{"uid":"3a6f549845818083","reportUrl":"https://novasamatech.github.io/test-runner/4802//#testresult/3a6f549845818083","status":"passed","time":{"start":1709366468137,"stop":1709366468475,"duration":338}},{"uid":"271830b563af3451","reportUrl":"https://novasamatech.github.io/test-runner/4801//#testresult/271830b563af3451","status":"passed","time":{"start":1709352070150,"stop":1709352070513,"duration":363}},{"uid":"ab7523cc53ae610c","reportUrl":"https://novasamatech.github.io/test-runner/4800//#testresult/ab7523cc53ae610c","status":"passed","time":{"start":1709337707998,"stop":1709337708652,"duration":654}},{"uid":"e201121af6e921c7","reportUrl":"https://novasamatech.github.io/test-runner/4799//#testresult/e201121af6e921c7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709323276891,"stop":1709323276956,"duration":65}},{"uid":"d5fa710592887a54","reportUrl":"https://novasamatech.github.io/test-runner/4798//#testresult/d5fa710592887a54","status":"passed","time":{"start":1709308866086,"stop":1709308866503,"duration":417}},{"uid":"f9878b878a3ba227","reportUrl":"https://novasamatech.github.io/test-runner/4796//#testresult/f9878b878a3ba227","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709289991384,"stop":1709289991542,"duration":158}},{"uid":"4de49b4affdc7ddd","reportUrl":"https://novasamatech.github.io/test-runner/4789//#testresult/4de49b4affdc7ddd","status":"passed","time":{"start":1709193661201,"stop":1709193661409,"duration":208}},{"uid":"ace6d7af90dbce5c","reportUrl":"https://novasamatech.github.io/test-runner/4788//#testresult/ace6d7af90dbce5c","status":"passed","time":{"start":1709179265458,"stop":1709179266157,"duration":699}},{"uid":"8351663d54e46f58","reportUrl":"https://novasamatech.github.io/test-runner/4787//#testresult/8351663d54e46f58","status":"passed","time":{"start":1709164904474,"stop":1709164905066,"duration":592}},{"uid":"8439427ce233031e","reportUrl":"https://novasamatech.github.io/test-runner/4786//#testresult/8439427ce233031e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709150479597,"stop":1709150479632,"duration":35}},{"uid":"76101681fab5a35d","reportUrl":"https://novasamatech.github.io/test-runner/4785//#testresult/76101681fab5a35d","status":"passed","time":{"start":1709136077281,"stop":1709136077518,"duration":237}},{"uid":"61b246a444f99f18","reportUrl":"https://novasamatech.github.io/test-runner/4784//#testresult/61b246a444f99f18","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709121689781,"stop":1709121689926,"duration":145}}]},"tags":[]},"source":"5834278890e7869a.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}