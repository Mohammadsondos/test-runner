{"uid":"c81a96f49d6296d1","name":"test_can_create_connection[Test for Nodle Parachain, url: wss://nodle-parachain.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e25e5e392faa8447ae2b8bca966817b4","time":{"start":1675052244980,"stop":1675052304868,"duration":59888},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Nodle Parachain', 'url': 'wss://nodle-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:145: in _get_resp_headers\n    status, resp_headers, status_message = read_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:312: in read_headers\n    line = recv_line(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:131: in recv_line\n    c = recv(sock, 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 1\n\n    def recv(sock, bufsize):\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Nodle Parachain', 'url': 'wss://nodle-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:145: in _get_resp_headers\n    status, resp_headers, status_message = read_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:312: in read_headers\n    line = recv_line(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:131: in recv_line\n    c = recv(sock, 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 1\n\n    def recv(sock, bufsize):\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"5b13662c61bfed16","name":"stdout","source":"5b13662c61bfed16.txt","type":"text/plain","size":272}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az446-435"},{"name":"thread","value":"1670-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://nodle-parachain.api.onfinality.io/public-ws', 'name': 'Nodle Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4c4db7e322661d57","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1675052174854,"stop":1675052234868,"duration":60014}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":572,"unknown":0,"total":627},"items":[{"uid":"544101237a1d3dc4","reportUrl":"https://nova-wallet.github.io/test-runner/2366//#testresult/544101237a1d3dc4","status":"passed","time":{"start":1675040632144,"stop":1675040632222,"duration":78}},{"uid":"ce8a8a176710a7f0","reportUrl":"https://nova-wallet.github.io/test-runner/2365//#testresult/ce8a8a176710a7f0","status":"passed","time":{"start":1675023178483,"stop":1675023178570,"duration":87}},{"uid":"b9aa2e02ab3a2c56","reportUrl":"https://nova-wallet.github.io/test-runner/2364//#testresult/b9aa2e02ab3a2c56","status":"passed","time":{"start":1675009009853,"stop":1675009010066,"duration":213}},{"uid":"234a1f89d1b6033","reportUrl":"https://nova-wallet.github.io/test-runner/2363//#testresult/234a1f89d1b6033","status":"passed","time":{"start":1674995018453,"stop":1674995018533,"duration":80}},{"uid":"b436dbc9ba5004ad","reportUrl":"https://nova-wallet.github.io/test-runner/2361//#testresult/b436dbc9ba5004ad","status":"passed","time":{"start":1674965751581,"stop":1674965751765,"duration":184}},{"uid":"cedfd3d7f6d6eaed","reportUrl":"https://nova-wallet.github.io/test-runner/2360//#testresult/cedfd3d7f6d6eaed","status":"passed","time":{"start":1674954788902,"stop":1674954789246,"duration":344}},{"uid":"dade5072be188439","reportUrl":"https://nova-wallet.github.io/test-runner/2359//#testresult/dade5072be188439","status":"passed","time":{"start":1674936785646,"stop":1674936785958,"duration":312}},{"uid":"f03b0b11120d3564","reportUrl":"https://nova-wallet.github.io/test-runner/2358//#testresult/f03b0b11120d3564","status":"passed","time":{"start":1674922617297,"stop":1674922617541,"duration":244}},{"uid":"563a64a40dfc3f15","reportUrl":"https://nova-wallet.github.io/test-runner/2357//#testresult/563a64a40dfc3f15","status":"passed","time":{"start":1674908606910,"stop":1674908606995,"duration":85}},{"uid":"1df0d8fccfcf781c","reportUrl":"https://nova-wallet.github.io/test-runner/2355//#testresult/1df0d8fccfcf781c","status":"passed","time":{"start":1674879350819,"stop":1674879351031,"duration":212}},{"uid":"d1b80963c3bb9532","reportUrl":"https://nova-wallet.github.io/test-runner/2354//#testresult/d1b80963c3bb9532","status":"passed","time":{"start":1674868140539,"stop":1674868140861,"duration":322}},{"uid":"65c43069a7b9a87c","reportUrl":"https://nova-wallet.github.io/test-runner/2353//#testresult/65c43069a7b9a87c","status":"passed","time":{"start":1674850442678,"stop":1674850442945,"duration":267}},{"uid":"57d05076d653ef6e","reportUrl":"https://nova-wallet.github.io/test-runner/2352//#testresult/57d05076d653ef6e","status":"passed","time":{"start":1674836296544,"stop":1674836296886,"duration":342}},{"uid":"c7639cec4d0e723","reportUrl":"https://nova-wallet.github.io/test-runner/2351//#testresult/c7639cec4d0e723","status":"passed","time":{"start":1674822301985,"stop":1674822302031,"duration":46}},{"uid":"80e359c1fa402bfc","reportUrl":"https://nova-wallet.github.io/test-runner/2350//#testresult/80e359c1fa402bfc","status":"passed","time":{"start":1674807427648,"stop":1674807427934,"duration":286}},{"uid":"cd853ca9d210f04e","reportUrl":"https://nova-wallet.github.io/test-runner/2349//#testresult/cd853ca9d210f04e","status":"passed","time":{"start":1674792999071,"stop":1674792999342,"duration":271}},{"uid":"853ae59fa4a66591","reportUrl":"https://nova-wallet.github.io/test-runner/2348//#testresult/853ae59fa4a66591","status":"passed","time":{"start":1674781776532,"stop":1674781776861,"duration":329}},{"uid":"71574c3dd0343f23","reportUrl":"https://nova-wallet.github.io/test-runner/2347//#testresult/71574c3dd0343f23","status":"passed","time":{"start":1674763458412,"stop":1674763458605,"duration":193}},{"uid":"ecba36172b189eea","reportUrl":"https://nova-wallet.github.io/test-runner/2346//#testresult/ecba36172b189eea","status":"passed","time":{"start":1674749053289,"stop":1674749053361,"duration":72}},{"uid":"5f86400e3f1a5b41","reportUrl":"https://nova-wallet.github.io/test-runner/2345//#testresult/5f86400e3f1a5b41","status":"passed","time":{"start":1674734720553,"stop":1674734720868,"duration":315}}]},"tags":[]},"source":"c81a96f49d6296d1.json","parameterValues":["{'url': 'wss://nodle-parachain.api.onfinality.io/public-ws', 'name': 'Nodle Parachain'}"]}