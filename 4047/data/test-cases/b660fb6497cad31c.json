{"uid":"b660fb6497cad31c","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1698696125825,"stop":1698696126258,"duration":433},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 30 Oct 2023 20:02:06 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 30 Oct 2023 20:02:06 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 30 Oct 2023 20:02:06 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 30 Oct 2023 20:02:06 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"3b3e55f91514645b","name":"stdout","source":"3b3e55f91514645b.txt","type":"text/plain","size":1464}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az583-33"},{"name":"thread","value":"2251-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"aa12f339ab4a07d2","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 30 Oct 2023 20:01:50 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698696110274,"stop":1698696110708,"duration":434}},{"uid":"7ab0a4196aad81ee","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 30 Oct 2023 20:01:35 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698696094528,"stop":1698696095115,"duration":587}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":49,"skipped":0,"passed":358,"unknown":0,"total":407},"items":[{"uid":"e416a39c35567dcd","reportUrl":"https://novasamatech.github.io/test-runner/4046//#testresult/e416a39c35567dcd","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1698681742001,"stop":1698681742259,"duration":258}},{"uid":"20a4a4d453521a6d","reportUrl":"https://novasamatech.github.io/test-runner/4045//#testresult/20a4a4d453521a6d","status":"passed","time":{"start":1698667315981,"stop":1698667316657,"duration":676}},{"uid":"aba5b6350a9e1761","reportUrl":"https://novasamatech.github.io/test-runner/4044//#testresult/aba5b6350a9e1761","status":"passed","time":{"start":1698652888459,"stop":1698652888835,"duration":376}},{"uid":"7296713b2df9eabc","reportUrl":"https://novasamatech.github.io/test-runner/4043//#testresult/7296713b2df9eabc","status":"passed","time":{"start":1698638487998,"stop":1698638488396,"duration":398}},{"uid":"e196d02c04c4628c","reportUrl":"https://novasamatech.github.io/test-runner/4042//#testresult/e196d02c04c4628c","status":"passed","time":{"start":1698624134111,"stop":1698624134486,"duration":375}},{"uid":"269ef46156f81110","reportUrl":"https://novasamatech.github.io/test-runner/4041//#testresult/269ef46156f81110","status":"passed","time":{"start":1698609701056,"stop":1698609701436,"duration":380}},{"uid":"bdd349145fae8e6f","reportUrl":"https://novasamatech.github.io/test-runner/4040//#testresult/bdd349145fae8e6f","status":"passed","time":{"start":1698595300583,"stop":1698595301252,"duration":669}},{"uid":"1dfac282527f952f","reportUrl":"https://novasamatech.github.io/test-runner/4039//#testresult/1dfac282527f952f","status":"passed","time":{"start":1698580899971,"stop":1698580900536,"duration":565}},{"uid":"6fe19ec0c77e229a","reportUrl":"https://novasamatech.github.io/test-runner/4038//#testresult/6fe19ec0c77e229a","status":"passed","time":{"start":1698566514872,"stop":1698566515422,"duration":550}},{"uid":"9c018aeda021b0dc","reportUrl":"https://novasamatech.github.io/test-runner/4037//#testresult/9c018aeda021b0dc","status":"passed","time":{"start":1698552104730,"stop":1698552105245,"duration":515}},{"uid":"eaafe69171059351","reportUrl":"https://novasamatech.github.io/test-runner/4036//#testresult/eaafe69171059351","status":"passed","time":{"start":1698537741437,"stop":1698537741825,"duration":388}},{"uid":"b90d6782e8d609e7","reportUrl":"https://novasamatech.github.io/test-runner/4035//#testresult/b90d6782e8d609e7","status":"passed","time":{"start":1698523293452,"stop":1698523294071,"duration":619}},{"uid":"c419fb921a90422a","reportUrl":"https://novasamatech.github.io/test-runner/4034//#testresult/c419fb921a90422a","status":"passed","time":{"start":1698508905029,"stop":1698508905710,"duration":681}},{"uid":"abd22d73939556e0","reportUrl":"https://novasamatech.github.io/test-runner/4033//#testresult/abd22d73939556e0","status":"passed","time":{"start":1698494511936,"stop":1698494512305,"duration":369}},{"uid":"af1637e4aea75edd","reportUrl":"https://novasamatech.github.io/test-runner/4032//#testresult/af1637e4aea75edd","status":"passed","time":{"start":1698480090117,"stop":1698480090517,"duration":400}},{"uid":"9cfc1fbf182a50a5","reportUrl":"https://novasamatech.github.io/test-runner/4031//#testresult/9cfc1fbf182a50a5","status":"passed","time":{"start":1698465706292,"stop":1698465706946,"duration":654}},{"uid":"4c74d86fc51ede81","reportUrl":"https://novasamatech.github.io/test-runner/4030//#testresult/4c74d86fc51ede81","status":"passed","time":{"start":1698451340639,"stop":1698451341193,"duration":554}},{"uid":"b980e91a2b02495","reportUrl":"https://novasamatech.github.io/test-runner/4029//#testresult/b980e91a2b02495","status":"passed","time":{"start":1698437018659,"stop":1698437019030,"duration":371}},{"uid":"1fc98ec6d9437352","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/1fc98ec6d9437352","status":"passed","time":{"start":1698422556132,"stop":1698422556781,"duration":649}},{"uid":"ed528b04a8b236e4","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/ed528b04a8b236e4","status":"passed","time":{"start":1698408132421,"stop":1698408133012,"duration":591}}]},"tags":[]},"source":"b660fb6497cad31c.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}