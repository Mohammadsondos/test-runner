{"uid":"90836c6a6fde9d6","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1699027378574,"stop":1699027379006,"duration":432},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 03 Nov 2023 16:02:58 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 03 Nov 2023 16:02:58 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 03 Nov 2023 16:02:58 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 03 Nov 2023 16:02:58 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"3eab9a2ed4c6b597","name":"stdout","source":"3eab9a2ed4c6b597.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az882-885"},{"name":"thread","value":"2089-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4da6f2ea494051a7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 03 Nov 2023 16:02:43 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699027362862,"stop":1699027363457,"duration":595}},{"uid":"7756e2455a79acba","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Fri, 03 Nov 2023 16:02:27 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699027347279,"stop":1699027347751,"duration":472}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":26,"skipped":0,"passed":404,"unknown":0,"total":430},"items":[{"uid":"98b7a83da7e15229","reportUrl":"https://novasamatech.github.io/test-runner/4069//#testresult/98b7a83da7e15229","status":"passed","time":{"start":1699012901916,"stop":1699012902368,"duration":452}},{"uid":"d2eaccd333bd5a4e","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/d2eaccd333bd5a4e","status":"passed","time":{"start":1698998525451,"stop":1698998525807,"duration":356}},{"uid":"544a74dc7d32f4e9","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/544a74dc7d32f4e9","status":"passed","time":{"start":1698984115629,"stop":1698984115970,"duration":341}},{"uid":"54e36608fae9abfe","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/54e36608fae9abfe","status":"passed","time":{"start":1698969748805,"stop":1698969749339,"duration":534}},{"uid":"fa9495e523fd4fc3","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/fa9495e523fd4fc3","status":"passed","time":{"start":1698955321449,"stop":1698955321980,"duration":531}},{"uid":"ed52e4c510d40dea","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/ed52e4c510d40dea","status":"passed","time":{"start":1698940902291,"stop":1698940902613,"duration":322}},{"uid":"d1aa4a3fb3fe63ec","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/d1aa4a3fb3fe63ec","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 02 Nov 2023 12:02:15 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698926535368,"stop":1698926535624,"duration":256}},{"uid":"6e7d74a44a7deced","reportUrl":"https://novasamatech.github.io/test-runner/4062//#testresult/6e7d74a44a7deced","status":"passed","time":{"start":1698912099737,"stop":1698912100211,"duration":474}},{"uid":"765a108e4bb0dbbd","reportUrl":"https://novasamatech.github.io/test-runner/4061//#testresult/765a108e4bb0dbbd","status":"passed","time":{"start":1698897679511,"stop":1698897679947,"duration":436}},{"uid":"7a116ca5d6d5f14","reportUrl":"https://novasamatech.github.io/test-runner/4060//#testresult/7a116ca5d6d5f14","status":"passed","time":{"start":1698883348815,"stop":1698883349560,"duration":745}},{"uid":"605a8d0161697092","reportUrl":"https://novasamatech.github.io/test-runner/4059//#testresult/605a8d0161697092","status":"passed","time":{"start":1698868928211,"stop":1698868928687,"duration":476}},{"uid":"29a099aa37f168e3","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/29a099aa37f168e3","status":"passed","time":{"start":1698840109974,"stop":1698840110318,"duration":344}},{"uid":"a41061a6ae7f0e2d","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/a41061a6ae7f0e2d","status":"passed","time":{"start":1698854500517,"stop":1698854501254,"duration":737}},{"uid":"6a3bb008c841bc08","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/6a3bb008c841bc08","status":"passed","time":{"start":1698825696715,"stop":1698825697213,"duration":498}},{"uid":"87716c08b68e7293","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/87716c08b68e7293","status":"passed","time":{"start":1698811284930,"stop":1698811285420,"duration":490}},{"uid":"52ce17246dd38edf","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/52ce17246dd38edf","status":"passed","time":{"start":1698796943510,"stop":1698796944007,"duration":497}},{"uid":"d080ef3c97d54191","reportUrl":"https://novasamatech.github.io/test-runner/4053//#testresult/d080ef3c97d54191","status":"passed","time":{"start":1698782509737,"stop":1698782510489,"duration":752}},{"uid":"22d375a25cc41acc","reportUrl":"https://novasamatech.github.io/test-runner/4052//#testresult/22d375a25cc41acc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 31 Oct 2023 16:02:59 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698768178931,"stop":1698768179285,"duration":354}},{"uid":"2e90bd72feef593a","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/2e90bd72feef593a","status":"passed","time":{"start":1698753714952,"stop":1698753715554,"duration":602}},{"uid":"5af908d8749a66a9","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/5af908d8749a66a9","status":"passed","time":{"start":1698739310200,"stop":1698739310791,"duration":591}}]},"tags":[]},"source":"90836c6a6fde9d6.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}