{"uid":"a82e8fdf4d68c5ed","name":"test_can_create_connection[Test for Shiden, url: wss://shiden-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a1d7f7185b65e3e16e03f84d2501b752","time":{"start":1699084908106,"stop":1699084911566,"duration":3460},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Shiden', 'url': 'wss://shiden-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Shiden', 'url': 'wss://shiden-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"764215b3d50a8d89","name":"stdout","source":"764215b3d50a8d89.txt","type":"text/plain","size":588}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1098-910"},{"name":"thread","value":"2103-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://shiden-rpc.dwellir.com', 'name': 'Shiden'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"eac83ebd23b8c296","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1699084889650,"stop":1699084893023,"duration":3373}},{"uid":"7915bfbc701d7f5b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1699084871054,"stop":1699084874479,"duration":3425}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":433,"unknown":0,"total":434},"items":[{"uid":"a83d6b430f6ba42d","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/a83d6b430f6ba42d","status":"passed","time":{"start":1699070465343,"stop":1699070466002,"duration":659}},{"uid":"da4a3166f12d86c0","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/da4a3166f12d86c0","status":"passed","time":{"start":1699041691499,"stop":1699041691943,"duration":444}},{"uid":"87a8eebb7c731adb","reportUrl":"https://novasamatech.github.io/test-runner/4072//#testresult/87a8eebb7c731adb","status":"passed","time":{"start":1699056196153,"stop":1699056196611,"duration":458}},{"uid":"80cfb14a2942197f","reportUrl":"https://novasamatech.github.io/test-runner/4070//#testresult/80cfb14a2942197f","status":"passed","time":{"start":1699027308175,"stop":1699027309650,"duration":1475}},{"uid":"dbd73fc9aa2dbc24","reportUrl":"https://novasamatech.github.io/test-runner/4069//#testresult/dbd73fc9aa2dbc24","status":"passed","time":{"start":1699012908504,"stop":1699012909000,"duration":496}},{"uid":"86a7bd051cfe6aa5","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/86a7bd051cfe6aa5","status":"passed","time":{"start":1698998509497,"stop":1698998510029,"duration":532}},{"uid":"c7fd6779db2ce455","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/c7fd6779db2ce455","status":"passed","time":{"start":1698984165734,"stop":1698984166188,"duration":454}},{"uid":"cca01521b5acb05c","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/cca01521b5acb05c","status":"passed","time":{"start":1698969736020,"stop":1698969736476,"duration":456}},{"uid":"6b23d2e8e1440cd4","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/6b23d2e8e1440cd4","status":"passed","time":{"start":1698955273862,"stop":1698955274500,"duration":638}},{"uid":"63361c9279627c30","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/63361c9279627c30","status":"passed","time":{"start":1698940880096,"stop":1698940880588,"duration":492}},{"uid":"1c2fc13b67a3e79e","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/1c2fc13b67a3e79e","status":"passed","time":{"start":1698926483354,"stop":1698926483888,"duration":534}},{"uid":"ad603f2703f0a230","reportUrl":"https://novasamatech.github.io/test-runner/4062//#testresult/ad603f2703f0a230","status":"passed","time":{"start":1698912077643,"stop":1698912078223,"duration":580}},{"uid":"df2b5ccb322e83c2","reportUrl":"https://novasamatech.github.io/test-runner/4061//#testresult/df2b5ccb322e83c2","status":"passed","time":{"start":1698897666371,"stop":1698897666882,"duration":511}},{"uid":"85dc615e4c10d0a9","reportUrl":"https://novasamatech.github.io/test-runner/4060//#testresult/85dc615e4c10d0a9","status":"passed","time":{"start":1698883328369,"stop":1698883329109,"duration":740}},{"uid":"52d25e4ba4ba357a","reportUrl":"https://novasamatech.github.io/test-runner/4059//#testresult/52d25e4ba4ba357a","status":"passed","time":{"start":1698868878087,"stop":1698868878712,"duration":625}},{"uid":"512a75feb9000c46","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/512a75feb9000c46","status":"passed","time":{"start":1698840094168,"stop":1698840094617,"duration":449}},{"uid":"da555c4e3650de54","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/da555c4e3650de54","status":"passed","time":{"start":1698854478855,"stop":1698854479665,"duration":810}},{"uid":"9a9e77bcb56e81c7","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/9a9e77bcb56e81c7","status":"passed","time":{"start":1698825680748,"stop":1698825681300,"duration":552}},{"uid":"4631728544bd241b","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/4631728544bd241b","status":"passed","time":{"start":1698811269154,"stop":1698811269692,"duration":538}},{"uid":"e3e927b4ba8d828","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/e3e927b4ba8d828","status":"passed","time":{"start":1698796928581,"stop":1698796929163,"duration":582}}]},"tags":[]},"source":"a82e8fdf4d68c5ed.json","parameterValues":["{'url': 'wss://shiden-rpc.dwellir.com', 'name': 'Shiden'}"]}