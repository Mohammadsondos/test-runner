{"uid":"5c9a1ad419d34998","name":"test_can_create_connection[Test for Equilibrium, url: wss://node.pol.equilibrium.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"aa0a741cef39a0b8ded091916ea5120b","time":{"start":1682903275828,"stop":1682903276154,"duration":326},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"7e08302f305b5a92","name":"stdout","source":"7e08302f305b5a92.txt","type":"text/plain","size":354}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az587-218"},{"name":"thread","value":"1903-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7d9dc86aaae0f47d","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1682903265343,"stop":1682903265668,"duration":325}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":26,"unknown":0,"total":29},"items":[{"uid":"21b4c8f5069f6de","reportUrl":"https://nova-wallet.github.io/test-runner/2920//#testresult/21b4c8f5069f6de","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1682871360675,"stop":1682871360973,"duration":298}},{"uid":"613407c7b44288a","reportUrl":"https://nova-wallet.github.io/test-runner/2918//#testresult/613407c7b44288a","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1682842509012,"stop":1682842509375,"duration":363}},{"uid":"f1c9cacc3b8ac8fb","reportUrl":"https://nova-wallet.github.io/test-runner/2917//#testresult/f1c9cacc3b8ac8fb","status":"passed","time":{"start":1682828117441,"stop":1682828118493,"duration":1052}},{"uid":"14f9eb6bc59eb1aa","reportUrl":"https://nova-wallet.github.io/test-runner/2916//#testresult/14f9eb6bc59eb1aa","status":"passed","time":{"start":1682816970742,"stop":1682816971511,"duration":769}},{"uid":"23b74814ff37ea1c","reportUrl":"https://nova-wallet.github.io/test-runner/2912//#testresult/23b74814ff37ea1c","status":"passed","time":{"start":1682756106632,"stop":1682756107526,"duration":894}},{"uid":"e643757e3f7dc500","reportUrl":"https://nova-wallet.github.io/test-runner/2911//#testresult/e643757e3f7dc500","status":"passed","time":{"start":1682741698242,"stop":1682741698999,"duration":757}},{"uid":"b33f27a8598592cf","reportUrl":"https://nova-wallet.github.io/test-runner/2908//#testresult/b33f27a8598592cf","status":"passed","time":{"start":1682697941551,"stop":1682697942409,"duration":858}},{"uid":"5b9a858d8d13f58b","reportUrl":"https://nova-wallet.github.io/test-runner/2907//#testresult/5b9a858d8d13f58b","status":"passed","time":{"start":1682683541098,"stop":1682683542143,"duration":1045}},{"uid":"bf04161afc1d40ba","reportUrl":"https://nova-wallet.github.io/test-runner/2905//#testresult/bf04161afc1d40ba","status":"passed","time":{"start":1682654690322,"stop":1682654691100,"duration":778}},{"uid":"491f83084141aa7b","reportUrl":"https://nova-wallet.github.io/test-runner/2904//#testresult/491f83084141aa7b","status":"passed","time":{"start":1682640853274,"stop":1682640854045,"duration":771}},{"uid":"82fcbab634711e9a","reportUrl":"https://nova-wallet.github.io/test-runner/2902//#testresult/82fcbab634711e9a","status":"passed","time":{"start":1682611504171,"stop":1682611504786,"duration":615}},{"uid":"6009fc72f18feeaa","reportUrl":"https://nova-wallet.github.io/test-runner/2900//#testresult/6009fc72f18feeaa","status":"passed","time":{"start":1682582752587,"stop":1682582753366,"duration":779}},{"uid":"8aa378740a891249","reportUrl":"https://nova-wallet.github.io/test-runner/2899//#testresult/8aa378740a891249","status":"passed","time":{"start":1682568326540,"stop":1682568327128,"duration":588}},{"uid":"2839e8711f5f2fe6","reportUrl":"https://nova-wallet.github.io/test-runner/2898//#testresult/2839e8711f5f2fe6","status":"passed","time":{"start":1682554492268,"stop":1682554493033,"duration":765}},{"uid":"3064f65edcd600aa","reportUrl":"https://nova-wallet.github.io/test-runner/2897//#testresult/3064f65edcd600aa","status":"passed","time":{"start":1682539540845,"stop":1682539541580,"duration":735}},{"uid":"5c0f4b6d562ae1a3","reportUrl":"https://nova-wallet.github.io/test-runner/2896//#testresult/5c0f4b6d562ae1a3","status":"passed","time":{"start":1682525157631,"stop":1682525158523,"duration":892}},{"uid":"e78405cf750280","reportUrl":"https://nova-wallet.github.io/test-runner/2895//#testresult/e78405cf750280","status":"passed","time":{"start":1682510843122,"stop":1682510843840,"duration":718}},{"uid":"faa7f874692f9f2e","reportUrl":"https://nova-wallet.github.io/test-runner/2894//#testresult/faa7f874692f9f2e","status":"passed","time":{"start":1682496370457,"stop":1682496371344,"duration":887}},{"uid":"c3a1dec03d2519bc","reportUrl":"https://nova-wallet.github.io/test-runner/2893//#testresult/c3a1dec03d2519bc","status":"passed","time":{"start":1682481953290,"stop":1682481954327,"duration":1037}},{"uid":"382d913fdfffa73","reportUrl":"https://nova-wallet.github.io/test-runner/2892//#testresult/382d913fdfffa73","status":"passed","time":{"start":1682468073601,"stop":1682468074368,"duration":767}}]},"tags":[]},"source":"5c9a1ad419d34998.json","parameterValues":["{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"]}