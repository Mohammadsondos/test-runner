{"uid":"22d375a25cc41acc","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1698768178931,"stop":1698768179285,"duration":354},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 31 Oct 2023 16:02:59 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 31 Oct 2023 16:02:59 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 31 Oct 2023 16:02:59 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 31 Oct 2023 16:02:59 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"9e937a530097c02c","name":"stdout","source":"9e937a530097c02c.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az336-12"},{"name":"thread","value":"2132-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"94a0e5204f4022d9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 31 Oct 2023 16:02:43 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698768163340,"stop":1698768163828,"duration":488}},{"uid":"9596e0431352c333","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 31 Oct 2023 16:02:28 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698768147788,"stop":1698768148263,"duration":475}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":24,"skipped":0,"passed":388,"unknown":0,"total":412},"items":[{"uid":"2e90bd72feef593a","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/2e90bd72feef593a","status":"passed","time":{"start":1698753714952,"stop":1698753715554,"duration":602}},{"uid":"5af908d8749a66a9","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/5af908d8749a66a9","status":"passed","time":{"start":1698739310200,"stop":1698739310791,"duration":591}},{"uid":"28d615ddbf3cdedd","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/28d615ddbf3cdedd","status":"passed","time":{"start":1698724903794,"stop":1698724904157,"duration":363}},{"uid":"d189d0f070cdcad","reportUrl":"https://novasamatech.github.io/test-runner/4048//#testresult/d189d0f070cdcad","status":"passed","time":{"start":1698710542810,"stop":1698710543172,"duration":362}},{"uid":"d1736d2075e46cf2","reportUrl":"https://novasamatech.github.io/test-runner/4047//#testresult/d1736d2075e46cf2","status":"passed","time":{"start":1698696096011,"stop":1698696096556,"duration":545}},{"uid":"f260fdb23b779b74","reportUrl":"https://novasamatech.github.io/test-runner/4046//#testresult/f260fdb23b779b74","status":"passed","time":{"start":1698681712296,"stop":1698681712837,"duration":541}},{"uid":"b404de5d076a4e42","reportUrl":"https://novasamatech.github.io/test-runner/4045//#testresult/b404de5d076a4e42","status":"passed","time":{"start":1698667316579,"stop":1698667317174,"duration":595}},{"uid":"9c40dc8e2e8de146","reportUrl":"https://novasamatech.github.io/test-runner/4044//#testresult/9c40dc8e2e8de146","status":"passed","time":{"start":1698652889228,"stop":1698652889664,"duration":436}},{"uid":"e7576ea613eb5f69","reportUrl":"https://novasamatech.github.io/test-runner/4043//#testresult/e7576ea613eb5f69","status":"passed","time":{"start":1698638488654,"stop":1698638489125,"duration":471}},{"uid":"8ade67b7334af8b5","reportUrl":"https://novasamatech.github.io/test-runner/4042//#testresult/8ade67b7334af8b5","status":"passed","time":{"start":1698624134970,"stop":1698624135400,"duration":430}},{"uid":"155735b6ea62547e","reportUrl":"https://novasamatech.github.io/test-runner/4041//#testresult/155735b6ea62547e","status":"passed","time":{"start":1698609733656,"stop":1698609733978,"duration":322}},{"uid":"d341d7bb5266e83d","reportUrl":"https://novasamatech.github.io/test-runner/4040//#testresult/d341d7bb5266e83d","status":"passed","time":{"start":1698595301710,"stop":1698595302295,"duration":585}},{"uid":"1dbc796676f6cc69","reportUrl":"https://novasamatech.github.io/test-runner/4039//#testresult/1dbc796676f6cc69","status":"passed","time":{"start":1698580900912,"stop":1698580901285,"duration":373}},{"uid":"a3ae9291f7cc77ea","reportUrl":"https://novasamatech.github.io/test-runner/4038//#testresult/a3ae9291f7cc77ea","status":"passed","time":{"start":1698566516085,"stop":1698566516665,"duration":580}},{"uid":"2d965245bb133b06","reportUrl":"https://novasamatech.github.io/test-runner/4037//#testresult/2d965245bb133b06","status":"passed","time":{"start":1698552105067,"stop":1698552105520,"duration":453}},{"uid":"29f6dbfceb8e9d3b","reportUrl":"https://novasamatech.github.io/test-runner/4036//#testresult/29f6dbfceb8e9d3b","status":"passed","time":{"start":1698537742166,"stop":1698537742660,"duration":494}},{"uid":"6cbd97aea07aa074","reportUrl":"https://novasamatech.github.io/test-runner/4035//#testresult/6cbd97aea07aa074","status":"passed","time":{"start":1698523293261,"stop":1698523293845,"duration":584}},{"uid":"cb2f572757e59e88","reportUrl":"https://novasamatech.github.io/test-runner/4034//#testresult/cb2f572757e59e88","status":"passed","time":{"start":1698508905510,"stop":1698508906087,"duration":577}},{"uid":"613b68577f58b333","reportUrl":"https://novasamatech.github.io/test-runner/4033//#testresult/613b68577f58b333","status":"passed","time":{"start":1698494496860,"stop":1698494497349,"duration":489}},{"uid":"42f6214670ccc96c","reportUrl":"https://novasamatech.github.io/test-runner/4032//#testresult/42f6214670ccc96c","status":"passed","time":{"start":1698480090822,"stop":1698480091359,"duration":537}}]},"tags":[]},"source":"22d375a25cc41acc.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}