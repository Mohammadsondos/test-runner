{"uid":"a4854b0e2671e500","name":"test_can_create_connection[Test for Kylin, url: wss://polkadot.kylin-node.co.uk]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3ee0d191ab7acb2fad9a82a3aa808e89","time":{"start":1698768151922,"stop":1698768152120,"duration":198},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Tue, 31 Oct 2023 16:02:32 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Tue, 31 Oct 2023 16:02:32 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Tue, 31 Oct 2023 16:02:32 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Tue, 31 Oct 2023 16:02:32 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"df4f9b3b1aba4ff","name":"stdout","source":"df4f9b3b1aba4ff.txt","type":"text/plain","size":1500}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az336-12"},{"name":"thread","value":"2135-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"26caee9ab25d472b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Tue, 31 Oct 2023 16:02:16 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698768136654,"stop":1698768136835,"duration":181}},{"uid":"1f3c700a61a9dfeb","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Tue, 31 Oct 2023 16:02:01 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698768121250,"stop":1698768121464,"duration":214}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":37,"skipped":0,"passed":375,"unknown":0,"total":412},"items":[{"uid":"3e921cd50ad5c556","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/3e921cd50ad5c556","status":"passed","time":{"start":1698753714168,"stop":1698753714504,"duration":336}},{"uid":"7f0f83d4570755e7","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/7f0f83d4570755e7","status":"passed","time":{"start":1698739309613,"stop":1698739309949,"duration":336}},{"uid":"93b5442a3676e0d3","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/93b5442a3676e0d3","status":"passed","time":{"start":1698724903179,"stop":1698724903330,"duration":151}},{"uid":"b75e06561d2e454b","reportUrl":"https://novasamatech.github.io/test-runner/4048//#testresult/b75e06561d2e454b","status":"passed","time":{"start":1698710540888,"stop":1698710540989,"duration":101}},{"uid":"260fbb81acc40a1b","reportUrl":"https://novasamatech.github.io/test-runner/4047//#testresult/260fbb81acc40a1b","status":"passed","time":{"start":1698696095468,"stop":1698696095815,"duration":347}},{"uid":"2a386b539c68ed80","reportUrl":"https://novasamatech.github.io/test-runner/4046//#testresult/2a386b539c68ed80","status":"passed","time":{"start":1698681709634,"stop":1698681709871,"duration":237}},{"uid":"b4a0cb530bd15ee0","reportUrl":"https://novasamatech.github.io/test-runner/4045//#testresult/b4a0cb530bd15ee0","status":"passed","time":{"start":1698667317041,"stop":1698667317438,"duration":397}},{"uid":"a4e932f40ec6ce73","reportUrl":"https://novasamatech.github.io/test-runner/4044//#testresult/a4e932f40ec6ce73","status":"passed","time":{"start":1698652887403,"stop":1698652887479,"duration":76}},{"uid":"55b8ecc703f56492","reportUrl":"https://novasamatech.github.io/test-runner/4043//#testresult/55b8ecc703f56492","status":"passed","time":{"start":1698638488621,"stop":1698638488737,"duration":116}},{"uid":"dd2864215c289fd5","reportUrl":"https://novasamatech.github.io/test-runner/4042//#testresult/dd2864215c289fd5","status":"passed","time":{"start":1698624134467,"stop":1698624134598,"duration":131}},{"uid":"20842eb98832b07e","reportUrl":"https://novasamatech.github.io/test-runner/4041//#testresult/20842eb98832b07e","status":"passed","time":{"start":1698609701092,"stop":1698609701220,"duration":128}},{"uid":"a1f1ea4cb8d023af","reportUrl":"https://novasamatech.github.io/test-runner/4040//#testresult/a1f1ea4cb8d023af","status":"passed","time":{"start":1698595299670,"stop":1698595299998,"duration":328}},{"uid":"2d9ed6f7f59ad6b3","reportUrl":"https://novasamatech.github.io/test-runner/4039//#testresult/2d9ed6f7f59ad6b3","status":"passed","time":{"start":1698580899389,"stop":1698580899485,"duration":96}},{"uid":"15e778d3ba30d222","reportUrl":"https://novasamatech.github.io/test-runner/4038//#testresult/15e778d3ba30d222","status":"passed","time":{"start":1698566514225,"stop":1698566514674,"duration":449}},{"uid":"cb2caafddcbb076d","reportUrl":"https://novasamatech.github.io/test-runner/4037//#testresult/cb2caafddcbb076d","status":"passed","time":{"start":1698552103203,"stop":1698552103353,"duration":150}},{"uid":"e35efd1fa96430f3","reportUrl":"https://novasamatech.github.io/test-runner/4036//#testresult/e35efd1fa96430f3","status":"passed","time":{"start":1698537740458,"stop":1698537740596,"duration":138}},{"uid":"eee4b8c4eb1f0c1b","reportUrl":"https://novasamatech.github.io/test-runner/4035//#testresult/eee4b8c4eb1f0c1b","status":"passed","time":{"start":1698523291547,"stop":1698523291877,"duration":330}},{"uid":"aa9f5fc45b30768f","reportUrl":"https://novasamatech.github.io/test-runner/4034//#testresult/aa9f5fc45b30768f","status":"passed","time":{"start":1698508903525,"stop":1698508903840,"duration":315}},{"uid":"ac340c80ddcb3ce","reportUrl":"https://novasamatech.github.io/test-runner/4033//#testresult/ac340c80ddcb3ce","status":"passed","time":{"start":1698494495550,"stop":1698494495603,"duration":53}},{"uid":"c9378b6243118373","reportUrl":"https://novasamatech.github.io/test-runner/4032//#testresult/c9378b6243118373","status":"passed","time":{"start":1698480089156,"stop":1698480089270,"duration":114}}]},"tags":[]},"source":"a4854b0e2671e500.json","parameterValues":["{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"]}