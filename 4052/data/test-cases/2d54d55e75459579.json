{"uid":"2d54d55e75459579","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1698768145931,"stop":1698768146459,"duration":528},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 31 Oct 2023 16:02:25 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 31 Oct 2023 16:02:25 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 31 Oct 2023 16:02:25 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 31 Oct 2023 16:02:25 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"25cc841be2d44afe","name":"stdout","source":"25cc841be2d44afe.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az336-12"},{"name":"thread","value":"2126-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"691f67b82c3b617b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 31 Oct 2023 16:02:10 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698768130279,"stop":1698768130815,"duration":536}},{"uid":"37e3aaea78bb05f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 31 Oct 2023 16:01:54 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698768114437,"stop":1698768115191,"duration":754}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":19,"skipped":0,"passed":388,"unknown":0,"total":407},"items":[{"uid":"333fa8faad8553a2","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/333fa8faad8553a2","status":"passed","time":{"start":1698753708593,"stop":1698753709539,"duration":946}},{"uid":"f86ac4aa7a2cc3f8","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/f86ac4aa7a2cc3f8","status":"passed","time":{"start":1698739302180,"stop":1698739303009,"duration":829}},{"uid":"e61d885025e9c0b9","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/e61d885025e9c0b9","status":"passed","time":{"start":1698724899057,"stop":1698724899811,"duration":754}},{"uid":"ea75437dbc06a8f8","reportUrl":"https://novasamatech.github.io/test-runner/4048//#testresult/ea75437dbc06a8f8","status":"passed","time":{"start":1698710538264,"stop":1698710539005,"duration":741}},{"uid":"1f8d02ff6a0e3ec0","reportUrl":"https://novasamatech.github.io/test-runner/4047//#testresult/1f8d02ff6a0e3ec0","status":"passed","time":{"start":1698696089146,"stop":1698696089886,"duration":740}},{"uid":"ddeb0ee9548311da","reportUrl":"https://novasamatech.github.io/test-runner/4046//#testresult/ddeb0ee9548311da","status":"passed","time":{"start":1698681703104,"stop":1698681703928,"duration":824}},{"uid":"abe8636afb62f3e1","reportUrl":"https://novasamatech.github.io/test-runner/4045//#testresult/abe8636afb62f3e1","status":"passed","time":{"start":1698667310469,"stop":1698667311558,"duration":1089}},{"uid":"26ed53e427820b23","reportUrl":"https://novasamatech.github.io/test-runner/4044//#testresult/26ed53e427820b23","status":"passed","time":{"start":1698652883764,"stop":1698652884256,"duration":492}},{"uid":"b4cfd3da14674a26","reportUrl":"https://novasamatech.github.io/test-runner/4043//#testresult/b4cfd3da14674a26","status":"passed","time":{"start":1698638486032,"stop":1698638486794,"duration":762}},{"uid":"b1204a5b48428724","reportUrl":"https://novasamatech.github.io/test-runner/4042//#testresult/b1204a5b48428724","status":"passed","time":{"start":1698624129803,"stop":1698624130340,"duration":537}},{"uid":"aaba253dfaf911e2","reportUrl":"https://novasamatech.github.io/test-runner/4041//#testresult/aaba253dfaf911e2","status":"passed","time":{"start":1698609694712,"stop":1698609695341,"duration":629}},{"uid":"a10a00a5bd816014","reportUrl":"https://novasamatech.github.io/test-runner/4040//#testresult/a10a00a5bd816014","status":"passed","time":{"start":1698595293404,"stop":1698595294169,"duration":765}},{"uid":"ba9fc32a820cc20f","reportUrl":"https://novasamatech.github.io/test-runner/4039//#testresult/ba9fc32a820cc20f","status":"passed","time":{"start":1698580894146,"stop":1698580894808,"duration":662}},{"uid":"9c10700b5f5dd6c","reportUrl":"https://novasamatech.github.io/test-runner/4038//#testresult/9c10700b5f5dd6c","status":"passed","time":{"start":1698566510970,"stop":1698566511756,"duration":786}},{"uid":"378663b592ea3755","reportUrl":"https://novasamatech.github.io/test-runner/4037//#testresult/378663b592ea3755","status":"passed","time":{"start":1698552100081,"stop":1698552100925,"duration":844}},{"uid":"ddb568a1b4911d75","reportUrl":"https://novasamatech.github.io/test-runner/4036//#testresult/ddb568a1b4911d75","status":"passed","time":{"start":1698537738039,"stop":1698537738772,"duration":733}},{"uid":"c2ec8842329cd12d","reportUrl":"https://novasamatech.github.io/test-runner/4035//#testresult/c2ec8842329cd12d","status":"passed","time":{"start":1698523287249,"stop":1698523288126,"duration":877}},{"uid":"b16f787b118564de","reportUrl":"https://novasamatech.github.io/test-runner/4034//#testresult/b16f787b118564de","status":"passed","time":{"start":1698508895628,"stop":1698508896516,"duration":888}},{"uid":"f87e9e515d4b49b1","reportUrl":"https://novasamatech.github.io/test-runner/4033//#testresult/f87e9e515d4b49b1","status":"passed","time":{"start":1698494493087,"stop":1698494493949,"duration":862}},{"uid":"9200375829c45c51","reportUrl":"https://novasamatech.github.io/test-runner/4032//#testresult/9200375829c45c51","status":"passed","time":{"start":1698480086134,"stop":1698480086785,"duration":651}}]},"tags":[]},"source":"2d54d55e75459579.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}