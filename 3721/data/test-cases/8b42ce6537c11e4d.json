{"uid":"8b42ce6537c11e4d","name":"test_can_create_connection[Test for Acala, url: wss://acala-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6c77ce47b0ce8fb3c0f86b2e90e26f67","time":{"start":1694044964930,"stop":1694044968286,"duration":3356},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"1084aa52c6346136","name":"stdout","source":"1084aa52c6346136.txt","type":"text/plain","size":585}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az592-733"},{"name":"thread","value":"2081-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://acala-rpc.dwellir.com', 'name': 'Acala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"610c790cdd27dc06","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694044946466,"stop":1694044949843,"duration":3377}},{"uid":"4d537201d7b0d713","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694044927929,"stop":1694044931321,"duration":3392}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":71,"unknown":0,"total":82},"items":[{"uid":"271e710b74378d24","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/271e710b74378d24","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694030512265,"stop":1694030515658,"duration":3393}},{"uid":"d618f2e9b051d199","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/d618f2e9b051d199","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694016123907,"stop":1694016127259,"duration":3352}},{"uid":"fc9ba9915068a047","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/fc9ba9915068a047","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1694001735300,"stop":1694001738758,"duration":3458}},{"uid":"889fd9d8c1de33fc","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/889fd9d8c1de33fc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693987325962,"stop":1693987329404,"duration":3442}},{"uid":"1449cffb7a2c0b2c","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/1449cffb7a2c0b2c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693972916369,"stop":1693972919706,"duration":3337}},{"uid":"27cfd1548ee7c011","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/27cfd1548ee7c011","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693958577362,"stop":1693958580734,"duration":3372}},{"uid":"3d2fb331d041fbfd","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/3d2fb331d041fbfd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693944128627,"stop":1693944131989,"duration":3362}},{"uid":"3ec441f6fac26f3a","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/3ec441f6fac26f3a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693929721902,"stop":1693929725238,"duration":3336}},{"uid":"ee936c2079f6290d","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/ee936c2079f6290d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693915338693,"stop":1693915342141,"duration":3448}},{"uid":"36e300810841b1fd","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/36e300810841b1fd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693900937749,"stop":1693900941295,"duration":3546}},{"uid":"451617cdafb13c1f","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/451617cdafb13c1f","status":"passed","time":{"start":1693872132995,"stop":1693872133615,"duration":620}},{"uid":"c6893ef69a4fe33b","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/c6893ef69a4fe33b","status":"passed","time":{"start":1693857689077,"stop":1693857689572,"duration":495}},{"uid":"d56334b066cfe09","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/d56334b066cfe09","status":"passed","time":{"start":1693843284278,"stop":1693843284966,"duration":688}},{"uid":"f385eeaaffc9a2d9","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/f385eeaaffc9a2d9","status":"passed","time":{"start":1693828890781,"stop":1693828891397,"duration":616}},{"uid":"6496b19656caa179","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/6496b19656caa179","status":"passed","time":{"start":1693814501087,"stop":1693814501869,"duration":782}},{"uid":"c0be1abcf4cb3a3","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/c0be1abcf4cb3a3","status":"passed","time":{"start":1693800085257,"stop":1693800085863,"duration":606}},{"uid":"f93b8316a35a0f20","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/f93b8316a35a0f20","status":"passed","time":{"start":1693785738296,"stop":1693785739083,"duration":787}},{"uid":"9ddfe6175ca6ead5","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/9ddfe6175ca6ead5","status":"passed","time":{"start":1693771294418,"stop":1693771295020,"duration":602}},{"uid":"d779950c81eef0d5","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/d779950c81eef0d5","status":"passed","time":{"start":1693756893185,"stop":1693756894003,"duration":818}},{"uid":"8ebfbb2fe47145e2","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/8ebfbb2fe47145e2","status":"passed","time":{"start":1693742500214,"stop":1693742500815,"duration":601}}]},"tags":[]},"source":"8b42ce6537c11e4d.json","parameterValues":["{'url': 'wss://acala-rpc.dwellir.com', 'name': 'Acala'}"]}