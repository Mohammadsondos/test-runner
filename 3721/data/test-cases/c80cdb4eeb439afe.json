{"uid":"c80cdb4eeb439afe","name":"test_has_new_assets[Test for Acala]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"811bc5c930abadf9421eacf26316cc27","time":{"start":1694044987117,"stop":1694044991881,"duration":4764},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f1948bae350>\nchain = <scripts.utils.chain_model.Chain object at 0x7f1948acc790>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f1937af31c0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x66edb3492ab7ebb892b6f24903e1d860dc13197b9fab708d908c1ac8a6fba9ac']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f1948bae350>\nchain = <scripts.utils.chain_model.Chain object at 0x7f1948acc790>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f1937af31c0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x66edb3492ab7ebb892b6f24903e1d860dc13197b9fab708d908c1ac8a6fba9ac']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"6d15e87970984352","name":"stdout","source":"6d15e87970984352.txt","type":"text/plain","size":666}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az257-218"},{"name":"thread","value":"2140-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f1948acc790>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2cd1d0963b39b4a0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1694044967221,"stop":1694044971968,"duration":4747}},{"uid":"48ae461f19eddc2e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1694044947457,"stop":1694044952054,"duration":4597}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":78,"unknown":0,"total":81},"items":[{"uid":"4e4ff016af51d4e5","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/4e4ff016af51d4e5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1694030544120,"stop":1694030548413,"duration":4293}},{"uid":"fd45f8b4cc3ab51b","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/fd45f8b4cc3ab51b","status":"passed","time":{"start":1694016132741,"stop":1694016142509,"duration":9768}},{"uid":"9db6969c1bb40bce","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/9db6969c1bb40bce","status":"passed","time":{"start":1694001700873,"stop":1694001708465,"duration":7592}},{"uid":"642e2689fc27021d","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/642e2689fc27021d","status":"passed","time":{"start":1693987303360,"stop":1693987312338,"duration":8978}},{"uid":"5041ee37ee043eb8","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/5041ee37ee043eb8","status":"passed","time":{"start":1693972892007,"stop":1693972900396,"duration":8389}},{"uid":"6394831cff1343a","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/6394831cff1343a","status":"passed","time":{"start":1693958545993,"stop":1693958555727,"duration":9734}},{"uid":"40b9ca2cdd9fcc51","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/40b9ca2cdd9fcc51","status":"passed","time":{"start":1693944100282,"stop":1693944109031,"duration":8749}},{"uid":"2d48077f64a6a7e","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/2d48077f64a6a7e","status":"passed","time":{"start":1693929697441,"stop":1693929705518,"duration":8077}},{"uid":"e7132d206cedb548","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/e7132d206cedb548","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693915353863,"stop":1693915358631,"duration":4768}},{"uid":"619a4e07cd2ee2f7","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/619a4e07cd2ee2f7","status":"passed","time":{"start":1693872169639,"stop":1693872175325,"duration":5686}},{"uid":"7263144c469628a6","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/7263144c469628a6","status":"passed","time":{"start":1693857702299,"stop":1693857707559,"duration":5260}},{"uid":"fb0c5ab21d874f5b","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/fb0c5ab21d874f5b","status":"passed","time":{"start":1693843288847,"stop":1693843292755,"duration":3908}},{"uid":"46c73e776a404f4b","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/46c73e776a404f4b","status":"passed","time":{"start":1693828892949,"stop":1693828897050,"duration":4101}},{"uid":"f486ffb8f46d6379","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/f486ffb8f46d6379","status":"passed","time":{"start":1693814518750,"stop":1693814524789,"duration":6039}},{"uid":"230fec32c87be5d","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/230fec32c87be5d","status":"passed","time":{"start":1693800088730,"stop":1693800093637,"duration":4907}},{"uid":"b79ce7392cdbf55a","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/b79ce7392cdbf55a","status":"passed","time":{"start":1693785753828,"stop":1693785759296,"duration":5468}},{"uid":"e0ecc88edd62bdee","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/e0ecc88edd62bdee","status":"passed","time":{"start":1693771289389,"stop":1693771293618,"duration":4229}},{"uid":"3f6afb4be6b4de2c","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/3f6afb4be6b4de2c","status":"passed","time":{"start":1693756905267,"stop":1693756910733,"duration":5466}},{"uid":"aa313c883f7ce409","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/aa313c883f7ce409","status":"passed","time":{"start":1693742494782,"stop":1693742499041,"duration":4259}},{"uid":"8581852013a5b515","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/8581852013a5b515","status":"passed","time":{"start":1693728108635,"stop":1693728114868,"duration":6233}}]},"tags":[]},"source":"c80cdb4eeb439afe.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f1948acc790>"]}