{"uid":"6716ac06301a00a1","name":"test_can_create_connection[Test for Kusama, url: wss://kusama.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"04d2da413eab4f2e9d3d030b6cb0949b","time":{"start":1698998567832,"stop":1698998568759,"duration":927},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f17ef2d38e0>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f17ef2d38e0>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"b18a6fb68a28d98f","name":"stdout","source":"b18a6fb68a28d98f.txt","type":"text/plain","size":985}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az749-24"},{"name":"thread","value":"2292-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.api.onfinality.io/public-ws', 'name': 'Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"81ec3409a4be2315","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain; charset=utf-8', 'content-length': '162', 'connection': 'keep-alive', 'access-control-allow-origin': 'https://kusama.api.onfinality.io', 'date': 'Fri, 03 Nov 2023 08:02:32 GMT', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '2', 'x-kong-proxy-latency': '1', 'via': 'kong/2.5.2'} -+-+- b'{\"jsonrpc\":\"2.0\",\"error\":{\"code\":-32029,\"message\":\"Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit\"},\"id\":null}'","time":{"start":1698998552016,"stop":1698998552728,"duration":712}},{"uid":"5b8c37615b5132b8","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1698998475855,"stop":1698998536714,"duration":60859}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":424,"unknown":0,"total":428},"items":[{"uid":"be7dd6cb47645df0","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/be7dd6cb47645df0","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1698984164142,"stop":1698984224858,"duration":60716}},{"uid":"fc543a74c36d8da","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/fc543a74c36d8da","status":"passed","time":{"start":1698969743951,"stop":1698969744886,"duration":935}},{"uid":"42387babf8c0a67e","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/42387babf8c0a67e","status":"passed","time":{"start":1698955270896,"stop":1698955271645,"duration":749}},{"uid":"e9d9069e5ff72c6","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/e9d9069e5ff72c6","status":"passed","time":{"start":1698940877464,"stop":1698940878521,"duration":1057}},{"uid":"b206bd6637f73de1","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/b206bd6637f73de1","status":"passed","time":{"start":1698926481302,"stop":1698926482277,"duration":975}},{"uid":"7e303792f33f8543","reportUrl":"https://novasamatech.github.io/test-runner/4062//#testresult/7e303792f33f8543","status":"passed","time":{"start":1698912074428,"stop":1698912075317,"duration":889}},{"uid":"b55f623c0358e707","reportUrl":"https://novasamatech.github.io/test-runner/4061//#testresult/b55f623c0358e707","status":"passed","time":{"start":1698897663476,"stop":1698897664585,"duration":1109}},{"uid":"28c58bdce23b52fc","reportUrl":"https://novasamatech.github.io/test-runner/4060//#testresult/28c58bdce23b52fc","status":"passed","time":{"start":1698883325715,"stop":1698883326605,"duration":890}},{"uid":"8740bbe2c7aed804","reportUrl":"https://novasamatech.github.io/test-runner/4059//#testresult/8740bbe2c7aed804","status":"passed","time":{"start":1698868875770,"stop":1698868876654,"duration":884}},{"uid":"c274da844a8eaa1a","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/c274da844a8eaa1a","status":"passed","time":{"start":1698840091809,"stop":1698840092985,"duration":1176}},{"uid":"da1b303bd99e5124","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/da1b303bd99e5124","status":"passed","time":{"start":1698854475347,"stop":1698854476102,"duration":755}},{"uid":"c0d5724b7b8a4b70","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/c0d5724b7b8a4b70","status":"passed","time":{"start":1698825675278,"stop":1698825676175,"duration":897}},{"uid":"c0c51adca123e42a","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/c0c51adca123e42a","status":"passed","time":{"start":1698811266476,"stop":1698811267393,"duration":917}},{"uid":"3e6641b69248da4b","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/3e6641b69248da4b","status":"passed","time":{"start":1698796925194,"stop":1698796926107,"duration":913}},{"uid":"c001318a6bc343a","reportUrl":"https://novasamatech.github.io/test-runner/4053//#testresult/c001318a6bc343a","status":"passed","time":{"start":1698782482651,"stop":1698782483379,"duration":728}},{"uid":"9f198b151f89997","reportUrl":"https://novasamatech.github.io/test-runner/4052//#testresult/9f198b151f89997","status":"passed","time":{"start":1698768076963,"stop":1698768077985,"duration":1022}},{"uid":"e78c67a4c42f68e0","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/e78c67a4c42f68e0","status":"passed","time":{"start":1698753682761,"stop":1698753683518,"duration":757}},{"uid":"5e6f9602b952a441","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/5e6f9602b952a441","status":"passed","time":{"start":1698739289604,"stop":1698739290512,"duration":908}},{"uid":"d0c6bf708ad31e94","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/d0c6bf708ad31e94","status":"passed","time":{"start":1698724886078,"stop":1698724887156,"duration":1078}},{"uid":"fcadfa682ef31745","reportUrl":"https://novasamatech.github.io/test-runner/4048//#testresult/fcadfa682ef31745","status":"passed","time":{"start":1698710524528,"stop":1698710525630,"duration":1102}}]},"tags":[]},"source":"6716ac06301a00a1.json","parameterValues":["{'url': 'wss://kusama.api.onfinality.io/public-ws', 'name': 'Kusama'}"]}