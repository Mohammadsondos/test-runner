{"uid":"7d32e51c27a5883f","name":"test_can_create_connection[Test for Equilibrium, url: wss://node.pol.equilibrium.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"aa0a741cef39a0b8ded091916ea5120b","time":{"start":1698998555432,"stop":1698998555692,"duration":260},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"268609ff15d52d03","name":"stdout","source":"268609ff15d52d03.txt","type":"text/plain","size":534}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az749-24"},{"name":"thread","value":"2301-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f845d988f1088690","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698998539972,"stop":1698998540233,"duration":261}},{"uid":"79c75b84119261ed","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698998524548,"stop":1698998524816,"duration":268}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":13,"skipped":0,"passed":415,"unknown":0,"total":428},"items":[{"uid":"276b5e6a8093eaa5","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/276b5e6a8093eaa5","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698984146595,"stop":1698984146839,"duration":244}},{"uid":"df6410f3ebdf9f76","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/df6410f3ebdf9f76","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698969780035,"stop":1698969780394,"duration":359}},{"uid":"deb28a247b5ba3e8","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/deb28a247b5ba3e8","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698955337964,"stop":1698955338305,"duration":341}},{"uid":"3f05a5fa3d7100a1","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/3f05a5fa3d7100a1","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698940933592,"stop":1698940934009,"duration":417}},{"uid":"607d4d4b22ca476a","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/607d4d4b22ca476a","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698926549179,"stop":1698926549427,"duration":248}},{"uid":"4c3c388f4968317a","reportUrl":"https://novasamatech.github.io/test-runner/4062//#testresult/4c3c388f4968317a","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698912131001,"stop":1698912131351,"duration":350}},{"uid":"ff8c0866d074eb7","reportUrl":"https://novasamatech.github.io/test-runner/4061//#testresult/ff8c0866d074eb7","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698897710504,"stop":1698897710743,"duration":239}},{"uid":"f6a0b9f1d324bad2","reportUrl":"https://novasamatech.github.io/test-runner/4060//#testresult/f6a0b9f1d324bad2","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698883380635,"stop":1698883381150,"duration":515}},{"uid":"29e0428ce738388e","reportUrl":"https://novasamatech.github.io/test-runner/4059//#testresult/29e0428ce738388e","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698868928371,"stop":1698868928708,"duration":337}},{"uid":"69268e2c082a2b77","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/69268e2c082a2b77","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698840140750,"stop":1698840140978,"duration":228}},{"uid":"bcacbbfd9449df11","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/bcacbbfd9449df11","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698854533338,"stop":1698854533705,"duration":367}},{"uid":"8cef6b4f22ccc5fe","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/8cef6b4f22ccc5fe","status":"passed","time":{"start":1698825697865,"stop":1698825698605,"duration":740}},{"uid":"7b7d2556d1840f7b","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/7b7d2556d1840f7b","status":"passed","time":{"start":1698811285374,"stop":1698811286037,"duration":663}},{"uid":"eaedc0280ab6944b","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/eaedc0280ab6944b","status":"passed","time":{"start":1698796944377,"stop":1698796945126,"duration":749}},{"uid":"f942adf9a3e23e67","reportUrl":"https://novasamatech.github.io/test-runner/4053//#testresult/f942adf9a3e23e67","status":"passed","time":{"start":1698782510029,"stop":1698782511079,"duration":1050}},{"uid":"245be9d4a886b605","reportUrl":"https://novasamatech.github.io/test-runner/4052//#testresult/245be9d4a886b605","status":"passed","time":{"start":1698768150958,"stop":1698768151694,"duration":736}},{"uid":"84e8b155fc7edb16","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/84e8b155fc7edb16","status":"passed","time":{"start":1698753715830,"stop":1698753716665,"duration":835}},{"uid":"99ad023a83b1ecb6","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/99ad023a83b1ecb6","status":"passed","time":{"start":1698739310247,"stop":1698739310998,"duration":751}},{"uid":"5eae6b93cac56232","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/5eae6b93cac56232","status":"passed","time":{"start":1698724904432,"stop":1698724905019,"duration":587}},{"uid":"f335591a716e7cfa","reportUrl":"https://novasamatech.github.io/test-runner/4048//#testresult/f335591a716e7cfa","status":"passed","time":{"start":1698710543464,"stop":1698710544152,"duration":688}}]},"tags":[]},"source":"7d32e51c27a5883f.json","parameterValues":["{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"]}