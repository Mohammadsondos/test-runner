{"uid":"b0309448bfbf3ac2","name":"test_can_create_connection[Test for Moonbeam, url: wss://moonbeam.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"5ba7fbb1428fe0820408b3ea00ce843e","time":{"start":1698998506891,"stop":1698998507425,"duration":534},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"data = {'name': 'Moonbeam', 'url': 'wss://moonbeam.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f6ea9ba9c00>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"data = {'name': 'Moonbeam', 'url': 'wss://moonbeam.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f6ea9ba9c00>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"5927ff94d9b582c6","name":"stdout","source":"5927ff94d9b582c6.txt","type":"text/plain","size":1047}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az749-24"},{"name":"thread","value":"2301-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://moonbeam.api.onfinality.io/public-ws', 'name': 'Moonbeam'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9a0d5e4f480d7457","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1698998491325,"stop":1698998491728,"duration":403}},{"uid":"c692699b4f64b7ba","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain; charset=utf-8', 'content-length': '162', 'connection': 'keep-alive', 'access-control-allow-origin': 'https://moonbeam.api.onfinality.io', 'date': 'Fri, 03 Nov 2023 08:01:16 GMT', 'x-kong-upstream-latency': '3', 'x-kong-proxy-latency': '0', 'via': 'kong/2.3.3'} -+-+- b'{\"jsonrpc\":\"2.0\",\"error\":{\"code\":-32029,\"message\":\"Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit\"},\"id\":null}'","time":{"start":1698998475759,"stop":1698998476109,"duration":350}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":427,"unknown":0,"total":428},"items":[{"uid":"4ddf40a97657965b","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/4ddf40a97657965b","status":"passed","time":{"start":1698984163309,"stop":1698984163932,"duration":623}},{"uid":"4f1c45c11d013e3d","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/4f1c45c11d013e3d","status":"passed","time":{"start":1698969727558,"stop":1698969733643,"duration":6085}},{"uid":"669a0ef0fbcdbd9d","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/669a0ef0fbcdbd9d","status":"passed","time":{"start":1698955270364,"stop":1698955271018,"duration":654}},{"uid":"e3d910cd06259bc3","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/e3d910cd06259bc3","status":"passed","time":{"start":1698940877238,"stop":1698940877686,"duration":448}},{"uid":"c2fcbf21bb5c0a29","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/c2fcbf21bb5c0a29","status":"passed","time":{"start":1698926480692,"stop":1698926481220,"duration":528}},{"uid":"f502141244cbc726","reportUrl":"https://novasamatech.github.io/test-runner/4062//#testresult/f502141244cbc726","status":"passed","time":{"start":1698912073906,"stop":1698912074565,"duration":659}},{"uid":"95b2146dc5883a25","reportUrl":"https://novasamatech.github.io/test-runner/4061//#testresult/95b2146dc5883a25","status":"passed","time":{"start":1698897663394,"stop":1698897663819,"duration":425}},{"uid":"7006ebfbeaed6802","reportUrl":"https://novasamatech.github.io/test-runner/4060//#testresult/7006ebfbeaed6802","status":"passed","time":{"start":1698883325062,"stop":1698883326353,"duration":1291}},{"uid":"e8c043cbce0e717a","reportUrl":"https://novasamatech.github.io/test-runner/4059//#testresult/e8c043cbce0e717a","status":"passed","time":{"start":1698868875179,"stop":1698868875896,"duration":717}},{"uid":"ba420ebba2df4d82","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/ba420ebba2df4d82","status":"passed","time":{"start":1698840090870,"stop":1698840091417,"duration":547}},{"uid":"228872ee48afe53e","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/228872ee48afe53e","status":"passed","time":{"start":1698854474744,"stop":1698854476327,"duration":1583}},{"uid":"229fa15e5744feb1","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/229fa15e5744feb1","status":"passed","time":{"start":1698825674192,"stop":1698825678092,"duration":3900}},{"uid":"2903f6f82c409efe","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/2903f6f82c409efe","status":"passed","time":{"start":1698811265923,"stop":1698811266491,"duration":568}},{"uid":"39354f549858e242","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/39354f549858e242","status":"passed","time":{"start":1698796924716,"stop":1698796925348,"duration":632}},{"uid":"9577ffc09565b160","reportUrl":"https://novasamatech.github.io/test-runner/4053//#testresult/9577ffc09565b160","status":"passed","time":{"start":1698782481771,"stop":1698782482610,"duration":839}},{"uid":"819b9ac4c43b30fd","reportUrl":"https://novasamatech.github.io/test-runner/4052//#testresult/819b9ac4c43b30fd","status":"passed","time":{"start":1698768076694,"stop":1698768077617,"duration":923}},{"uid":"18400d40652406b9","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/18400d40652406b9","status":"passed","time":{"start":1698753682221,"stop":1698753682977,"duration":756}},{"uid":"8b43a6e87ef4198c","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/8b43a6e87ef4198c","status":"passed","time":{"start":1698739287838,"stop":1698739288429,"duration":591}},{"uid":"2b074395a215a18a","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/2b074395a215a18a","status":"passed","time":{"start":1698724885802,"stop":1698724886335,"duration":533}},{"uid":"b4f853170dac24a3","reportUrl":"https://novasamatech.github.io/test-runner/4048//#testresult/b4f853170dac24a3","status":"passed","time":{"start":1698710523948,"stop":1698710524487,"duration":539}}]},"tags":[]},"source":"b0309448bfbf3ac2.json","parameterValues":["{'url': 'wss://moonbeam.api.onfinality.io/public-ws', 'name': 'Moonbeam'}"]}