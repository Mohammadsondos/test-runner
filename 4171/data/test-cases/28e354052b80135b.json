{"uid":"28e354052b80135b","name":"test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6b2d505052053a5da93000b537edc6f1","time":{"start":1700482170682,"stop":1700482170682,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n        connection = create_connection_by_url(data[\"url\"])\n>       get_properties(connection)\n\ntests/conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:667: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:571: in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fa7466e74c0>\nmethod = 'state_getRuntimeVersion'\nparams = ['0x02299fb528aa5bd442884b4e763bb7c07a068a44c619bc0080e4607d74b41ebd']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1700482170682,"stop":1700482170981,"duration":299},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 24, in connection_by_url\n    get_properties(connection)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 667, in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 571, in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az665-913"},{"name":"thread","value":"2167-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8d7702f6be07739c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700482155354,"stop":1700482155354,"duration":0}},{"uid":"ef40fb8bf3fcd8b1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700482139975,"stop":1700482139975,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":19,"skipped":0,"passed":502,"unknown":0,"total":521},"items":[{"uid":"72ffdfc0bacf3642","reportUrl":"https://novasamatech.github.io/test-runner/4170//#testresult/72ffdfc0bacf3642","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700467794017,"stop":1700467794017,"duration":0}},{"uid":"19fe22def6572036","reportUrl":"https://novasamatech.github.io/test-runner/4169//#testresult/19fe22def6572036","status":"passed","time":{"start":1700453154306,"stop":1700453154306,"duration":0}},{"uid":"f9590a48bd37263a","reportUrl":"https://novasamatech.github.io/test-runner/4168//#testresult/f9590a48bd37263a","status":"passed","time":{"start":1700438792665,"stop":1700438792666,"duration":1}},{"uid":"feb1b9bc2a735493","reportUrl":"https://novasamatech.github.io/test-runner/4167//#testresult/feb1b9bc2a735493","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700424419410,"stop":1700424419410,"duration":0}},{"uid":"62e282ff67fcfdb7","reportUrl":"https://novasamatech.github.io/test-runner/4166//#testresult/62e282ff67fcfdb7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700409968831,"stop":1700409968831,"duration":0}},{"uid":"bbc8f52b653c3b65","reportUrl":"https://novasamatech.github.io/test-runner/4165//#testresult/bbc8f52b653c3b65","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700395624606,"stop":1700395624606,"duration":0}},{"uid":"1941b53778c8b45a","reportUrl":"https://novasamatech.github.io/test-runner/4164//#testresult/1941b53778c8b45a","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700381352532,"stop":1700381352532,"duration":0}},{"uid":"d250b558c3a1a5ed","reportUrl":"https://novasamatech.github.io/test-runner/4163//#testresult/d250b558c3a1a5ed","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700366781267,"stop":1700366781267,"duration":0}},{"uid":"d5251b95b23a941b","reportUrl":"https://novasamatech.github.io/test-runner/4162//#testresult/d5251b95b23a941b","status":"passed","time":{"start":1700352403474,"stop":1700352403474,"duration":0}},{"uid":"2d5cb1dcb277b2b0","reportUrl":"https://novasamatech.github.io/test-runner/4161//#testresult/2d5cb1dcb277b2b0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700338151087,"stop":1700338151087,"duration":0}},{"uid":"42982e88a4af2cb","reportUrl":"https://novasamatech.github.io/test-runner/4160//#testresult/42982e88a4af2cb","status":"passed","time":{"start":1700323548152,"stop":1700323548152,"duration":0}},{"uid":"8ab997e3796b782b","reportUrl":"https://novasamatech.github.io/test-runner/4159//#testresult/8ab997e3796b782b","status":"passed","time":{"start":1700309162289,"stop":1700309162289,"duration":0}},{"uid":"ff41d1e2c79e46e5","reportUrl":"https://novasamatech.github.io/test-runner/4158//#testresult/ff41d1e2c79e46e5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700294734307,"stop":1700294734307,"duration":0}},{"uid":"bd9c3386f5559417","reportUrl":"https://novasamatech.github.io/test-runner/4157//#testresult/bd9c3386f5559417","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700280342331,"stop":1700280342331,"duration":0}},{"uid":"9b59933e11f089c1","reportUrl":"https://novasamatech.github.io/test-runner/4156//#testresult/9b59933e11f089c1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700265962743,"stop":1700265962743,"duration":0}},{"uid":"fb808d3a94c8520e","reportUrl":"https://novasamatech.github.io/test-runner/4155//#testresult/fb808d3a94c8520e","status":"passed","time":{"start":1700251547900,"stop":1700251547900,"duration":0}},{"uid":"358126f5e7ed756a","reportUrl":"https://novasamatech.github.io/test-runner/4154//#testresult/358126f5e7ed756a","status":"passed","time":{"start":1700237150225,"stop":1700237150226,"duration":1}},{"uid":"8029ec0c0e00a0cc","reportUrl":"https://novasamatech.github.io/test-runner/4153//#testresult/8029ec0c0e00a0cc","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700222984307,"stop":1700222984307,"duration":0}},{"uid":"985f65a32b39fba0","reportUrl":"https://novasamatech.github.io/test-runner/4152//#testresult/985f65a32b39fba0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700208377948,"stop":1700208377948,"duration":0}},{"uid":"518239063780ae23","reportUrl":"https://novasamatech.github.io/test-runner/4151//#testresult/518239063780ae23","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700193921482,"stop":1700193921482,"duration":0}}]},"tags":[]},"source":"28e354052b80135b.json","parameterValues":["{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"]}