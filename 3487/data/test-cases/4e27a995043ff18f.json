{"uid":"4e27a995043ff18f","name":"test_can_create_connection[Test for Tinkernet, url: wss://invarch-tinkernet.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"fa04c589555648ef054595cb3e43047c","time":{"start":1690790720379,"stop":1690790720567,"duration":188},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"8b8606bc08242dfd","name":"stdout","source":"8b8606bc08242dfd.txt","type":"text/plain","size":597}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az617-45"},{"name":"thread","value":"1968-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws', 'name': 'Tinkernet'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"938cd271106bf7f7","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690790705072,"stop":1690790705256,"duration":184}},{"uid":"f4cbf3fffc7c8fa6","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690790689656,"stop":1690790689874,"duration":218}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":490,"unknown":0,"total":492},"items":[{"uid":"d4bb70869c5e3fbd","reportUrl":"https://novasamatech.github.io/test-runner/3486//#testresult/d4bb70869c5e3fbd","status":"passed","time":{"start":1690776261574,"stop":1690776262032,"duration":458}},{"uid":"6a24f03843eaaa94","reportUrl":"https://novasamatech.github.io/test-runner/3485//#testresult/6a24f03843eaaa94","status":"passed","time":{"start":1690762467404,"stop":1690762468100,"duration":696}},{"uid":"398f28610d805212","reportUrl":"https://novasamatech.github.io/test-runner/3484//#testresult/398f28610d805212","status":"passed","time":{"start":1690747445392,"stop":1690747445943,"duration":551}},{"uid":"116f78f6fc005050","reportUrl":"https://novasamatech.github.io/test-runner/3483//#testresult/116f78f6fc005050","status":"passed","time":{"start":1690733049104,"stop":1690733049549,"duration":445}},{"uid":"d1c92178ec93805b","reportUrl":"https://novasamatech.github.io/test-runner/3482//#testresult/d1c92178ec93805b","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1690718703991,"stop":1690718704182,"duration":191}},{"uid":"fac811110b5203d2","reportUrl":"https://novasamatech.github.io/test-runner/3481//#testresult/fac811110b5203d2","status":"passed","time":{"start":1690704301479,"stop":1690704302083,"duration":604}},{"uid":"f17eb2c719b810bd","reportUrl":"https://novasamatech.github.io/test-runner/3480//#testresult/f17eb2c719b810bd","status":"passed","time":{"start":1690689873308,"stop":1690689873873,"duration":565}},{"uid":"446ec7638872fde1","reportUrl":"https://novasamatech.github.io/test-runner/3479//#testresult/446ec7638872fde1","status":"passed","time":{"start":1690676105468,"stop":1690676105883,"duration":415}},{"uid":"7b7d4e1ac5525666","reportUrl":"https://novasamatech.github.io/test-runner/3478//#testresult/7b7d4e1ac5525666","status":"passed","time":{"start":1690661045003,"stop":1690661045436,"duration":433}},{"uid":"3f35a2309e3b17dd","reportUrl":"https://novasamatech.github.io/test-runner/3477//#testresult/3f35a2309e3b17dd","status":"passed","time":{"start":1690646643433,"stop":1690646643835,"duration":402}},{"uid":"2878f28ed74dd4e5","reportUrl":"https://novasamatech.github.io/test-runner/3476//#testresult/2878f28ed74dd4e5","status":"passed","time":{"start":1690632274059,"stop":1690632274497,"duration":438}},{"uid":"da17771775102fad","reportUrl":"https://novasamatech.github.io/test-runner/3475//#testresult/da17771775102fad","status":"passed","time":{"start":1690617868979,"stop":1690617869377,"duration":398}},{"uid":"fe343d3f53ff91ee","reportUrl":"https://novasamatech.github.io/test-runner/3474//#testresult/fe343d3f53ff91ee","status":"passed","time":{"start":1690603438248,"stop":1690603438702,"duration":454}},{"uid":"8266c2f2e1a0d9cd","reportUrl":"https://novasamatech.github.io/test-runner/3473//#testresult/8266c2f2e1a0d9cd","status":"passed","time":{"start":1690589631154,"stop":1690589631818,"duration":664}},{"uid":"781b23d2209e350c","reportUrl":"https://novasamatech.github.io/test-runner/3472//#testresult/781b23d2209e350c","status":"passed","time":{"start":1690574644934,"stop":1690574645339,"duration":405}},{"uid":"2d3210e54e88a942","reportUrl":"https://novasamatech.github.io/test-runner/3471//#testresult/2d3210e54e88a942","status":"passed","time":{"start":1690560262720,"stop":1690560263186,"duration":466}},{"uid":"c633223cd0fd9fd4","reportUrl":"https://novasamatech.github.io/test-runner/3470//#testresult/c633223cd0fd9fd4","status":"passed","time":{"start":1690545907691,"stop":1690545908290,"duration":599}},{"uid":"8518fa50f7401618","reportUrl":"https://novasamatech.github.io/test-runner/3469//#testresult/8518fa50f7401618","status":"passed","time":{"start":1690531463416,"stop":1690531463833,"duration":417}},{"uid":"535594b997ecf0d5","reportUrl":"https://novasamatech.github.io/test-runner/3468//#testresult/535594b997ecf0d5","status":"passed","time":{"start":1690517051755,"stop":1690517052213,"duration":458}},{"uid":"385d842071565da2","reportUrl":"https://novasamatech.github.io/test-runner/3467//#testresult/385d842071565da2","status":"passed","time":{"start":1690503241760,"stop":1690503242438,"duration":678}}]},"tags":[]},"source":"4e27a995043ff18f.json","parameterValues":["{'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws', 'name': 'Tinkernet'}"]}