{"uid":"42c137e7a04e4d20","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1707940881301,"stop":1707940881348,"duration":47},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fbbeb4e1ae0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fbbe9254ca0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fbbe9254af0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az532-921"},{"name":"thread","value":"2065-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e2a282a75f710de2","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707940876222,"stop":1707940876266,"duration":44}},{"uid":"76a459c31f7aa080","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707940871115,"stop":1707940871187,"duration":72}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":10,"skipped":0,"passed":881,"unknown":0,"total":891},"items":[{"uid":"dfd75435ea9a9c45","reportUrl":"https://novasamatech.github.io/test-runner/4699//#testresult/dfd75435ea9a9c45","status":"passed","time":{"start":1707926464004,"stop":1707926464756,"duration":752}},{"uid":"f9220446ff9a7ce9","reportUrl":"https://novasamatech.github.io/test-runner/4698//#testresult/f9220446ff9a7ce9","status":"passed","time":{"start":1707912074213,"stop":1707912074684,"duration":471}},{"uid":"1d44bd1fa3f9c757","reportUrl":"https://novasamatech.github.io/test-runner/4697//#testresult/1d44bd1fa3f9c757","status":"passed","time":{"start":1707897671270,"stop":1707897671558,"duration":288}},{"uid":"6fdf1c8a0210d89","reportUrl":"https://novasamatech.github.io/test-runner/4696//#testresult/6fdf1c8a0210d89","status":"passed","time":{"start":1707883264373,"stop":1707883264669,"duration":296}},{"uid":"97595f80a02f53c0","reportUrl":"https://novasamatech.github.io/test-runner/4695//#testresult/97595f80a02f53c0","status":"passed","time":{"start":1707868909439,"stop":1707868910135,"duration":696}},{"uid":"339eea2ae3faf9ce","reportUrl":"https://novasamatech.github.io/test-runner/4694//#testresult/339eea2ae3faf9ce","status":"passed","time":{"start":1707854472941,"stop":1707854473688,"duration":747}},{"uid":"818528eb11f1b12e","reportUrl":"https://novasamatech.github.io/test-runner/4693//#testresult/818528eb11f1b12e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707840075962,"stop":1707840076034,"duration":72}},{"uid":"fe05681cbe0545fd","reportUrl":"https://novasamatech.github.io/test-runner/4692//#testresult/fe05681cbe0545fd","status":"passed","time":{"start":1707825672576,"stop":1707825673952,"duration":1376}},{"uid":"44db9d7fed128ada","reportUrl":"https://novasamatech.github.io/test-runner/4691//#testresult/44db9d7fed128ada","status":"passed","time":{"start":1707811264804,"stop":1707811265712,"duration":908}},{"uid":"f19d8cecbb1b7ea5","reportUrl":"https://novasamatech.github.io/test-runner/4690//#testresult/f19d8cecbb1b7ea5","status":"passed","time":{"start":1707796864230,"stop":1707796864506,"duration":276}},{"uid":"c9bc3381a425f6c0","reportUrl":"https://novasamatech.github.io/test-runner/4689//#testresult/c9bc3381a425f6c0","status":"passed","time":{"start":1707782500162,"stop":1707782500424,"duration":262}},{"uid":"dd35e6374f6233ee","reportUrl":"https://novasamatech.github.io/test-runner/4688//#testresult/dd35e6374f6233ee","status":"passed","time":{"start":1707768056778,"stop":1707768057039,"duration":261}},{"uid":"9aba044d293c8f63","reportUrl":"https://novasamatech.github.io/test-runner/4687//#testresult/9aba044d293c8f63","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707753673573,"stop":1707753673914,"duration":341}},{"uid":"7948a9ecaf667cf6","reportUrl":"https://novasamatech.github.io/test-runner/4686//#testresult/7948a9ecaf667cf6","status":"passed","time":{"start":1707739262166,"stop":1707739262376,"duration":210}},{"uid":"8e4d3dbf666970c2","reportUrl":"https://novasamatech.github.io/test-runner/4685//#testresult/8e4d3dbf666970c2","status":"passed","time":{"start":1707724866239,"stop":1707724866719,"duration":480}},{"uid":"b1786c31ba74f0ba","reportUrl":"https://novasamatech.github.io/test-runner/4684//#testresult/b1786c31ba74f0ba","status":"passed","time":{"start":1707710468915,"stop":1707710469661,"duration":746}},{"uid":"c23e82d8535059fe","reportUrl":"https://novasamatech.github.io/test-runner/4683//#testresult/c23e82d8535059fe","status":"passed","time":{"start":1707696114156,"stop":1707696114866,"duration":710}},{"uid":"6463cbad9c6a2485","reportUrl":"https://novasamatech.github.io/test-runner/4682//#testresult/6463cbad9c6a2485","status":"passed","time":{"start":1707681665643,"stop":1707681666083,"duration":440}},{"uid":"e3bd645c4b24141d","reportUrl":"https://novasamatech.github.io/test-runner/4681//#testresult/e3bd645c4b24141d","status":"passed","time":{"start":1707667257736,"stop":1707667257989,"duration":253}},{"uid":"d856b618adf1aa4b","reportUrl":"https://novasamatech.github.io/test-runner/4680//#testresult/d856b618adf1aa4b","status":"passed","time":{"start":1707652859476,"stop":1707652859792,"duration":316}}]},"tags":[]},"source":"42c137e7a04e4d20.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}