{"uid":"9f92ad4ff070fb61","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1709409668670,"stop":1709409668972,"duration":302},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7ff3d41892d0>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7ff3cde40d30>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7ff3cde416f0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1456-39"},{"name":"thread","value":"2169-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"67cdf96868cd7ce3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709409663339,"stop":1709409663636,"duration":297}},{"uid":"4ab677e1fc42203a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709409657892,"stop":1709409658214,"duration":322}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":13,"skipped":0,"passed":902,"unknown":0,"total":916},"items":[{"uid":"dfa64b9ea8680997","reportUrl":"https://novasamatech.github.io/test-runner/4804//#testresult/dfa64b9ea8680997","status":"passed","time":{"start":1709395273025,"stop":1709395273173,"duration":148}},{"uid":"205a50c2de202797","reportUrl":"https://novasamatech.github.io/test-runner/4803//#testresult/205a50c2de202797","status":"passed","time":{"start":1709380868249,"stop":1709380868543,"duration":294}},{"uid":"84744367bedf2cc2","reportUrl":"https://novasamatech.github.io/test-runner/4802//#testresult/84744367bedf2cc2","status":"passed","time":{"start":1709366467076,"stop":1709366467530,"duration":454}},{"uid":"5251ec465c12e7cd","reportUrl":"https://novasamatech.github.io/test-runner/4801//#testresult/5251ec465c12e7cd","status":"passed","time":{"start":1709352069402,"stop":1709352069888,"duration":486}},{"uid":"7ace7e8011074582","reportUrl":"https://novasamatech.github.io/test-runner/4800//#testresult/7ace7e8011074582","status":"passed","time":{"start":1709337707173,"stop":1709337708089,"duration":916}},{"uid":"53684283ef56b1db","reportUrl":"https://novasamatech.github.io/test-runner/4799//#testresult/53684283ef56b1db","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709323275394,"stop":1709323275449,"duration":55}},{"uid":"25c805864079a4ec","reportUrl":"https://novasamatech.github.io/test-runner/4798//#testresult/25c805864079a4ec","status":"passed","time":{"start":1709308863897,"stop":1709308864282,"duration":385}},{"uid":"61e74beb53aa9095","reportUrl":"https://novasamatech.github.io/test-runner/4796//#testresult/61e74beb53aa9095","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709289990869,"stop":1709289991054,"duration":185}},{"uid":"20e04f61e1bdce45","reportUrl":"https://novasamatech.github.io/test-runner/4789//#testresult/20e04f61e1bdce45","status":"passed","time":{"start":1709193660836,"stop":1709193661256,"duration":420}},{"uid":"6bb770ce07e82498","reportUrl":"https://novasamatech.github.io/test-runner/4788//#testresult/6bb770ce07e82498","status":"passed","time":{"start":1709179264930,"stop":1709179265643,"duration":713}},{"uid":"29360e8d69b1cfb0","reportUrl":"https://novasamatech.github.io/test-runner/4787//#testresult/29360e8d69b1cfb0","status":"passed","time":{"start":1709164903815,"stop":1709164904549,"duration":734}},{"uid":"6e4c4b8240975a99","reportUrl":"https://novasamatech.github.io/test-runner/4786//#testresult/6e4c4b8240975a99","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709150479290,"stop":1709150479324,"duration":34}},{"uid":"584f8be05cc5b7b2","reportUrl":"https://novasamatech.github.io/test-runner/4785//#testresult/584f8be05cc5b7b2","status":"passed","time":{"start":1709136076818,"stop":1709136077016,"duration":198}},{"uid":"8403d028151d54c7","reportUrl":"https://novasamatech.github.io/test-runner/4784//#testresult/8403d028151d54c7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709121689301,"stop":1709121689467,"duration":166}},{"uid":"ba898495196c6e68","reportUrl":"https://novasamatech.github.io/test-runner/4783//#testresult/ba898495196c6e68","status":"passed","time":{"start":1709107265899,"stop":1709107266139,"duration":240}},{"uid":"fcc14d162d75ac2d","reportUrl":"https://novasamatech.github.io/test-runner/4782//#testresult/fcc14d162d75ac2d","status":"passed","time":{"start":1709092859991,"stop":1709092860345,"duration":354}},{"uid":"275aa9f598f7742e","reportUrl":"https://novasamatech.github.io/test-runner/4781//#testresult/275aa9f598f7742e","status":"passed","time":{"start":1709078492918,"stop":1709078493188,"duration":270}},{"uid":"3c876abfc01653a5","reportUrl":"https://novasamatech.github.io/test-runner/4780//#testresult/3c876abfc01653a5","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709064075975,"stop":1709064076356,"duration":381}},{"uid":"80bccdb37984ec76","reportUrl":"https://novasamatech.github.io/test-runner/4779//#testresult/80bccdb37984ec76","status":"passed","time":{"start":1709049668022,"stop":1709049668997,"duration":975}},{"uid":"f528369b9222406b","reportUrl":"https://novasamatech.github.io/test-runner/4778//#testresult/f528369b9222406b","status":"passed","time":{"start":1709035284467,"stop":1709035284692,"duration":225}}]},"tags":[]},"source":"9f92ad4ff070fb61.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}