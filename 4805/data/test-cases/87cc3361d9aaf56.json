{"uid":"87cc3361d9aaf56","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1709409670010,"stop":1709409670311,"duration":301},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fedae07dae0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fedacdf77c0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fedacdf7f10>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1456-39"},{"name":"thread","value":"2166-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4d2f863d93940832","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709409664676,"stop":1709409664976,"duration":300}},{"uid":"59ce7542ecad0131","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709409659264,"stop":1709409659566,"duration":302}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":16,"skipped":0,"passed":900,"unknown":0,"total":916},"items":[{"uid":"2ad464af4231d72c","reportUrl":"https://novasamatech.github.io/test-runner/4804//#testresult/2ad464af4231d72c","status":"passed","time":{"start":1709395273248,"stop":1709395273652,"duration":404}},{"uid":"ebb34283f9b011c3","reportUrl":"https://novasamatech.github.io/test-runner/4803//#testresult/ebb34283f9b011c3","status":"passed","time":{"start":1709380868821,"stop":1709380869241,"duration":420}},{"uid":"2add7ba84b4029e1","reportUrl":"https://novasamatech.github.io/test-runner/4802//#testresult/2add7ba84b4029e1","status":"passed","time":{"start":1709366467690,"stop":1709366468174,"duration":484}},{"uid":"ccfa192e38a9be04","reportUrl":"https://novasamatech.github.io/test-runner/4801//#testresult/ccfa192e38a9be04","status":"passed","time":{"start":1709352070065,"stop":1709352070507,"duration":442}},{"uid":"81f27b758f0faf12","reportUrl":"https://novasamatech.github.io/test-runner/4800//#testresult/81f27b758f0faf12","status":"passed","time":{"start":1709337708285,"stop":1709337708981,"duration":696}},{"uid":"1c892813d203b2a7","reportUrl":"https://novasamatech.github.io/test-runner/4799//#testresult/1c892813d203b2a7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709323285867,"stop":1709323285917,"duration":50}},{"uid":"26b77b6ef0e0f9f8","reportUrl":"https://novasamatech.github.io/test-runner/4798//#testresult/26b77b6ef0e0f9f8","status":"passed","time":{"start":1709308864555,"stop":1709308865066,"duration":511}},{"uid":"90637daccdc9b509","reportUrl":"https://novasamatech.github.io/test-runner/4796//#testresult/90637daccdc9b509","status":"passed","time":{"start":1709289996424,"stop":1709289996931,"duration":507}},{"uid":"ad043eb3a12a4b86","reportUrl":"https://novasamatech.github.io/test-runner/4789//#testresult/ad043eb3a12a4b86","status":"passed","time":{"start":1709193661431,"stop":1709193661618,"duration":187}},{"uid":"ddc4a7ede02215ab","reportUrl":"https://novasamatech.github.io/test-runner/4788//#testresult/ddc4a7ede02215ab","status":"passed","time":{"start":1709179266069,"stop":1709179267013,"duration":944}},{"uid":"d128006c800d92dd","reportUrl":"https://novasamatech.github.io/test-runner/4787//#testresult/d128006c800d92dd","status":"passed","time":{"start":1709164904994,"stop":1709164905657,"duration":663}},{"uid":"321cb5e40e7d5374","reportUrl":"https://novasamatech.github.io/test-runner/4786//#testresult/321cb5e40e7d5374","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709150479771,"stop":1709150479810,"duration":39}},{"uid":"15e391203d8bf111","reportUrl":"https://novasamatech.github.io/test-runner/4785//#testresult/15e391203d8bf111","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709136078330,"stop":1709136078391,"duration":61}},{"uid":"3e750a33e910a0e9","reportUrl":"https://novasamatech.github.io/test-runner/4784//#testresult/3e750a33e910a0e9","status":"passed","time":{"start":1709121700153,"stop":1709121700935,"duration":782}},{"uid":"9898d5d5604c770","reportUrl":"https://novasamatech.github.io/test-runner/4783//#testresult/9898d5d5604c770","status":"passed","time":{"start":1709107266429,"stop":1709107267142,"duration":713}},{"uid":"a6bf6f803179de44","reportUrl":"https://novasamatech.github.io/test-runner/4782//#testresult/a6bf6f803179de44","status":"passed","time":{"start":1709092860730,"stop":1709092861226,"duration":496}},{"uid":"e1a704711c5afce6","reportUrl":"https://novasamatech.github.io/test-runner/4781//#testresult/e1a704711c5afce6","status":"passed","time":{"start":1709078493395,"stop":1709078493655,"duration":260}},{"uid":"e93a3df810a1b769","reportUrl":"https://novasamatech.github.io/test-runner/4780//#testresult/e93a3df810a1b769","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709064087769,"stop":1709064088141,"duration":372}},{"uid":"941ffee95b086b7d","reportUrl":"https://novasamatech.github.io/test-runner/4779//#testresult/941ffee95b086b7d","status":"passed","time":{"start":1709049669209,"stop":1709049670080,"duration":871}},{"uid":"9c224612becdc9a0","reportUrl":"https://novasamatech.github.io/test-runner/4778//#testresult/9c224612becdc9a0","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709035285851,"stop":1709035285904,"duration":53}}]},"tags":[]},"source":"87cc3361d9aaf56.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}