{"uid":"6f9cc365795c7ed9","name":"test_can_create_connection[Test for Darwinia, url: wss://parachain-rpc.darwinia.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"4001fe03ac55414385ead6c59c2ad970","time":{"start":1694448202105,"stop":1694448217749,"duration":15644},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'date': 'Mon, 11 Sep 2023 16:03:37 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '0', 'connection': 'keep-alive', 'x-ratelimit-remaining-minute': '49869', 'x-ratelimit-limit-minute': '50000', 'ratelimit-remaining': '49869', 'ratelimit-limit': '50000', 'ratelimit-reset': '38', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'vary': 'access-control-request-headers', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '15024', 'x-kong-proxy-latency': '2', 'via': 'kong/2.3.3', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '805123ef5cc62b8f-LAX', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- b''","statusTrace":"data = {'name': 'Darwinia', 'url': 'wss://parachain-rpc.darwinia.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'date': 'Mon, 11 Sep 2023 16:03:37 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '0', 'connection': 'keep-alive', 'x-ratelimit-remaining-minute': '49869', 'x-ratelimit-limit-minute': '50000', 'ratelimit-remaining': '49869', 'ratelimit-limit': '50000', 'ratelimit-reset': '38', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'vary': 'access-control-request-headers', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '15024', 'x-kong-proxy-latency': '2', 'via': 'kong/2.3.3', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '805123ef5cc62b8f-LAX', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'date': 'Mon, 11 Sep 2023 16:03:37 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '0', 'connection': 'keep-alive', 'x-ratelimit-remaining-minute': '49869', 'x-ratelimit-limit-minute': '50000', 'ratelimit-remaining': '49869', 'ratelimit-limit': '50000', 'ratelimit-reset': '38', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'vary': 'access-control-request-headers', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '15024', 'x-kong-proxy-latency': '2', 'via': 'kong/2.3.3', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '805123ef5cc62b8f-LAX', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- b''","statusTrace":"data = {'name': 'Darwinia', 'url': 'wss://parachain-rpc.darwinia.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'date': 'Mon, 11 Sep 2023 16:03:37 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '0', 'connection': 'keep-alive', 'x-ratelimit-remaining-minute': '49869', 'x-ratelimit-limit-minute': '50000', 'ratelimit-remaining': '49869', 'ratelimit-limit': '50000', 'ratelimit-reset': '38', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'vary': 'access-control-request-headers', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '15024', 'x-kong-proxy-latency': '2', 'via': 'kong/2.3.3', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '805123ef5cc62b8f-LAX', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"2b70488963f387da","name":"stdout","source":"2b70488963f387da.txt","type":"text/plain","size":2396}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az581-819"},{"name":"thread","value":"2042-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://parachain-rpc.darwinia.network', 'name': 'Darwinia'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3e3d7a76f1aea066","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'date': 'Mon, 11 Sep 2023 16:03:07 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '0', 'connection': 'keep-alive', 'x-ratelimit-remaining-minute': '49723', 'x-ratelimit-limit-minute': '50000', 'ratelimit-remaining': '49723', 'ratelimit-limit': '50000', 'ratelimit-reset': '9', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'vary': 'access-control-request-headers', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '15040', 'x-kong-proxy-latency': '8', 'via': 'kong/2.3.3', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '8051232e4f492b9a-LAX', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- b''","time":{"start":1694448171211,"stop":1694448187016,"duration":15805}},{"uid":"c4deb7467c61bc54","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden -+-+- {'date': 'Mon, 11 Sep 2023 16:02:36 GMT', 'content-type': 'text/plain; charset=UTF-8', 'content-length': '0', 'connection': 'keep-alive', 'x-ratelimit-remaining-minute': '49889', 'x-ratelimit-limit-minute': '50000', 'ratelimit-remaining': '49889', 'ratelimit-limit': '50000', 'ratelimit-reset': '40', 'access-control-allow-origin': '*', 'access-control-expose-headers': '*', 'vary': 'access-control-request-headers', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '15020', 'x-kong-proxy-latency': '2', 'via': 'kong/2.3.3', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '8051226d98432b7e-LAX', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- b''","time":{"start":1694448140376,"stop":1694448156124,"duration":15748}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":109,"unknown":0,"total":110},"items":[{"uid":"ffe808a74d540842","reportUrl":"https://novasamatech.github.io/test-runner/3748//#testresult/ffe808a74d540842","status":"passed","time":{"start":1694433840791,"stop":1694433842429,"duration":1638}},{"uid":"6adbc1256afc1ebf","reportUrl":"https://novasamatech.github.io/test-runner/3747//#testresult/6adbc1256afc1ebf","status":"passed","time":{"start":1694419732089,"stop":1694419733153,"duration":1064}},{"uid":"2157b2a75b6bbb99","reportUrl":"https://novasamatech.github.io/test-runner/3746//#testresult/2157b2a75b6bbb99","status":"passed","time":{"start":1694404961005,"stop":1694404962282,"duration":1277}},{"uid":"7cf1017d4525e371","reportUrl":"https://novasamatech.github.io/test-runner/3745//#testresult/7cf1017d4525e371","status":"passed","time":{"start":1694390576399,"stop":1694390577770,"duration":1371}},{"uid":"ff829cfc017f31ec","reportUrl":"https://novasamatech.github.io/test-runner/3744//#testresult/ff829cfc017f31ec","status":"passed","time":{"start":1694376163904,"stop":1694376164958,"duration":1054}},{"uid":"b612997f2babb0eb","reportUrl":"https://novasamatech.github.io/test-runner/3743//#testresult/b612997f2babb0eb","status":"passed","time":{"start":1694361742263,"stop":1694361743265,"duration":1002}},{"uid":"bd2b232bc8a7fa","reportUrl":"https://novasamatech.github.io/test-runner/3742//#testresult/bd2b232bc8a7fa","status":"passed","time":{"start":1694347357137,"stop":1694347357807,"duration":670}},{"uid":"641f8c222ec22330","reportUrl":"https://novasamatech.github.io/test-runner/3741//#testresult/641f8c222ec22330","status":"passed","time":{"start":1694332952279,"stop":1694332953160,"duration":881}},{"uid":"b6e187770b1e31c7","reportUrl":"https://novasamatech.github.io/test-runner/3740//#testresult/b6e187770b1e31c7","status":"passed","time":{"start":1694318553814,"stop":1694318554311,"duration":497}},{"uid":"a62de0d1272fd91d","reportUrl":"https://novasamatech.github.io/test-runner/3739//#testresult/a62de0d1272fd91d","status":"passed","time":{"start":1694304178180,"stop":1694304178927,"duration":747}},{"uid":"ad9c7435aba7d257","reportUrl":"https://novasamatech.github.io/test-runner/3738//#testresult/ad9c7435aba7d257","status":"passed","time":{"start":1694289729352,"stop":1694289730743,"duration":1391}},{"uid":"500b136255f54f30","reportUrl":"https://novasamatech.github.io/test-runner/3737//#testresult/500b136255f54f30","status":"passed","time":{"start":1694275341768,"stop":1694275342449,"duration":681}},{"uid":"ac6ffaa2fe32909","reportUrl":"https://novasamatech.github.io/test-runner/3736//#testresult/ac6ffaa2fe32909","status":"passed","time":{"start":1694260962512,"stop":1694260962962,"duration":450}},{"uid":"428647201c8472a","reportUrl":"https://novasamatech.github.io/test-runner/3735//#testresult/428647201c8472a","status":"passed","time":{"start":1694246531458,"stop":1694246531984,"duration":526}},{"uid":"21d2b4818f13e6f0","reportUrl":"https://novasamatech.github.io/test-runner/3734//#testresult/21d2b4818f13e6f0","status":"passed","time":{"start":1694232115817,"stop":1694232116563,"duration":746}},{"uid":"d49d9fec9133fc53","reportUrl":"https://novasamatech.github.io/test-runner/3733//#testresult/d49d9fec9133fc53","status":"passed","time":{"start":1694217792296,"stop":1694217792895,"duration":599}},{"uid":"f358431d1f5b1c6","reportUrl":"https://novasamatech.github.io/test-runner/3732//#testresult/f358431d1f5b1c6","status":"passed","time":{"start":1694203342684,"stop":1694203343698,"duration":1014}},{"uid":"c61de178f7e178ac","reportUrl":"https://novasamatech.github.io/test-runner/3731//#testresult/c61de178f7e178ac","status":"passed","time":{"start":1694188984761,"stop":1694188986378,"duration":1617}},{"uid":"d211ddb311ebeb5a","reportUrl":"https://novasamatech.github.io/test-runner/3730//#testresult/d211ddb311ebeb5a","status":"passed","time":{"start":1694174546622,"stop":1694174547346,"duration":724}},{"uid":"380bc232e1119edb","reportUrl":"https://novasamatech.github.io/test-runner/3729//#testresult/380bc232e1119edb","status":"passed","time":{"start":1694160116045,"stop":1694160116865,"duration":820}}]},"tags":[]},"source":"6f9cc365795c7ed9.json","parameterValues":["{'url': 'wss://parachain-rpc.darwinia.network', 'name': 'Darwinia'}"]}