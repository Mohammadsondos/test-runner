{"uid":"7ce64b20b4db29aa","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1710792070001,"stop":1710792070352,"duration":351},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7d28aa07d5a0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7d28a8ccbdc0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7d28a8cc8a00>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az568-332"},{"name":"thread","value":"2231-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e8aa8bff97d3d9ec","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792064617,"stop":1710792064967,"duration":350}},{"uid":"a3cfeb86d501d79b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792059149,"stop":1710792059506,"duration":357}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":34,"skipped":0,"passed":975,"unknown":0,"total":1012},"items":[{"uid":"a8de52063d9bd256","reportUrl":"https://novasamatech.github.io/test-runner/4900//#testresult/a8de52063d9bd256","status":"passed","time":{"start":1710777672637,"stop":1710777672952,"duration":315}},{"uid":"535d649f15cdbeb7","reportUrl":"https://novasamatech.github.io/test-runner/4899//#testresult/535d649f15cdbeb7","status":"passed","time":{"start":1710763264622,"stop":1710763265051,"duration":429}},{"uid":"439c70a032078266","reportUrl":"https://novasamatech.github.io/test-runner/4898//#testresult/439c70a032078266","status":"passed","time":{"start":1710748865655,"stop":1710748865815,"duration":160}},{"uid":"6c27e4fccc07d0a","reportUrl":"https://novasamatech.github.io/test-runner/4897//#testresult/6c27e4fccc07d0a","status":"passed","time":{"start":1710734464043,"stop":1710734464558,"duration":515}},{"uid":"10c1f8544aae69e0","reportUrl":"https://novasamatech.github.io/test-runner/4896//#testresult/10c1f8544aae69e0","status":"passed","time":{"start":1710720102513,"stop":1710720102842,"duration":329}},{"uid":"d1664b898aa32195","reportUrl":"https://novasamatech.github.io/test-runner/4895//#testresult/d1664b898aa32195","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710705670629,"stop":1710705670716,"duration":87}},{"uid":"9fa5cdd8c86271ba","reportUrl":"https://novasamatech.github.io/test-runner/4894//#testresult/9fa5cdd8c86271ba","status":"passed","time":{"start":1710691269954,"stop":1710691270333,"duration":379}},{"uid":"b95c5fae2c99dea1","reportUrl":"https://novasamatech.github.io/test-runner/4893//#testresult/b95c5fae2c99dea1","status":"passed","time":{"start":1710676865425,"stop":1710676865921,"duration":496}},{"uid":"c7525d1b140f5fb9","reportUrl":"https://novasamatech.github.io/test-runner/4892//#testresult/c7525d1b140f5fb9","status":"passed","time":{"start":1710662466600,"stop":1710662467185,"duration":585}},{"uid":"bd367f3282bebefc","reportUrl":"https://novasamatech.github.io/test-runner/4891//#testresult/bd367f3282bebefc","status":"passed","time":{"start":1710648064508,"stop":1710648065083,"duration":575}},{"uid":"ca64938144321f2a","reportUrl":"https://novasamatech.github.io/test-runner/4890//#testresult/ca64938144321f2a","status":"passed","time":{"start":1710633704182,"stop":1710633704312,"duration":130}},{"uid":"f003f25cdef77211","reportUrl":"https://novasamatech.github.io/test-runner/4889//#testresult/f003f25cdef77211","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1710619272727,"stop":1710619272990,"duration":263}},{"uid":"a841e4a1a5314793","reportUrl":"https://novasamatech.github.io/test-runner/4888//#testresult/a841e4a1a5314793","status":"passed","time":{"start":1710604860704,"stop":1710604860978,"duration":274}},{"uid":"3a2fa07997e46416","reportUrl":"https://novasamatech.github.io/test-runner/4887//#testresult/3a2fa07997e46416","status":"passed","time":{"start":1710590465193,"stop":1710590465522,"duration":329}},{"uid":"234bc9fc945cd4bc","reportUrl":"https://novasamatech.github.io/test-runner/4886//#testresult/234bc9fc945cd4bc","status":"passed","time":{"start":1710576068513,"stop":1710576068922,"duration":409}},{"uid":"a0904166fcc07c2","reportUrl":"https://novasamatech.github.io/test-runner/4885//#testresult/a0904166fcc07c2","status":"passed","time":{"start":1710561661478,"stop":1710561661704,"duration":226}},{"uid":"ce9fd6c524b4bf92","reportUrl":"https://novasamatech.github.io/test-runner/4884//#testresult/ce9fd6c524b4bf92","status":"passed","time":{"start":1710547296957,"stop":1710547297476,"duration":519}},{"uid":"571be42e3482ca1f","reportUrl":"https://novasamatech.github.io/test-runner/4883//#testresult/571be42e3482ca1f","status":"passed","time":{"start":1710532861927,"stop":1710532862058,"duration":131}},{"uid":"1f8570d4abb8a5b1","reportUrl":"https://novasamatech.github.io/test-runner/4882//#testresult/1f8570d4abb8a5b1","status":"passed","time":{"start":1710518461009,"stop":1710518461865,"duration":856}},{"uid":"befbe7ae35558f50","reportUrl":"https://novasamatech.github.io/test-runner/4881//#testresult/befbe7ae35558f50","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710504077218,"stop":1710504077263,"duration":45}}]},"tags":[]},"source":"7ce64b20b4db29aa.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}