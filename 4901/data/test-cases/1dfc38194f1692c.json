{"uid":"1dfc38194f1692c","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1710792068957,"stop":1710792069309,"duration":352},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f4fb878d300>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f4fb858aa10>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f4fb858ae30>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az568-332"},{"name":"thread","value":"2234-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"958c95c0b1f2b4f8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792063545,"stop":1710792063923,"duration":378}},{"uid":"bf8025151dfa5e19","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792058040,"stop":1710792058432,"duration":392}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":35,"skipped":0,"passed":976,"unknown":0,"total":1012},"items":[{"uid":"7c411de54af8fa2","reportUrl":"https://novasamatech.github.io/test-runner/4900//#testresult/7c411de54af8fa2","status":"passed","time":{"start":1710777671784,"stop":1710777672140,"duration":356}},{"uid":"cd4c3a26042d96e3","reportUrl":"https://novasamatech.github.io/test-runner/4899//#testresult/cd4c3a26042d96e3","status":"passed","time":{"start":1710763263331,"stop":1710763264212,"duration":881}},{"uid":"7b6a8e9e16bf8505","reportUrl":"https://novasamatech.github.io/test-runner/4898//#testresult/7b6a8e9e16bf8505","status":"passed","time":{"start":1710748865358,"stop":1710748865727,"duration":369}},{"uid":"7e1ddb2ded336cf0","reportUrl":"https://novasamatech.github.io/test-runner/4897//#testresult/7e1ddb2ded336cf0","status":"passed","time":{"start":1710734463456,"stop":1710734463887,"duration":431}},{"uid":"d218f5379e349013","reportUrl":"https://novasamatech.github.io/test-runner/4896//#testresult/d218f5379e349013","status":"passed","time":{"start":1710720101403,"stop":1710720101879,"duration":476}},{"uid":"3e3916118b0dc5cb","reportUrl":"https://novasamatech.github.io/test-runner/4895//#testresult/3e3916118b0dc5cb","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.1}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1710705670415,"stop":1710705670686,"duration":271}},{"uid":"eb5379d9203e067c","reportUrl":"https://novasamatech.github.io/test-runner/4894//#testresult/eb5379d9203e067c","status":"passed","time":{"start":1710691269099,"stop":1710691269536,"duration":437}},{"uid":"d08f15a5a1d9572d","reportUrl":"https://novasamatech.github.io/test-runner/4893//#testresult/d08f15a5a1d9572d","status":"passed","time":{"start":1710676864983,"stop":1710676865546,"duration":563}},{"uid":"3d7a4f99f952be01","reportUrl":"https://novasamatech.github.io/test-runner/4892//#testresult/3d7a4f99f952be01","status":"passed","time":{"start":1710662465909,"stop":1710662466830,"duration":921}},{"uid":"80f83bcc7ae9f958","reportUrl":"https://novasamatech.github.io/test-runner/4891//#testresult/80f83bcc7ae9f958","status":"passed","time":{"start":1710648063761,"stop":1710648064564,"duration":803}},{"uid":"1c8c94ce7b578049","reportUrl":"https://novasamatech.github.io/test-runner/4890//#testresult/1c8c94ce7b578049","status":"passed","time":{"start":1710633703542,"stop":1710633704242,"duration":700}},{"uid":"11e76c3bdf7b51d3","reportUrl":"https://novasamatech.github.io/test-runner/4889//#testresult/11e76c3bdf7b51d3","status":"passed","time":{"start":1710619272442,"stop":1710619272775,"duration":333}},{"uid":"ddf054f2809ef570","reportUrl":"https://novasamatech.github.io/test-runner/4888//#testresult/ddf054f2809ef570","status":"passed","time":{"start":1710604860104,"stop":1710604860730,"duration":626}},{"uid":"e10efc8f7757e732","reportUrl":"https://novasamatech.github.io/test-runner/4887//#testresult/e10efc8f7757e732","status":"passed","time":{"start":1710590464242,"stop":1710590464617,"duration":375}},{"uid":"15bc55a0a7ee529f","reportUrl":"https://novasamatech.github.io/test-runner/4886//#testresult/15bc55a0a7ee529f","status":"passed","time":{"start":1710576067676,"stop":1710576068547,"duration":871}},{"uid":"991d94f21e25b75f","reportUrl":"https://novasamatech.github.io/test-runner/4885//#testresult/991d94f21e25b75f","status":"passed","time":{"start":1710561661162,"stop":1710561661340,"duration":178}},{"uid":"422e53d735e8e51f","reportUrl":"https://novasamatech.github.io/test-runner/4884//#testresult/422e53d735e8e51f","status":"passed","time":{"start":1710547296251,"stop":1710547296933,"duration":682}},{"uid":"db4c6774873b3f06","reportUrl":"https://novasamatech.github.io/test-runner/4883//#testresult/db4c6774873b3f06","status":"passed","time":{"start":1710532861003,"stop":1710532861166,"duration":163}},{"uid":"342bbb22c6f40234","reportUrl":"https://novasamatech.github.io/test-runner/4882//#testresult/342bbb22c6f40234","status":"passed","time":{"start":1710518460351,"stop":1710518460927,"duration":576}},{"uid":"da3046ba3f74eb1e","reportUrl":"https://novasamatech.github.io/test-runner/4881//#testresult/da3046ba3f74eb1e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710504076363,"stop":1710504076460,"duration":97}}]},"tags":[]},"source":"1dfc38194f1692c.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}