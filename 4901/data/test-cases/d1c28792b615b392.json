{"uid":"d1c28792b615b392","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1710792080734,"stop":1710792081086,"duration":352},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x78136de8d600>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x78136ccad5d0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x78136ccafdf0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az568-332"},{"name":"thread","value":"2228-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2cda43dc42b59b66","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792075320,"stop":1710792075699,"duration":379}},{"uid":"3f2cc1b2d2d588f3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792069912,"stop":1710792070286,"duration":374}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":38,"skipped":0,"passed":973,"unknown":0,"total":1012},"items":[{"uid":"f0034f9891ac0cad","reportUrl":"https://novasamatech.github.io/test-runner/4900//#testresult/f0034f9891ac0cad","status":"passed","time":{"start":1710777672304,"stop":1710777672813,"duration":509}},{"uid":"24bde4e59140088c","reportUrl":"https://novasamatech.github.io/test-runner/4899//#testresult/24bde4e59140088c","status":"passed","time":{"start":1710763263869,"stop":1710763264319,"duration":450}},{"uid":"c526c3afbd661b3a","reportUrl":"https://novasamatech.github.io/test-runner/4898//#testresult/c526c3afbd661b3a","status":"passed","time":{"start":1710748865818,"stop":1710748866010,"duration":192}},{"uid":"a5790bf113a2ca3d","reportUrl":"https://novasamatech.github.io/test-runner/4897//#testresult/a5790bf113a2ca3d","status":"passed","time":{"start":1710734469586,"stop":1710734470389,"duration":803}},{"uid":"99f11db317503895","reportUrl":"https://novasamatech.github.io/test-runner/4896//#testresult/99f11db317503895","status":"passed","time":{"start":1710720102165,"stop":1710720102610,"duration":445}},{"uid":"5e17f04a82e4dc53","reportUrl":"https://novasamatech.github.io/test-runner/4895//#testresult/5e17f04a82e4dc53","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710705671361,"stop":1710705671383,"duration":22}},{"uid":"7c7840f5e6f02799","reportUrl":"https://novasamatech.github.io/test-runner/4894//#testresult/7c7840f5e6f02799","status":"passed","time":{"start":1710691269463,"stop":1710691269852,"duration":389}},{"uid":"3e73feef5b2eb0ae","reportUrl":"https://novasamatech.github.io/test-runner/4893//#testresult/3e73feef5b2eb0ae","status":"passed","time":{"start":1710676866135,"stop":1710676866437,"duration":302}},{"uid":"58fe10df34ef0e1b","reportUrl":"https://novasamatech.github.io/test-runner/4892//#testresult/58fe10df34ef0e1b","status":"passed","time":{"start":1710662467280,"stop":1710662467890,"duration":610}},{"uid":"29838d3f1b768637","reportUrl":"https://novasamatech.github.io/test-runner/4891//#testresult/29838d3f1b768637","status":"passed","time":{"start":1710648065002,"stop":1710648065574,"duration":572}},{"uid":"a5e05577a33d61d0","reportUrl":"https://novasamatech.github.io/test-runner/4890//#testresult/a5e05577a33d61d0","status":"passed","time":{"start":1710633704270,"stop":1710633704550,"duration":280}},{"uid":"57987476ca6b1578","reportUrl":"https://novasamatech.github.io/test-runner/4889//#testresult/57987476ca6b1578","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710619283150,"stop":1710619283207,"duration":57}},{"uid":"a92ef79d97db9ebe","reportUrl":"https://novasamatech.github.io/test-runner/4888//#testresult/a92ef79d97db9ebe","status":"passed","time":{"start":1710604860981,"stop":1710604861268,"duration":287}},{"uid":"30272fef9d1d45e2","reportUrl":"https://novasamatech.github.io/test-runner/4887//#testresult/30272fef9d1d45e2","status":"passed","time":{"start":1710590464927,"stop":1710590465328,"duration":401}},{"uid":"f73134c998cf96a5","reportUrl":"https://novasamatech.github.io/test-runner/4886//#testresult/f73134c998cf96a5","status":"passed","time":{"start":1710576068365,"stop":1710576068847,"duration":482}},{"uid":"98145f64aa46f775","reportUrl":"https://novasamatech.github.io/test-runner/4885//#testresult/98145f64aa46f775","status":"passed","time":{"start":1710561661705,"stop":1710561661859,"duration":154}},{"uid":"f6fff5d42ba03de6","reportUrl":"https://novasamatech.github.io/test-runner/4884//#testresult/f6fff5d42ba03de6","status":"passed","time":{"start":1710547297417,"stop":1710547298026,"duration":609}},{"uid":"7734fa080f752bd6","reportUrl":"https://novasamatech.github.io/test-runner/4883//#testresult/7734fa080f752bd6","status":"passed","time":{"start":1710532861496,"stop":1710532861927,"duration":431}},{"uid":"ddccd6ab26976e19","reportUrl":"https://novasamatech.github.io/test-runner/4882//#testresult/ddccd6ab26976e19","status":"passed","time":{"start":1710518461251,"stop":1710518463818,"duration":2567}},{"uid":"37085a31ccf7b357","reportUrl":"https://novasamatech.github.io/test-runner/4881//#testresult/37085a31ccf7b357","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710504086752,"stop":1710504086816,"duration":64}}]},"tags":[]},"source":"d1c28792b615b392.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}