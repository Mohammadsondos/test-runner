{"uid":"47ab7b4a6c91e9bc","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1715371285522,"stop":1715371285706,"duration":184},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f9846ff1ab0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f9844df0c10>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f9844df1000>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az654-974"},{"name":"thread","value":"2108-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"22d09a4eb5912794","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1715371280344,"stop":1715371280487,"duration":143}},{"uid":"ca88afb214406c06","status":"failed","statusDetails":"AssertionError: Difference in block numbers is greater than 3:            wss_block_number=19841889, rpc_block_number=19841884\nassert 5 <= 3\n +  where 5 = abs((19841889 - 19841884))","time":{"start":1715371274972,"stop":1715371275333,"duration":361}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":50,"skipped":0,"passed":792,"unknown":0,"total":848},"items":[{"uid":"ca47a97797d870de","reportUrl":"https://novasamatech.github.io/test-runner/5223//#testresult/ca47a97797d870de","status":"passed","time":{"start":1715356946004,"stop":1715356946801,"duration":797}},{"uid":"db9178f6294801e6","reportUrl":"https://novasamatech.github.io/test-runner/5221//#testresult/db9178f6294801e6","status":"passed","time":{"start":1715328106796,"stop":1715328106933,"duration":137}},{"uid":"e5bf4b1df39dfb3e","reportUrl":"https://novasamatech.github.io/test-runner/5222//#testresult/e5bf4b1df39dfb3e","status":"passed","time":{"start":1715342480266,"stop":1715342481557,"duration":1291}},{"uid":"b3738825ee132b08","reportUrl":"https://novasamatech.github.io/test-runner/5220//#testresult/b3738825ee132b08","status":"passed","time":{"start":1715313663697,"stop":1715313663898,"duration":201}},{"uid":"3db21414bb2fb14e","reportUrl":"https://novasamatech.github.io/test-runner/5219//#testresult/3db21414bb2fb14e","status":"passed","time":{"start":1715299356309,"stop":1715299357060,"duration":751}},{"uid":"1de21db51cf3faf0","reportUrl":"https://novasamatech.github.io/test-runner/5217//#testresult/1de21db51cf3faf0","status":"passed","time":{"start":1715270458584,"stop":1715270458987,"duration":403}},{"uid":"7a8519e451a8bbe6","reportUrl":"https://novasamatech.github.io/test-runner/5218//#testresult/7a8519e451a8bbe6","status":"passed","time":{"start":1715284891692,"stop":1715284892089,"duration":397}},{"uid":"8d2d60108f830e87","reportUrl":"https://novasamatech.github.io/test-runner/5216//#testresult/8d2d60108f830e87","status":"passed","time":{"start":1715256063047,"stop":1715256063274,"duration":227}},{"uid":"a72a6191c1209308","reportUrl":"https://novasamatech.github.io/test-runner/5215//#testresult/a72a6191c1209308","status":"passed","time":{"start":1715241664906,"stop":1715241665240,"duration":334}},{"uid":"d25fa1494af7230a","reportUrl":"https://novasamatech.github.io/test-runner/5213//#testresult/d25fa1494af7230a","status":"passed","time":{"start":1715212915486,"stop":1715212916161,"duration":675}},{"uid":"b40adcdf1967fcf3","reportUrl":"https://novasamatech.github.io/test-runner/5214//#testresult/b40adcdf1967fcf3","status":"passed","time":{"start":1715227259957,"stop":1715227260646,"duration":689}},{"uid":"d76e0625a78b2e43","reportUrl":"https://novasamatech.github.io/test-runner/5212//#testresult/d76e0625a78b2e43","status":"passed","time":{"start":1715198460161,"stop":1715198460388,"duration":227}},{"uid":"f5155a9dbcf78bbc","reportUrl":"https://novasamatech.github.io/test-runner/5210//#testresult/f5155a9dbcf78bbc","status":"passed","time":{"start":1715169666644,"stop":1715169666874,"duration":230}},{"uid":"d67e325a7ed6e886","reportUrl":"https://novasamatech.github.io/test-runner/5211//#testresult/d67e325a7ed6e886","status":"passed","time":{"start":1715184073279,"stop":1715184073947,"duration":668}},{"uid":"264d79c50b6490ad","reportUrl":"https://novasamatech.github.io/test-runner/5208//#testresult/264d79c50b6490ad","status":"passed","time":{"start":1715140863330,"stop":1715140864034,"duration":704}},{"uid":"c7442f10e2d2da18","reportUrl":"https://novasamatech.github.io/test-runner/5209//#testresult/c7442f10e2d2da18","status":"passed","time":{"start":1715155262484,"stop":1715155262839,"duration":355}},{"uid":"84dfb29c5f2b1e76","reportUrl":"https://novasamatech.github.io/test-runner/5207//#testresult/84dfb29c5f2b1e76","status":"passed","time":{"start":1715126487861,"stop":1715126488015,"duration":154}},{"uid":"f4a6fbc00a0ee59f","reportUrl":"https://novasamatech.github.io/test-runner/5205//#testresult/f4a6fbc00a0ee59f","status":"passed","time":{"start":1715097666118,"stop":1715097666316,"duration":198}},{"uid":"7c4e3337a259cd75","reportUrl":"https://novasamatech.github.io/test-runner/5206//#testresult/7c4e3337a259cd75","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1715112069548,"stop":1715112069618,"duration":70}},{"uid":"f7ffb7618a6e8088","reportUrl":"https://novasamatech.github.io/test-runner/5204//#testresult/f7ffb7618a6e8088","status":"passed","time":{"start":1715083275481,"stop":1715083276229,"duration":748}}]},"tags":[]},"source":"47ab7b4a6c91e9bc.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}