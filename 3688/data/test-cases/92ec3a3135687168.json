{"uid":"92ec3a3135687168","name":"test_can_create_connection[Test for KILT, url: wss://spiritnet.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"adf1600e77e05ae28b71b4467db54727","time":{"start":1693569773286,"stop":1693569773564,"duration":278},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'KILT', 'url': 'wss://spiritnet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'KILT', 'url': 'wss://spiritnet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"212f555d24461c2c","name":"stdout","source":"212f555d24461c2c.txt","type":"text/plain","size":576}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az877-693"},{"name":"thread","value":"2038-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://spiritnet.api.onfinality.io/public-ws', 'name': 'KILT'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"913d66c593e28fda","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1693569757838,"stop":1693569758100,"duration":262}},{"uid":"8e391eec81640ceb","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1693569742409,"stop":1693569742709,"duration":300}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":48,"unknown":0,"total":50},"items":[{"uid":"204287dbe1d9ff1e","reportUrl":"https://novasamatech.github.io/test-runner/3687//#testresult/204287dbe1d9ff1e","status":"passed","time":{"start":1693556971109,"stop":1693556971710,"duration":601}},{"uid":"6f6a2e969cf81d61","reportUrl":"https://novasamatech.github.io/test-runner/3686//#testresult/6f6a2e969cf81d61","status":"passed","time":{"start":1693540899692,"stop":1693540900492,"duration":800}},{"uid":"72fc19369ccf9de0","reportUrl":"https://novasamatech.github.io/test-runner/3685//#testresult/72fc19369ccf9de0","status":"passed","time":{"start":1693526580836,"stop":1693526581526,"duration":690}},{"uid":"eab3853569d83e36","reportUrl":"https://novasamatech.github.io/test-runner/3684//#testresult/eab3853569d83e36","status":"passed","time":{"start":1693512163543,"stop":1693512164224,"duration":681}},{"uid":"741244e71fe23585","reportUrl":"https://novasamatech.github.io/test-runner/3683//#testresult/741244e71fe23585","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1693497713733,"stop":1693497713922,"duration":189}},{"uid":"502aa2b21ef8befd","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/502aa2b21ef8befd","status":"passed","time":{"start":1693483315002,"stop":1693483315601,"duration":599}},{"uid":"61422916ce3ad220","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/61422916ce3ad220","status":"passed","time":{"start":1693468883283,"stop":1693468883723,"duration":440}},{"uid":"424465d565fef2f3","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/424465d565fef2f3","status":"passed","time":{"start":1693454516366,"stop":1693454516996,"duration":630}},{"uid":"a8a123f49e48429a","reportUrl":"https://novasamatech.github.io/test-runner/3679//#testresult/a8a123f49e48429a","status":"passed","time":{"start":1693440147018,"stop":1693440152723,"duration":5705}},{"uid":"74ed1fa4ad93b95e","reportUrl":"https://novasamatech.github.io/test-runner/3678//#testresult/74ed1fa4ad93b95e","status":"passed","time":{"start":1693425683838,"stop":1693425684433,"duration":595}},{"uid":"91be54147771aa87","reportUrl":"https://novasamatech.github.io/test-runner/3677//#testresult/91be54147771aa87","status":"passed","time":{"start":1693411326390,"stop":1693411327293,"duration":903}},{"uid":"2a8c2d3c6c07067e","reportUrl":"https://novasamatech.github.io/test-runner/3676//#testresult/2a8c2d3c6c07067e","status":"passed","time":{"start":1693396914487,"stop":1693396915203,"duration":716}},{"uid":"b0d0b948a88d70f8","reportUrl":"https://novasamatech.github.io/test-runner/3675//#testresult/b0d0b948a88d70f8","status":"passed","time":{"start":1693382483826,"stop":1693382484241,"duration":415}},{"uid":"3f3bc648335bf9ef","reportUrl":"https://novasamatech.github.io/test-runner/3674//#testresult/3f3bc648335bf9ef","status":"passed","time":{"start":1693368081334,"stop":1693368082807,"duration":1473}},{"uid":"4dfc45ccabd21772","reportUrl":"https://novasamatech.github.io/test-runner/3673//#testresult/4dfc45ccabd21772","status":"passed","time":{"start":1693353739012,"stop":1693353739708,"duration":696}},{"uid":"883b457847c70054","reportUrl":"https://novasamatech.github.io/test-runner/3672//#testresult/883b457847c70054","status":"passed","time":{"start":1693339289156,"stop":1693339289849,"duration":693}},{"uid":"728381ea8f91e92a","reportUrl":"https://novasamatech.github.io/test-runner/3671//#testresult/728381ea8f91e92a","status":"passed","time":{"start":1693324893249,"stop":1693324893921,"duration":672}},{"uid":"8f7c98ad7a983f0e","reportUrl":"https://novasamatech.github.io/test-runner/3670//#testresult/8f7c98ad7a983f0e","status":"passed","time":{"start":1693310493164,"stop":1693310493596,"duration":432}},{"uid":"b50d95099d41b45d","reportUrl":"https://novasamatech.github.io/test-runner/3669//#testresult/b50d95099d41b45d","status":"passed","time":{"start":1693296119163,"stop":1693296119588,"duration":425}},{"uid":"d310a2640eb680f3","reportUrl":"https://novasamatech.github.io/test-runner/3668//#testresult/d310a2640eb680f3","status":"passed","time":{"start":1693281689688,"stop":1693281690307,"duration":619}}]},"tags":[]},"source":"92ec3a3135687168.json","parameterValues":["{'url': 'wss://spiritnet.api.onfinality.io/public-ws', 'name': 'KILT'}"]}