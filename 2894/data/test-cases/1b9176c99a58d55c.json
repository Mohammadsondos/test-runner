{"uid":"1b9176c99a58d55c","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1682496368924,"stop":1682496369141,"duration":217},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"19d58e29ba96c284","name":"stdout","source":"19d58e29ba96c284.txt","type":"text/plain","size":226}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az507-454"},{"name":"thread","value":"1872-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"99a3ad77b78dc079","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1682496358584,"stop":1682496358801,"duration":217}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":36,"unknown":0,"total":38},"items":[{"uid":"6586c348cf6d484f","reportUrl":"https://nova-wallet.github.io/test-runner/2893//#testresult/6586c348cf6d484f","status":"passed","time":{"start":1682481941247,"stop":1682481941544,"duration":297}},{"uid":"6fcc813676a00d09","reportUrl":"https://nova-wallet.github.io/test-runner/2892//#testresult/6fcc813676a00d09","status":"passed","time":{"start":1682468067072,"stop":1682468067313,"duration":241}},{"uid":"671055626a24522d","reportUrl":"https://nova-wallet.github.io/test-runner/2891//#testresult/671055626a24522d","status":"passed","time":{"start":1682453149986,"stop":1682453150288,"duration":302}},{"uid":"bed13e186b951773","reportUrl":"https://nova-wallet.github.io/test-runner/2890//#testresult/bed13e186b951773","status":"passed","time":{"start":1682438729487,"stop":1682438729549,"duration":62}},{"uid":"47009d144e50701d","reportUrl":"https://nova-wallet.github.io/test-runner/2889//#testresult/47009d144e50701d","status":"passed","time":{"start":1682424410868,"stop":1682424410941,"duration":73}},{"uid":"281d27186d7e9dfb","reportUrl":"https://nova-wallet.github.io/test-runner/2888//#testresult/281d27186d7e9dfb","status":"passed","time":{"start":1682409888075,"stop":1682409888136,"duration":61}},{"uid":"7028d0d565ef98bd","reportUrl":"https://nova-wallet.github.io/test-runner/2887//#testresult/7028d0d565ef98bd","status":"passed","time":{"start":1682395477854,"stop":1682395477915,"duration":61}},{"uid":"6596bff2d9d70f27","reportUrl":"https://nova-wallet.github.io/test-runner/2886//#testresult/6596bff2d9d70f27","status":"passed","time":{"start":1682381629153,"stop":1682381629217,"duration":64}},{"uid":"6d03e83e129087cb","reportUrl":"https://nova-wallet.github.io/test-runner/2885//#testresult/6d03e83e129087cb","status":"passed","time":{"start":1682366701831,"stop":1682366702122,"duration":291}},{"uid":"eb5d06c4b6eeb546","reportUrl":"https://nova-wallet.github.io/test-runner/2883//#testresult/eb5d06c4b6eeb546","status":"passed","time":{"start":1682337980486,"stop":1682337980785,"duration":299}},{"uid":"574c241a0ee4fc42","reportUrl":"https://nova-wallet.github.io/test-runner/2882//#testresult/574c241a0ee4fc42","status":"passed","time":{"start":1682323525786,"stop":1682323526039,"duration":253}},{"uid":"344a9910a50db5cf","reportUrl":"https://nova-wallet.github.io/test-runner/2881//#testresult/344a9910a50db5cf","status":"passed","time":{"start":1682309098006,"stop":1682309098248,"duration":242}},{"uid":"c9329cab83dd2219","reportUrl":"https://nova-wallet.github.io/test-runner/2880//#testresult/c9329cab83dd2219","status":"passed","time":{"start":1682295223609,"stop":1682295223811,"duration":202}},{"uid":"c6a01bafbbe57ec0","reportUrl":"https://nova-wallet.github.io/test-runner/2879//#testresult/c6a01bafbbe57ec0","status":"passed","time":{"start":1682280292134,"stop":1682280292342,"duration":208}},{"uid":"5241906c8cd55037","reportUrl":"https://nova-wallet.github.io/test-runner/2878//#testresult/5241906c8cd55037","status":"passed","time":{"start":1682265899757,"stop":1682265900050,"duration":293}},{"uid":"95d0297242d3aa71","reportUrl":"https://nova-wallet.github.io/test-runner/2877//#testresult/95d0297242d3aa71","status":"passed","time":{"start":1682251759090,"stop":1682251759150,"duration":60}},{"uid":"5f8417cb690beb2a","reportUrl":"https://nova-wallet.github.io/test-runner/2876//#testresult/5f8417cb690beb2a","status":"passed","time":{"start":1682237353064,"stop":1682237353286,"duration":222}},{"uid":"a96f390a0d2a542e","reportUrl":"https://nova-wallet.github.io/test-runner/2875//#testresult/a96f390a0d2a542e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1682222965424,"stop":1682222965482,"duration":58}},{"uid":"6dbbb65f3293eda0","reportUrl":"https://nova-wallet.github.io/test-runner/2874//#testresult/6dbbb65f3293eda0","status":"passed","time":{"start":1682209160498,"stop":1682209160549,"duration":51}},{"uid":"fbdd2d4677aa0ebb","reportUrl":"https://nova-wallet.github.io/test-runner/2873//#testresult/fbdd2d4677aa0ebb","status":"passed","time":{"start":1682193886195,"stop":1682193886590,"duration":395}}]},"tags":[]},"source":"1b9176c99a58d55c.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}