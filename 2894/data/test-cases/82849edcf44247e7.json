{"uid":"82849edcf44247e7","name":"test_can_create_connection[Test for Ethereum, url: wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY}]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1dd7ac1778fe7c2014b07517a761f0ed","time":{"start":1682496279578,"stop":1682496279871,"duration":293},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 401 Unauthorized","statusTrace":"data = {'name': 'Ethereum', 'url': 'wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY}'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 401 Unauthorized\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 401 Unauthorized","statusTrace":"data = {'name': 'Ethereum', 'url': 'wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY}'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 401 Unauthorized\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"bc5658c5535b8f7","name":"stdout","source":"bc5658c5535b8f7.txt","type":"text/plain","size":262}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az507-454"},{"name":"thread","value":"1872-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY}', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"68a3fec0e93c55d5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 401 Unauthorized","time":{"start":1682496269177,"stop":1682496269478,"duration":301}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":0,"unknown":0,"total":5},"items":[{"uid":"1ac3769b3a40775e","reportUrl":"https://nova-wallet.github.io/test-runner/2893//#testresult/1ac3769b3a40775e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 401 Unauthorized","time":{"start":1682481861421,"stop":1682481861722,"duration":301}},{"uid":"d49f28106bcd868b","reportUrl":"https://nova-wallet.github.io/test-runner/2892//#testresult/d49f28106bcd868b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 401 Unauthorized","time":{"start":1682467983565,"stop":1682467983738,"duration":173}},{"uid":"f6233edbc35f4809","reportUrl":"https://nova-wallet.github.io/test-runner/2891//#testresult/f6233edbc35f4809","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 401 Unauthorized","time":{"start":1682453065609,"stop":1682453066914,"duration":1305}},{"uid":"8ccad58551e41bd5","reportUrl":"https://nova-wallet.github.io/test-runner/2890//#testresult/8ccad58551e41bd5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 401 Unauthorized","time":{"start":1682438652505,"stop":1682438652523,"duration":18}}]},"tags":[]},"source":"82849edcf44247e7.json","parameterValues":["{'url': 'wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY}', 'name': 'Ethereum'}"]}