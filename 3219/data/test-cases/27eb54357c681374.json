{"uid":"27eb54357c681374","name":"test_can_create_connection[Test for Frequency, url: wss://0.rpc.frequency.xyz]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"19c26034bddffc5dd1f8d98e703505a3","time":{"start":1686931479160,"stop":1686931479254,"duration":94},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Fri, 16 Jun 2023 16:04:39 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Frequency', 'url': 'wss://0.rpc.frequency.xyz'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Fri, 16 Jun 2023 16:04:39 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Fri, 16 Jun 2023 16:04:39 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Frequency', 'url': 'wss://0.rpc.frequency.xyz'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Fri, 16 Jun 2023 16:04:39 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"647977d44826450c","name":"stdout","source":"647977d44826450c.txt","type":"text/plain","size":816}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az365-311"},{"name":"thread","value":"1985-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://0.rpc.frequency.xyz', 'name': 'Frequency'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b92dd5cb84062b15","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Fri, 16 Jun 2023 16:04:24 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1686931463997,"stop":1686931464073,"duration":76}},{"uid":"7109a56985f748d7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Fri, 16 Jun 2023 16:04:08 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1686931448752,"stop":1686931448865,"duration":113}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":196,"unknown":0,"total":198},"items":[{"uid":"d5e05a042ff4c8cf","reportUrl":"https://novasamatech.github.io/test-runner/3218//#testresult/d5e05a042ff4c8cf","status":"passed","time":{"start":1686917098730,"stop":1686917099030,"duration":300}},{"uid":"cf007e888b6752db","reportUrl":"https://novasamatech.github.io/test-runner/3217//#testresult/cf007e888b6752db","status":"passed","time":{"start":1686902679960,"stop":1686902680263,"duration":303}},{"uid":"642e6ad54486d54f","reportUrl":"https://novasamatech.github.io/test-runner/3216//#testresult/642e6ad54486d54f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Fri, 16 Jun 2023 04:04:51 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1686888291663,"stop":1686888291788,"duration":125}},{"uid":"5505ced326a58de7","reportUrl":"https://novasamatech.github.io/test-runner/3215//#testresult/5505ced326a58de7","status":"passed","time":{"start":1686874449385,"stop":1686874449539,"duration":154}},{"uid":"bc921ca5f52d879e","reportUrl":"https://novasamatech.github.io/test-runner/3214//#testresult/bc921ca5f52d879e","status":"passed","time":{"start":1686859476612,"stop":1686859476694,"duration":82}},{"uid":"e7089818d4dc6cd1","reportUrl":"https://novasamatech.github.io/test-runner/3213//#testresult/e7089818d4dc6cd1","status":"passed","time":{"start":1686845046105,"stop":1686845046278,"duration":173}},{"uid":"e4d238182e9e638f","reportUrl":"https://novasamatech.github.io/test-runner/3212//#testresult/e4d238182e9e638f","status":"passed","time":{"start":1686830746837,"stop":1686830747168,"duration":331}},{"uid":"de7cd51cd4e8aec9","reportUrl":"https://novasamatech.github.io/test-runner/3211//#testresult/de7cd51cd4e8aec9","status":"passed","time":{"start":1686816255228,"stop":1686816255328,"duration":100}},{"uid":"b7ab6271d0f6d5df","reportUrl":"https://novasamatech.github.io/test-runner/3210//#testresult/b7ab6271d0f6d5df","status":"passed","time":{"start":1686801872857,"stop":1686801872995,"duration":138}},{"uid":"a4daf518f4207cba","reportUrl":"https://novasamatech.github.io/test-runner/3209//#testresult/a4daf518f4207cba","status":"passed","time":{"start":1686788050727,"stop":1686788050840,"duration":113}},{"uid":"332e2f9072726bab","reportUrl":"https://novasamatech.github.io/test-runner/3208//#testresult/332e2f9072726bab","status":"passed","time":{"start":1686773062194,"stop":1686773062384,"duration":190}},{"uid":"33e0ec0c7ee4055e","reportUrl":"https://novasamatech.github.io/test-runner/3207//#testresult/33e0ec0c7ee4055e","status":"passed","time":{"start":1686758654270,"stop":1686758654377,"duration":107}},{"uid":"6951677f06b43a54","reportUrl":"https://novasamatech.github.io/test-runner/3206//#testresult/6951677f06b43a54","status":"passed","time":{"start":1686744314004,"stop":1686744314350,"duration":346}},{"uid":"fbf196486f25c9a7","reportUrl":"https://novasamatech.github.io/test-runner/3205//#testresult/fbf196486f25c9a7","status":"passed","time":{"start":1686729850131,"stop":1686729850263,"duration":132}},{"uid":"74054d1caf46a446","reportUrl":"https://novasamatech.github.io/test-runner/3204//#testresult/74054d1caf46a446","status":"passed","time":{"start":1686715432564,"stop":1686715432665,"duration":101}},{"uid":"2e5797c0cdde8fba","reportUrl":"https://novasamatech.github.io/test-runner/3203//#testresult/2e5797c0cdde8fba","status":"passed","time":{"start":1686701594571,"stop":1686701594712,"duration":141}},{"uid":"8aa7a766e335c21b","reportUrl":"https://novasamatech.github.io/test-runner/3202//#testresult/8aa7a766e335c21b","status":"passed","time":{"start":1686686682514,"stop":1686686682654,"duration":140}},{"uid":"5e28d1328a3f4d6","reportUrl":"https://novasamatech.github.io/test-runner/3201//#testresult/5e28d1328a3f4d6","status":"passed","time":{"start":1686672252345,"stop":1686672252577,"duration":232}},{"uid":"8aa97aa2284622","reportUrl":"https://novasamatech.github.io/test-runner/3200//#testresult/8aa97aa2284622","status":"passed","time":{"start":1686657897081,"stop":1686657897415,"duration":334}},{"uid":"144bcf1183d749a2","reportUrl":"https://novasamatech.github.io/test-runner/3199//#testresult/144bcf1183d749a2","status":"passed","time":{"start":1686643493411,"stop":1686643493556,"duration":145}}]},"tags":[]},"source":"27eb54357c681374.json","parameterValues":["{'url': 'wss://0.rpc.frequency.xyz', 'name': 'Frequency'}"]}