{"uid":"29e0428ce738388e","name":"test_can_create_connection[Test for Equilibrium, url: wss://node.pol.equilibrium.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"aa0a741cef39a0b8ded091916ea5120b","time":{"start":1698868928371,"stop":1698868928708,"duration":337},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"88fea702248d19ec","name":"stdout","source":"88fea702248d19ec.txt","type":"text/plain","size":534}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az586-457"},{"name":"thread","value":"2198-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5af8983cb918d8e6","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698868912880,"stop":1698868913218,"duration":338}},{"uid":"21b91f1e35b1b7b6","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698868897363,"stop":1698868897696,"duration":333}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":415,"unknown":0,"total":419},"items":[{"uid":"69268e2c082a2b77","reportUrl":"https://novasamatech.github.io/test-runner/4057//#testresult/69268e2c082a2b77","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698840140750,"stop":1698840140978,"duration":228}},{"uid":"bcacbbfd9449df11","reportUrl":"https://novasamatech.github.io/test-runner/4058//#testresult/bcacbbfd9449df11","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)","time":{"start":1698854533338,"stop":1698854533705,"duration":367}},{"uid":"8cef6b4f22ccc5fe","reportUrl":"https://novasamatech.github.io/test-runner/4056//#testresult/8cef6b4f22ccc5fe","status":"passed","time":{"start":1698825697865,"stop":1698825698605,"duration":740}},{"uid":"7b7d2556d1840f7b","reportUrl":"https://novasamatech.github.io/test-runner/4055//#testresult/7b7d2556d1840f7b","status":"passed","time":{"start":1698811285374,"stop":1698811286037,"duration":663}},{"uid":"eaedc0280ab6944b","reportUrl":"https://novasamatech.github.io/test-runner/4054//#testresult/eaedc0280ab6944b","status":"passed","time":{"start":1698796944377,"stop":1698796945126,"duration":749}},{"uid":"f942adf9a3e23e67","reportUrl":"https://novasamatech.github.io/test-runner/4053//#testresult/f942adf9a3e23e67","status":"passed","time":{"start":1698782510029,"stop":1698782511079,"duration":1050}},{"uid":"245be9d4a886b605","reportUrl":"https://novasamatech.github.io/test-runner/4052//#testresult/245be9d4a886b605","status":"passed","time":{"start":1698768150958,"stop":1698768151694,"duration":736}},{"uid":"84e8b155fc7edb16","reportUrl":"https://novasamatech.github.io/test-runner/4051//#testresult/84e8b155fc7edb16","status":"passed","time":{"start":1698753715830,"stop":1698753716665,"duration":835}},{"uid":"99ad023a83b1ecb6","reportUrl":"https://novasamatech.github.io/test-runner/4050//#testresult/99ad023a83b1ecb6","status":"passed","time":{"start":1698739310247,"stop":1698739310998,"duration":751}},{"uid":"5eae6b93cac56232","reportUrl":"https://novasamatech.github.io/test-runner/4049//#testresult/5eae6b93cac56232","status":"passed","time":{"start":1698724904432,"stop":1698724905019,"duration":587}},{"uid":"f335591a716e7cfa","reportUrl":"https://novasamatech.github.io/test-runner/4048//#testresult/f335591a716e7cfa","status":"passed","time":{"start":1698710543464,"stop":1698710544152,"duration":688}},{"uid":"9d2fe7268fd74c31","reportUrl":"https://novasamatech.github.io/test-runner/4047//#testresult/9d2fe7268fd74c31","status":"passed","time":{"start":1698696097425,"stop":1698696098398,"duration":973}},{"uid":"582e7b1ac138d281","reportUrl":"https://novasamatech.github.io/test-runner/4046//#testresult/582e7b1ac138d281","status":"passed","time":{"start":1698681713558,"stop":1698681714413,"duration":855}},{"uid":"131b526fae11624e","reportUrl":"https://novasamatech.github.io/test-runner/4045//#testresult/131b526fae11624e","status":"passed","time":{"start":1698667317403,"stop":1698667318317,"duration":914}},{"uid":"a499454f3be3a5bd","reportUrl":"https://novasamatech.github.io/test-runner/4044//#testresult/a499454f3be3a5bd","status":"passed","time":{"start":1698652890049,"stop":1698652890606,"duration":557}},{"uid":"623dc5fde91b8bfe","reportUrl":"https://novasamatech.github.io/test-runner/4043//#testresult/623dc5fde91b8bfe","status":"passed","time":{"start":1698638489506,"stop":1698638490093,"duration":587}},{"uid":"e1f4356559732741","reportUrl":"https://novasamatech.github.io/test-runner/4042//#testresult/e1f4356559732741","status":"passed","time":{"start":1698624134864,"stop":1698624135417,"duration":553}},{"uid":"79b76179c770cc7a","reportUrl":"https://novasamatech.github.io/test-runner/4041//#testresult/79b76179c770cc7a","status":"passed","time":{"start":1698609703200,"stop":1698609703773,"duration":573}},{"uid":"4a1d3622c4ecdc94","reportUrl":"https://novasamatech.github.io/test-runner/4040//#testresult/4a1d3622c4ecdc94","status":"passed","time":{"start":1698595302621,"stop":1698595303360,"duration":739}},{"uid":"fe990b12b5f8e19","reportUrl":"https://novasamatech.github.io/test-runner/4039//#testresult/fe990b12b5f8e19","status":"passed","time":{"start":1698580901599,"stop":1698580902349,"duration":750}}]},"tags":[]},"source":"29e0428ce738388e.json","parameterValues":["{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"]}