{"uid":"2d9d1987e1f4778f","name":"test_can_create_connection[Test for Acala, url: wss://acala-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6c77ce47b0ce8fb3c0f86b2e90e26f67","time":{"start":1695916926081,"stop":1695916926603,"duration":522},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 28 Sep 2023 16:02:06 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 28 Sep 2023 16:02:06 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 28 Sep 2023 16:02:06 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 28 Sep 2023 16:02:06 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"918bcf04f2e9fe43","name":"stdout","source":"918bcf04f2e9fe43.txt","type":"text/plain","size":1056}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az485-538"},{"name":"thread","value":"2036-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://acala-rpc.dwellir.com', 'name': 'Acala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"754f538553cbc9c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 28 Sep 2023 16:01:50 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695916910471,"stop":1695916910985,"duration":514}},{"uid":"687c68803c5a0439","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 28 Sep 2023 16:01:35 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695916894767,"stop":1695916895311,"duration":544}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":197,"unknown":0,"total":212},"items":[{"uid":"7b36f0edbc945348","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/7b36f0edbc945348","status":"passed","time":{"start":1695902493026,"stop":1695902493540,"duration":514}},{"uid":"a1955cadbabbbf89","reportUrl":"https://novasamatech.github.io/test-runner/3850//#testresult/a1955cadbabbbf89","status":"passed","time":{"start":1695888088390,"stop":1695888088895,"duration":505}},{"uid":"41cdac78736ec1d2","reportUrl":"https://novasamatech.github.io/test-runner/3849//#testresult/41cdac78736ec1d2","status":"passed","time":{"start":1695873684804,"stop":1695873685310,"duration":506}},{"uid":"bfe1b20bc5ab0468","reportUrl":"https://novasamatech.github.io/test-runner/3848//#testresult/bfe1b20bc5ab0468","status":"passed","time":{"start":1695859321794,"stop":1695859322265,"duration":471}},{"uid":"4b2bc9a33e063308","reportUrl":"https://novasamatech.github.io/test-runner/3847//#testresult/4b2bc9a33e063308","status":"passed","time":{"start":1695844895892,"stop":1695844896375,"duration":483}},{"uid":"242603e73ceeda67","reportUrl":"https://novasamatech.github.io/test-runner/3846//#testresult/242603e73ceeda67","status":"passed","time":{"start":1695830504316,"stop":1695830504839,"duration":523}},{"uid":"c60fafa33da3ef6","reportUrl":"https://novasamatech.github.io/test-runner/3845//#testresult/c60fafa33da3ef6","status":"passed","time":{"start":1695816088040,"stop":1695816088876,"duration":836}},{"uid":"91b285bb1b86158d","reportUrl":"https://novasamatech.github.io/test-runner/3844//#testresult/91b285bb1b86158d","status":"passed","time":{"start":1695801687608,"stop":1695801688303,"duration":695}},{"uid":"ecf527d7026292f7","reportUrl":"https://novasamatech.github.io/test-runner/3843//#testresult/ecf527d7026292f7","status":"passed","time":{"start":1695787293286,"stop":1695787293762,"duration":476}},{"uid":"2cd8e4b6da10166c","reportUrl":"https://novasamatech.github.io/test-runner/3842//#testresult/2cd8e4b6da10166c","status":"passed","time":{"start":1695772938709,"stop":1695772939199,"duration":490}},{"uid":"54ef5eb959653e0d","reportUrl":"https://novasamatech.github.io/test-runner/3841//#testresult/54ef5eb959653e0d","status":"passed","time":{"start":1695758490883,"stop":1695758491729,"duration":846}},{"uid":"b6c1d0bc196f9d31","reportUrl":"https://novasamatech.github.io/test-runner/3840//#testresult/b6c1d0bc196f9d31","status":"passed","time":{"start":1695744083706,"stop":1695744084171,"duration":465}},{"uid":"c4c9f97c45b16d35","reportUrl":"https://novasamatech.github.io/test-runner/3839//#testresult/c4c9f97c45b16d35","status":"passed","time":{"start":1695729683189,"stop":1695729683641,"duration":452}},{"uid":"81a0d33b2b9c13cc","reportUrl":"https://novasamatech.github.io/test-runner/3838//#testresult/81a0d33b2b9c13cc","status":"passed","time":{"start":1695715285230,"stop":1695715285677,"duration":447}},{"uid":"cc2ce9542b151551","reportUrl":"https://novasamatech.github.io/test-runner/3837//#testresult/cc2ce9542b151551","status":"passed","time":{"start":1695700883187,"stop":1695700883667,"duration":480}},{"uid":"8a262ae747266e52","reportUrl":"https://novasamatech.github.io/test-runner/3836//#testresult/8a262ae747266e52","status":"passed","time":{"start":1695686546198,"stop":1695686546675,"duration":477}},{"uid":"3b0bd2df899436db","reportUrl":"https://novasamatech.github.io/test-runner/3835//#testresult/3b0bd2df899436db","status":"passed","time":{"start":1695672090354,"stop":1695672090959,"duration":605}},{"uid":"67e6fffc76f085d","reportUrl":"https://novasamatech.github.io/test-runner/3834//#testresult/67e6fffc76f085d","status":"passed","time":{"start":1695657698951,"stop":1695657699552,"duration":601}},{"uid":"60c2192187e78c75","reportUrl":"https://novasamatech.github.io/test-runner/3833//#testresult/60c2192187e78c75","status":"passed","time":{"start":1695643291684,"stop":1695643292384,"duration":700}},{"uid":"22352c7ed88be6de","reportUrl":"https://novasamatech.github.io/test-runner/3832//#testresult/22352c7ed88be6de","status":"passed","time":{"start":1695628902402,"stop":1695628902960,"duration":558}}]},"tags":[]},"source":"2d9d1987e1f4778f.json","parameterValues":["{'url': 'wss://acala-rpc.dwellir.com', 'name': 'Acala'}"]}