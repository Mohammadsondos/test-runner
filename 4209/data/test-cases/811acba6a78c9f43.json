{"uid":"811acba6a78c9f43","name":"test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6b2d505052053a5da93000b537edc6f1","time":{"start":1701020073642,"stop":1701020073642,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n        connection = create_connection_by_url(data[\"url\"])\n>       get_properties(connection)\n\ntests/conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:667: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:571: in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f022df6bf70>\nmethod = 'state_getRuntimeVersion'\nparams = ['0x8e34611d41146f079f2debdaf5dbee08e79bc27c893ac5d1b38e4c011e7606b3']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1701020073642,"stop":1701020074014,"duration":372},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 24, in connection_by_url\n    get_properties(connection)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 667, in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 571, in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az881-890"},{"name":"thread","value":"2164-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"32277914d0043749","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701020058124,"stop":1701020058124,"duration":0}},{"uid":"2fbdf1d84180bbd7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701020042595,"stop":1701020042595,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":41,"skipped":0,"passed":518,"unknown":0,"total":559},"items":[{"uid":"c1e0e79800b541d3","reportUrl":"https://novasamatech.github.io/test-runner/4208//#testresult/c1e0e79800b541d3","status":"passed","time":{"start":1701014739595,"stop":1701014739595,"duration":0}},{"uid":"d9f2d1a26a7646a2","reportUrl":"https://novasamatech.github.io/test-runner/4207//#testresult/d9f2d1a26a7646a2","status":"passed","time":{"start":1701000539833,"stop":1701000539834,"duration":1}},{"uid":"de5e3d6023c6035f","reportUrl":"https://novasamatech.github.io/test-runner/4205//#testresult/de5e3d6023c6035f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700971566414,"stop":1700971566414,"duration":0}},{"uid":"2191c23d9ce641da","reportUrl":"https://novasamatech.github.io/test-runner/4206//#testresult/2191c23d9ce641da","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700986130112,"stop":1700986130112,"duration":0}},{"uid":"6b6853a8fc9cad7f","reportUrl":"https://novasamatech.github.io/test-runner/4204//#testresult/6b6853a8fc9cad7f","status":"passed","time":{"start":1700957211760,"stop":1700957211761,"duration":1}},{"uid":"d889576cf461ab99","reportUrl":"https://novasamatech.github.io/test-runner/4203//#testresult/d889576cf461ab99","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700942758162,"stop":1700942758162,"duration":0}},{"uid":"3cfffcb118ae6039","reportUrl":"https://novasamatech.github.io/test-runner/4202//#testresult/3cfffcb118ae6039","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700928396641,"stop":1700928396641,"duration":0}},{"uid":"56fc74f704c4676d","reportUrl":"https://novasamatech.github.io/test-runner/4201//#testresult/56fc74f704c4676d","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700913924801,"stop":1700913924801,"duration":0}},{"uid":"a7099bdb1e0a2de8","reportUrl":"https://novasamatech.github.io/test-runner/4200//#testresult/a7099bdb1e0a2de8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700899540551,"stop":1700899540551,"duration":0}},{"uid":"8388044d402051d6","reportUrl":"https://novasamatech.github.io/test-runner/4199//#testresult/8388044d402051d6","status":"passed","time":{"start":1700885386476,"stop":1700885386476,"duration":0}},{"uid":"5447cb612409ec40","reportUrl":"https://novasamatech.github.io/test-runner/4198//#testresult/5447cb612409ec40","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700870997476,"stop":1700870997476,"duration":0}},{"uid":"ecedb177bcda3a97","reportUrl":"https://novasamatech.github.io/test-runner/4197//#testresult/ecedb177bcda3a97","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700856573831,"stop":1700856573831,"duration":0}},{"uid":"fca0a42955a3ed94","reportUrl":"https://novasamatech.github.io/test-runner/4196//#testresult/fca0a42955a3ed94","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700841990846,"stop":1700841990846,"duration":0}},{"uid":"c60d8950458fb555","reportUrl":"https://novasamatech.github.io/test-runner/4195//#testresult/c60d8950458fb555","status":"passed","time":{"start":1700827548470,"stop":1700827548470,"duration":0}},{"uid":"154d9d91db59245d","reportUrl":"https://novasamatech.github.io/test-runner/4194//#testresult/154d9d91db59245d","status":"passed","time":{"start":1700813260480,"stop":1700813260481,"duration":1}},{"uid":"60fd52af25a70b89","reportUrl":"https://novasamatech.github.io/test-runner/4193//#testresult/60fd52af25a70b89","status":"passed","time":{"start":1700798776535,"stop":1700798776535,"duration":0}},{"uid":"78a33f0d254e7368","reportUrl":"https://novasamatech.github.io/test-runner/4192//#testresult/78a33f0d254e7368","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700784405689,"stop":1700784405689,"duration":0}},{"uid":"e93f370c175a6398","reportUrl":"https://novasamatech.github.io/test-runner/4191//#testresult/e93f370c175a6398","status":"passed","time":{"start":1700770085578,"stop":1700770085578,"duration":0}},{"uid":"cb71a580816c6677","reportUrl":"https://novasamatech.github.io/test-runner/4189//#testresult/cb71a580816c6677","status":"passed","time":{"start":1700741185991,"stop":1700741185991,"duration":0}},{"uid":"5de4b2364daef181","reportUrl":"https://novasamatech.github.io/test-runner/4190//#testresult/5de4b2364daef181","status":"passed","time":{"start":1700755639319,"stop":1700755639320,"duration":1}}]},"tags":[]},"source":"811acba6a78c9f43.json","parameterValues":["{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"]}