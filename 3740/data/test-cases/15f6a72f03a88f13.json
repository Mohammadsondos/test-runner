{"uid":"15f6a72f03a88f13","name":"test_has_new_assets[Test for Darwinia]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"689013d09787ced16e9c0dcceea35c1d","time":{"start":1694318668875,"stop":1694318685338,"duration":16463},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'get_constant'","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f76808ee8c0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f7680b630d0>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsubstrate = None\n\n    def get_properties(substrate: SubstrateInterface) -> Properties:\n        \"\"\"Get network properties from metadata\n    \n        Args:\n            substrate (SubstrateInterface): Initialized substrate interface\n    \n        Returns:\n            Properties: Oject with network properties\n        \"\"\"\n>       substrate.get_constant('system', 'ss58Prefix')\nE       AttributeError: 'NoneType' object has no attribute 'get_constant'\n\nscripts/utils/metadata_interaction.py:68: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'get_constant'","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f76808ee8c0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f7680b630d0>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsubstrate = None\n\n    def get_properties(substrate: SubstrateInterface) -> Properties:\n        \"\"\"Get network properties from metadata\n    \n        Args:\n            substrate (SubstrateInterface): Initialized substrate interface\n    \n        Returns:\n            Properties: Oject with network properties\n        \"\"\"\n>       substrate.get_constant('system', 'ss58Prefix')\nE       AttributeError: 'NoneType' object has no attribute 'get_constant'\n\nscripts/utils/metadata_interaction.py:68: AttributeError","steps":[],"attachments":[{"uid":"9a56ff29cf8abd3b","name":"stdout","source":"9a56ff29cf8abd3b.txt","type":"text/plain","size":2618}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az178-219"},{"name":"thread","value":"2043-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f7680b630d0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7d6a0b462c4e57e6","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1694318637515,"stop":1694318653849,"duration":16334}},{"uid":"11f0a2293b4e515","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1694318605485,"stop":1694318622464,"duration":16979}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":98,"unknown":0,"total":100},"items":[{"uid":"7e50968dc54e5522","reportUrl":"https://novasamatech.github.io/test-runner/3739//#testresult/7e50968dc54e5522","status":"passed","time":{"start":1694304207737,"stop":1694304212803,"duration":5066}},{"uid":"6ae6437b1f1f6578","reportUrl":"https://novasamatech.github.io/test-runner/3738//#testresult/6ae6437b1f1f6578","status":"passed","time":{"start":1694289807926,"stop":1694289814909,"duration":6983}},{"uid":"7a7f20672c41f454","reportUrl":"https://novasamatech.github.io/test-runner/3737//#testresult/7a7f20672c41f454","status":"passed","time":{"start":1694275421784,"stop":1694275429377,"duration":7593}},{"uid":"60fb9ebbf929d501","reportUrl":"https://novasamatech.github.io/test-runner/3736//#testresult/60fb9ebbf929d501","status":"passed","time":{"start":1694260996959,"stop":1694261001731,"duration":4772}},{"uid":"3d919884e283461e","reportUrl":"https://novasamatech.github.io/test-runner/3735//#testresult/3d919884e283461e","status":"passed","time":{"start":1694246597333,"stop":1694246603212,"duration":5879}},{"uid":"3efce5fb484cfb28","reportUrl":"https://novasamatech.github.io/test-runner/3734//#testresult/3efce5fb484cfb28","status":"passed","time":{"start":1694232216897,"stop":1694232224025,"duration":7128}},{"uid":"96f272aec146adeb","reportUrl":"https://novasamatech.github.io/test-runner/3733//#testresult/96f272aec146adeb","status":"passed","time":{"start":1694217830107,"stop":1694217836548,"duration":6441}},{"uid":"d85383075ca19f25","reportUrl":"https://novasamatech.github.io/test-runner/3732//#testresult/d85383075ca19f25","status":"passed","time":{"start":1694203366667,"stop":1694203371467,"duration":4800}},{"uid":"a0f5943b28699928","reportUrl":"https://novasamatech.github.io/test-runner/3731//#testresult/a0f5943b28699928","status":"passed","time":{"start":1694188998850,"stop":1694189006675,"duration":7825}},{"uid":"f609835708d4e858","reportUrl":"https://novasamatech.github.io/test-runner/3730//#testresult/f609835708d4e858","status":"passed","time":{"start":1694174633760,"stop":1694174639724,"duration":5964}},{"uid":"fc1d6616741c138b","reportUrl":"https://novasamatech.github.io/test-runner/3729//#testresult/fc1d6616741c138b","status":"passed","time":{"start":1694160188844,"stop":1694160197177,"duration":8333}},{"uid":"ee72bcbb47db7b04","reportUrl":"https://novasamatech.github.io/test-runner/3728//#testresult/ee72bcbb47db7b04","status":"passed","time":{"start":1694145789680,"stop":1694145796078,"duration":6398}},{"uid":"668fc268737bc048","reportUrl":"https://novasamatech.github.io/test-runner/3727//#testresult/668fc268737bc048","status":"passed","time":{"start":1694131445417,"stop":1694131454521,"duration":9104}},{"uid":"da63285718dca574","reportUrl":"https://novasamatech.github.io/test-runner/3726//#testresult/da63285718dca574","status":"passed","time":{"start":1694116997241,"stop":1694117003391,"duration":6150}},{"uid":"5e0944771199cee","reportUrl":"https://novasamatech.github.io/test-runner/3725//#testresult/5e0944771199cee","status":"passed","time":{"start":1694102605605,"stop":1694102612398,"duration":6793}},{"uid":"78f4bc4eac865819","reportUrl":"https://novasamatech.github.io/test-runner/3724//#testresult/78f4bc4eac865819","status":"passed","time":{"start":1694088174293,"stop":1694088185665,"duration":11372}},{"uid":"58e1494779da26b4","reportUrl":"https://novasamatech.github.io/test-runner/3723//#testresult/58e1494779da26b4","status":"passed","time":{"start":1694073769587,"stop":1694073775254,"duration":5667}},{"uid":"36974db33a2efda6","reportUrl":"https://novasamatech.github.io/test-runner/3722//#testresult/36974db33a2efda6","status":"passed","time":{"start":1694059402386,"stop":1694059412007,"duration":9621}},{"uid":"9ef6a1941ff66079","reportUrl":"https://novasamatech.github.io/test-runner/3721//#testresult/9ef6a1941ff66079","status":"passed","time":{"start":1694045045561,"stop":1694045111495,"duration":65934}},{"uid":"e364ad5e548c681d","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/e364ad5e548c681d","status":"passed","time":{"start":1694030596168,"stop":1694030602294,"duration":6126}}]},"tags":[]},"source":"15f6a72f03a88f13.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f7680b630d0>"]}