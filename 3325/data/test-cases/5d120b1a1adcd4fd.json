{"uid":"5d120b1a1adcd4fd","name":"test_can_create_connection[Test for QUARTZ, url: wss://us-ws-quartz.unique.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c90170add3f7fc11fe94a138a71d8345","time":{"start":1688457924935,"stop":1688457925121,"duration":186},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 04 Jul 2023 08:05:25 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e15dcef2c253ac4-DFW'} -+-+- None","statusTrace":"data = {'name': 'QUARTZ', 'url': 'wss://us-ws-quartz.unique.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 04 Jul 2023 08:05:25 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e15dcef2c253ac4-DFW'} -+-+- None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 04 Jul 2023 08:05:25 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e15dcef2c253ac4-DFW'} -+-+- None","statusTrace":"data = {'name': 'QUARTZ', 'url': 'wss://us-ws-quartz.unique.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 04 Jul 2023 08:05:25 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e15dcef2c253ac4-DFW'} -+-+- None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"4a8848b515a7d316","name":"stdout","source":"4a8848b515a7d316.txt","type":"text/plain","size":1380}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az398-490"},{"name":"thread","value":"1897-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://us-ws-quartz.unique.network', 'name': 'QUARTZ'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9d1621b5d9c8a579","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 04 Jul 2023 08:05:09 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e15dc8faa5fe803-DFW'} -+-+- None","time":{"start":1688457909655,"stop":1688457909845,"duration":190}},{"uid":"5ba59eb557df10c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'date': 'Tue, 04 Jul 2023 08:04:54 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '7e15dc2f990de803-DFW'} -+-+- None","time":{"start":1688457894245,"stop":1688457894473,"duration":228}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":329,"unknown":0,"total":330},"items":[{"uid":"293676a5916e8278","reportUrl":"https://novasamatech.github.io/test-runner/3324//#testresult/293676a5916e8278","status":"passed","time":{"start":1688443458298,"stop":1688443458385,"duration":87}},{"uid":"300bd3722c71a59f","reportUrl":"https://novasamatech.github.io/test-runner/3323//#testresult/300bd3722c71a59f","status":"passed","time":{"start":1688429760100,"stop":1688429760352,"duration":252}},{"uid":"6f32c4bd715033b","reportUrl":"https://novasamatech.github.io/test-runner/3322//#testresult/6f32c4bd715033b","status":"passed","time":{"start":1688414657221,"stop":1688414657293,"duration":72}},{"uid":"833046cd0cb4e503","reportUrl":"https://novasamatech.github.io/test-runner/3321//#testresult/833046cd0cb4e503","status":"passed","time":{"start":1688400264913,"stop":1688400265189,"duration":276}},{"uid":"6888fc3a58560e82","reportUrl":"https://novasamatech.github.io/test-runner/3320//#testresult/6888fc3a58560e82","status":"passed","time":{"start":1688385939402,"stop":1688385939606,"duration":204}},{"uid":"36e1fce4e6a2f3d8","reportUrl":"https://novasamatech.github.io/test-runner/3319//#testresult/36e1fce4e6a2f3d8","status":"passed","time":{"start":1688371500780,"stop":1688371501027,"duration":247}},{"uid":"1cd91d394ea1d5f5","reportUrl":"https://novasamatech.github.io/test-runner/3318//#testresult/1cd91d394ea1d5f5","status":"passed","time":{"start":1688357055878,"stop":1688357056335,"duration":457}},{"uid":"4462de777d0f5063","reportUrl":"https://novasamatech.github.io/test-runner/3317//#testresult/4462de777d0f5063","status":"passed","time":{"start":1688343367038,"stop":1688343367295,"duration":257}},{"uid":"6c4d8f87a0c5531e","reportUrl":"https://novasamatech.github.io/test-runner/3316//#testresult/6c4d8f87a0c5531e","status":"passed","time":{"start":1688328253129,"stop":1688328253462,"duration":333}},{"uid":"a1a855a91d90684","reportUrl":"https://novasamatech.github.io/test-runner/3315//#testresult/a1a855a91d90684","status":"passed","time":{"start":1688313832930,"stop":1688313833381,"duration":451}},{"uid":"fad750e11576fa81","reportUrl":"https://novasamatech.github.io/test-runner/3314//#testresult/fad750e11576fa81","status":"passed","time":{"start":1688299490165,"stop":1688299490229,"duration":64}},{"uid":"67c6d838a385d38","reportUrl":"https://novasamatech.github.io/test-runner/3313//#testresult/67c6d838a385d38","status":"passed","time":{"start":1688297672823,"stop":1688297672868,"duration":45}},{"uid":"735414db9f0ad638","reportUrl":"https://novasamatech.github.io/test-runner/3313//#testresult/735414db9f0ad638","status":"passed","time":{"start":1688285046364,"stop":1688285046436,"duration":72}},{"uid":"e148a751c2f71270","reportUrl":"https://novasamatech.github.io/test-runner/3312//#testresult/e148a751c2f71270","status":"passed","time":{"start":1688270634716,"stop":1688270635038,"duration":322}},{"uid":"a54dd658c539dc4c","reportUrl":"https://novasamatech.github.io/test-runner/3311//#testresult/a54dd658c539dc4c","status":"passed","time":{"start":1688257021743,"stop":1688257022115,"duration":372}},{"uid":"d4d0e013cc3fa93d","reportUrl":"https://novasamatech.github.io/test-runner/3310//#testresult/d4d0e013cc3fa93d","status":"passed","time":{"start":1688241850215,"stop":1688241850291,"duration":76}},{"uid":"53f9e1341e6b8799","reportUrl":"https://novasamatech.github.io/test-runner/3309//#testresult/53f9e1341e6b8799","status":"passed","time":{"start":1688227434861,"stop":1688227435337,"duration":476}},{"uid":"b1aa865c5ffe6a10","reportUrl":"https://novasamatech.github.io/test-runner/3308//#testresult/b1aa865c5ffe6a10","status":"passed","time":{"start":1688213087745,"stop":1688213087794,"duration":49}},{"uid":"e3be33658cf1b81b","reportUrl":"https://novasamatech.github.io/test-runner/3307//#testresult/e3be33658cf1b81b","status":"passed","time":{"start":1688198634487,"stop":1688198634554,"duration":67}},{"uid":"7c19120ace952691","reportUrl":"https://novasamatech.github.io/test-runner/3306//#testresult/7c19120ace952691","status":"passed","time":{"start":1688184244913,"stop":1688184245235,"duration":322}}]},"tags":[]},"source":"5d120b1a1adcd4fd.json","parameterValues":["{'url': 'wss://us-ws-quartz.unique.network', 'name': 'QUARTZ'}"]}