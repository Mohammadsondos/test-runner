{"uid":"9da63901f7e9bded","name":"test_address_prefix[Test for Karura]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"bdc275591070a0f0c0a5ac4c6c84d691","time":{"start":1699243319313,"stop":1699243319716,"duration":403},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f582f594f70>\nchain = <scripts.utils.chain_model.Chain object at 0x7f582f540e20>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f582f54ec80>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xb6b3de65f945be900ea4218f58496a709a447895900f4f9116d43cd444ff125e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az877-107"},{"name":"thread","value":"2112-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f582f540e20>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8726bd1a6436c08f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699243303745,"stop":1699243304105,"duration":360}},{"uid":"4e3edbb9ee83f092","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699243288093,"stop":1699243288439,"duration":346}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":441,"unknown":0,"total":444},"items":[{"uid":"e5c01b87bc9ed6ac","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/e5c01b87bc9ed6ac","status":"passed","time":{"start":1699228921860,"stop":1699228933279,"duration":11419}},{"uid":"333794f165c7866b","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/333794f165c7866b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699214497385,"stop":1699214497884,"duration":499}},{"uid":"f99a37f4ee577346","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/f99a37f4ee577346","status":"passed","time":{"start":1699200076041,"stop":1699200086281,"duration":10240}},{"uid":"54aa6087d2523280","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/54aa6087d2523280","status":"passed","time":{"start":1699185674989,"stop":1699185684909,"duration":9920}},{"uid":"47e982848826fd86","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/47e982848826fd86","status":"passed","time":{"start":1699171270559,"stop":1699171277067,"duration":6508}},{"uid":"2ff29ec729d6a22d","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/2ff29ec729d6a22d","status":"passed","time":{"start":1699156870544,"stop":1699156881384,"duration":10840}},{"uid":"a9f4b682318c10ec","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/a9f4b682318c10ec","status":"passed","time":{"start":1699142522234,"stop":1699142527223,"duration":4989}},{"uid":"43280dde9d47df10","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/43280dde9d47df10","status":"passed","time":{"start":1699128078683,"stop":1699128088634,"duration":9951}},{"uid":"2712163fd881758a","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/2712163fd881758a","status":"passed","time":{"start":1699113678341,"stop":1699113686285,"duration":7944}},{"uid":"d9b9a70ea7326ccc","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/d9b9a70ea7326ccc","status":"passed","time":{"start":1699099266946,"stop":1699099275991,"duration":9045}},{"uid":"bbd63c71f5734793","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/bbd63c71f5734793","status":"passed","time":{"start":1699084864587,"stop":1699084871696,"duration":7109}},{"uid":"1281c2754cd4fe8c","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/1281c2754cd4fe8c","status":"passed","time":{"start":1699070460408,"stop":1699070474650,"duration":14242}},{"uid":"1d16468bee3d9981","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/1d16468bee3d9981","status":"passed","time":{"start":1699041679591,"stop":1699041685250,"duration":5659}},{"uid":"7cac56b04bc5bca8","reportUrl":"https://novasamatech.github.io/test-runner/4072//#testresult/7cac56b04bc5bca8","status":"passed","time":{"start":1699056131668,"stop":1699056143211,"duration":11543}},{"uid":"5f60132dac6d978c","reportUrl":"https://novasamatech.github.io/test-runner/4070//#testresult/5f60132dac6d978c","status":"passed","time":{"start":1699027274428,"stop":1699027279141,"duration":4713}},{"uid":"91a4d97a62565bc3","reportUrl":"https://novasamatech.github.io/test-runner/4069//#testresult/91a4d97a62565bc3","status":"passed","time":{"start":1699012870239,"stop":1699012877405,"duration":7166}},{"uid":"f4f41f16d5fd7754","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/f4f41f16d5fd7754","status":"passed","time":{"start":1698998477165,"stop":1698998485226,"duration":8061}},{"uid":"af64f21099020ee9","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/af64f21099020ee9","status":"passed","time":{"start":1698984079367,"stop":1698984090338,"duration":10971}},{"uid":"46c39d8c574aeefa","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/46c39d8c574aeefa","status":"passed","time":{"start":1698969712761,"stop":1698969721876,"duration":9115}},{"uid":"7f6838f7346533d7","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/7f6838f7346533d7","status":"passed","time":{"start":1698955268689,"stop":1698955276361,"duration":7672}}]},"tags":[]},"source":"9da63901f7e9bded.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f582f540e20>"]}