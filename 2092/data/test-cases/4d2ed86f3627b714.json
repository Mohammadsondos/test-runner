{"uid":"4d2ed86f3627b714","name":"test_can_create_connection[Test for Zeitgeist, url: wss://zeitgeist-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1911313e5366bd74b4f9ce70704534b6","time":{"start":1671149786908,"stop":1671149790315,"duration":3407},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable","statusTrace":"data = {'name': 'Zeitgeist', 'url': 'wss://zeitgeist-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable","statusTrace":"data = {'name': 'Zeitgeist', 'url': 'wss://zeitgeist-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"68bf57eac6b0e8c3","name":"stdout","source":"68bf57eac6b0e8c3.txt","type":"text/plain","size":246}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az563-475"},{"name":"thread","value":"1714-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://zeitgeist-rpc.dwellir.com', 'name': 'Zeitgeist'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"42676867eb1c98a7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable","time":{"start":1671149773439,"stop":1671149776779,"duration":3340}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":306,"unknown":0,"total":361},"items":[{"uid":"4a55ceb1e11e81ef","reportUrl":"https://nova-wallet.github.io/test-runner/2091//#testresult/4a55ceb1e11e81ef","status":"passed","time":{"start":1671134807855,"stop":1671134808429,"duration":574}},{"uid":"43e6f7692d785453","reportUrl":"https://nova-wallet.github.io/test-runner/2090//#testresult/43e6f7692d785453","status":"passed","time":{"start":1671120431732,"stop":1671120433863,"duration":2131}},{"uid":"f5c5c7238905a2f9","reportUrl":"https://nova-wallet.github.io/test-runner/2089//#testresult/f5c5c7238905a2f9","status":"passed","time":{"start":1671106094193,"stop":1671106094651,"duration":458}},{"uid":"fc179e7bf12e22dc","reportUrl":"https://nova-wallet.github.io/test-runner/2088//#testresult/fc179e7bf12e22dc","status":"passed","time":{"start":1671091651086,"stop":1671091651834,"duration":748}},{"uid":"73bb467f52c8ed9c","reportUrl":"https://nova-wallet.github.io/test-runner/2087//#testresult/73bb467f52c8ed9c","status":"passed","time":{"start":1671077237182,"stop":1671077237757,"duration":575}},{"uid":"847df90c66a48cd","reportUrl":"https://nova-wallet.github.io/test-runner/2086//#testresult/847df90c66a48cd","status":"passed","time":{"start":1671063400615,"stop":1671063401218,"duration":603}},{"uid":"37c53028131e7746","reportUrl":"https://nova-wallet.github.io/test-runner/2085//#testresult/37c53028131e7746","status":"passed","time":{"start":1671048421167,"stop":1671048421954,"duration":787}},{"uid":"47447179eec51a8e","reportUrl":"https://nova-wallet.github.io/test-runner/2084//#testresult/47447179eec51a8e","status":"passed","time":{"start":1671034033114,"stop":1671034033720,"duration":606}},{"uid":"8e34028fb30f1213","reportUrl":"https://nova-wallet.github.io/test-runner/2083//#testresult/8e34028fb30f1213","status":"passed","time":{"start":1671019675436,"stop":1671019675943,"duration":507}},{"uid":"5e7f2cea4d621300","reportUrl":"https://nova-wallet.github.io/test-runner/2082//#testresult/5e7f2cea4d621300","status":"passed","time":{"start":1671005251176,"stop":1671005251805,"duration":629}},{"uid":"2945fd912ab5661c","reportUrl":"https://nova-wallet.github.io/test-runner/2081//#testresult/2945fd912ab5661c","status":"passed","time":{"start":1670990838616,"stop":1670990839374,"duration":758}},{"uid":"39a9f40fc68ecb34","reportUrl":"https://nova-wallet.github.io/test-runner/2080//#testresult/39a9f40fc68ecb34","status":"passed","time":{"start":1670977061154,"stop":1670977061632,"duration":478}},{"uid":"c104c29b7feeb47f","reportUrl":"https://nova-wallet.github.io/test-runner/2079//#testresult/c104c29b7feeb47f","status":"passed","time":{"start":1670962043365,"stop":1670962044017,"duration":652}},{"uid":"dba85e481d4d9fd9","reportUrl":"https://nova-wallet.github.io/test-runner/2078//#testresult/dba85e481d4d9fd9","status":"passed","time":{"start":1670947649455,"stop":1670947649889,"duration":434}},{"uid":"ea171189c3e14ab","reportUrl":"https://nova-wallet.github.io/test-runner/2077//#testresult/ea171189c3e14ab","status":"passed","time":{"start":1670933293921,"stop":1670933294600,"duration":679}},{"uid":"b7f28fb0b367aa06","reportUrl":"https://nova-wallet.github.io/test-runner/2076//#testresult/b7f28fb0b367aa06","status":"passed","time":{"start":1670918859089,"stop":1670918859696,"duration":607}},{"uid":"dbaf14faa4a8a399","reportUrl":"https://nova-wallet.github.io/test-runner/2075//#testresult/dbaf14faa4a8a399","status":"passed","time":{"start":1670904310098,"stop":1670904310675,"duration":577}},{"uid":"16cf49362a63b23f","reportUrl":"https://nova-wallet.github.io/test-runner/2074//#testresult/16cf49362a63b23f","status":"passed","time":{"start":1670890490174,"stop":1670890490741,"duration":567}},{"uid":"f538a6d4618e4df2","reportUrl":"https://nova-wallet.github.io/test-runner/2073//#testresult/f538a6d4618e4df2","status":"passed","time":{"start":1670875477640,"stop":1670875478120,"duration":480}},{"uid":"b0bd285aea5358cd","reportUrl":"https://nova-wallet.github.io/test-runner/2072//#testresult/b0bd285aea5358cd","status":"passed","time":{"start":1670861107877,"stop":1670861108727,"duration":850}}]},"tags":[]},"source":"4d2ed86f3627b714.json","parameterValues":["{'url': 'wss://zeitgeist-rpc.dwellir.com', 'name': 'Zeitgeist'}"]}