{"uid":"52f32c53b3ddac28","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1691942680939,"stop":1691942681070,"duration":131},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 13 Aug 2023 16:04:41 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 13 Aug 2023 16:04:41 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 13 Aug 2023 16:04:41 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 13 Aug 2023 16:04:41 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"46f772bf75783605","name":"stdout","source":"46f772bf75783605.txt","type":"text/plain","size":1098}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az487-730"},{"name":"thread","value":"1968-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1c454f38dceeb288","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 13 Aug 2023 16:04:25 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1691942665635,"stop":1691942665834,"duration":199}},{"uid":"6b104176a791cf5e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 13 Aug 2023 16:04:10 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1691942650282,"stop":1691942650478,"duration":196}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":119,"skipped":0,"passed":456,"unknown":0,"total":575},"items":[{"uid":"bea406411f4613c0","reportUrl":"https://novasamatech.github.io/test-runner/3569//#testresult/bea406411f4613c0","status":"passed","time":{"start":1691928263351,"stop":1691928263415,"duration":64}},{"uid":"72c0be82239c4c20","reportUrl":"https://novasamatech.github.io/test-runner/3568//#testresult/72c0be82239c4c20","status":"passed","time":{"start":1691913850932,"stop":1691913851141,"duration":209}},{"uid":"d261b98053ccc8e5","reportUrl":"https://novasamatech.github.io/test-runner/3567//#testresult/d261b98053ccc8e5","status":"passed","time":{"start":1691899442865,"stop":1691899442903,"duration":38}},{"uid":"7da945bc5b01a55d","reportUrl":"https://novasamatech.github.io/test-runner/3566//#testresult/7da945bc5b01a55d","status":"passed","time":{"start":1691885565986,"stop":1691885566068,"duration":82}},{"uid":"a5fd3c18346acd18","reportUrl":"https://novasamatech.github.io/test-runner/3565//#testresult/a5fd3c18346acd18","status":"passed","time":{"start":1691870632205,"stop":1691870632283,"duration":78}},{"uid":"5c5c2b66cf03aeab","reportUrl":"https://novasamatech.github.io/test-runner/3564//#testresult/5c5c2b66cf03aeab","status":"passed","time":{"start":1691856247252,"stop":1691856247328,"duration":76}},{"uid":"224586393298ad96","reportUrl":"https://novasamatech.github.io/test-runner/3562//#testresult/224586393298ad96","status":"passed","time":{"start":1691827455815,"stop":1691827455996,"duration":181}},{"uid":"b257d2f442aa03ec","reportUrl":"https://novasamatech.github.io/test-runner/3563//#testresult/b257d2f442aa03ec","status":"passed","time":{"start":1691841864624,"stop":1691841864691,"duration":67}},{"uid":"1404ffec0511550f","reportUrl":"https://novasamatech.github.io/test-runner/3561//#testresult/1404ffec0511550f","status":"passed","time":{"start":1691813050124,"stop":1691813050422,"duration":298}},{"uid":"970aa7c96a66370c","reportUrl":"https://novasamatech.github.io/test-runner/3560//#testresult/970aa7c96a66370c","status":"passed","time":{"start":1691799092844,"stop":1691799093028,"duration":184}},{"uid":"c40b1c63d7ac617f","reportUrl":"https://novasamatech.github.io/test-runner/3559//#testresult/c40b1c63d7ac617f","status":"passed","time":{"start":1691784240103,"stop":1691784240334,"duration":231}},{"uid":"c339f0bd28ba870c","reportUrl":"https://novasamatech.github.io/test-runner/3558//#testresult/c339f0bd28ba870c","status":"passed","time":{"start":1691769858273,"stop":1691769858588,"duration":315}},{"uid":"d8020d4e5327b275","reportUrl":"https://novasamatech.github.io/test-runner/3557//#testresult/d8020d4e5327b275","status":"passed","time":{"start":1691755490013,"stop":1691755490156,"duration":143}},{"uid":"3bc91a08c8c01d86","reportUrl":"https://novasamatech.github.io/test-runner/3556//#testresult/3bc91a08c8c01d86","status":"passed","time":{"start":1691741059741,"stop":1691741059980,"duration":239}},{"uid":"8724bf1e10fc3e3d","reportUrl":"https://novasamatech.github.io/test-runner/3555//#testresult/8724bf1e10fc3e3d","status":"passed","time":{"start":1691734833147,"stop":1691734833332,"duration":185}},{"uid":"b3a3ff15986c5a26","reportUrl":"https://novasamatech.github.io/test-runner/3553//#testresult/b3a3ff15986c5a26","status":"passed","time":{"start":1691734587185,"stop":1691734587267,"duration":82}},{"uid":"25afb7c77457e364","reportUrl":"https://novasamatech.github.io/test-runner/3554//#testresult/25afb7c77457e364","status":"passed","time":{"start":1691734713744,"stop":1691734714055,"duration":311}},{"uid":"3bea68815e82b5f1","reportUrl":"https://novasamatech.github.io/test-runner/3552//#testresult/3bea68815e82b5f1","status":"passed","time":{"start":1691726664316,"stop":1691726664724,"duration":408}},{"uid":"e1c30b8607cf9e3b","reportUrl":"https://novasamatech.github.io/test-runner/3551//#testresult/e1c30b8607cf9e3b","status":"passed","time":{"start":1691712715795,"stop":1691712715834,"duration":39}},{"uid":"289b36a340a568ee","reportUrl":"https://novasamatech.github.io/test-runner/3550//#testresult/289b36a340a568ee","status":"passed","time":{"start":1691697832528,"stop":1691697832586,"duration":58}}]},"tags":[]},"source":"52f32c53b3ddac28.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}