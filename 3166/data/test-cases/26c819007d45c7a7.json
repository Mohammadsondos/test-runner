{"uid":"26c819007d45c7a7","name":"test_can_create_connection[Test for Westend, url: wss://westend.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"069699d857f75062eec2c2e7a6900f83","time":{"start":1686168904511,"stop":1686169265093,"duration":360582},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Wed, 07 Jun 2023 20:21:05 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300002', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","statusTrace":"data = {'name': 'Westend', 'url': 'wss://westend.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Wed, 07 Jun 2023 20:21:05 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300002', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:148: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Wed, 07 Jun 2023 20:21:05 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300002', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","statusTrace":"data = {'name': 'Westend', 'url': 'wss://westend.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Wed, 07 Jun 2023 20:21:05 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300002', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:148: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"c8e7b9c0081d3e6a","name":"stdout","source":"c8e7b9c0081d3e6a.txt","type":"text/plain","size":1258}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az620-574"},{"name":"thread","value":"1889-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2e7275722b39d100","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Wed, 07 Jun 2023 20:14:49 GMT', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '30048', 'x-kong-proxy-latency': '240001', 'via': 'kong/2.5.2'} -+-+- b''","time":{"start":1686168618791,"stop":1686168889401,"duration":270610}},{"uid":"5a15629fad2a278c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Wed, 07 Jun 2023 20:10:03 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '60000', 'x-kong-proxy-latency': '300002', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","time":{"start":1686168242995,"stop":1686168603569,"duration":360574}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":194,"unknown":0,"total":196},"items":[{"uid":"907c6fa77518500f","reportUrl":"https://novasamatech.github.io/test-runner/3165//#testresult/907c6fa77518500f","status":"passed","time":{"start":1686153857948,"stop":1686153858835,"duration":887}},{"uid":"c503c9dff029495","reportUrl":"https://novasamatech.github.io/test-runner/3164//#testresult/c503c9dff029495","status":"passed","time":{"start":1686139485556,"stop":1686139486665,"duration":1109}},{"uid":"e25c2ddbdb5a1cbf","reportUrl":"https://novasamatech.github.io/test-runner/3163//#testresult/e25c2ddbdb5a1cbf","status":"passed","time":{"start":1686125053403,"stop":1686125054139,"duration":736}},{"uid":"9350bdbffc013d06","reportUrl":"https://novasamatech.github.io/test-runner/3162//#testresult/9350bdbffc013d06","status":"passed","time":{"start":1686110648084,"stop":1686110649197,"duration":1113}},{"uid":"a73e01876a48cc5","reportUrl":"https://novasamatech.github.io/test-runner/3161//#testresult/a73e01876a48cc5","status":"passed","time":{"start":1686096840199,"stop":1686096841027,"duration":828}},{"uid":"4da81afa8d04c3c3","reportUrl":"https://novasamatech.github.io/test-runner/3160//#testresult/4da81afa8d04c3c3","status":"passed","time":{"start":1686081832927,"stop":1686081833836,"duration":909}},{"uid":"3e1737b4461298bb","reportUrl":"https://novasamatech.github.io/test-runner/3159//#testresult/3e1737b4461298bb","status":"passed","time":{"start":1686067450798,"stop":1686067451659,"duration":861}},{"uid":"303a205f9fe4a65d","reportUrl":"https://novasamatech.github.io/test-runner/3158//#testresult/303a205f9fe4a65d","status":"passed","time":{"start":1686053073444,"stop":1686053074214,"duration":770}},{"uid":"3ea5941bdbe87b16","reportUrl":"https://novasamatech.github.io/test-runner/3157//#testresult/3ea5941bdbe87b16","status":"passed","time":{"start":1686038653898,"stop":1686038654849,"duration":951}},{"uid":"49f2f250f2735cc8","reportUrl":"https://novasamatech.github.io/test-runner/3156//#testresult/49f2f250f2735cc8","status":"passed","time":{"start":1686024237291,"stop":1686024238367,"duration":1076}},{"uid":"879e615ab232c954","reportUrl":"https://novasamatech.github.io/test-runner/3155//#testresult/879e615ab232c954","status":"passed","time":{"start":1686010449226,"stop":1686010450370,"duration":1144}},{"uid":"725650d9a7c11ba8","reportUrl":"https://novasamatech.github.io/test-runner/3154//#testresult/725650d9a7c11ba8","status":"passed","time":{"start":1685995428769,"stop":1685995429693,"duration":924}},{"uid":"c198a9fee376c3a1","reportUrl":"https://novasamatech.github.io/test-runner/3153//#testresult/c198a9fee376c3a1","status":"passed","time":{"start":1685981037764,"stop":1685981038620,"duration":856}},{"uid":"7aaf2284e13c7ecd","reportUrl":"https://novasamatech.github.io/test-runner/3152//#testresult/7aaf2284e13c7ecd","status":"passed","time":{"start":1685966700825,"stop":1685966701757,"duration":932}},{"uid":"1c76f183b6292ed1","reportUrl":"https://novasamatech.github.io/test-runner/3151//#testresult/1c76f183b6292ed1","status":"passed","time":{"start":1685952235203,"stop":1685952236244,"duration":1041}},{"uid":"4a5942468608157","reportUrl":"https://novasamatech.github.io/test-runner/3150//#testresult/4a5942468608157","status":"passed","time":{"start":1685937842473,"stop":1685937843550,"duration":1077}},{"uid":"a8a08979b2e3e1f5","reportUrl":"https://novasamatech.github.io/test-runner/3149//#testresult/a8a08979b2e3e1f5","status":"passed","time":{"start":1685924068902,"stop":1685924069694,"duration":792}},{"uid":"7557cb6cdb821528","reportUrl":"https://novasamatech.github.io/test-runner/3148//#testresult/7557cb6cdb821528","status":"passed","time":{"start":1685909022095,"stop":1685909023206,"duration":1111}},{"uid":"f6cee2ef8c63d004","reportUrl":"https://novasamatech.github.io/test-runner/3147//#testresult/f6cee2ef8c63d004","status":"passed","time":{"start":1685894642674,"stop":1685894643734,"duration":1060}},{"uid":"8b62363e9c2dbdb8","reportUrl":"https://novasamatech.github.io/test-runner/3146//#testresult/8b62363e9c2dbdb8","status":"passed","time":{"start":1685880273690,"stop":1685880274564,"duration":874}}]},"tags":[]},"source":"26c819007d45c7a7.json","parameterValues":["{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"]}