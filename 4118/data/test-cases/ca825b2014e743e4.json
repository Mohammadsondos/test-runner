{"uid":"ca825b2014e743e4","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1699718575537,"stop":1699718575573,"duration":36},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 11 Nov 2023 16:02:55 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 11 Nov 2023 16:02:55 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 11 Nov 2023 16:02:55 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 11 Nov 2023 16:02:55 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"34ba553b347d8c83","name":"stdout","source":"34ba553b347d8c83.txt","type":"text/plain","size":1098}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1433-978"},{"name":"thread","value":"2182-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d1c739faaf0392","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 11 Nov 2023 16:02:40 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699718560444,"stop":1699718560468,"duration":24}},{"uid":"5d04de121f797f3c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 11 Nov 2023 16:02:25 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1699718545163,"stop":1699718545371,"duration":208}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":466,"unknown":0,"total":478},"items":[{"uid":"860ceb823f83c353","reportUrl":"https://novasamatech.github.io/test-runner/4117//#testresult/860ceb823f83c353","status":"passed","time":{"start":1699704100021,"stop":1699704100424,"duration":403}},{"uid":"bb40556e9a05e9e2","reportUrl":"https://novasamatech.github.io/test-runner/4116//#testresult/bb40556e9a05e9e2","status":"passed","time":{"start":1699689705321,"stop":1699689705373,"duration":52}},{"uid":"733726867fc8f87","reportUrl":"https://novasamatech.github.io/test-runner/4115//#testresult/733726867fc8f87","status":"passed","time":{"start":1699675302059,"stop":1699675302300,"duration":241}},{"uid":"669ece05589d841f","reportUrl":"https://novasamatech.github.io/test-runner/4114//#testresult/669ece05589d841f","status":"passed","time":{"start":1699660955068,"stop":1699660955357,"duration":289}},{"uid":"145f97668795bc21","reportUrl":"https://novasamatech.github.io/test-runner/4113//#testresult/145f97668795bc21","status":"passed","time":{"start":1699646628966,"stop":1699646629191,"duration":225}},{"uid":"db59f563944627e1","reportUrl":"https://novasamatech.github.io/test-runner/4112//#testresult/db59f563944627e1","status":"passed","time":{"start":1699632150725,"stop":1699632150957,"duration":232}},{"uid":"5645ef00c9948355","reportUrl":"https://novasamatech.github.io/test-runner/4111//#testresult/5645ef00c9948355","status":"passed","time":{"start":1699617747591,"stop":1699617747628,"duration":37}},{"uid":"16cd27401542c708","reportUrl":"https://novasamatech.github.io/test-runner/4110//#testresult/16cd27401542c708","status":"passed","time":{"start":1699603392036,"stop":1699603392339,"duration":303}},{"uid":"e049aa7ffcfa39fb","reportUrl":"https://novasamatech.github.io/test-runner/4109//#testresult/e049aa7ffcfa39fb","status":"passed","time":{"start":1699588968819,"stop":1699588968881,"duration":62}},{"uid":"4177bdf373388563","reportUrl":"https://novasamatech.github.io/test-runner/4108//#testresult/4177bdf373388563","status":"passed","time":{"start":1699574549416,"stop":1699574549478,"duration":62}},{"uid":"a1972257dc5c43c","reportUrl":"https://novasamatech.github.io/test-runner/4107//#testresult/a1972257dc5c43c","status":"passed","time":{"start":1699560144414,"stop":1699560144634,"duration":220}},{"uid":"fe24fdcb162b5cf1","reportUrl":"https://novasamatech.github.io/test-runner/4106//#testresult/fe24fdcb162b5cf1","status":"passed","time":{"start":1699545773891,"stop":1699545774128,"duration":237}},{"uid":"d4a10ade5e2980ff","reportUrl":"https://novasamatech.github.io/test-runner/4105//#testresult/d4a10ade5e2980ff","status":"passed","time":{"start":1699531392624,"stop":1699531392697,"duration":73}},{"uid":"f91a87af12004daa","reportUrl":"https://novasamatech.github.io/test-runner/4104//#testresult/f91a87af12004daa","status":"passed","time":{"start":1699516916881,"stop":1699516916954,"duration":73}},{"uid":"292e35f990512200","reportUrl":"https://novasamatech.github.io/test-runner/4103//#testresult/292e35f990512200","status":"passed","time":{"start":1699502496882,"stop":1699502496945,"duration":63}},{"uid":"882adf2dcb2ec378","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/882adf2dcb2ec378","status":"passed","time":{"start":1699488151115,"stop":1699488151407,"duration":292}},{"uid":"56ca18a17b9989dc","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/56ca18a17b9989dc","status":"passed","time":{"start":1699473716442,"stop":1699473716515,"duration":73}},{"uid":"d1bd988bc3c3338e","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/d1bd988bc3c3338e","status":"passed","time":{"start":1699459337643,"stop":1699459337678,"duration":35}},{"uid":"bad3cf7d568c027","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/bad3cf7d568c027","status":"passed","time":{"start":1699444965102,"stop":1699444965423,"duration":321}},{"uid":"5a66e4f733440a3c","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/5a66e4f733440a3c","status":"passed","time":{"start":1699430499634,"stop":1699430499835,"duration":201}}]},"tags":[]},"source":"ca825b2014e743e4.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}