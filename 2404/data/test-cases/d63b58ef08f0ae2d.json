{"uid":"d63b58ef08f0ae2d","name":"test_can_create_connection[Test for Basilisk, url: wss://rpc.basilisk.cloud]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"d4f8b12dd1813d5c02b1890d0d3675f0","time":{"start":1675584969642,"stop":1675584969919,"duration":277},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Basilisk', 'url': 'wss://rpc.basilisk.cloud'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Basilisk', 'url': 'wss://rpc.basilisk.cloud'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"1fdce34928b039df","name":"stdout","source":"1fdce34928b039df.txt","type":"text/plain","size":228}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az362-20"},{"name":"thread","value":"1732-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.basilisk.cloud', 'name': 'Basilisk'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"583477469f8908cc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1675584959222,"stop":1675584959530,"duration":308}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":79,"skipped":0,"passed":581,"unknown":0,"total":660},"items":[{"uid":"329ff933acea96b1","reportUrl":"https://nova-wallet.github.io/test-runner/2403//#testresult/329ff933acea96b1","status":"passed","time":{"start":1675570544066,"stop":1675570544640,"duration":574}},{"uid":"6e6542d742401685","reportUrl":"https://nova-wallet.github.io/test-runner/2402//#testresult/6e6542d742401685","status":"passed","time":{"start":1675559565259,"stop":1675559565852,"duration":593}},{"uid":"fb8bf1cee66fa03b","reportUrl":"https://nova-wallet.github.io/test-runner/2401//#testresult/fb8bf1cee66fa03b","status":"passed","time":{"start":1675541574114,"stop":1675541574493,"duration":379}},{"uid":"3ed7509a25e82397","reportUrl":"https://nova-wallet.github.io/test-runner/2400//#testresult/3ed7509a25e82397","status":"passed","time":{"start":1675527428518,"stop":1675527429287,"duration":769}},{"uid":"80387348770e87d5","reportUrl":"https://nova-wallet.github.io/test-runner/2399//#testresult/80387348770e87d5","status":"passed","time":{"start":1675513387979,"stop":1675513388648,"duration":669}},{"uid":"e31bcb35238f0509","reportUrl":"https://nova-wallet.github.io/test-runner/2398//#testresult/e31bcb35238f0509","status":"passed","time":{"start":1675498549563,"stop":1675498550082,"duration":519}},{"uid":"984f9ac7e66251c8","reportUrl":"https://nova-wallet.github.io/test-runner/2397//#testresult/984f9ac7e66251c8","status":"passed","time":{"start":1675484138964,"stop":1675484139459,"duration":495}},{"uid":"a410f29109ea9bad","reportUrl":"https://nova-wallet.github.io/test-runner/2396//#testresult/a410f29109ea9bad","status":"passed","time":{"start":1675472909713,"stop":1675472910192,"duration":479}},{"uid":"e516d5586c8ab2b8","reportUrl":"https://nova-wallet.github.io/test-runner/2395//#testresult/e516d5586c8ab2b8","status":"passed","time":{"start":1675455253313,"stop":1675455253987,"duration":674}},{"uid":"a93f7c5b6a719d67","reportUrl":"https://nova-wallet.github.io/test-runner/2394//#testresult/a93f7c5b6a719d67","status":"passed","time":{"start":1675441087202,"stop":1675441087892,"duration":690}},{"uid":"e14115fb645ed1a2","reportUrl":"https://nova-wallet.github.io/test-runner/2393//#testresult/e14115fb645ed1a2","status":"passed","time":{"start":1675427136604,"stop":1675427137245,"duration":641}},{"uid":"81177f5002c70c5a","reportUrl":"https://nova-wallet.github.io/test-runner/2392//#testresult/81177f5002c70c5a","status":"passed","time":{"start":1675412245427,"stop":1675412246106,"duration":679}},{"uid":"c9ddc69383d5d33d","reportUrl":"https://nova-wallet.github.io/test-runner/2391//#testresult/c9ddc69383d5d33d","status":"passed","time":{"start":1675397777407,"stop":1675397777897,"duration":490}},{"uid":"61d9a24a2aeccd1c","reportUrl":"https://nova-wallet.github.io/test-runner/2390//#testresult/61d9a24a2aeccd1c","status":"passed","time":{"start":1675386644928,"stop":1675386645594,"duration":666}},{"uid":"6c2a55d28dec2bad","reportUrl":"https://nova-wallet.github.io/test-runner/2388//#testresult/6c2a55d28dec2bad","status":"passed","time":{"start":1675354712333,"stop":1675354712937,"duration":604}},{"uid":"a94cbbd319917f9c","reportUrl":"https://nova-wallet.github.io/test-runner/2387//#testresult/a94cbbd319917f9c","status":"passed","time":{"start":1675340850912,"stop":1675340851735,"duration":823}},{"uid":"e78628524ada33","reportUrl":"https://nova-wallet.github.io/test-runner/2386//#testresult/e78628524ada33","status":"passed","time":{"start":1675325835122,"stop":1675325835790,"duration":668}},{"uid":"181f2834a7e357af","reportUrl":"https://nova-wallet.github.io/test-runner/2385//#testresult/181f2834a7e357af","status":"passed","time":{"start":1675311377865,"stop":1675311378350,"duration":485}},{"uid":"645a1e17d6108d32","reportUrl":"https://nova-wallet.github.io/test-runner/2384//#testresult/645a1e17d6108d32","status":"passed","time":{"start":1675300175036,"stop":1675300175414,"duration":378}},{"uid":"97ec6e41c68275e5","reportUrl":"https://nova-wallet.github.io/test-runner/2383//#testresult/97ec6e41c68275e5","status":"passed","time":{"start":1675282450936,"stop":1675282451606,"duration":670}}]},"tags":[]},"source":"d63b58ef08f0ae2d.json","parameterValues":["{'url': 'wss://rpc.basilisk.cloud', 'name': 'Basilisk'}"]}