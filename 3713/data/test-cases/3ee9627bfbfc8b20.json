{"uid":"3ee9627bfbfc8b20","name":"test_can_create_connection[Test for Ajuna, url: wss://rpc-parachain.ajuna.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9e45091b8d9f46b64ef77b6ae354ace8","time":{"start":1693929767229,"stop":1693929767465,"duration":236},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 16:02:47 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 16:02:47 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 16:02:47 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 16:02:47 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"680a86faff562bd4","name":"stdout","source":"680a86faff562bd4.txt","type":"text/plain","size":1491}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az400-235"},{"name":"thread","value":"2107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"30a6638adcb7a597","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 16:02:32 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1693929751902,"stop":1693929752137,"duration":235}},{"uid":"769a6420bad1f3bc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 16:02:16 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1693929736554,"stop":1693929736808,"duration":254}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":72,"unknown":0,"total":74},"items":[{"uid":"ade86f2fc4badf53","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/ade86f2fc4badf53","status":"passed","time":{"start":1693916231765,"stop":1693916232242,"duration":477}},{"uid":"8fd2bdd5795d2412","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/8fd2bdd5795d2412","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 08:03:51 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1693901030707,"stop":1693901031156,"duration":449}},{"uid":"adf21cde64257ce1","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/adf21cde64257ce1","status":"passed","time":{"start":1693872169757,"stop":1693872170424,"duration":667}},{"uid":"480d6fea7f7f169","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/480d6fea7f7f169","status":"passed","time":{"start":1693857719829,"stop":1693857720350,"duration":521}},{"uid":"cce3f177c789443f","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/cce3f177c789443f","status":"passed","time":{"start":1693843340853,"stop":1693843341370,"duration":517}},{"uid":"1780f0a47c2c6b66","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/1780f0a47c2c6b66","status":"passed","time":{"start":1693828934762,"stop":1693828935316,"duration":554}},{"uid":"b58613e1056c88fe","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/b58613e1056c88fe","status":"passed","time":{"start":1693814545156,"stop":1693814545799,"duration":643}},{"uid":"ebe8c35eacf4b851","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/ebe8c35eacf4b851","status":"passed","time":{"start":1693800103364,"stop":1693800103901,"duration":537}},{"uid":"c7bc170bd59b7464","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/c7bc170bd59b7464","status":"passed","time":{"start":1693785769568,"stop":1693785770200,"duration":632}},{"uid":"b32f8dc45ff5d396","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/b32f8dc45ff5d396","status":"passed","time":{"start":1693771357029,"stop":1693771357592,"duration":563}},{"uid":"69e47280791a1d68","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/69e47280791a1d68","status":"passed","time":{"start":1693756916741,"stop":1693756917373,"duration":632}},{"uid":"c300310518faf5f7","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/c300310518faf5f7","status":"passed","time":{"start":1693742543124,"stop":1693742543661,"duration":537}},{"uid":"c6fe8d0db34d0978","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/c6fe8d0db34d0978","status":"passed","time":{"start":1693728131446,"stop":1693728131793,"duration":347}},{"uid":"7074008c6140314d","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/7074008c6140314d","status":"passed","time":{"start":1693713722858,"stop":1693713723403,"duration":545}},{"uid":"8a4e2ef9d750d8ad","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/8a4e2ef9d750d8ad","status":"passed","time":{"start":1693699353473,"stop":1693699353821,"duration":348}},{"uid":"5451f3c3ff8d7fa5","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/5451f3c3ff8d7fa5","status":"passed","time":{"start":1693684916271,"stop":1693684916837,"duration":566}},{"uid":"b6d982a4b045e7e3","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/b6d982a4b045e7e3","status":"passed","time":{"start":1693670507788,"stop":1693670508146,"duration":358}},{"uid":"6ac54b2f26c983d7","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/6ac54b2f26c983d7","status":"passed","time":{"start":1693656109540,"stop":1693656109990,"duration":450}},{"uid":"26965a97d20d685f","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/26965a97d20d685f","status":"passed","time":{"start":1693641700614,"stop":1693641700968,"duration":354}},{"uid":"b4c266fb9df8554f","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/b4c266fb9df8554f","status":"passed","time":{"start":1693627310986,"stop":1693627311539,"duration":553}}]},"tags":[]},"source":"3ee9627bfbfc8b20.json","parameterValues":["{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"]}