{"uid":"4fe8f8e1a634b286","name":"test_can_create_connection[Test for Kylin, url: wss://polkadot.kylin-node.co.uk]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3ee0d191ab7acb2fad9a82a3aa808e89","time":{"start":1695643362888,"stop":1695643363131,"duration":243},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 25 Sep 2023 12:02:43 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 25 Sep 2023 12:02:43 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 25 Sep 2023 12:02:43 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kylin', 'url': 'wss://polkadot.kylin-node.co.uk'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 25 Sep 2023 12:02:43 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"a5610ff686821bcd","name":"stdout","source":"a5610ff686821bcd.txt","type":"text/plain","size":1500}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az581-87"},{"name":"thread","value":"2184-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a620db43f38bc439","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 25 Sep 2023 12:02:27 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695643347574,"stop":1695643347801,"duration":227}},{"uid":"abfcaca7ac7c704c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 25 Sep 2023 12:02:12 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695643332145,"stop":1695643332459,"duration":314}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":13,"skipped":0,"passed":180,"unknown":0,"total":193},"items":[{"uid":"2bdc80ab7f809c76","reportUrl":"https://novasamatech.github.io/test-runner/3832//#testresult/2bdc80ab7f809c76","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'date': 'Mon, 25 Sep 2023 08:02:52 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'keep-alive', 'server': 'nginx/1.18.0 (Ubuntu)'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695628972194,"stop":1695628972254,"duration":60}},{"uid":"6d3d0ba3bef94aaa","reportUrl":"https://novasamatech.github.io/test-runner/3831//#testresult/6d3d0ba3bef94aaa","status":"passed","time":{"start":1695614529296,"stop":1695614529371,"duration":75}},{"uid":"917e42a80239eedb","reportUrl":"https://novasamatech.github.io/test-runner/3830//#testresult/917e42a80239eedb","status":"passed","time":{"start":1695600171460,"stop":1695600171896,"duration":436}},{"uid":"c2518ffac71b48ab","reportUrl":"https://novasamatech.github.io/test-runner/3829//#testresult/c2518ffac71b48ab","status":"passed","time":{"start":1695585762209,"stop":1695585762356,"duration":147}},{"uid":"9e79b917e74e348c","reportUrl":"https://novasamatech.github.io/test-runner/3828//#testresult/9e79b917e74e348c","status":"passed","time":{"start":1695571323728,"stop":1695571323823,"duration":95}},{"uid":"84e9b5bfcab1f41","reportUrl":"https://novasamatech.github.io/test-runner/3827//#testresult/84e9b5bfcab1f41","status":"passed","time":{"start":1695556918500,"stop":1695556918581,"duration":81}},{"uid":"98d95da33fbf5387","reportUrl":"https://novasamatech.github.io/test-runner/3826//#testresult/98d95da33fbf5387","status":"passed","time":{"start":1695542529041,"stop":1695542529452,"duration":411}},{"uid":"bad1b8043253513e","reportUrl":"https://novasamatech.github.io/test-runner/3825//#testresult/bad1b8043253513e","status":"passed","time":{"start":1695528109674,"stop":1695528109751,"duration":77}},{"uid":"3459e87e7d5cd30","reportUrl":"https://novasamatech.github.io/test-runner/3824//#testresult/3459e87e7d5cd30","status":"passed","time":{"start":1695513765934,"stop":1695513766047,"duration":113}},{"uid":"22a7fa6feabf229","reportUrl":"https://novasamatech.github.io/test-runner/3823//#testresult/22a7fa6feabf229","status":"passed","time":{"start":1695499344391,"stop":1695499344513,"duration":122}},{"uid":"a7d686f1dc51c54b","reportUrl":"https://novasamatech.github.io/test-runner/3822//#testresult/a7d686f1dc51c54b","status":"passed","time":{"start":1695484923776,"stop":1695484923869,"duration":93}},{"uid":"1f060b92848f604a","reportUrl":"https://novasamatech.github.io/test-runner/3821//#testresult/1f060b92848f604a","status":"passed","time":{"start":1695470530526,"stop":1695470530821,"duration":295}},{"uid":"214a70af7b426d6e","reportUrl":"https://novasamatech.github.io/test-runner/3820//#testresult/214a70af7b426d6e","status":"passed","time":{"start":1695456098584,"stop":1695456098682,"duration":98}},{"uid":"c778ecdc87e0a082","reportUrl":"https://novasamatech.github.io/test-runner/3819//#testresult/c778ecdc87e0a082","status":"passed","time":{"start":1695441710647,"stop":1695441710813,"duration":166}},{"uid":"e36fbf8388242413","reportUrl":"https://novasamatech.github.io/test-runner/3818//#testresult/e36fbf8388242413","status":"passed","time":{"start":1695427358687,"stop":1695427358992,"duration":305}},{"uid":"80c7353370d9931a","reportUrl":"https://novasamatech.github.io/test-runner/3817//#testresult/80c7353370d9931a","status":"passed","time":{"start":1695412917258,"stop":1695412917339,"duration":81}},{"uid":"56041663ad6b4520","reportUrl":"https://novasamatech.github.io/test-runner/3816//#testresult/56041663ad6b4520","status":"passed","time":{"start":1695398523719,"stop":1695398523853,"duration":134}},{"uid":"d934af51682d4b9","reportUrl":"https://novasamatech.github.io/test-runner/3815//#testresult/d934af51682d4b9","status":"passed","time":{"start":1695384128598,"stop":1695384128841,"duration":243}},{"uid":"3b2004bdabb2c8b5","reportUrl":"https://novasamatech.github.io/test-runner/3814//#testresult/3b2004bdabb2c8b5","status":"passed","time":{"start":1695369755788,"stop":1695369756164,"duration":376}},{"uid":"8df515ad98e6285d","reportUrl":"https://novasamatech.github.io/test-runner/3813//#testresult/8df515ad98e6285d","status":"passed","time":{"start":1695355356496,"stop":1695355356934,"duration":438}}]},"tags":[]},"source":"4fe8f8e1a634b286.json","parameterValues":["{'url': 'wss://polkadot.kylin-node.co.uk', 'name': 'Kylin'}"]}