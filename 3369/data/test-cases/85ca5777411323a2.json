{"uid":"85ca5777411323a2","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1689091492031,"stop":1689091492054,"duration":23},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:52 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:52 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:52 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:52 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"6aa2d79a75993d59","name":"stdout","source":"6aa2d79a75993d59.txt","type":"text/plain","size":1098}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az349-711"},{"name":"thread","value":"2008-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bdeeda76649a61df","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:36 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1689091476913,"stop":1689091476940,"duration":27}},{"uid":"d31666b0cd4f56ca","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:21 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1689091461719,"stop":1689091461770,"duration":51}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":99,"skipped":0,"passed":275,"unknown":0,"total":374},"items":[{"uid":"6e56e65df2629dbe","reportUrl":"https://novasamatech.github.io/test-runner/3368//#testresult/6e56e65df2629dbe","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 12:06:03 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1689077163482,"stop":1689077163529,"duration":47}},{"uid":"87aedf219944fe19","reportUrl":"https://novasamatech.github.io/test-runner/3366//#testresult/87aedf219944fe19","status":"passed","time":{"start":1689048261110,"stop":1689048261187,"duration":77}},{"uid":"a794b8deb132f413","reportUrl":"https://novasamatech.github.io/test-runner/3367//#testresult/a794b8deb132f413","status":"passed","time":{"start":1689062699044,"stop":1689062699414,"duration":370}},{"uid":"8026441a19692817","reportUrl":"https://novasamatech.github.io/test-runner/3365//#testresult/8026441a19692817","status":"passed","time":{"start":1689034565902,"stop":1689034566105,"duration":203}},{"uid":"dd76f69a0145b05b","reportUrl":"https://novasamatech.github.io/test-runner/3364//#testresult/dd76f69a0145b05b","status":"passed","time":{"start":1689019463239,"stop":1689019463491,"duration":252}},{"uid":"c858c03dba96393e","reportUrl":"https://novasamatech.github.io/test-runner/3363//#testresult/c858c03dba96393e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 10 Jul 2023 16:05:12 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1689005112795,"stop":1689005113017,"duration":222}},{"uid":"acc7ffce5e5eb9fc","reportUrl":"https://novasamatech.github.io/test-runner/3362//#testresult/acc7ffce5e5eb9fc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Mon, 10 Jul 2023 12:06:03 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688990763523,"stop":1688990763727,"duration":204}},{"uid":"7ebf4acf705ec567","reportUrl":"https://novasamatech.github.io/test-runner/3361//#testresult/7ebf4acf705ec567","status":"passed","time":{"start":1688976302889,"stop":1688976303322,"duration":433}},{"uid":"d538eb7dfdde05e3","reportUrl":"https://novasamatech.github.io/test-runner/3360//#testresult/d538eb7dfdde05e3","status":"passed","time":{"start":1688961847307,"stop":1688961847387,"duration":80}},{"uid":"4cb3031637ebd226","reportUrl":"https://novasamatech.github.io/test-runner/3359//#testresult/4cb3031637ebd226","status":"passed","time":{"start":1688948174036,"stop":1688948174097,"duration":61}},{"uid":"87735e898c5543c6","reportUrl":"https://novasamatech.github.io/test-runner/3358//#testresult/87735e898c5543c6","status":"passed","time":{"start":1688933048817,"stop":1688933049156,"duration":339}},{"uid":"6d818becdf1ffbf8","reportUrl":"https://novasamatech.github.io/test-runner/3357//#testresult/6d818becdf1ffbf8","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 09 Jul 2023 16:04:38 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688918678077,"stop":1688918678108,"duration":31}},{"uid":"6c560b82cc2a8da8","reportUrl":"https://novasamatech.github.io/test-runner/3355//#testresult/6c560b82cc2a8da8","status":"passed","time":{"start":1688889882179,"stop":1688889882234,"duration":55}},{"uid":"6082f45a7aa419f5","reportUrl":"https://novasamatech.github.io/test-runner/3356//#testresult/6082f45a7aa419f5","status":"passed","time":{"start":1688904304140,"stop":1688904304516,"duration":376}},{"uid":"b9a105d1cf2a6e87","reportUrl":"https://novasamatech.github.io/test-runner/3354//#testresult/b9a105d1cf2a6e87","status":"passed","time":{"start":1688875465049,"stop":1688875465340,"duration":291}},{"uid":"256119cdedfce7ef","reportUrl":"https://novasamatech.github.io/test-runner/3353//#testresult/256119cdedfce7ef","status":"passed","time":{"start":1688861860882,"stop":1688861860966,"duration":84}},{"uid":"589a25135f4b5c6b","reportUrl":"https://novasamatech.github.io/test-runner/3352//#testresult/589a25135f4b5c6b","status":"passed","time":{"start":1688846657796,"stop":1688846657887,"duration":91}},{"uid":"8efe959f830bfe69","reportUrl":"https://novasamatech.github.io/test-runner/3351//#testresult/8efe959f830bfe69","status":"passed","time":{"start":1688832261723,"stop":1688832261884,"duration":161}},{"uid":"aa69aab35f605f6f","reportUrl":"https://novasamatech.github.io/test-runner/3349//#testresult/aa69aab35f605f6f","status":"passed","time":{"start":1688803461538,"stop":1688803461800,"duration":262}},{"uid":"3a9b36308127fb22","reportUrl":"https://novasamatech.github.io/test-runner/3350//#testresult/3a9b36308127fb22","status":"passed","time":{"start":1688817911079,"stop":1688817911119,"duration":40}}]},"tags":[]},"source":"85ca5777411323a2.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}