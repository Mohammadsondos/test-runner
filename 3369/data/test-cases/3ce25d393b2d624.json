{"uid":"3ce25d393b2d624","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1689091492601,"stop":1689091492831,"duration":230},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:52 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:52 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:52 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:52 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"c4b0b82766db8aa2","name":"stdout","source":"c4b0b82766db8aa2.txt","type":"text/plain","size":1134}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az349-711"},{"name":"thread","value":"2026-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b6db19ba19ab01cf","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:37 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1689091477272,"stop":1689091477510,"duration":238}},{"uid":"37429fa254b0e148","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 11 Jul 2023 16:04:22 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1689091461890,"stop":1689091462134,"duration":244}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":367,"unknown":0,"total":374},"items":[{"uid":"ed8e57f123ec395f","reportUrl":"https://novasamatech.github.io/test-runner/3368//#testresult/ed8e57f123ec395f","status":"passed","time":{"start":1689077132566,"stop":1689077132914,"duration":348}},{"uid":"e5491436fb5f4ba","reportUrl":"https://novasamatech.github.io/test-runner/3366//#testresult/e5491436fb5f4ba","status":"passed","time":{"start":1689048260743,"stop":1689048261201,"duration":458}},{"uid":"566ecd8fa6488d75","reportUrl":"https://novasamatech.github.io/test-runner/3367//#testresult/566ecd8fa6488d75","status":"passed","time":{"start":1689062698775,"stop":1689062699395,"duration":620}},{"uid":"f05cd4200ddaab33","reportUrl":"https://novasamatech.github.io/test-runner/3365//#testresult/f05cd4200ddaab33","status":"passed","time":{"start":1689034550330,"stop":1689034550869,"duration":539}},{"uid":"beca71cdd2558837","reportUrl":"https://novasamatech.github.io/test-runner/3364//#testresult/beca71cdd2558837","status":"passed","time":{"start":1689019463207,"stop":1689019463726,"duration":519}},{"uid":"e165ed40603c7113","reportUrl":"https://novasamatech.github.io/test-runner/3363//#testresult/e165ed40603c7113","status":"passed","time":{"start":1689005081556,"stop":1689005082188,"duration":632}},{"uid":"ebc30c55ea84a27a","reportUrl":"https://novasamatech.github.io/test-runner/3362//#testresult/ebc30c55ea84a27a","status":"passed","time":{"start":1688990732305,"stop":1688990732788,"duration":483}},{"uid":"dce47442a91d9924","reportUrl":"https://novasamatech.github.io/test-runner/3361//#testresult/dce47442a91d9924","status":"passed","time":{"start":1688976303107,"stop":1688976303791,"duration":684}},{"uid":"eb83646eae0ddd72","reportUrl":"https://novasamatech.github.io/test-runner/3360//#testresult/eb83646eae0ddd72","status":"passed","time":{"start":1688961846894,"stop":1688961847240,"duration":346}},{"uid":"835f832b9272631d","reportUrl":"https://novasamatech.github.io/test-runner/3359//#testresult/835f832b9272631d","status":"passed","time":{"start":1688948174154,"stop":1688948174632,"duration":478}},{"uid":"471a564cea0cf7a7","reportUrl":"https://novasamatech.github.io/test-runner/3358//#testresult/471a564cea0cf7a7","status":"passed","time":{"start":1688933048152,"stop":1688933048811,"duration":659}},{"uid":"ab29bb34752ce18d","reportUrl":"https://novasamatech.github.io/test-runner/3357//#testresult/ab29bb34752ce18d","status":"passed","time":{"start":1688918647599,"stop":1688918647908,"duration":309}},{"uid":"6e880dcecc5600e2","reportUrl":"https://novasamatech.github.io/test-runner/3355//#testresult/6e880dcecc5600e2","status":"passed","time":{"start":1688889851704,"stop":1688889852169,"duration":465}},{"uid":"58fd379bf18257e6","reportUrl":"https://novasamatech.github.io/test-runner/3356//#testresult/58fd379bf18257e6","status":"passed","time":{"start":1688904304441,"stop":1688904305042,"duration":601}},{"uid":"d05720da63be9465","reportUrl":"https://novasamatech.github.io/test-runner/3354//#testresult/d05720da63be9465","status":"passed","time":{"start":1688875464320,"stop":1688875465100,"duration":780}},{"uid":"3f2357eefd247cb7","reportUrl":"https://novasamatech.github.io/test-runner/3353//#testresult/3f2357eefd247cb7","status":"passed","time":{"start":1688861861062,"stop":1688861861381,"duration":319}},{"uid":"15830fdc12aea3ec","reportUrl":"https://novasamatech.github.io/test-runner/3352//#testresult/15830fdc12aea3ec","status":"passed","time":{"start":1688846642230,"stop":1688846642578,"duration":348}},{"uid":"781191b78d1b4a6","reportUrl":"https://novasamatech.github.io/test-runner/3351//#testresult/781191b78d1b4a6","status":"passed","time":{"start":1688832262004,"stop":1688832262349,"duration":345}},{"uid":"8a1ded9e66603efd","reportUrl":"https://novasamatech.github.io/test-runner/3349//#testresult/8a1ded9e66603efd","status":"passed","time":{"start":1688803461515,"stop":1688803462124,"duration":609}},{"uid":"d4dc656f81c27fbc","reportUrl":"https://novasamatech.github.io/test-runner/3350//#testresult/d4dc656f81c27fbc","status":"passed","time":{"start":1688817912050,"stop":1688817912370,"duration":320}}]},"tags":[]},"source":"3ce25d393b2d624.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}