{"uid":"383a6b9b7a45f90f","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1710172879135,"stop":1710172879183,"duration":48},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f13dcf83940>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f13dce25f60>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f13dce25e10>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1152-754"},{"name":"thread","value":"2147-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"222cf510de7ba86e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710172874035,"stop":1710172874106,"duration":71}},{"uid":"3372e93dec5ce18b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710172868846,"stop":1710172868920,"duration":74}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":26,"skipped":0,"passed":941,"unknown":0,"total":969},"items":[{"uid":"83ced34aac32d435","reportUrl":"https://novasamatech.github.io/test-runner/4856//#testresult/83ced34aac32d435","status":"passed","time":{"start":1710144070167,"stop":1710144070664,"duration":497}},{"uid":"2cc12a25da92006","reportUrl":"https://novasamatech.github.io/test-runner/4857//#testresult/2cc12a25da92006","status":"passed","time":{"start":1710158472660,"stop":1710158473128,"duration":468}},{"uid":"4e9a63dd8ab763b0","reportUrl":"https://novasamatech.github.io/test-runner/4855//#testresult/4e9a63dd8ab763b0","status":"passed","time":{"start":1710129660999,"stop":1710129661391,"duration":392}},{"uid":"1f74e14a9d4da773","reportUrl":"https://novasamatech.github.io/test-runner/4854//#testresult/1f74e14a9d4da773","status":"passed","time":{"start":1710115306663,"stop":1710115307258,"duration":595}},{"uid":"bc2c7ac1cf2f8fb1","reportUrl":"https://novasamatech.github.io/test-runner/4853//#testresult/bc2c7ac1cf2f8fb1","status":"passed","time":{"start":1710100863317,"stop":1710100863925,"duration":608}},{"uid":"afa5540c2a21d238","reportUrl":"https://novasamatech.github.io/test-runner/4852//#testresult/afa5540c2a21d238","status":"passed","time":{"start":1710086463312,"stop":1710086463819,"duration":507}},{"uid":"7ab436e1e11c5b2e","reportUrl":"https://novasamatech.github.io/test-runner/4851//#testresult/7ab436e1e11c5b2e","status":"passed","time":{"start":1710072073013,"stop":1710072073452,"duration":439}},{"uid":"ad1ce7c71fb37cc4","reportUrl":"https://novasamatech.github.io/test-runner/4850//#testresult/ad1ce7c71fb37cc4","status":"passed","time":{"start":1710057667779,"stop":1710057668028,"duration":249}},{"uid":"cf2b5bfc4204aebc","reportUrl":"https://novasamatech.github.io/test-runner/4849//#testresult/cf2b5bfc4204aebc","status":"passed","time":{"start":1710043259576,"stop":1710043259866,"duration":290}},{"uid":"d7599a1ba45a659a","reportUrl":"https://novasamatech.github.io/test-runner/4848//#testresult/d7599a1ba45a659a","status":"passed","time":{"start":1710028910018,"stop":1710028910229,"duration":211}},{"uid":"d9d708f8793f86d6","reportUrl":"https://novasamatech.github.io/test-runner/4847//#testresult/d9d708f8793f86d6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710014478033,"stop":1710014478210,"duration":177}},{"uid":"cc1387e30a17acce","reportUrl":"https://novasamatech.github.io/test-runner/4846//#testresult/cc1387e30a17acce","status":"passed","time":{"start":1710000061706,"stop":1710000062021,"duration":315}},{"uid":"1b0f79f62f05450a","reportUrl":"https://novasamatech.github.io/test-runner/4845//#testresult/1b0f79f62f05450a","status":"passed","time":{"start":1709985665350,"stop":1709985665916,"duration":566}},{"uid":"39e0789ef56afe10","reportUrl":"https://novasamatech.github.io/test-runner/4844//#testresult/39e0789ef56afe10","status":"passed","time":{"start":1709971260463,"stop":1709971261039,"duration":576}},{"uid":"ab53dd5142e56907","reportUrl":"https://novasamatech.github.io/test-runner/4843//#testresult/ab53dd5142e56907","status":"passed","time":{"start":1709956857519,"stop":1709956858091,"duration":572}},{"uid":"73a1b596d5b840ed","reportUrl":"https://novasamatech.github.io/test-runner/4842//#testresult/73a1b596d5b840ed","status":"passed","time":{"start":1709942501592,"stop":1709942501900,"duration":308}},{"uid":"6c702203c3607b08","reportUrl":"https://novasamatech.github.io/test-runner/4841//#testresult/6c702203c3607b08","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709928073954,"stop":1709928074015,"duration":61}},{"uid":"552a3fd7f301d22e","reportUrl":"https://novasamatech.github.io/test-runner/4840//#testresult/552a3fd7f301d22e","status":"passed","time":{"start":1709913660624,"stop":1709913661267,"duration":643}},{"uid":"cbc08e1540fe7f22","reportUrl":"https://novasamatech.github.io/test-runner/4839//#testresult/cbc08e1540fe7f22","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709899272105,"stop":1709899272483,"duration":378}},{"uid":"f0c5b3ab2c498208","reportUrl":"https://novasamatech.github.io/test-runner/4838//#testresult/f0c5b3ab2c498208","status":"passed","time":{"start":1709884870252,"stop":1709884870790,"duration":538}}]},"tags":[]},"source":"383a6b9b7a45f90f.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}