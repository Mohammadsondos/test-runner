{"uid":"4871d45e450e915f","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1710172878816,"stop":1710172878867,"duration":51},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7efc4f50d240>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7efc4f41f2e0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7efc4f41f100>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1152-754"},{"name":"thread","value":"2156-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ef372d514974ec4e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710172873650,"stop":1710172873781,"duration":131}},{"uid":"ac59c7c050ffbde2","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710172868420,"stop":1710172868520,"duration":100}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":27,"skipped":0,"passed":941,"unknown":0,"total":969},"items":[{"uid":"1324f231f74c6744","reportUrl":"https://novasamatech.github.io/test-runner/4856//#testresult/1324f231f74c6744","status":"passed","time":{"start":1710144069484,"stop":1710144070128,"duration":644}},{"uid":"3e5b5cb80a4b8d13","reportUrl":"https://novasamatech.github.io/test-runner/4857//#testresult/3e5b5cb80a4b8d13","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710158477816,"stop":1710158477976,"duration":160}},{"uid":"6d4064f92cbc0043","reportUrl":"https://novasamatech.github.io/test-runner/4855//#testresult/6d4064f92cbc0043","status":"passed","time":{"start":1710129660629,"stop":1710129661043,"duration":414}},{"uid":"3c6b1e9f3dba211b","reportUrl":"https://novasamatech.github.io/test-runner/4854//#testresult/3c6b1e9f3dba211b","status":"passed","time":{"start":1710115306142,"stop":1710115307063,"duration":921}},{"uid":"e34bc85e0944acdb","reportUrl":"https://novasamatech.github.io/test-runner/4853//#testresult/e34bc85e0944acdb","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710100862862,"stop":1710100863328,"duration":466}},{"uid":"5ccbf37d149e66ac","reportUrl":"https://novasamatech.github.io/test-runner/4852//#testresult/5ccbf37d149e66ac","status":"passed","time":{"start":1710086462847,"stop":1710086463495,"duration":648}},{"uid":"f9149d331aa42b79","reportUrl":"https://novasamatech.github.io/test-runner/4851//#testresult/f9149d331aa42b79","status":"passed","time":{"start":1710072072697,"stop":1710072074049,"duration":1352}},{"uid":"d633a90653fec1cb","reportUrl":"https://novasamatech.github.io/test-runner/4850//#testresult/d633a90653fec1cb","status":"passed","time":{"start":1710057665417,"stop":1710057665622,"duration":205}},{"uid":"e8b1b1793e758afb","reportUrl":"https://novasamatech.github.io/test-runner/4849//#testresult/e8b1b1793e758afb","status":"passed","time":{"start":1710043259246,"stop":1710043259795,"duration":549}},{"uid":"11927a5475529b60","reportUrl":"https://novasamatech.github.io/test-runner/4848//#testresult/11927a5475529b60","status":"passed","time":{"start":1710028904352,"stop":1710028904606,"duration":254}},{"uid":"f3e2864ad5576269","reportUrl":"https://novasamatech.github.io/test-runner/4847//#testresult/f3e2864ad5576269","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710014477802,"stop":1710014477983,"duration":181}},{"uid":"fbfa14a84c4ab884","reportUrl":"https://novasamatech.github.io/test-runner/4846//#testresult/fbfa14a84c4ab884","status":"passed","time":{"start":1710000061217,"stop":1710000061454,"duration":237}},{"uid":"bfcf653bee7cb65d","reportUrl":"https://novasamatech.github.io/test-runner/4845//#testresult/bfcf653bee7cb65d","status":"passed","time":{"start":1709985664803,"stop":1709985665685,"duration":882}},{"uid":"1fc6d1452bf92e14","reportUrl":"https://novasamatech.github.io/test-runner/4844//#testresult/1fc6d1452bf92e14","status":"passed","time":{"start":1709971259873,"stop":1709971260569,"duration":696}},{"uid":"db19abf81ac0a7af","reportUrl":"https://novasamatech.github.io/test-runner/4843//#testresult/db19abf81ac0a7af","status":"passed","time":{"start":1709956856637,"stop":1709956857514,"duration":877}},{"uid":"a4ab39ba2a5fe47d","reportUrl":"https://novasamatech.github.io/test-runner/4842//#testresult/a4ab39ba2a5fe47d","status":"passed","time":{"start":1709942501232,"stop":1709942501498,"duration":266}},{"uid":"e5b47253d68c625","reportUrl":"https://novasamatech.github.io/test-runner/4841//#testresult/e5b47253d68c625","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709928073728,"stop":1709928073796,"duration":68}},{"uid":"ecd841b73b9f9ce0","reportUrl":"https://novasamatech.github.io/test-runner/4840//#testresult/ecd841b73b9f9ce0","status":"passed","time":{"start":1709913660025,"stop":1709913660862,"duration":837}},{"uid":"426a5bafdee19db8","reportUrl":"https://novasamatech.github.io/test-runner/4839//#testresult/426a5bafdee19db8","status":"passed","time":{"start":1709899260441,"stop":1709899261566,"duration":1125}},{"uid":"2a78d1867eba158f","reportUrl":"https://novasamatech.github.io/test-runner/4838//#testresult/2a78d1867eba158f","status":"passed","time":{"start":1709884869651,"stop":1709884870323,"duration":672}}]},"tags":[]},"source":"4871d45e450e915f.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}