{"uid":"e5026c1464450271","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1713470484410,"stop":1713470484572,"duration":162},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7ff99a879c30>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7ff9985eb640>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7ff9985e85b0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1487-682"},{"name":"thread","value":"2085-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1c666c45a52b4179","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713470479217,"stop":1713470479371,"duration":154}},{"uid":"caa24d1ff88955db","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.1}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1713470473656,"stop":1713470474094,"duration":438}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":52,"skipped":0,"passed":1109,"unknown":0,"total":1164},"items":[{"uid":"25f83c8191853acc","reportUrl":"https://novasamatech.github.io/test-runner/5088//#testresult/25f83c8191853acc","status":"passed","time":{"start":1713456060899,"stop":1713456061469,"duration":570}},{"uid":"e6c042b49817479b","reportUrl":"https://novasamatech.github.io/test-runner/5087//#testresult/e6c042b49817479b","status":"passed","time":{"start":1713441674357,"stop":1713441674959,"duration":602}},{"uid":"382115c5158ce6d8","reportUrl":"https://novasamatech.github.io/test-runner/5086//#testresult/382115c5158ce6d8","status":"passed","time":{"start":1713427265689,"stop":1713427266066,"duration":377}},{"uid":"2fbfa3f38f7e2de0","reportUrl":"https://novasamatech.github.io/test-runner/5085//#testresult/2fbfa3f38f7e2de0","status":"passed","time":{"start":1713412865474,"stop":1713412866168,"duration":694}},{"uid":"dc511d17d3779ec3","reportUrl":"https://novasamatech.github.io/test-runner/5084//#testresult/dc511d17d3779ec3","status":"passed","time":{"start":1713398509363,"stop":1713398509664,"duration":301}},{"uid":"2d84e528a3bd12cf","reportUrl":"https://novasamatech.github.io/test-runner/5083//#testresult/2d84e528a3bd12cf","status":"passed","time":{"start":1713384059624,"stop":1713384060121,"duration":497}},{"uid":"efebd008913c868d","reportUrl":"https://novasamatech.github.io/test-runner/5082//#testresult/efebd008913c868d","status":"passed","time":{"start":1713369674029,"stop":1713369674526,"duration":497}},{"uid":"85b17468fd2a7e72","reportUrl":"https://novasamatech.github.io/test-runner/5081//#testresult/85b17468fd2a7e72","status":"passed","time":{"start":1713355268691,"stop":1713355268902,"duration":211}},{"uid":"60b064352c587f6b","reportUrl":"https://novasamatech.github.io/test-runner/5080//#testresult/60b064352c587f6b","status":"passed","time":{"start":1713340865411,"stop":1713340865993,"duration":582}},{"uid":"76b7a42a1d4fe2","reportUrl":"https://novasamatech.github.io/test-runner/5079//#testresult/76b7a42a1d4fe2","status":"passed","time":{"start":1713326456745,"stop":1713326456968,"duration":223}},{"uid":"23dd78ac22baf151","reportUrl":"https://novasamatech.github.io/test-runner/5078//#testresult/23dd78ac22baf151","status":"passed","time":{"start":1713312110528,"stop":1713312110812,"duration":284}},{"uid":"c5bfbdea7e75e12e","reportUrl":"https://novasamatech.github.io/test-runner/5077//#testresult/c5bfbdea7e75e12e","status":"passed","time":{"start":1713297658368,"stop":1713297658607,"duration":239}},{"uid":"bf4ff52613a3119d","reportUrl":"https://novasamatech.github.io/test-runner/5076//#testresult/bf4ff52613a3119d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1713283278724,"stop":1713283278867,"duration":143}},{"uid":"c182d0bbab5c377a","reportUrl":"https://novasamatech.github.io/test-runner/5075//#testresult/c182d0bbab5c377a","status":"passed","time":{"start":1713268866959,"stop":1713268867167,"duration":208}},{"uid":"a192c0eba67d32ba","reportUrl":"https://novasamatech.github.io/test-runner/5074//#testresult/a192c0eba67d32ba","status":"passed","time":{"start":1713254462739,"stop":1713254463316,"duration":577}},{"uid":"1978cb723c723130","reportUrl":"https://novasamatech.github.io/test-runner/5073//#testresult/1978cb723c723130","status":"passed","time":{"start":1713240067220,"stop":1713240067434,"duration":214}},{"uid":"e1eec70afb2f8f1d","reportUrl":"https://novasamatech.github.io/test-runner/5072//#testresult/e1eec70afb2f8f1d","status":"passed","time":{"start":1713225692642,"stop":1713225693286,"duration":644}},{"uid":"c6ea16798178b9cc","reportUrl":"https://novasamatech.github.io/test-runner/5071//#testresult/c6ea16798178b9cc","status":"passed","time":{"start":1713211266733,"stop":1713211267028,"duration":295}},{"uid":"a0c5349e08b9c2c2","reportUrl":"https://novasamatech.github.io/test-runner/5070//#testresult/a0c5349e08b9c2c2","status":"passed","time":{"start":1713196870151,"stop":1713196870742,"duration":591}},{"uid":"73d47faa0e3192db","reportUrl":"https://novasamatech.github.io/test-runner/5069//#testresult/73d47faa0e3192db","status":"passed","time":{"start":1713182471387,"stop":1713182471781,"duration":394}}]},"tags":[]},"source":"e5026c1464450271.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}