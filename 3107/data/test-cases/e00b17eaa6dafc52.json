{"uid":"e00b17eaa6dafc52","name":"test_can_create_connection[Test for Picasso, url: wss://rpc.composablenodes.tech]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"fe841532cdb2a6375da339c7f464ca1d","time":{"start":1685343496642,"stop":1685343496680,"duration":38},"status":"broken","statusMessage":"KeyError: 'content-length'","statusTrace":"data = {'name': 'Picasso', 'url': 'wss://rpc.composablenodes.tech'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\nE           KeyError: 'content-length'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"KeyError: 'content-length'","statusTrace":"data = {'name': 'Picasso', 'url': 'wss://rpc.composablenodes.tech'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\nE           KeyError: 'content-length'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: KeyError","steps":[],"attachments":[{"uid":"9a6890665813426","name":"stdout","source":"9a6890665813426.txt","type":"text/plain","size":294}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az577-103"},{"name":"thread","value":"1918-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.composablenodes.tech', 'name': 'Picasso'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"224faf772353337","status":"broken","statusDetails":"KeyError: 'content-length'","time":{"start":1685343481514,"stop":1685343481542,"duration":28}},{"uid":"42f0309240f0198b","status":"broken","statusDetails":"KeyError: 'content-length'","time":{"start":1685343466327,"stop":1685343466368,"duration":41}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":147,"unknown":0,"total":149},"items":[{"uid":"4255457027d60216","reportUrl":"https://nova-wallet.github.io/test-runner/3101//#testresult/4255457027d60216","status":"broken","statusDetails":"KeyError: 'content-length'","time":{"start":1685333073373,"stop":1685333073399,"duration":26}},{"uid":"6c973c24cc3dcc8d","reportUrl":"https://nova-wallet.github.io/test-runner/3098//#testresult/6c973c24cc3dcc8d","status":"passed","time":{"start":1685289882375,"stop":1685289883114,"duration":739}},{"uid":"5acd9aeab06b21db","reportUrl":"https://nova-wallet.github.io/test-runner/3086//#testresult/5acd9aeab06b21db","status":"passed","time":{"start":1685174661216,"stop":1685174661902,"duration":686}},{"uid":"66ad9c1d7a571b6f","reportUrl":"https://nova-wallet.github.io/test-runner/3083//#testresult/66ad9c1d7a571b6f","status":"passed","time":{"start":1685131445890,"stop":1685131446627,"duration":737}},{"uid":"c884f7cc96e7228a","reportUrl":"https://nova-wallet.github.io/test-runner/3082//#testresult/c884f7cc96e7228a","status":"passed","time":{"start":1685117059664,"stop":1685117060403,"duration":739}},{"uid":"bb9494330801c8d8","reportUrl":"https://nova-wallet.github.io/test-runner/3081//#testresult/bb9494330801c8d8","status":"passed","time":{"start":1685102703407,"stop":1685102704114,"duration":707}},{"uid":"acc2a426981988ce","reportUrl":"https://nova-wallet.github.io/test-runner/3077//#testresult/acc2a426981988ce","status":"passed","time":{"start":1685045042080,"stop":1685045042834,"duration":754}},{"uid":"23d0681c0b1ef9c6","reportUrl":"https://nova-wallet.github.io/test-runner/3076//#testresult/23d0681c0b1ef9c6","status":"passed","time":{"start":1685030665958,"stop":1685030666662,"duration":704}},{"uid":"ef44fece54e3297c","reportUrl":"https://nova-wallet.github.io/test-runner/3074//#testresult/ef44fece54e3297c","status":"passed","time":{"start":1685005754236,"stop":1685005754914,"duration":678}},{"uid":"835a428f037ca6aa","reportUrl":"https://nova-wallet.github.io/test-runner/3054//#testresult/835a428f037ca6aa","status":"passed","time":{"start":1684742682907,"stop":1684742683586,"duration":679}},{"uid":"afe4bc906a2c7e04","reportUrl":"https://nova-wallet.github.io/test-runner/3052//#testresult/afe4bc906a2c7e04","status":"passed","time":{"start":1684714429377,"stop":1684714430067,"duration":690}},{"uid":"eaddf408e80d5f25","reportUrl":"https://nova-wallet.github.io/test-runner/3050//#testresult/eaddf408e80d5f25","status":"passed","time":{"start":1684685050063,"stop":1684685050564,"duration":501}},{"uid":"81cb31a996a06e5e","reportUrl":"https://nova-wallet.github.io/test-runner/3049//#testresult/81cb31a996a06e5e","status":"passed","time":{"start":1684670665585,"stop":1684670666049,"duration":464}},{"uid":"48c564d6f398051","reportUrl":"https://nova-wallet.github.io/test-runner/3048//#testresult/48c564d6f398051","status":"passed","time":{"start":1684656277694,"stop":1684656278414,"duration":720}},{"uid":"c5400bc423f0dbde","reportUrl":"https://nova-wallet.github.io/test-runner/3047//#testresult/c5400bc423f0dbde","status":"passed","time":{"start":1684641843010,"stop":1684641843517,"duration":507}},{"uid":"aef47bd032327f5f","reportUrl":"https://nova-wallet.github.io/test-runner/3046//#testresult/aef47bd032327f5f","status":"passed","time":{"start":1684628063636,"stop":1684628064385,"duration":749}},{"uid":"b58931e17109a472","reportUrl":"https://nova-wallet.github.io/test-runner/3045//#testresult/b58931e17109a472","status":"passed","time":{"start":1684613047006,"stop":1684613047718,"duration":712}},{"uid":"b73264cef196668a","reportUrl":"https://nova-wallet.github.io/test-runner/3044//#testresult/b73264cef196668a","status":"passed","time":{"start":1684598647456,"stop":1684598648180,"duration":724}},{"uid":"92eb8d653fae7035","reportUrl":"https://nova-wallet.github.io/test-runner/3043//#testresult/92eb8d653fae7035","status":"passed","time":{"start":1684584277990,"stop":1684584278670,"duration":680}},{"uid":"c1d11065a8b2b2e9","reportUrl":"https://nova-wallet.github.io/test-runner/3042//#testresult/c1d11065a8b2b2e9","status":"passed","time":{"start":1684569842178,"stop":1684569842644,"duration":466}}]},"tags":[]},"source":"e00b17eaa6dafc52.json","parameterValues":["{'url': 'wss://rpc.composablenodes.tech', 'name': 'Picasso'}"]}