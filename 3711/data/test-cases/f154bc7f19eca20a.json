{"uid":"f154bc7f19eca20a","name":"test_precision[Test for Acala]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"5d4dc364a46a184b6df0ed015dfe9861","time":{"start":1693900934741,"stop":1693900939303,"duration":4562},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7ff8eab71d50>\nchain = <scripts.utils.chain_model.Chain object at 0x7ff8eab70b50>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7ff8ddd51d50>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x650e508c612359e2a1572fe2949417cb3efaec1d733262a731dcd5e240391348']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7ff8eab71d50>\nchain = <scripts.utils.chain_model.Chain object at 0x7ff8eab70b50>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7ff8ddd51d50>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x650e508c612359e2a1572fe2949417cb3efaec1d733262a731dcd5e240391348']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"d6d0097e5d6a4485","name":"stdout","source":"d6d0097e5d6a4485.txt","type":"text/plain","size":666}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az555-675"},{"name":"thread","value":"2049-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7ff8eab70b50>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e00d9f6dca8bee8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693900915187,"stop":1693900919511,"duration":4324}},{"uid":"14c5cbfa130ca5a6","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693900895583,"stop":1693900899986,"duration":4403}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":71,"unknown":0,"total":72},"items":[{"uid":"963aed2ef4a6a893","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/963aed2ef4a6a893","status":"passed","time":{"start":1693872148373,"stop":1693872152754,"duration":4381}},{"uid":"769802f6a264f9d3","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/769802f6a264f9d3","status":"passed","time":{"start":1693857705882,"stop":1693857711043,"duration":5161}},{"uid":"6861c39cc549866d","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/6861c39cc549866d","status":"passed","time":{"start":1693843285319,"stop":1693843289206,"duration":3887}},{"uid":"b8739db31d216ebc","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/b8739db31d216ebc","status":"passed","time":{"start":1693828915561,"stop":1693828922133,"duration":6572}},{"uid":"1c5d374730425ff8","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/1c5d374730425ff8","status":"passed","time":{"start":1693814497550,"stop":1693814502781,"duration":5231}},{"uid":"bb293ffc63f51744","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/bb293ffc63f51744","status":"passed","time":{"start":1693800089708,"stop":1693800093753,"duration":4045}},{"uid":"41cbfff945818902","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/41cbfff945818902","status":"passed","time":{"start":1693785738145,"stop":1693785743047,"duration":4902}},{"uid":"f519a133e7522ff4","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/f519a133e7522ff4","status":"passed","time":{"start":1693771285593,"stop":1693771289882,"duration":4289}},{"uid":"519837f4756a06d2","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/519837f4756a06d2","status":"passed","time":{"start":1693756891550,"stop":1693756895329,"duration":3779}},{"uid":"df3aa0a31b74a63e","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/df3aa0a31b74a63e","status":"passed","time":{"start":1693742507274,"stop":1693742512776,"duration":5502}},{"uid":"fc9e2d9869d3ed9f","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/fc9e2d9869d3ed9f","status":"passed","time":{"start":1693728095834,"stop":1693728100174,"duration":4340}},{"uid":"ca721d8ca8eb3e1a","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/ca721d8ca8eb3e1a","status":"passed","time":{"start":1693713691164,"stop":1693713695486,"duration":4322}},{"uid":"4175bb8cb65af1f1","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/4175bb8cb65af1f1","status":"passed","time":{"start":1693699361269,"stop":1693699367690,"duration":6421}},{"uid":"dc739e75b0ca0db8","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/dc739e75b0ca0db8","status":"passed","time":{"start":1693684887296,"stop":1693684891236,"duration":3940}},{"uid":"29f8a43d81617f4f","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/29f8a43d81617f4f","status":"passed","time":{"start":1693670505890,"stop":1693670512393,"duration":6503}},{"uid":"e26541ca8fbccdb5","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/e26541ca8fbccdb5","status":"passed","time":{"start":1693656093674,"stop":1693656097658,"duration":3984}},{"uid":"e8a078633c41a992","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/e8a078633c41a992","status":"passed","time":{"start":1693641691243,"stop":1693641695773,"duration":4530}},{"uid":"7ba37343c756f595","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/7ba37343c756f595","status":"passed","time":{"start":1693627302242,"stop":1693627307825,"duration":5583}},{"uid":"673502d4b7281565","reportUrl":"https://novasamatech.github.io/test-runner/3691//#testresult/673502d4b7281565","status":"passed","time":{"start":1693612935663,"stop":1693612939306,"duration":3643}},{"uid":"63caf4efe3cb0d1e","reportUrl":"https://novasamatech.github.io/test-runner/3690//#testresult/63caf4efe3cb0d1e","status":"passed","time":{"start":1693598507969,"stop":1693598512780,"duration":4811}}]},"tags":[]},"source":"f154bc7f19eca20a.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7ff8eab70b50>"]}