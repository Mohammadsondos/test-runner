{"uid":"764dafed624ec721","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1693901028406,"stop":1693901028886,"duration":480},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 05 Sep 2023 08:03:48 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 05 Sep 2023 08:03:48 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 05 Sep 2023 08:03:48 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 05 Sep 2023 08:03:48 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b4fdb1c8f02031e7","name":"stdout","source":"b4fdb1c8f02031e7.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1109-371"},{"name":"thread","value":"2036-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3b2621fd7235d534","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 05 Sep 2023 08:03:33 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693901012644,"stop":1693901013252,"duration":608}},{"uid":"144f0d0bcf5aa44f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Tue, 05 Sep 2023 08:03:17 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693900997071,"stop":1693900997534,"duration":463}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":70,"unknown":0,"total":72},"items":[{"uid":"3c5d9ef7c26520fb","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/3c5d9ef7c26520fb","status":"passed","time":{"start":1693872168714,"stop":1693872169279,"duration":565}},{"uid":"9c2e6b93e7ec05a6","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/9c2e6b93e7ec05a6","status":"passed","time":{"start":1693857718008,"stop":1693857718367,"duration":359}},{"uid":"dc4e65ed70879d85","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/dc4e65ed70879d85","status":"passed","time":{"start":1693843330693,"stop":1693843331374,"duration":681}},{"uid":"b59d6212aca78a46","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/b59d6212aca78a46","status":"passed","time":{"start":1693828933818,"stop":1693828934300,"duration":482}},{"uid":"5c4518a67b5a2088","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/5c4518a67b5a2088","status":"passed","time":{"start":1693814541829,"stop":1693814542584,"duration":755}},{"uid":"594df4e93d0d99ed","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/594df4e93d0d99ed","status":"passed","time":{"start":1693800102465,"stop":1693800102948,"duration":483}},{"uid":"e471e82b200cd1dd","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/e471e82b200cd1dd","status":"passed","time":{"start":1693785766366,"stop":1693785766977,"duration":611}},{"uid":"bcde18d2b53e49b","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/bcde18d2b53e49b","status":"passed","time":{"start":1693771354598,"stop":1693771355096,"duration":498}},{"uid":"e4142169e028ba4b","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/e4142169e028ba4b","status":"passed","time":{"start":1693756915223,"stop":1693756915962,"duration":739}},{"uid":"d128f4b9fae4943a","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/d128f4b9fae4943a","status":"passed","time":{"start":1693742540502,"stop":1693742541087,"duration":585}},{"uid":"ee70f5f14a057373","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/ee70f5f14a057373","status":"passed","time":{"start":1693728130260,"stop":1693728130692,"duration":432}},{"uid":"1e5b279e31efafa","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/1e5b279e31efafa","status":"passed","time":{"start":1693713722583,"stop":1693713723050,"duration":467}},{"uid":"f1aead99a78b08ba","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/f1aead99a78b08ba","status":"passed","time":{"start":1693699352835,"stop":1693699353189,"duration":354}},{"uid":"e74014ea80986dec","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/e74014ea80986dec","status":"passed","time":{"start":1693684915378,"stop":1693684915877,"duration":499}},{"uid":"355277d427c16d9d","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/355277d427c16d9d","status":"passed","time":{"start":1693670505946,"stop":1693670506305,"duration":359}},{"uid":"e059b2440fd5966c","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/e059b2440fd5966c","status":"passed","time":{"start":1693656108479,"stop":1693656108813,"duration":334}},{"uid":"d6b1de179af82b25","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/d6b1de179af82b25","status":"passed","time":{"start":1693641699766,"stop":1693641700124,"duration":358}},{"uid":"313c3f46666adde5","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/313c3f46666adde5","status":"passed","time":{"start":1693627309884,"stop":1693627310386,"duration":502}},{"uid":"27f10c033ad12092","reportUrl":"https://novasamatech.github.io/test-runner/3691//#testresult/27f10c033ad12092","status":"passed","time":{"start":1693612965082,"stop":1693612965435,"duration":353}},{"uid":"4cebce459462fb10","reportUrl":"https://novasamatech.github.io/test-runner/3690//#testresult/4cebce459462fb10","status":"passed","time":{"start":1693598524943,"stop":1693598525439,"duration":496}}]},"tags":[]},"source":"764dafed624ec721.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}