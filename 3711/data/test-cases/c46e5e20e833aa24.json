{"uid":"c46e5e20e833aa24","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1693901012628,"stop":1693901013125,"duration":497},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 08:03:33 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 08:03:33 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 08:03:33 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 08:03:33 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"9831d6c54dd9383a","name":"stdout","source":"9831d6c54dd9383a.txt","type":"text/plain","size":1139}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1109-371"},{"name":"thread","value":"2033-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cade5ff73cd973b3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 05 Sep 2023 08:03:17 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1693900997030,"stop":1693900997526,"duration":496}},{"uid":"15a91a04d1322e4a","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1693900981514,"stop":1693900981868,"duration":354}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":71,"unknown":0,"total":72},"items":[{"uid":"ec30931f86474273","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/ec30931f86474273","status":"passed","time":{"start":1693872164949,"stop":1693872165639,"duration":690}},{"uid":"f275040ea30c06c1","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/f275040ea30c06c1","status":"passed","time":{"start":1693857715099,"stop":1693857715629,"duration":530}},{"uid":"e92ffe11d74d01be","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/e92ffe11d74d01be","status":"passed","time":{"start":1693843337505,"stop":1693843338008,"duration":503}},{"uid":"deef15a7637cb8f5","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/deef15a7637cb8f5","status":"passed","time":{"start":1693828931603,"stop":1693828932200,"duration":597}},{"uid":"640f8753642dcde2","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/640f8753642dcde2","status":"passed","time":{"start":1693814570898,"stop":1693814571559,"duration":661}},{"uid":"677259cc9e5e4cd9","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/677259cc9e5e4cd9","status":"passed","time":{"start":1693800100945,"stop":1693800101642,"duration":697}},{"uid":"6c079f2b6fbe6687","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/6c079f2b6fbe6687","status":"passed","time":{"start":1693785762799,"stop":1693785763489,"duration":690}},{"uid":"e586a6fed7c5aabf","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/e586a6fed7c5aabf","status":"passed","time":{"start":1693771350987,"stop":1693771351634,"duration":647}},{"uid":"8934eb809e58ca6a","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/8934eb809e58ca6a","status":"passed","time":{"start":1693756914244,"stop":1693756915073,"duration":829}},{"uid":"3e85aef60f0e3818","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/3e85aef60f0e3818","status":"passed","time":{"start":1693742536931,"stop":1693742537604,"duration":673}},{"uid":"9857d84c08802bca","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/9857d84c08802bca","status":"passed","time":{"start":1693728128871,"stop":1693728129263,"duration":392}},{"uid":"cef124930e65aee6","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/cef124930e65aee6","status":"passed","time":{"start":1693713720899,"stop":1693713721482,"duration":583}},{"uid":"693ea8bc738026f0","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/693ea8bc738026f0","status":"passed","time":{"start":1693699351006,"stop":1693699351565,"duration":559}},{"uid":"61e1bd4db0cdb652","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/61e1bd4db0cdb652","status":"passed","time":{"start":1693684914065,"stop":1693684914685,"duration":620}},{"uid":"a5432b7eaba921c5","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/a5432b7eaba921c5","status":"passed","time":{"start":1693670504919,"stop":1693670505316,"duration":397}},{"uid":"e6224df7947178c","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/e6224df7947178c","status":"passed","time":{"start":1693656107552,"stop":1693656107945,"duration":393}},{"uid":"298a2df6100d601c","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/298a2df6100d601c","status":"passed","time":{"start":1693641698751,"stop":1693641699154,"duration":403}},{"uid":"d2851b8e5192b27c","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/d2851b8e5192b27c","status":"passed","time":{"start":1693627340786,"stop":1693627341375,"duration":589}},{"uid":"964bb689695f3588","reportUrl":"https://novasamatech.github.io/test-runner/3691//#testresult/964bb689695f3588","status":"passed","time":{"start":1693612963902,"stop":1693612964482,"duration":580}},{"uid":"f1d4e1a28715a6d2","reportUrl":"https://novasamatech.github.io/test-runner/3690//#testresult/f1d4e1a28715a6d2","status":"passed","time":{"start":1693598521472,"stop":1693598522068,"duration":596}}]},"tags":[]},"source":"c46e5e20e833aa24.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}