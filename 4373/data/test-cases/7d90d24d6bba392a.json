{"uid":"7d90d24d6bba392a","name":"test_precision[Test for Jur]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"6c3bed029b61ca54529827de47d33d5e","time":{"start":1703275427682,"stop":1703275427682,"duration":0},"status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"request = <SubRequest 'chain_model' for <Function test_precision[Test for Jur]>>\n\n    @pytest.fixture(scope=\"module\", params=get_substrate_chains(), ids=chain_names)\n    def chain_model(request) -> Chain:\n        chain = request.param\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/conftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:648: in init_runtime\n    block_hash = self.get_chain_head()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:434: in get_chain_head\n    if self.supports_rpc_method(\"chain_getHead\"):\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:230: in supports_rpc_method\n    result = self.rpc_request(\"rpc_methods\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:323: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n/usr/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7efc66f31d20>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"chain_model","time":{"start":1703275394217,"stop":1703275396028,"duration":1811},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'get_constant'\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 31, in chain_model\n    chain.init_properties()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/chain_model.py\", line 44, in init_properties\n    self.properties = get_properties(self.substrate)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"chain_model","time":{"start":1703275411053,"stop":1703275412655,"duration":1602},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'get_constant'\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 31, in chain_model\n    chain.init_properties()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/chain_model.py\", line 44, in init_properties\n    self.properties = get_properties(self.substrate)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"chain_model","time":{"start":1703275427682,"stop":1703275429448,"duration":1766},"status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 31, in chain_model\n    chain.init_properties()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/chain_model.py\", line 44, in init_properties\n    self.properties = get_properties(self.substrate)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 648, in init_runtime\n    block_hash = self.get_chain_head()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 434, in get_chain_head\n    if self.supports_rpc_method(\"chain_getHead\"):\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 230, in supports_rpc_method\n    result = self.rpc_request(\"rpc_methods\", []).get('result')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 323, in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n  File \"/usr/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"request = <SubRequest 'chain_model' for <Function test_precision[Test for Jur]>>\n\n    @pytest.fixture(scope=\"module\", params=get_substrate_chains(), ids=chain_names)\n    def chain_model(request) -> Chain:\n        chain = request.param\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/conftest.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:648: in init_runtime\n    block_hash = self.get_chain_head()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:434: in get_chain_head\n    if self.supports_rpc_method(\"chain_getHead\"):\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:230: in supports_rpc_method\n    result = self.rpc_request(\"rpc_methods\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:323: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n/usr/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7efc66f31d20>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError","steps":[],"attachments":[{"uid":"f02b7768e58ba6d5","name":"stdout","source":"f02b7768e58ba6d5.txt","type":"text/plain","size":2032}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az573-296"},{"name":"thread","value":"2145-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain_model","value":"<scripts.utils.chain_model.Chain object at 0x7efc64e06a70>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9cd02e8d1f8943c6","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703275411053,"stop":1703275411053,"duration":0}},{"uid":"5752eada98c2b3d0","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703275394216,"stop":1703275394216,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":655,"unknown":0,"total":661},"items":[{"uid":"f1c9f57bd0605df4","reportUrl":"https://novasamatech.github.io/test-runner/4372//#testresult/f1c9f57bd0605df4","status":"passed","time":{"start":1703261045154,"stop":1703261045154,"duration":0}},{"uid":"ec9ca6848d679299","reportUrl":"https://novasamatech.github.io/test-runner/4371//#testresult/ec9ca6848d679299","status":"passed","time":{"start":1703246749724,"stop":1703246749724,"duration":0}},{"uid":"9a386351f9cc05be","reportUrl":"https://novasamatech.github.io/test-runner/4370//#testresult/9a386351f9cc05be","status":"passed","time":{"start":1703232284408,"stop":1703232284408,"duration":0}},{"uid":"c14a67cad8f19a33","reportUrl":"https://novasamatech.github.io/test-runner/4369//#testresult/c14a67cad8f19a33","status":"passed","time":{"start":1703217850921,"stop":1703217850921,"duration":0}},{"uid":"2f9b934efcad5dcb","reportUrl":"https://novasamatech.github.io/test-runner/4368//#testresult/2f9b934efcad5dcb","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703203567318,"stop":1703203567318,"duration":0}},{"uid":"59ecd149405abc23","reportUrl":"https://novasamatech.github.io/test-runner/4367//#testresult/59ecd149405abc23","status":"passed","time":{"start":1703189175803,"stop":1703189175803,"duration":0}},{"uid":"30c62f6fcc87affe","reportUrl":"https://novasamatech.github.io/test-runner/4366//#testresult/30c62f6fcc87affe","status":"passed","time":{"start":1703176362297,"stop":1703176362297,"duration":0}},{"uid":"80eac1450f9c5aec","reportUrl":"https://novasamatech.github.io/test-runner/4365//#testresult/80eac1450f9c5aec","status":"passed","time":{"start":1703174705713,"stop":1703174705714,"duration":1}},{"uid":"c1740fbc17cd7efc","reportUrl":"https://novasamatech.github.io/test-runner/4364//#testresult/c1740fbc17cd7efc","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703160426081,"stop":1703160426081,"duration":0}},{"uid":"a588b931ceae206a","reportUrl":"https://novasamatech.github.io/test-runner/4363//#testresult/a588b931ceae206a","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703145944931,"stop":1703145944931,"duration":0}},{"uid":"24052465a56fee61","reportUrl":"https://novasamatech.github.io/test-runner/4362//#testresult/24052465a56fee61","status":"passed","time":{"start":1703131489711,"stop":1703131489711,"duration":0}},{"uid":"12cb44367ef70497","reportUrl":"https://novasamatech.github.io/test-runner/4361//#testresult/12cb44367ef70497","status":"passed","time":{"start":1703117032364,"stop":1703117032364,"duration":0}},{"uid":"80ab2ab2f295193c","reportUrl":"https://novasamatech.github.io/test-runner/4360//#testresult/80ab2ab2f295193c","status":"passed","time":{"start":1703102652280,"stop":1703102652280,"duration":0}},{"uid":"26a65c6b5f67491f","reportUrl":"https://novasamatech.github.io/test-runner/4359//#testresult/26a65c6b5f67491f","status":"passed","time":{"start":1703088183915,"stop":1703088183916,"duration":1}},{"uid":"bf938eab8544d1f8","reportUrl":"https://novasamatech.github.io/test-runner/4358//#testresult/bf938eab8544d1f8","status":"passed","time":{"start":1703073782422,"stop":1703073782422,"duration":0}},{"uid":"7fedac903f816991","reportUrl":"https://novasamatech.github.io/test-runner/4357//#testresult/7fedac903f816991","status":"passed","time":{"start":1703059372634,"stop":1703059372634,"duration":0}},{"uid":"64af49b4008230fd","reportUrl":"https://novasamatech.github.io/test-runner/4356//#testresult/64af49b4008230fd","status":"passed","time":{"start":1703044943584,"stop":1703044943584,"duration":0}},{"uid":"5a04112ee17ee2b7","reportUrl":"https://novasamatech.github.io/test-runner/4355//#testresult/5a04112ee17ee2b7","status":"passed","time":{"start":1703030617040,"stop":1703030617040,"duration":0}},{"uid":"5fe00901657345e2","reportUrl":"https://novasamatech.github.io/test-runner/4354//#testresult/5fe00901657345e2","status":"passed","time":{"start":1703016169114,"stop":1703016169115,"duration":1}},{"uid":"5b9f60cc5a0f7209","reportUrl":"https://novasamatech.github.io/test-runner/4353//#testresult/5b9f60cc5a0f7209","status":"passed","time":{"start":1703001801150,"stop":1703001801150,"duration":0}}]},"tags":[]},"source":"7d90d24d6bba392a.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7efc64e06a70>"]}