{"uid":"f3a30ca47a87aced","name":"test_has_new_assets[Test for Jur]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"c600f44b5c461cc5c9495a77b796505a","time":{"start":1703275560805,"stop":1703275562266,"duration":1461},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 22 Dec 2023 20:06:02 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7fd52056b6a0>\nmethod = 'system_properties', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fd52056b5e0>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"system_properties\", \"params\": [], \"id\": 4}'\nopcode = 1\n\n    def send(self, payload: Union[bytes, str], opcode: int = ABNF.OPCODE_TEXT) -> int:\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:285: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fd52056b5e0>\nframe = <websocket._abnf.ABNF object at 0x7fd51f5eb6d0>\n\n    def send_frame(self, frame) -> int:\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:313: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fd52056b5e0>\ndata = b'\\x81\\xc8\\xe8\\x04\\x04\\x89\\x93&n\\xfa\\x87jv\\xf9\\x8b&>\\xa9\\xca6*\\xb9\\xca($\\xab\\x85ap\\xe1\\x87`&\\xb3\\xc8&w\\xf0\\x9bpa\\xe4\\xb7tv\\xe6\\x98av\\xfd\\x81aw\\xab\\xc4$&\\xf9\\x89ve\\xe4\\x9b&>\\xa9\\xb3Y(\\xa9\\xcam`\\xab\\xd2$0\\xf4'\n\n    def _send(self, data: Union[str, bytes]):\n>       return send(self.sock, data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:527: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc8\\xe8\\x04\\x04\\x89\\x93&n\\xfa\\x87jv\\xf9\\x8b&>\\xa9\\xca6*\\xb9\\xca($\\xab\\x85ap\\xe1\\x87`&\\xb3\\xc8&w\\xf0\\x9bpa\\xe4\\xb7tv\\xe6\\x98av\\xfd\\x81aw\\xab\\xc4$&\\xf9\\x89ve\\xe4\\x9b&>\\xa9\\xb3Y(\\xa9\\xcam`\\xab\\xd2$0\\xf4'\n\n    def send(sock: socket.socket, data: Union[bytes, str]) -> int:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:145: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_check_new_assets.TestAssets object at 0x7fd532a94160>\nchain_model = <scripts.utils.chain_model.Chain object at 0x7fd5331cea70>\n\n    def test_has_new_assets(self, chain_model: Chain):\n    \n        chain_assets = {asset['symbol'].upper(\n        ): '' for asset in chain_model.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain_model.name in self.exclusions:\n            chain_assets.update(\n                {ex_asset: '' for ex_asset in self.exclusions[chain_model.name]})\n        chain_model.create_connection()\n        chain_model.init_properties()\n>       symbols = chain_model.substrate.token_symbol if isinstance(chain_model.substrate.token_symbol, list) else [\n            chain_model.properties.symbol]\n\ntests/test_check_new_assets.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/substrateinterface/base.py:383: in token_symbol\n    if self.properties:\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:353: in properties\n    self.__properties = self.rpc_request(\"system_properties\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:271: in rpc_request\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 22 Dec 2023 20:06:02 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"chain_model","time":{"start":1703275559625,"stop":1703275560804,"duration":1179},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 22 Dec 2023 20:06:02 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"self = <substrateinterface.base.SubstrateInterface object at 0x7fd52056b6a0>\nmethod = 'system_properties', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n>               self.websocket.send(json.dumps(payload))\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fd52056b5e0>\npayload = '{\"jsonrpc\": \"2.0\", \"method\": \"system_properties\", \"params\": [], \"id\": 4}'\nopcode = 1\n\n    def send(self, payload: Union[bytes, str], opcode: int = ABNF.OPCODE_TEXT) -> int:\n        \"\"\"\n        Send the data as string.\n    \n        Parameters\n        ----------\n        payload: str\n            Payload must be utf-8 string or unicode,\n            If the opcode is OPCODE_TEXT.\n            Otherwise, it must be string(byte array).\n        opcode: int\n            Operation code (opcode) to send.\n        \"\"\"\n    \n        frame = ABNF.create_frame(payload, opcode)\n>       return self.send_frame(frame)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:285: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fd52056b5e0>\nframe = <websocket._abnf.ABNF object at 0x7fd51f5eb6d0>\n\n    def send_frame(self, frame) -> int:\n        \"\"\"\n        Send the data frame.\n    \n        >>> ws = create_connection(\"ws://echo.websocket.events\")\n        >>> frame = ABNF.create_frame(\"Hello\", ABNF.OPCODE_TEXT)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"My name is \", ABNF.OPCODE_CONT, 0)\n        >>> ws.send_frame(frame)\n        >>> cont_frame = ABNF.create_frame(\"Foo Bar\", ABNF.OPCODE_CONT, 1)\n        >>> ws.send_frame(frame)\n    \n        Parameters\n        ----------\n        frame: ABNF frame\n            frame data created by ABNF.create_frame\n        \"\"\"\n        if self.get_mask_key:\n            frame.get_mask_key = self.get_mask_key\n        data = frame.format()\n        length = len(data)\n        if (isEnabledForTrace()):\n            trace(\"++Sent raw: \" + repr(data))\n            trace(\"++Sent decoded: \" + frame.__str__())\n        with self.lock:\n            while data:\n>               l = self._send(data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:313: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websocket._core.WebSocket object at 0x7fd52056b5e0>\ndata = b'\\x81\\xc8\\xe8\\x04\\x04\\x89\\x93&n\\xfa\\x87jv\\xf9\\x8b&>\\xa9\\xca6*\\xb9\\xca($\\xab\\x85ap\\xe1\\x87`&\\xb3\\xc8&w\\xf0\\x9bpa\\xe4\\xb7tv\\xe6\\x98av\\xfd\\x81aw\\xab\\xc4$&\\xf9\\x89ve\\xe4\\x9b&>\\xa9\\xb3Y(\\xa9\\xcam`\\xab\\xd2$0\\xf4'\n\n    def _send(self, data: Union[str, bytes]):\n>       return send(self.sock, data)\n\n.venv/lib/python3.10/site-packages/websocket/_core.py:527: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = None\ndata = b'\\x81\\xc8\\xe8\\x04\\x04\\x89\\x93&n\\xfa\\x87jv\\xf9\\x8b&>\\xa9\\xca6*\\xb9\\xca($\\xab\\x85ap\\xe1\\x87`&\\xb3\\xc8&w\\xf0\\x9bpa\\xe4\\xb7tv\\xe6\\x98av\\xfd\\x81aw\\xab\\xc4$&\\xf9\\x89ve\\xe4\\x9b&>\\xa9\\xb3Y(\\xa9\\xcam`\\xab\\xd2$0\\xf4'\n\n    def send(sock: socket.socket, data: Union[bytes, str]) -> int:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n    \n        if not sock:\n>           raise WebSocketConnectionClosedException(\"socket is already closed.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: socket is already closed.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:145: WebSocketConnectionClosedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_check_new_assets.TestAssets object at 0x7fd532a94160>\nchain_model = <scripts.utils.chain_model.Chain object at 0x7fd5331cea70>\n\n    def test_has_new_assets(self, chain_model: Chain):\n    \n        chain_assets = {asset['symbol'].upper(\n        ): '' for asset in chain_model.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain_model.name in self.exclusions:\n            chain_assets.update(\n                {ex_asset: '' for ex_asset in self.exclusions[chain_model.name]})\n        chain_model.create_connection()\n        chain_model.init_properties()\n>       symbols = chain_model.substrate.token_symbol if isinstance(chain_model.substrate.token_symbol, list) else [\n            chain_model.properties.symbol]\n\ntests/test_check_new_assets.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/substrateinterface/base.py:383: in token_symbol\n    if self.properties:\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:353: in properties\n    self.__properties = self.rpc_request(\"system_properties\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:271: in rpc_request\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 22 Dec 2023 20:06:02 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"8103961cb1edb07","name":"stdout","source":"8103961cb1edb07.txt","type":"text/plain","size":3680}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az985-616"},{"name":"thread","value":"2049-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain_model","value":"<scripts.utils.chain_model.Chain object at 0x7fd5331cea70>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9bbf85ebf93711c0","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1703275543476,"stop":1703275544541,"duration":1065}},{"uid":"bfbc28d574ed489f","status":"broken","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1703275525719,"stop":1703275527175,"duration":1456}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":654,"unknown":0,"total":660},"items":[{"uid":"55b5b9cab0764033","reportUrl":"https://novasamatech.github.io/test-runner/4372//#testresult/55b5b9cab0764033","status":"passed","time":{"start":1703261153232,"stop":1703261154969,"duration":1737}},{"uid":"57a928f9f195240e","reportUrl":"https://novasamatech.github.io/test-runner/4371//#testresult/57a928f9f195240e","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703246865631,"stop":1703246865631,"duration":0}},{"uid":"965cbf20ec402713","reportUrl":"https://novasamatech.github.io/test-runner/4370//#testresult/965cbf20ec402713","status":"passed","time":{"start":1703232302191,"stop":1703232302920,"duration":729}},{"uid":"4a6f3063891de165","reportUrl":"https://novasamatech.github.io/test-runner/4369//#testresult/4a6f3063891de165","status":"passed","time":{"start":1703217994268,"stop":1703217995487,"duration":1219}},{"uid":"d4321cbda02e3df9","reportUrl":"https://novasamatech.github.io/test-runner/4368//#testresult/d4321cbda02e3df9","status":"passed","time":{"start":1703203642624,"stop":1703203643669,"duration":1045}},{"uid":"fc435cbba1aa74f1","reportUrl":"https://novasamatech.github.io/test-runner/4367//#testresult/fc435cbba1aa74f1","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703189173080,"stop":1703189173080,"duration":0}},{"uid":"17882c96d6a5688f","reportUrl":"https://novasamatech.github.io/test-runner/4366//#testresult/17882c96d6a5688f","status":"passed","time":{"start":1703176330177,"stop":1703176331886,"duration":1709}},{"uid":"a3463e1c06ebbf1b","reportUrl":"https://novasamatech.github.io/test-runner/4365//#testresult/a3463e1c06ebbf1b","status":"passed","time":{"start":1703174739344,"stop":1703174740841,"duration":1497}},{"uid":"9c3ed4057b42df64","reportUrl":"https://novasamatech.github.io/test-runner/4364//#testresult/9c3ed4057b42df64","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1703160484644,"stop":1703160484644,"duration":0}},{"uid":"a0e3c6327847054a","reportUrl":"https://novasamatech.github.io/test-runner/4363//#testresult/a0e3c6327847054a","status":"passed","time":{"start":1703146065718,"stop":1703146067894,"duration":2176}},{"uid":"8004c688127c36a7","reportUrl":"https://novasamatech.github.io/test-runner/4362//#testresult/8004c688127c36a7","status":"passed","time":{"start":1703131414641,"stop":1703131415592,"duration":951}},{"uid":"36398ae43e42df7e","reportUrl":"https://novasamatech.github.io/test-runner/4361//#testresult/36398ae43e42df7e","status":"passed","time":{"start":1703117074964,"stop":1703117075868,"duration":904}},{"uid":"4db3291e94dec2c0","reportUrl":"https://novasamatech.github.io/test-runner/4360//#testresult/4db3291e94dec2c0","status":"passed","time":{"start":1703102670510,"stop":1703102672180,"duration":1670}},{"uid":"ed486f481c4b12f6","reportUrl":"https://novasamatech.github.io/test-runner/4359//#testresult/ed486f481c4b12f6","status":"passed","time":{"start":1703088192354,"stop":1703088192860,"duration":506}},{"uid":"35d280f4a3fbc84b","reportUrl":"https://novasamatech.github.io/test-runner/4358//#testresult/35d280f4a3fbc84b","status":"passed","time":{"start":1703073782229,"stop":1703073783292,"duration":1063}},{"uid":"a88a8422ad24cfad","reportUrl":"https://novasamatech.github.io/test-runner/4357//#testresult/a88a8422ad24cfad","status":"passed","time":{"start":1703059368164,"stop":1703059369170,"duration":1006}},{"uid":"793e0078efd59a34","reportUrl":"https://novasamatech.github.io/test-runner/4356//#testresult/793e0078efd59a34","status":"passed","time":{"start":1703044963632,"stop":1703044964330,"duration":698}},{"uid":"72e3bf97ea5ffcf4","reportUrl":"https://novasamatech.github.io/test-runner/4355//#testresult/72e3bf97ea5ffcf4","status":"passed","time":{"start":1703030623025,"stop":1703030623687,"duration":662}},{"uid":"e8c2b32cfddfa4e9","reportUrl":"https://novasamatech.github.io/test-runner/4354//#testresult/e8c2b32cfddfa4e9","status":"passed","time":{"start":1703016231076,"stop":1703016231823,"duration":747}},{"uid":"cf0441b0779c2e90","reportUrl":"https://novasamatech.github.io/test-runner/4353//#testresult/cf0441b0779c2e90","status":"passed","time":{"start":1703001776659,"stop":1703001777461,"duration":802}}]},"tags":[]},"source":"f3a30ca47a87aced.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fd5331cea70>"]}