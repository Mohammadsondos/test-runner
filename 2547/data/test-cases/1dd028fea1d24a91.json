{"uid":"1dd028fea1d24a91","name":"test_can_create_connection[Test for XX network, url: wss://rpc.xx.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a8e1ede01a7872066249898c0020cb55","time":{"start":1677557114536,"stop":1677557114637,"duration":101},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'rpc.xx.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fda84c92320>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'rpc.xx.network', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'XX network', 'url': 'wss://rpc.xx.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'rpc.xx.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fda84c92320>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'rpc.xx.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fda84c92320>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'rpc.xx.network', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'XX network', 'url': 'wss://rpc.xx.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'rpc.xx.network', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fda84c92320>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"93a4c27ed7f549f0","name":"stdout","source":"93a4c27ed7f549f0.txt","type":"text/plain","size":216}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az561-839"},{"name":"thread","value":"1740-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.xx.network', 'name': 'XX network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"910d54157120b674","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677557104347,"stop":1677557104391,"duration":44}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":101,"skipped":0,"passed":433,"unknown":0,"total":534},"items":[{"uid":"18fc09b7607263c1","reportUrl":"https://nova-wallet.github.io/test-runner/2546//#testresult/18fc09b7607263c1","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677543305129,"stop":1677543305174,"duration":45}},{"uid":"603269a9d92d397c","reportUrl":"https://nova-wallet.github.io/test-runner/2545//#testresult/603269a9d92d397c","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677528319667,"stop":1677528319712,"duration":45}},{"uid":"933c3a75cf8ddbb5","reportUrl":"https://nova-wallet.github.io/test-runner/2544//#testresult/933c3a75cf8ddbb5","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677513918688,"stop":1677513918786,"duration":98}},{"uid":"5ed762f8b2543dc","reportUrl":"https://nova-wallet.github.io/test-runner/2543//#testresult/5ed762f8b2543dc","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677499627876,"stop":1677499627916,"duration":40}},{"uid":"ab88664d6a3ae54a","reportUrl":"https://nova-wallet.github.io/test-runner/2542//#testresult/ab88664d6a3ae54a","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677485166824,"stop":1677485166916,"duration":92}},{"uid":"d95a4938198a9950","reportUrl":"https://nova-wallet.github.io/test-runner/2541//#testresult/d95a4938198a9950","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677470728920,"stop":1677470729030,"duration":110}},{"uid":"d5413cc0d25a0f1","reportUrl":"https://nova-wallet.github.io/test-runner/2540//#testresult/d5413cc0d25a0f1","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677456934070,"stop":1677456934098,"duration":28}},{"uid":"2ea82ecf1c8bd385","reportUrl":"https://nova-wallet.github.io/test-runner/2539//#testresult/2ea82ecf1c8bd385","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677441911748,"stop":1677441911943,"duration":195}},{"uid":"737110c1ee79eb51","reportUrl":"https://nova-wallet.github.io/test-runner/2538//#testresult/737110c1ee79eb51","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677427516637,"stop":1677427516827,"duration":190}},{"uid":"e33403f571a767ed","reportUrl":"https://nova-wallet.github.io/test-runner/2537//#testresult/e33403f571a767ed","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677413168550,"stop":1677413168724,"duration":174}},{"uid":"240886bb59505772","reportUrl":"https://nova-wallet.github.io/test-runner/2536//#testresult/240886bb59505772","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677398736300,"stop":1677398736395,"duration":95}},{"uid":"3be5b8e8d928f732","reportUrl":"https://nova-wallet.github.io/test-runner/2535//#testresult/3be5b8e8d928f732","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677384310954,"stop":1677384311048,"duration":94}},{"uid":"7572b4a28d9db66c","reportUrl":"https://nova-wallet.github.io/test-runner/2534//#testresult/7572b4a28d9db66c","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677370609774,"stop":1677370609802,"duration":28}},{"uid":"58440766489eeb31","reportUrl":"https://nova-wallet.github.io/test-runner/2533//#testresult/58440766489eeb31","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677355481676,"stop":1677355481717,"duration":41}},{"uid":"6fe34c6d7ffd0c43","reportUrl":"https://nova-wallet.github.io/test-runner/2532//#testresult/6fe34c6d7ffd0c43","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677341094242,"stop":1677341094328,"duration":86}},{"uid":"6d868a40d0064553","reportUrl":"https://nova-wallet.github.io/test-runner/2531//#testresult/6d868a40d0064553","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677326769984,"stop":1677326770035,"duration":51}},{"uid":"c51d124b849997b2","reportUrl":"https://nova-wallet.github.io/test-runner/2530//#testresult/c51d124b849997b2","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677312340442,"stop":1677312340539,"duration":97}},{"uid":"65d4e74a96957258","reportUrl":"https://nova-wallet.github.io/test-runner/2529//#testresult/65d4e74a96957258","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677297896274,"stop":1677297896302,"duration":28}},{"uid":"f19c74884446f615","reportUrl":"https://nova-wallet.github.io/test-runner/2528//#testresult/f19c74884446f615","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677284129773,"stop":1677284129791,"duration":18}},{"uid":"7c362107faa977be","reportUrl":"https://nova-wallet.github.io/test-runner/2527//#testresult/7c362107faa977be","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677269120225,"stop":1677269120265,"duration":40}}]},"tags":[]},"source":"1dd028fea1d24a91.json","parameterValues":["{'url': 'wss://rpc.xx.network', 'name': 'XX network'}"]}