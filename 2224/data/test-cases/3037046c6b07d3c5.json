{"uid":"3037046c6b07d3c5","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1673021097925,"stop":1673021098347,"duration":422},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"25a31222b954d5fa","name":"stdout","source":"25a31222b954d5fa.txt","type":"text/plain","size":216}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az583-102"},{"name":"thread","value":"1719-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"72bc7f5fc1b3964d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1673021087358,"stop":1673021087816,"duration":458}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":305,"unknown":0,"total":360},"items":[{"uid":"97c3ce710cff570f","reportUrl":"https://nova-wallet.github.io/test-runner/2223//#testresult/97c3ce710cff570f","status":"passed","time":{"start":1673006731673,"stop":1673006732046,"duration":373}},{"uid":"96349b0016f13968","reportUrl":"https://nova-wallet.github.io/test-runner/2222//#testresult/96349b0016f13968","status":"passed","time":{"start":1672992283058,"stop":1672992283460,"duration":402}},{"uid":"bc413355314c1c8d","reportUrl":"https://nova-wallet.github.io/test-runner/2221//#testresult/bc413355314c1c8d","status":"passed","time":{"start":1672977889351,"stop":1672977889730,"duration":379}},{"uid":"3df592bd0bee1990","reportUrl":"https://nova-wallet.github.io/test-runner/2220//#testresult/3df592bd0bee1990","status":"passed","time":{"start":1672964026906,"stop":1672964027461,"duration":555}},{"uid":"e503aa8fed360303","reportUrl":"https://nova-wallet.github.io/test-runner/2219//#testresult/e503aa8fed360303","status":"passed","time":{"start":1672949057585,"stop":1672949058026,"duration":441}},{"uid":"4ae45dd30e07d615","reportUrl":"https://nova-wallet.github.io/test-runner/2218//#testresult/4ae45dd30e07d615","status":"passed","time":{"start":1672934698322,"stop":1672934698722,"duration":400}},{"uid":"de7b021cd35e7f50","reportUrl":"https://nova-wallet.github.io/test-runner/2217//#testresult/de7b021cd35e7f50","status":"passed","time":{"start":1672920332294,"stop":1672920332870,"duration":576}},{"uid":"364befabde4a3b05","reportUrl":"https://nova-wallet.github.io/test-runner/2216//#testresult/364befabde4a3b05","status":"passed","time":{"start":1672905901041,"stop":1672905901443,"duration":402}},{"uid":"b6d6d925941dd031","reportUrl":"https://nova-wallet.github.io/test-runner/2215//#testresult/b6d6d925941dd031","status":"passed","time":{"start":1672891450310,"stop":1672891450686,"duration":376}},{"uid":"62fe5f268accdda8","reportUrl":"https://nova-wallet.github.io/test-runner/2214//#testresult/62fe5f268accdda8","status":"passed","time":{"start":1672877658991,"stop":1672877659692,"duration":701}},{"uid":"7717840352dd7cd2","reportUrl":"https://nova-wallet.github.io/test-runner/2213//#testresult/7717840352dd7cd2","status":"passed","time":{"start":1672862664324,"stop":1672862664725,"duration":401}},{"uid":"1cb18cd598686d22","reportUrl":"https://nova-wallet.github.io/test-runner/2212//#testresult/1cb18cd598686d22","status":"passed","time":{"start":1672848333241,"stop":1672848333904,"duration":663}},{"uid":"e76c2d722dd4bc02","reportUrl":"https://nova-wallet.github.io/test-runner/2211//#testresult/e76c2d722dd4bc02","status":"passed","time":{"start":1672833937346,"stop":1672833938125,"duration":779}},{"uid":"7d6dc5807b013487","reportUrl":"https://nova-wallet.github.io/test-runner/2210//#testresult/7d6dc5807b013487","status":"passed","time":{"start":1672819505605,"stop":1672819505979,"duration":374}},{"uid":"6f173bea87068ffa","reportUrl":"https://nova-wallet.github.io/test-runner/2209//#testresult/6f173bea87068ffa","status":"passed","time":{"start":1672805209379,"stop":1672805209782,"duration":403}},{"uid":"4ae4ce7b082dc39f","reportUrl":"https://nova-wallet.github.io/test-runner/2208//#testresult/4ae4ce7b082dc39f","status":"passed","time":{"start":1672791227679,"stop":1672791228341,"duration":662}},{"uid":"3d0a90fe270436ea","reportUrl":"https://nova-wallet.github.io/test-runner/2207//#testresult/3d0a90fe270436ea","status":"passed","time":{"start":1672776256572,"stop":1672776256973,"duration":401}},{"uid":"af8c614f93a04514","reportUrl":"https://nova-wallet.github.io/test-runner/2206//#testresult/af8c614f93a04514","status":"passed","time":{"start":1672761865992,"stop":1672761866394,"duration":402}},{"uid":"a1f0d3089252e47","reportUrl":"https://nova-wallet.github.io/test-runner/2205//#testresult/a1f0d3089252e47","status":"passed","time":{"start":1672747531734,"stop":1672747532404,"duration":670}},{"uid":"2f31b401c9210999","reportUrl":"https://nova-wallet.github.io/test-runner/2204//#testresult/2f31b401c9210999","status":"passed","time":{"start":1672733078400,"stop":1672733078776,"duration":376}}]},"tags":[]},"source":"3037046c6b07d3c5.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}