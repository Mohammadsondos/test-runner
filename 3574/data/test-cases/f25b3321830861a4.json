{"uid":"f25b3321830861a4","name":"test_chainId[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"772a904a7b84e5177692678e454acb91","time":{"start":1692000343977,"stop":1692000346072,"duration":2095},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7f92f46e2c50>\nchain = <scripts.utils.chain_model.Chain object at 0x7f92f49671c0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f92e80ca110>\nmethod = 'state_getMetadata'\nparams = ['0x930a6343dbe22ce483f0c3f5af8928e77117b4d6be17e8df11775ea527ebfc96']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az193-93"},{"name":"thread","value":"1963-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f92f49671c0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"79d7d18c743d8e8e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692000326121,"stop":1692000328368,"duration":2247}},{"uid":"503f12315542cb83","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692000307944,"stop":1692000310387,"duration":2443}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":574,"unknown":0,"total":579},"items":[{"uid":"49aa2bac66761f6f","reportUrl":"https://novasamatech.github.io/test-runner/3573//#testresult/49aa2bac66761f6f","status":"passed","time":{"start":1691985879195,"stop":1691985889305,"duration":10110}},{"uid":"6595d976d85ad478","reportUrl":"https://novasamatech.github.io/test-runner/3572//#testresult/6595d976d85ad478","status":"passed","time":{"start":1691971993869,"stop":1691972007819,"duration":13950}},{"uid":"d2c85630cc0dd3d","reportUrl":"https://novasamatech.github.io/test-runner/3571//#testresult/d2c85630cc0dd3d","status":"passed","time":{"start":1691957080951,"stop":1691957093909,"duration":12958}},{"uid":"fa768989b61dc31e","reportUrl":"https://novasamatech.github.io/test-runner/3570//#testresult/fa768989b61dc31e","status":"passed","time":{"start":1691942663770,"stop":1691942674798,"duration":11028}},{"uid":"d02f013dd2580038","reportUrl":"https://novasamatech.github.io/test-runner/3569//#testresult/d02f013dd2580038","status":"passed","time":{"start":1691928286952,"stop":1691928298599,"duration":11647}},{"uid":"233639c5d70992d3","reportUrl":"https://novasamatech.github.io/test-runner/3568//#testresult/233639c5d70992d3","status":"passed","time":{"start":1691913885579,"stop":1691913897211,"duration":11632}},{"uid":"310e38c351cd4762","reportUrl":"https://novasamatech.github.io/test-runner/3567//#testresult/310e38c351cd4762","status":"passed","time":{"start":1691899484080,"stop":1691899496198,"duration":12118}},{"uid":"e19c1c4ae70553b5","reportUrl":"https://novasamatech.github.io/test-runner/3566//#testresult/e19c1c4ae70553b5","status":"passed","time":{"start":1691885610197,"stop":1691885623674,"duration":13477}},{"uid":"d8b5c941cf3f9692","reportUrl":"https://novasamatech.github.io/test-runner/3565//#testresult/d8b5c941cf3f9692","status":"passed","time":{"start":1691870663886,"stop":1691870674799,"duration":10913}},{"uid":"33c7802542828ae4","reportUrl":"https://novasamatech.github.io/test-runner/3564//#testresult/33c7802542828ae4","status":"passed","time":{"start":1691856270235,"stop":1691856279976,"duration":9741}},{"uid":"3b55f037d53ab869","reportUrl":"https://novasamatech.github.io/test-runner/3562//#testresult/3b55f037d53ab869","status":"passed","time":{"start":1691827491711,"stop":1691827502649,"duration":10938}},{"uid":"3f5005bb289b219d","reportUrl":"https://novasamatech.github.io/test-runner/3563//#testresult/3f5005bb289b219d","status":"passed","time":{"start":1691841882979,"stop":1691841893635,"duration":10656}},{"uid":"4122b392a8f2c2b4","reportUrl":"https://novasamatech.github.io/test-runner/3561//#testresult/4122b392a8f2c2b4","status":"passed","time":{"start":1691813066178,"stop":1691813076187,"duration":10009}},{"uid":"b3cf80f2784b73fe","reportUrl":"https://novasamatech.github.io/test-runner/3560//#testresult/b3cf80f2784b73fe","status":"passed","time":{"start":1691799116291,"stop":1691799128211,"duration":11920}},{"uid":"a89192629fce7148","reportUrl":"https://novasamatech.github.io/test-runner/3559//#testresult/a89192629fce7148","status":"passed","time":{"start":1691784259717,"stop":1691784269371,"duration":9654}},{"uid":"45aa1739d2dde8bf","reportUrl":"https://novasamatech.github.io/test-runner/3558//#testresult/45aa1739d2dde8bf","status":"passed","time":{"start":1691769884831,"stop":1691769896615,"duration":11784}},{"uid":"5bf2f362d0845775","reportUrl":"https://novasamatech.github.io/test-runner/3557//#testresult/5bf2f362d0845775","status":"passed","time":{"start":1691755504342,"stop":1691755513530,"duration":9188}},{"uid":"f12a8d2e4463f81f","reportUrl":"https://novasamatech.github.io/test-runner/3556//#testresult/f12a8d2e4463f81f","status":"passed","time":{"start":1691741086518,"stop":1691741099097,"duration":12579}},{"uid":"d6bd5231e99da921","reportUrl":"https://novasamatech.github.io/test-runner/3555//#testresult/d6bd5231e99da921","status":"passed","time":{"start":1691734858066,"stop":1691734868553,"duration":10487}},{"uid":"d84fb895dbcd238f","reportUrl":"https://novasamatech.github.io/test-runner/3553//#testresult/d84fb895dbcd238f","status":"passed","time":{"start":1691734604503,"stop":1691734613749,"duration":9246}}]},"tags":[]},"source":"f25b3321830861a4.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f92f49671c0>"]}