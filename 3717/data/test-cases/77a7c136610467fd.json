{"uid":"77a7c136610467fd","name":"test_chainId[Test for Acala]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"7c84c7c55e19eabda7c2b151a24639b0","time":{"start":1693987349902,"stop":1693987354616,"duration":4714},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7fa54ff8b0a0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fa5540ddb70>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fa543235de0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xc1e9069816f98fa5c52ea47f894d986978f544e5b0c9e4f854eca68026d276ce']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7fa54ff8b0a0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fa5540ddb70>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fa543235de0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xc1e9069816f98fa5c52ea47f894d986978f544e5b0c9e4f854eca68026d276ce']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"c5a496af947dfa73","name":"stdout","source":"c5a496af947dfa73.txt","type":"text/plain","size":666}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az797-48"},{"name":"thread","value":"2029-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fa5540ddb70>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"403689fee5a509a9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693987329853,"stop":1693987334726,"duration":4873}},{"uid":"ddd988072fe97515","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1693987309590,"stop":1693987314614,"duration":5024}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":77,"unknown":0,"total":78},"items":[{"uid":"fcb690ba37cc70ae","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/fcb690ba37cc70ae","status":"passed","time":{"start":1693972892318,"stop":1693972900623,"duration":8305}},{"uid":"bb1a8a4ec0fe5a6f","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/bb1a8a4ec0fe5a6f","status":"passed","time":{"start":1693958563650,"stop":1693958574132,"duration":10482}},{"uid":"6623e3b93df1e60a","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/6623e3b93df1e60a","status":"passed","time":{"start":1693944115662,"stop":1693944123954,"duration":8292}},{"uid":"8a7b34249771be28","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/8a7b34249771be28","status":"passed","time":{"start":1693929696860,"stop":1693929705126,"duration":8266}},{"uid":"78c8e795918c98bc","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/78c8e795918c98bc","status":"passed","time":{"start":1693915306529,"stop":1693915315786,"duration":9257}},{"uid":"9adc862e4a9e2eae","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/9adc862e4a9e2eae","status":"passed","time":{"start":1693900904958,"stop":1693900913937,"duration":8979}},{"uid":"68c5f2ee3a271568","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/68c5f2ee3a271568","status":"passed","time":{"start":1693872138539,"stop":1693872142571,"duration":4032}},{"uid":"343361cc9d145c28","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/343361cc9d145c28","status":"passed","time":{"start":1693857722848,"stop":1693857729975,"duration":7127}},{"uid":"f732466048ed89a9","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/f732466048ed89a9","status":"passed","time":{"start":1693843307206,"stop":1693843313068,"duration":5862}},{"uid":"df0682b9fa80401f","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/df0682b9fa80401f","status":"passed","time":{"start":1693828896499,"stop":1693828900036,"duration":3537}},{"uid":"1ee96ea3639ecc8c","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/1ee96ea3639ecc8c","status":"passed","time":{"start":1693814506949,"stop":1693814513432,"duration":6483}},{"uid":"1f6e7ad0644b5602","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/1f6e7ad0644b5602","status":"passed","time":{"start":1693800084658,"stop":1693800088243,"duration":3585}},{"uid":"7a6100aad61a2fb8","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/7a6100aad61a2fb8","status":"passed","time":{"start":1693785735950,"stop":1693785740002,"duration":4052}},{"uid":"baa785141ab7310","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/baa785141ab7310","status":"passed","time":{"start":1693771299339,"stop":1693771304719,"duration":5380}},{"uid":"9be6452b76e0a742","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/9be6452b76e0a742","status":"passed","time":{"start":1693756909430,"stop":1693756917037,"duration":7607}},{"uid":"8644cec470b1ee86","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/8644cec470b1ee86","status":"passed","time":{"start":1693742495775,"stop":1693742500729,"duration":4954}},{"uid":"530b4c6b16ddc183","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/530b4c6b16ddc183","status":"passed","time":{"start":1693728109813,"stop":1693728115543,"duration":5730}},{"uid":"5c83a750d30d7e27","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/5c83a750d30d7e27","status":"passed","time":{"start":1693713699119,"stop":1693713704032,"duration":4913}},{"uid":"c884e0272c1004fb","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/c884e0272c1004fb","status":"passed","time":{"start":1693699342807,"stop":1693699347254,"duration":4447}},{"uid":"e650ad739f9bc7c7","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/e650ad739f9bc7c7","status":"passed","time":{"start":1693684886414,"stop":1693684891011,"duration":4597}}]},"tags":[]},"source":"77a7c136610467fd.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fa5540ddb70>"]}