{"uid":"7a4494d1ae803f10","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1711224069570,"stop":1711224069631,"duration":61},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f2d810fd4b0>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f2d80e45780>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f2d80e45c00>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1113-403"},{"name":"thread","value":"2054-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"da0bb7bdd4380feb","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711224064456,"stop":1711224064535,"duration":79}},{"uid":"98dc4ea8cb6fa49f","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1711224059006,"stop":1711224059344,"duration":338}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":41,"skipped":0,"passed":1001,"unknown":0,"total":1043},"items":[{"uid":"4454c5c24db6a518","reportUrl":"https://novasamatech.github.io/test-runner/4931//#testresult/4454c5c24db6a518","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711209670742,"stop":1711209671022,"duration":280}},{"uid":"cbcf208785bd2dec","reportUrl":"https://novasamatech.github.io/test-runner/4930//#testresult/cbcf208785bd2dec","status":"passed","time":{"start":1711195274896,"stop":1711195275078,"duration":182}},{"uid":"574d9e5403ce733e","reportUrl":"https://novasamatech.github.io/test-runner/4929//#testresult/574d9e5403ce733e","status":"passed","time":{"start":1711180862759,"stop":1711180863597,"duration":838}},{"uid":"885a92485e84b98f","reportUrl":"https://novasamatech.github.io/test-runner/4928//#testresult/885a92485e84b98f","status":"passed","time":{"start":1711166473308,"stop":1711166474354,"duration":1046}},{"uid":"b111c36cddb7f84d","reportUrl":"https://novasamatech.github.io/test-runner/4927//#testresult/b111c36cddb7f84d","status":"passed","time":{"start":1711152097901,"stop":1711152099645,"duration":1744}},{"uid":"7415876e20dfd979","reportUrl":"https://novasamatech.github.io/test-runner/4926//#testresult/7415876e20dfd979","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711137663893,"stop":1711137663923,"duration":30}},{"uid":"f4117b5992746ee0","reportUrl":"https://novasamatech.github.io/test-runner/4925//#testresult/f4117b5992746ee0","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711123273829,"stop":1711123274211,"duration":382}},{"uid":"e0bad1982572e55a","reportUrl":"https://novasamatech.github.io/test-runner/4924//#testresult/e0bad1982572e55a","status":"passed","time":{"start":1711108877218,"stop":1711108877358,"duration":140}},{"uid":"598914ad8ee8befe","reportUrl":"https://novasamatech.github.io/test-runner/4923//#testresult/598914ad8ee8befe","status":"passed","time":{"start":1711096478948,"stop":1711096479773,"duration":825}},{"uid":"7a9e4dfe0a4c6c4a","reportUrl":"https://novasamatech.github.io/test-runner/4922//#testresult/7a9e4dfe0a4c6c4a","status":"passed","time":{"start":1711094460458,"stop":1711094460617,"duration":159}},{"uid":"bdfccd2546f6b776","reportUrl":"https://novasamatech.github.io/test-runner/4921//#testresult/bdfccd2546f6b776","status":"passed","time":{"start":1711080068500,"stop":1711080069557,"duration":1057}},{"uid":"280dc9521acabb0e","reportUrl":"https://novasamatech.github.io/test-runner/4920//#testresult/280dc9521acabb0e","status":"passed","time":{"start":1711065708782,"stop":1711065709030,"duration":248}},{"uid":"ec3c92e24616463","reportUrl":"https://novasamatech.github.io/test-runner/4919//#testresult/ec3c92e24616463","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711051268807,"stop":1711051268854,"duration":47}},{"uid":"7dcbf3c02c852ac5","reportUrl":"https://novasamatech.github.io/test-runner/4918//#testresult/7dcbf3c02c852ac5","status":"passed","time":{"start":1711036897580,"stop":1711036898763,"duration":1183}},{"uid":"a5aa6cb07ac7ccc5","reportUrl":"https://novasamatech.github.io/test-runner/4917//#testresult/a5aa6cb07ac7ccc5","status":"passed","time":{"start":1711022472828,"stop":1711022473237,"duration":409}},{"uid":"b5f4be46b2497dfc","reportUrl":"https://novasamatech.github.io/test-runner/4916//#testresult/b5f4be46b2497dfc","status":"passed","time":{"start":1711008077981,"stop":1711008078550,"duration":569}},{"uid":"2ec119338172aa03","reportUrl":"https://novasamatech.github.io/test-runner/4915//#testresult/2ec119338172aa03","status":"passed","time":{"start":1710993662254,"stop":1710993662461,"duration":207}},{"uid":"6ea0be1cdc23daaf","reportUrl":"https://novasamatech.github.io/test-runner/4914//#testresult/6ea0be1cdc23daaf","status":"passed","time":{"start":1710979306668,"stop":1710979307085,"duration":417}},{"uid":"3762f1f95f601773","reportUrl":"https://novasamatech.github.io/test-runner/4913//#testresult/3762f1f95f601773","status":"passed","time":{"start":1710964862036,"stop":1710964862479,"duration":443}},{"uid":"3dd86e012d6235b0","reportUrl":"https://novasamatech.github.io/test-runner/4912//#testresult/3dd86e012d6235b0","status":"passed","time":{"start":1710950461813,"stop":1710950461940,"duration":127}}]},"tags":[]},"source":"7a4494d1ae803f10.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}