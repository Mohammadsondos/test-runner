{"uid":"4800ced81885ea37","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1698307341052,"stop":1698307341539,"duration":487},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 26 Oct 2023 08:02:21 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 26 Oct 2023 08:02:21 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 26 Oct 2023 08:02:21 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 26 Oct 2023 08:02:21 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"9489de64b220da77","name":"stdout","source":"9489de64b220da77.txt","type":"text/plain","size":1464}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az572-697"},{"name":"thread","value":"2089-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f536df68a0e7987d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 26 Oct 2023 08:02:05 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698307325394,"stop":1698307325884,"duration":490}},{"uid":"7cce2e935ccfc8e3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 26 Oct 2023 08:01:50 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1698307309775,"stop":1698307310277,"duration":502}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":46,"skipped":0,"passed":334,"unknown":0,"total":380},"items":[{"uid":"cac57358eee0bbea","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/cac57358eee0bbea","status":"passed","time":{"start":1698292898749,"stop":1698292899147,"duration":398}},{"uid":"6f61dcd3a2efc7f2","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/6f61dcd3a2efc7f2","status":"passed","time":{"start":1698278532442,"stop":1698278533004,"duration":562}},{"uid":"169332ff48c84428","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/169332ff48c84428","status":"passed","time":{"start":1698264100027,"stop":1698264100580,"duration":553}},{"uid":"3ff1c16eb17f0fcd","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/3ff1c16eb17f0fcd","status":"passed","time":{"start":1698249703659,"stop":1698249704042,"duration":383}},{"uid":"1ada444cc665d137","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/1ada444cc665d137","status":"passed","time":{"start":1698235303747,"stop":1698235304120,"duration":373}},{"uid":"676cde1a032b3d8b","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/676cde1a032b3d8b","status":"passed","time":{"start":1698220944099,"stop":1698220944675,"duration":576}},{"uid":"e88731fd3a9737de","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/e88731fd3a9737de","status":"passed","time":{"start":1698206500006,"stop":1698206500512,"duration":506}},{"uid":"157034da84510cd3","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/157034da84510cd3","status":"passed","time":{"start":1698192151066,"stop":1698192151657,"duration":591}},{"uid":"a5ef7061454c98","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/a5ef7061454c98","status":"passed","time":{"start":1698177697003,"stop":1698177697631,"duration":628}},{"uid":"3e5462b20d8ca379","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/3e5462b20d8ca379","status":"passed","time":{"start":1698163341530,"stop":1698163342030,"duration":500}},{"uid":"efe9695bc3f08b4d","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/efe9695bc3f08b4d","status":"passed","time":{"start":1698148935399,"stop":1698148935767,"duration":368}},{"uid":"8fa762344708116d","reportUrl":"https://novasamatech.github.io/test-runner/4007//#testresult/8fa762344708116d","status":"passed","time":{"start":1698120104790,"stop":1698120105302,"duration":512}},{"uid":"d91138585aa75fc1","reportUrl":"https://novasamatech.github.io/test-runner/4008//#testresult/d91138585aa75fc1","status":"passed","time":{"start":1698134504800,"stop":1698134505181,"duration":381}},{"uid":"da295cf340b66454","reportUrl":"https://novasamatech.github.io/test-runner/4006//#testresult/da295cf340b66454","status":"passed","time":{"start":1698105758092,"stop":1698105758785,"duration":693}},{"uid":"1be6f90cf41cd290","reportUrl":"https://novasamatech.github.io/test-runner/4005//#testresult/1be6f90cf41cd290","status":"passed","time":{"start":1698091305201,"stop":1698091305884,"duration":683}},{"uid":"ae6ee26057594a11","reportUrl":"https://novasamatech.github.io/test-runner/4004//#testresult/ae6ee26057594a11","status":"passed","time":{"start":1698076937545,"stop":1698076937915,"duration":370}},{"uid":"1285ac61ab17205a","reportUrl":"https://novasamatech.github.io/test-runner/4003//#testresult/1285ac61ab17205a","status":"passed","time":{"start":1698062503742,"stop":1698062504122,"duration":380}},{"uid":"cb9e384ec9de87b6","reportUrl":"https://novasamatech.github.io/test-runner/4002//#testresult/cb9e384ec9de87b6","status":"passed","time":{"start":1698048104589,"stop":1698048105093,"duration":504}},{"uid":"e5356ece0f9d80d8","reportUrl":"https://novasamatech.github.io/test-runner/4001//#testresult/e5356ece0f9d80d8","status":"passed","time":{"start":1698033706856,"stop":1698033707449,"duration":593}},{"uid":"86cf457bc4314cc3","reportUrl":"https://novasamatech.github.io/test-runner/4000//#testresult/86cf457bc4314cc3","status":"passed","time":{"start":1698019334596,"stop":1698019335101,"duration":505}}]},"tags":[]},"source":"4800ced81885ea37.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}