{"uid":"36ed9548bd130112","name":"test_can_create_connection[Test for Kusama, url: wss://kusama-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"92b55e3f9d727df3bbb4f299d432f444","time":{"start":1693872165279,"stop":1693872170753,"duration":5474},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"bf539a89c1b098ec","name":"stdout","source":"bf539a89c1b098ec.txt","type":"text/plain","size":588}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az344-249"},{"name":"thread","value":"2100-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama-rpc.dwellir.com', 'name': 'Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6062060933589f87","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693872144728,"stop":1693872150203,"duration":5475}},{"uid":"fb350cd8aa2d0887","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693872124041,"stop":1693872129556,"duration":5515}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":64,"unknown":0,"total":71},"items":[{"uid":"9aa7bb02ce7ec289","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/9aa7bb02ce7ec289","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693857719850,"stop":1693857725229,"duration":5379}},{"uid":"379e17fab5a4b7e1","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/379e17fab5a4b7e1","status":"passed","time":{"start":1693843275699,"stop":1693843276382,"duration":683}},{"uid":"214422019b7e67d7","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/214422019b7e67d7","status":"passed","time":{"start":1693828883021,"stop":1693828883683,"duration":662}},{"uid":"6513a25cf0198e00","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/6513a25cf0198e00","status":"passed","time":{"start":1693814492987,"stop":1693814493825,"duration":838}},{"uid":"36e657d8d0b41ca3","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/36e657d8d0b41ca3","status":"passed","time":{"start":1693800077004,"stop":1693800077656,"duration":652}},{"uid":"1b9ebaab184514cd","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/1b9ebaab184514cd","status":"passed","time":{"start":1693785729802,"stop":1693785730598,"duration":796}},{"uid":"1884ca31a7d5394b","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/1884ca31a7d5394b","status":"passed","time":{"start":1693771286909,"stop":1693771287537,"duration":628}},{"uid":"9084240af8af6147","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/9084240af8af6147","status":"passed","time":{"start":1693756885618,"stop":1693756886404,"duration":786}},{"uid":"34172b227c4bf4b5","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/34172b227c4bf4b5","status":"passed","time":{"start":1693742490340,"stop":1693742490996,"duration":656}},{"uid":"7cfc63e0418bcc8e","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/7cfc63e0418bcc8e","status":"passed","time":{"start":1693728085951,"stop":1693728086412,"duration":461}},{"uid":"de76ea60a75c31d2","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/de76ea60a75c31d2","status":"passed","time":{"start":1693713677110,"stop":1693713677725,"duration":615}},{"uid":"1174b81ed48829d4","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/1174b81ed48829d4","status":"passed","time":{"start":1693699325051,"stop":1693699325531,"duration":480}},{"uid":"5f97871262dfdaff","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/5f97871262dfdaff","status":"passed","time":{"start":1693684879263,"stop":1693684879871,"duration":608}},{"uid":"51312d6965e1cc8e","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/51312d6965e1cc8e","status":"passed","time":{"start":1693670472941,"stop":1693670473439,"duration":498}},{"uid":"51808989f5257aff","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/51808989f5257aff","status":"passed","time":{"start":1693656078883,"stop":1693656079362,"duration":479}},{"uid":"f0cf868568e5541f","reportUrl":"https://novasamatech.github.io/test-runner/3693//#testresult/f0cf868568e5541f","status":"passed","time":{"start":1693641674901,"stop":1693641675417,"duration":516}},{"uid":"4cf949560e8e7c80","reportUrl":"https://novasamatech.github.io/test-runner/3692//#testresult/4cf949560e8e7c80","status":"passed","time":{"start":1693627285497,"stop":1693627286110,"duration":613}},{"uid":"42df8e1f4032660f","reportUrl":"https://novasamatech.github.io/test-runner/3691//#testresult/42df8e1f4032660f","status":"passed","time":{"start":1693612921536,"stop":1693612922024,"duration":488}},{"uid":"58e48146ab11ad6c","reportUrl":"https://novasamatech.github.io/test-runner/3690//#testresult/58e48146ab11ad6c","status":"passed","time":{"start":1693598485407,"stop":1693598486020,"duration":613}},{"uid":"38bf136212eed003","reportUrl":"https://novasamatech.github.io/test-runner/3689//#testresult/38bf136212eed003","status":"passed","time":{"start":1693584080233,"stop":1693584080849,"duration":616}}]},"tags":[]},"source":"36ed9548bd130112.json","parameterValues":["{'url': 'wss://kusama-rpc.dwellir.com', 'name': 'Kusama'}"]}