{"uid":"e4a61d0ef08d2b36","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1696406540976,"stop":1696406541641,"duration":665},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 08:02:21 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 08:02:21 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 08:02:21 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 08:02:21 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"c24de7c6196e3af7","name":"stdout","source":"c24de7c6196e3af7.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az341-537"},{"name":"thread","value":"2090-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8e316c5ca7b97f38","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 08:02:05 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696406524804,"stop":1696406525831,"duration":1027}},{"uid":"f87bfcb1e5a4d002","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Wed, 04 Oct 2023 08:01:49 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696406508695,"stop":1696406509623,"duration":928}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":15,"skipped":0,"passed":231,"unknown":0,"total":246},"items":[{"uid":"1133e0227a8fb74b","reportUrl":"https://novasamatech.github.io/test-runner/3885//#testresult/1133e0227a8fb74b","status":"passed","time":{"start":1696392098193,"stop":1696392098870,"duration":677}},{"uid":"2673dc9f23a4addb","reportUrl":"https://novasamatech.github.io/test-runner/3884//#testresult/2673dc9f23a4addb","status":"passed","time":{"start":1696377736154,"stop":1696377736928,"duration":774}},{"uid":"934408498dceaf36","reportUrl":"https://novasamatech.github.io/test-runner/3883//#testresult/934408498dceaf36","status":"passed","time":{"start":1696363296643,"stop":1696363297500,"duration":857}},{"uid":"c70168d67612a8df","reportUrl":"https://novasamatech.github.io/test-runner/3882//#testresult/c70168d67612a8df","status":"passed","time":{"start":1696348894329,"stop":1696348895117,"duration":788}},{"uid":"13cc08f892a4561c","reportUrl":"https://novasamatech.github.io/test-runner/3881//#testresult/13cc08f892a4561c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 03 Oct 2023 12:02:29 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696334548909,"stop":1696334549778,"duration":869}},{"uid":"b758c847d0f2da98","reportUrl":"https://novasamatech.github.io/test-runner/3880//#testresult/b758c847d0f2da98","status":"passed","time":{"start":1696320105251,"stop":1696320106106,"duration":855}},{"uid":"d4303ae64ae524","reportUrl":"https://novasamatech.github.io/test-runner/3879//#testresult/d4303ae64ae524","status":"passed","time":{"start":1696305756803,"stop":1696305757659,"duration":856}},{"uid":"1cab4d38938197b3","reportUrl":"https://novasamatech.github.io/test-runner/3878//#testresult/1cab4d38938197b3","status":"passed","time":{"start":1696291357124,"stop":1696291359194,"duration":2070}},{"uid":"26e3f70e8accf80c","reportUrl":"https://novasamatech.github.io/test-runner/3877//#testresult/26e3f70e8accf80c","status":"passed","time":{"start":1696276944118,"stop":1696276945032,"duration":914}},{"uid":"c44f15a7b88b715d","reportUrl":"https://novasamatech.github.io/test-runner/3876//#testresult/c44f15a7b88b715d","status":"passed","time":{"start":1696262553168,"stop":1696262553987,"duration":819}},{"uid":"e437448ed6aca74d","reportUrl":"https://novasamatech.github.io/test-runner/3875//#testresult/e437448ed6aca74d","status":"passed","time":{"start":1696248101550,"stop":1696248102389,"duration":839}},{"uid":"afd2002923ecc60c","reportUrl":"https://novasamatech.github.io/test-runner/3874//#testresult/afd2002923ecc60c","status":"passed","time":{"start":1696233711392,"stop":1696233712012,"duration":620}},{"uid":"5a3a5a9f563e7834","reportUrl":"https://novasamatech.github.io/test-runner/3873//#testresult/5a3a5a9f563e7834","status":"passed","time":{"start":1696219321502,"stop":1696219322607,"duration":1105}},{"uid":"6102b67138f70ff1","reportUrl":"https://novasamatech.github.io/test-runner/3872//#testresult/6102b67138f70ff1","status":"passed","time":{"start":1696204978290,"stop":1696204979290,"duration":1000}},{"uid":"eaf7cac9c510c6e8","reportUrl":"https://novasamatech.github.io/test-runner/3871//#testresult/eaf7cac9c510c6e8","status":"passed","time":{"start":1696190500455,"stop":1696190501382,"duration":927}},{"uid":"7d8aea2318a5bc16","reportUrl":"https://novasamatech.github.io/test-runner/3870//#testresult/7d8aea2318a5bc16","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Sun, 01 Oct 2023 16:02:23 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1696176142856,"stop":1696176143999,"duration":1143}},{"uid":"1db0c9a7780c11e","reportUrl":"https://novasamatech.github.io/test-runner/3869//#testresult/1db0c9a7780c11e","status":"passed","time":{"start":1696161706409,"stop":1696161707105,"duration":696}},{"uid":"3a60c58bc1e3c8f6","reportUrl":"https://novasamatech.github.io/test-runner/3868//#testresult/3a60c58bc1e3c8f6","status":"passed","time":{"start":1696147313025,"stop":1696147314249,"duration":1224}},{"uid":"8a46a4db808cd0c0","reportUrl":"https://novasamatech.github.io/test-runner/3867//#testresult/8a46a4db808cd0c0","status":"passed","time":{"start":1696132901517,"stop":1696132902016,"duration":499}},{"uid":"24c75160865b3e36","reportUrl":"https://novasamatech.github.io/test-runner/3866//#testresult/24c75160865b3e36","status":"passed","time":{"start":1696118570545,"stop":1696118571430,"duration":885}}]},"tags":[]},"source":"e4a61d0ef08d2b36.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}