{"uid":"8a98ad6642f026a3","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1707768065837,"stop":1707768065881,"duration":44},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f8853600eb0>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f88534a6d70>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f88534a78e0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az774-166"},{"name":"thread","value":"2060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a6cc812734a2de79","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707768060763,"stop":1707768060789,"duration":26}},{"uid":"96e44466ff8588bc","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707768055571,"stop":1707768055634,"duration":63}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":5,"skipped":0,"passed":873,"unknown":0,"total":879},"items":[{"uid":"923642eb23f6032b","reportUrl":"https://novasamatech.github.io/test-runner/4687//#testresult/923642eb23f6032b","status":"passed","time":{"start":1707753660908,"stop":1707753661846,"duration":938}},{"uid":"acdfe50279743760","reportUrl":"https://novasamatech.github.io/test-runner/4686//#testresult/acdfe50279743760","status":"passed","time":{"start":1707739260887,"stop":1707739261107,"duration":220}},{"uid":"ea3669319f6794a5","reportUrl":"https://novasamatech.github.io/test-runner/4685//#testresult/ea3669319f6794a5","status":"passed","time":{"start":1707724866245,"stop":1707724866592,"duration":347}},{"uid":"f97a368e0eb203c5","reportUrl":"https://novasamatech.github.io/test-runner/4684//#testresult/f97a368e0eb203c5","status":"passed","time":{"start":1707710468322,"stop":1707710469186,"duration":864}},{"uid":"2163fdc03d2e1e19","reportUrl":"https://novasamatech.github.io/test-runner/4683//#testresult/2163fdc03d2e1e19","status":"passed","time":{"start":1707696113472,"stop":1707696114150,"duration":678}},{"uid":"fba4866e752fbc","reportUrl":"https://novasamatech.github.io/test-runner/4682//#testresult/fba4866e752fbc","status":"passed","time":{"start":1707681655078,"stop":1707681655380,"duration":302}},{"uid":"6a5f88bc29ba969d","reportUrl":"https://novasamatech.github.io/test-runner/4681//#testresult/6a5f88bc29ba969d","status":"passed","time":{"start":1707667257842,"stop":1707667258060,"duration":218}},{"uid":"d04410ecb29446e0","reportUrl":"https://novasamatech.github.io/test-runner/4680//#testresult/d04410ecb29446e0","status":"passed","time":{"start":1707652859285,"stop":1707652859497,"duration":212}},{"uid":"449c08b9cf567ce0","reportUrl":"https://novasamatech.github.io/test-runner/4678//#testresult/449c08b9cf567ce0","status":"passed","time":{"start":1707624068997,"stop":1707624069812,"duration":815}},{"uid":"92ee2a554f621ca","reportUrl":"https://novasamatech.github.io/test-runner/4679//#testresult/92ee2a554f621ca","status":"passed","time":{"start":1707638461401,"stop":1707638461643,"duration":242}},{"uid":"cce46b5c5ed38ea4","reportUrl":"https://novasamatech.github.io/test-runner/4677//#testresult/cce46b5c5ed38ea4","status":"passed","time":{"start":1707609710168,"stop":1707609710320,"duration":152}},{"uid":"894457fad80b450","reportUrl":"https://novasamatech.github.io/test-runner/4676//#testresult/894457fad80b450","status":"passed","time":{"start":1707595269466,"stop":1707595270173,"duration":707}},{"uid":"90791f0a3c6917ce","reportUrl":"https://novasamatech.github.io/test-runner/4675//#testresult/90791f0a3c6917ce","status":"passed","time":{"start":1707580862231,"stop":1707580862992,"duration":761}},{"uid":"9ba72e4052491372","reportUrl":"https://novasamatech.github.io/test-runner/4674//#testresult/9ba72e4052491372","status":"passed","time":{"start":1707566462016,"stop":1707566462278,"duration":262}},{"uid":"54e00cf20d5fc124","reportUrl":"https://novasamatech.github.io/test-runner/4673//#testresult/54e00cf20d5fc124","status":"passed","time":{"start":1707552064246,"stop":1707552064534,"duration":288}},{"uid":"beb3f4a5083f622e","reportUrl":"https://novasamatech.github.io/test-runner/4672//#testresult/beb3f4a5083f622e","status":"passed","time":{"start":1707537662050,"stop":1707537662776,"duration":726}},{"uid":"8563e700f2062c1a","reportUrl":"https://novasamatech.github.io/test-runner/4671//#testresult/8563e700f2062c1a","status":"passed","time":{"start":1707523307434,"stop":1707523307630,"duration":196}},{"uid":"f4ee324e16f2e2e6","reportUrl":"https://novasamatech.github.io/test-runner/4670//#testresult/f4ee324e16f2e2e6","status":"passed","time":{"start":1707508875111,"stop":1707508875312,"duration":201}},{"uid":"28f8d54c283ca38d","reportUrl":"https://novasamatech.github.io/test-runner/4669//#testresult/28f8d54c283ca38d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707494472069,"stop":1707494472125,"duration":56}},{"uid":"37a6e2c81b50d0a9","reportUrl":"https://novasamatech.github.io/test-runner/4668//#testresult/37a6e2c81b50d0a9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480079130,"stop":1707480079436,"duration":306}}]},"tags":[]},"source":"8a98ad6642f026a3.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}