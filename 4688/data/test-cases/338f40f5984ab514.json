{"uid":"338f40f5984ab514","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1707768076046,"stop":1707768076118,"duration":72},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f88536015d0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f88513dda20>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f88513dc490>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az774-166"},{"name":"thread","value":"2060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8429d4f96352ff0d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707768070981,"stop":1707768071012,"duration":31}},{"uid":"81e2a0df4690562a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707768065911,"stop":1707768065951,"duration":40}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":422,"unknown":0,"total":427},"items":[{"uid":"51dee18e0581ad85","reportUrl":"https://novasamatech.github.io/test-runner/4687//#testresult/51dee18e0581ad85","status":"passed","time":{"start":1707753661849,"stop":1707753662503,"duration":654}},{"uid":"e152b5cb26fcdc85","reportUrl":"https://novasamatech.github.io/test-runner/4686//#testresult/e152b5cb26fcdc85","status":"passed","time":{"start":1707739261110,"stop":1707739261334,"duration":224}},{"uid":"51dbb2ef4e9d9b5b","reportUrl":"https://novasamatech.github.io/test-runner/4685//#testresult/51dbb2ef4e9d9b5b","status":"passed","time":{"start":1707724865718,"stop":1707724866007,"duration":289}},{"uid":"8888e9fca10fb355","reportUrl":"https://novasamatech.github.io/test-runner/4684//#testresult/8888e9fca10fb355","status":"passed","time":{"start":1707710468398,"stop":1707710468912,"duration":514}},{"uid":"6a32e7134b043372","reportUrl":"https://novasamatech.github.io/test-runner/4683//#testresult/6a32e7134b043372","status":"passed","time":{"start":1707696113528,"stop":1707696114153,"duration":625}},{"uid":"44d9b03dc031d9b3","reportUrl":"https://novasamatech.github.io/test-runner/4682//#testresult/44d9b03dc031d9b3","status":"passed","time":{"start":1707681665287,"stop":1707681665516,"duration":229}},{"uid":"64e7a58b582e764a","reportUrl":"https://novasamatech.github.io/test-runner/4681//#testresult/64e7a58b582e764a","status":"passed","time":{"start":1707667257369,"stop":1707667257522,"duration":153}},{"uid":"9b46954e452a99af","reportUrl":"https://novasamatech.github.io/test-runner/4680//#testresult/9b46954e452a99af","status":"passed","time":{"start":1707652858942,"stop":1707652859211,"duration":269}},{"uid":"37534097840fc096","reportUrl":"https://novasamatech.github.io/test-runner/4678//#testresult/37534097840fc096","status":"passed","time":{"start":1707624069162,"stop":1707624069780,"duration":618}},{"uid":"a9aaef3422d9c0c6","reportUrl":"https://novasamatech.github.io/test-runner/4679//#testresult/a9aaef3422d9c0c6","status":"passed","time":{"start":1707638460430,"stop":1707638460696,"duration":266}},{"uid":"370f577ab3db157f","reportUrl":"https://novasamatech.github.io/test-runner/4677//#testresult/370f577ab3db157f","status":"passed","time":{"start":1707609708390,"stop":1707609708516,"duration":126}},{"uid":"1fde3d5b78a09f0a","reportUrl":"https://novasamatech.github.io/test-runner/4676//#testresult/1fde3d5b78a09f0a","status":"passed","time":{"start":1707595269742,"stop":1707595270498,"duration":756}},{"uid":"173bdb8e95fb466a","reportUrl":"https://novasamatech.github.io/test-runner/4675//#testresult/173bdb8e95fb466a","status":"passed","time":{"start":1707580862430,"stop":1707580863145,"duration":715}},{"uid":"d9c8dac9b4c8b1db","reportUrl":"https://novasamatech.github.io/test-runner/4674//#testresult/d9c8dac9b4c8b1db","status":"passed","time":{"start":1707566460773,"stop":1707566460968,"duration":195}},{"uid":"aa9a94fa66f02b92","reportUrl":"https://novasamatech.github.io/test-runner/4673//#testresult/aa9a94fa66f02b92","status":"passed","time":{"start":1707552063881,"stop":1707552064216,"duration":335}},{"uid":"3ed30c19b160d040","reportUrl":"https://novasamatech.github.io/test-runner/4672//#testresult/3ed30c19b160d040","status":"passed","time":{"start":1707537662257,"stop":1707537662832,"duration":575}},{"uid":"10d999bf07536320","reportUrl":"https://novasamatech.github.io/test-runner/4671//#testresult/10d999bf07536320","status":"passed","time":{"start":1707523306785,"stop":1707523306964,"duration":179}},{"uid":"a3b20390bcf093d8","reportUrl":"https://novasamatech.github.io/test-runner/4670//#testresult/a3b20390bcf093d8","status":"passed","time":{"start":1707508878554,"stop":1707508878667,"duration":113}},{"uid":"57ef495f8886357c","reportUrl":"https://novasamatech.github.io/test-runner/4669//#testresult/57ef495f8886357c","status":"passed","time":{"start":1707494459755,"stop":1707494460038,"duration":283}},{"uid":"b2af3ecbe91d9bfa","reportUrl":"https://novasamatech.github.io/test-runner/4668//#testresult/b2af3ecbe91d9bfa","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707480078510,"stop":1707480078857,"duration":347}}]},"tags":[]},"source":"338f40f5984ab514.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}