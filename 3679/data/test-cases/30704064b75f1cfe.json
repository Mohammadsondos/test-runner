{"uid":"30704064b75f1cfe","name":"test_can_create_connection[Test for Crust Shadow, url: wss://rpc-shadow.crust.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"12839a5bf8134796f26f69e028430511","time":{"start":1693440176637,"stop":1693440177161,"duration":524},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'Caddy', 'date': 'Thu, 31 Aug 2023 00:02:57 GMT', 'content-length': '0'} -+-+- b''","statusTrace":"data = {'name': 'Crust Shadow', 'url': 'wss://rpc-shadow.crust.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'Caddy', 'date': 'Thu, 31 Aug 2023 00:02:57 GMT', 'content-length': '0'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'Caddy', 'date': 'Thu, 31 Aug 2023 00:02:57 GMT', 'content-length': '0'} -+-+- b''","statusTrace":"data = {'name': 'Crust Shadow', 'url': 'wss://rpc-shadow.crust.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'Caddy', 'date': 'Thu, 31 Aug 2023 00:02:57 GMT', 'content-length': '0'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"582afb00a4ee1d52","name":"stdout","source":"582afb00a4ee1d52.txt","type":"text/plain","size":645}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az456-492"},{"name":"thread","value":"2109-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-shadow.crust.network/', 'name': 'Crust Shadow'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9fb15a5207b65ed3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'Caddy', 'date': 'Thu, 31 Aug 2023 00:02:41 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1693440160998,"stop":1693440161544,"duration":546}},{"uid":"dd51c9d325f8988f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'Caddy', 'date': 'Thu, 31 Aug 2023 00:02:25 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1693440145285,"stop":1693440145832,"duration":547}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":39,"unknown":0,"total":41},"items":[{"uid":"79ed7e481c60a9e2","reportUrl":"https://novasamatech.github.io/test-runner/3678//#testresult/79ed7e481c60a9e2","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'Caddy', 'date': 'Wed, 30 Aug 2023 20:02:01 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1693425721186,"stop":1693425721894,"duration":708}},{"uid":"2a28088215919519","reportUrl":"https://novasamatech.github.io/test-runner/3677//#testresult/2a28088215919519","status":"passed","time":{"start":1693411309625,"stop":1693411310476,"duration":851}},{"uid":"475995ca6ba2ddc4","reportUrl":"https://novasamatech.github.io/test-runner/3676//#testresult/475995ca6ba2ddc4","status":"passed","time":{"start":1693396898735,"stop":1693396899453,"duration":718}},{"uid":"c8d7c145ceeeace6","reportUrl":"https://novasamatech.github.io/test-runner/3675//#testresult/c8d7c145ceeeace6","status":"passed","time":{"start":1693382490885,"stop":1693382491877,"duration":992}},{"uid":"4f5f9a1a9e3bff14","reportUrl":"https://novasamatech.github.io/test-runner/3674//#testresult/4f5f9a1a9e3bff14","status":"passed","time":{"start":1693368089595,"stop":1693368090491,"duration":896}},{"uid":"d1b9e1052191463a","reportUrl":"https://novasamatech.github.io/test-runner/3673//#testresult/d1b9e1052191463a","status":"passed","time":{"start":1693353747113,"stop":1693353747987,"duration":874}},{"uid":"cfb7bba2cab8b925","reportUrl":"https://novasamatech.github.io/test-runner/3672//#testresult/cfb7bba2cab8b925","status":"passed","time":{"start":1693339289852,"stop":1693339290743,"duration":891}},{"uid":"b35350c5d75f1f80","reportUrl":"https://novasamatech.github.io/test-runner/3671//#testresult/b35350c5d75f1f80","status":"passed","time":{"start":1693324905876,"stop":1693324906804,"duration":928}},{"uid":"861915f18805daac","reportUrl":"https://novasamatech.github.io/test-runner/3670//#testresult/861915f18805daac","status":"passed","time":{"start":1693310505304,"stop":1693310506230,"duration":926}},{"uid":"9dc29fe0c7a7de35","reportUrl":"https://novasamatech.github.io/test-runner/3669//#testresult/9dc29fe0c7a7de35","status":"passed","time":{"start":1693296092383,"stop":1693296093297,"duration":914}},{"uid":"e64365bea132901a","reportUrl":"https://novasamatech.github.io/test-runner/3668//#testresult/e64365bea132901a","status":"passed","time":{"start":1693281702879,"stop":1693281703779,"duration":900}},{"uid":"ddfb2d06ba5b80d3","reportUrl":"https://novasamatech.github.io/test-runner/3667//#testresult/ddfb2d06ba5b80d3","status":"passed","time":{"start":1693267340726,"stop":1693267341572,"duration":846}},{"uid":"babe6a1082117d67","reportUrl":"https://novasamatech.github.io/test-runner/3666//#testresult/babe6a1082117d67","status":"passed","time":{"start":1693252898224,"stop":1693252898945,"duration":721}},{"uid":"ff6f339bef0e6d33","reportUrl":"https://novasamatech.github.io/test-runner/3665//#testresult/ff6f339bef0e6d33","status":"passed","time":{"start":1693238493836,"stop":1693238494744,"duration":908}},{"uid":"af8e32dd8d0fe1e3","reportUrl":"https://novasamatech.github.io/test-runner/3664//#testresult/af8e32dd8d0fe1e3","status":"passed","time":{"start":1693224099209,"stop":1693224100185,"duration":976}},{"uid":"99dc265c5f3522c4","reportUrl":"https://novasamatech.github.io/test-runner/3663//#testresult/99dc265c5f3522c4","status":"passed","time":{"start":1693209690777,"stop":1693209691702,"duration":925}},{"uid":"d33f53b1bd1ff93c","reportUrl":"https://novasamatech.github.io/test-runner/3662//#testresult/d33f53b1bd1ff93c","status":"passed","time":{"start":1693195291532,"stop":1693195292482,"duration":950}},{"uid":"756d05a2ac14b0c9","reportUrl":"https://novasamatech.github.io/test-runner/3661//#testresult/756d05a2ac14b0c9","status":"passed","time":{"start":1693180960320,"stop":1693180961261,"duration":941}},{"uid":"644bc9736f21fc77","reportUrl":"https://novasamatech.github.io/test-runner/3660//#testresult/644bc9736f21fc77","status":"passed","time":{"start":1693166491724,"stop":1693166492616,"duration":892}},{"uid":"8055baf1c467af8d","reportUrl":"https://novasamatech.github.io/test-runner/3659//#testresult/8055baf1c467af8d","status":"passed","time":{"start":1693152094248,"stop":1693152094983,"duration":735}}]},"tags":[]},"source":"30704064b75f1cfe.json","parameterValues":["{'url': 'wss://rpc-shadow.crust.network/', 'name': 'Crust Shadow'}"]}