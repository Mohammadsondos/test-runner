{"uid":"3d41e707511aa4e1","name":"test_can_create_connection[Test for Crab, url: wss://crab.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"58a7b8c2f8659c261eb4c7a54fb84fd8","time":{"start":1697501063973,"stop":1697501124540,"duration":60567},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Crab', 'url': 'wss://crab.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Crab', 'url': 'wss://crab.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"f786d9202ba827b0","name":"stdout","source":"f786d9202ba827b0.txt","type":"text/plain","size":598}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az442-793"},{"name":"thread","value":"2107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://crab.api.onfinality.io/public-ws', 'name': 'Crab'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a58fea3488959fa7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Tue, 17 Oct 2023 00:04:08 GMT', 'x-continent': 'NA', 'x-cluster': 'gh', 'x-kong-upstream-latency': '23856', 'x-kong-proxy-latency': '1', 'via': 'kong/3.3.1'} -+-+- b''","time":{"start":1697501024813,"stop":1697501048838,"duration":24025}},{"uid":"c2ac0d61d2f92878","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697500948930,"stop":1697501009590,"duration":60660}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":12,"skipped":0,"passed":311,"unknown":0,"total":323},"items":[{"uid":"ec46e233ee8fe92","reportUrl":"https://novasamatech.github.io/test-runner/3962//#testresult/ec46e233ee8fe92","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Mon, 16 Oct 2023 20:04:02 GMT', 'x-continent': 'NA', 'x-cluster': 'gh', 'x-kong-upstream-latency': '24009', 'x-kong-proxy-latency': '1', 'via': 'kong/3.3.1'} -+-+- b''","time":{"start":1697486618485,"stop":1697486642554,"duration":24069}},{"uid":"a40d5a649ac6863e","reportUrl":"https://novasamatech.github.io/test-runner/3961//#testresult/a40d5a649ac6863e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Mon, 16 Oct 2023 16:20:39 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'NA', 'x-cluster': 'gh', 'x-kong-upstream-latency': '60003', 'x-kong-proxy-latency': '300003', 'via': 'kong/3.3.1'} -+-+- b'The upstream server is timing out\\n'","time":{"start":1697472879475,"stop":1697473239698,"duration":360223}},{"uid":"a1fc87f4c08ce711","reportUrl":"https://novasamatech.github.io/test-runner/3960//#testresult/a1fc87f4c08ce711","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Mon, 16 Oct 2023 12:21:15 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'NA', 'x-cluster': 'gh', 'x-kong-upstream-latency': '60003', 'x-kong-proxy-latency': '300002', 'via': 'kong/3.3.1'} -+-+- b'The upstream server is timing out\\n'","time":{"start":1697458515684,"stop":1697458875886,"duration":360202}},{"uid":"b3c6ffd428ac2f8b","reportUrl":"https://novasamatech.github.io/test-runner/3959//#testresult/b3c6ffd428ac2f8b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Mon, 16 Oct 2023 08:20:24 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'NA', 'x-cluster': 'gh', 'x-kong-upstream-latency': '60003', 'x-kong-proxy-latency': '300001', 'via': 'kong/3.3.1'} -+-+- b'The upstream server is timing out\\n'","time":{"start":1697444064180,"stop":1697444424257,"duration":360077}},{"uid":"a26f724fd1cd7c9","reportUrl":"https://novasamatech.github.io/test-runner/3958//#testresult/a26f724fd1cd7c9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Mon, 16 Oct 2023 04:20:07 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'NA', 'x-cluster': 'gh', 'x-kong-upstream-latency': '60004', 'x-kong-proxy-latency': '300066', 'via': 'kong/3.3.1'} -+-+- b'The upstream server is timing out\\n'","time":{"start":1697429647541,"stop":1697430007666,"duration":360125}},{"uid":"3ae09e68443ee405","reportUrl":"https://novasamatech.github.io/test-runner/3957//#testresult/3ae09e68443ee405","status":"passed","time":{"start":1697414559611,"stop":1697414561029,"duration":1418}},{"uid":"7517fd34348b59ff","reportUrl":"https://novasamatech.github.io/test-runner/3956//#testresult/7517fd34348b59ff","status":"passed","time":{"start":1697400118651,"stop":1697400119707,"duration":1056}},{"uid":"5c05033d8c6e27c9","reportUrl":"https://novasamatech.github.io/test-runner/3955//#testresult/5c05033d8c6e27c9","status":"passed","time":{"start":1697385775380,"stop":1697385776675,"duration":1295}},{"uid":"33721c00e3adc765","reportUrl":"https://novasamatech.github.io/test-runner/3954//#testresult/33721c00e3adc765","status":"passed","time":{"start":1697371327748,"stop":1697371328262,"duration":514}},{"uid":"aa01876b323a2bb1","reportUrl":"https://novasamatech.github.io/test-runner/3953//#testresult/aa01876b323a2bb1","status":"passed","time":{"start":1697356897247,"stop":1697356898439,"duration":1192}},{"uid":"2e93debdc4b6cfd4","reportUrl":"https://novasamatech.github.io/test-runner/3952//#testresult/2e93debdc4b6cfd4","status":"passed","time":{"start":1697342514553,"stop":1697342515664,"duration":1111}},{"uid":"eeeab95a06ed0e7b","reportUrl":"https://novasamatech.github.io/test-runner/3951//#testresult/eeeab95a06ed0e7b","status":"passed","time":{"start":1697328150131,"stop":1697328151340,"duration":1209}},{"uid":"13dcd5688b1a628b","reportUrl":"https://novasamatech.github.io/test-runner/3950//#testresult/13dcd5688b1a628b","status":"passed","time":{"start":1697313707827,"stop":1697313708358,"duration":531}},{"uid":"7073bcb7515feb59","reportUrl":"https://novasamatech.github.io/test-runner/3949//#testresult/7073bcb7515feb59","status":"passed","time":{"start":1697299379069,"stop":1697299379786,"duration":717}},{"uid":"4b7b4da8736223a2","reportUrl":"https://novasamatech.github.io/test-runner/3948//#testresult/4b7b4da8736223a2","status":"passed","time":{"start":1697284906597,"stop":1697284907424,"duration":827}},{"uid":"fe4c4497d8ee3ec","reportUrl":"https://novasamatech.github.io/test-runner/3947//#testresult/fe4c4497d8ee3ec","status":"passed","time":{"start":1697270506587,"stop":1697270507334,"duration":747}},{"uid":"37e93fd9e940d3cd","reportUrl":"https://novasamatech.github.io/test-runner/3946//#testresult/37e93fd9e940d3cd","status":"passed","time":{"start":1697256113973,"stop":1697256115606,"duration":1633}},{"uid":"ce9958dac94d7092","reportUrl":"https://novasamatech.github.io/test-runner/3945//#testresult/ce9958dac94d7092","status":"passed","time":{"start":1697241755950,"stop":1697241756811,"duration":861}},{"uid":"f437e3f60fa37a85","reportUrl":"https://novasamatech.github.io/test-runner/3944//#testresult/f437e3f60fa37a85","status":"passed","time":{"start":1697227315436,"stop":1697227316789,"duration":1353}},{"uid":"f80ddac197031e2f","reportUrl":"https://novasamatech.github.io/test-runner/3943//#testresult/f80ddac197031e2f","status":"passed","time":{"start":1697212946829,"stop":1697212948203,"duration":1374}}]},"tags":[]},"source":"3d41e707511aa4e1.json","parameterValues":["{'url': 'wss://crab.api.onfinality.io/public-ws', 'name': 'Crab'}"]}