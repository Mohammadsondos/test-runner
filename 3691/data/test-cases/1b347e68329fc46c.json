{"uid":"1b347e68329fc46c","name":"test_can_create_connection[Test for krest, url: wss://wss-krest.peaq.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"bbac28ac5bc0cf35cd76b95eee77383a","time":{"start":1693612999000,"stop":1693612999424,"duration":424},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 02 Sep 2023 00:03:19 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'krest', 'url': 'wss://wss-krest.peaq.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 02 Sep 2023 00:03:19 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 02 Sep 2023 00:03:19 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'krest', 'url': 'wss://wss-krest.peaq.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 02 Sep 2023 00:03:19 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"30c2e308139e705a","name":"stdout","source":"30c2e308139e705a.txt","type":"text/plain","size":1401}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az305-745"},{"name":"thread","value":"2133-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://wss-krest.peaq.network', 'name': 'krest'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1b8c4bfb1a9145bf","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 02 Sep 2023 00:03:03 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1693612983497,"stop":1693612983914,"duration":417}},{"uid":"3446720eaaf5af2a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 02 Sep 2023 00:02:48 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1693612967977,"stop":1693612968407,"duration":430}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":51,"unknown":0,"total":53},"items":[{"uid":"69b6af664588aae6","reportUrl":"https://novasamatech.github.io/test-runner/3690//#testresult/69b6af664588aae6","status":"passed","time":{"start":1693598533192,"stop":1693598533878,"duration":686}},{"uid":"2be0de0ecc820df1","reportUrl":"https://novasamatech.github.io/test-runner/3689//#testresult/2be0de0ecc820df1","status":"passed","time":{"start":1693584155366,"stop":1693584156045,"duration":679}},{"uid":"7581b299195c7b09","reportUrl":"https://novasamatech.github.io/test-runner/3688//#testresult/7581b299195c7b09","status":"passed","time":{"start":1693569777493,"stop":1693569778212,"duration":719}},{"uid":"52f03cd9d6adff77","reportUrl":"https://novasamatech.github.io/test-runner/3687//#testresult/52f03cd9d6adff77","status":"passed","time":{"start":1693555969591,"stop":1693555970320,"duration":729}},{"uid":"26faca1dc9a0a73a","reportUrl":"https://novasamatech.github.io/test-runner/3686//#testresult/26faca1dc9a0a73a","status":"passed","time":{"start":1693540936197,"stop":1693540937016,"duration":819}},{"uid":"4a7de9c888649121","reportUrl":"https://novasamatech.github.io/test-runner/3685//#testresult/4a7de9c888649121","status":"passed","time":{"start":1693526575637,"stop":1693526576301,"duration":664}},{"uid":"6a8d08c906b9ddea","reportUrl":"https://novasamatech.github.io/test-runner/3684//#testresult/6a8d08c906b9ddea","status":"passed","time":{"start":1693512179314,"stop":1693512180224,"duration":910}},{"uid":"eb7cbcb6c98ce0f1","reportUrl":"https://novasamatech.github.io/test-runner/3683//#testresult/eb7cbcb6c98ce0f1","status":"passed","time":{"start":1693497746277,"stop":1693497746890,"duration":613}},{"uid":"4fec07cd7b263430","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/4fec07cd7b263430","status":"passed","time":{"start":1693483342347,"stop":1693483343116,"duration":769}},{"uid":"5a7a128f3a16d329","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/5a7a128f3a16d329","status":"passed","time":{"start":1693468921907,"stop":1693468922396,"duration":489}},{"uid":"9f56edc0f6f03bdb","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/9f56edc0f6f03bdb","status":"passed","time":{"start":1693454535249,"stop":1693454536085,"duration":836}},{"uid":"1ae5d33000aba3b6","reportUrl":"https://novasamatech.github.io/test-runner/3679//#testresult/1ae5d33000aba3b6","status":"passed","time":{"start":1693440186099,"stop":1693440186896,"duration":797}},{"uid":"fa025ab3b86de694","reportUrl":"https://novasamatech.github.io/test-runner/3678//#testresult/fa025ab3b86de694","status":"passed","time":{"start":1693425722451,"stop":1693425723000,"duration":549}},{"uid":"84d51ec01e7019f9","reportUrl":"https://novasamatech.github.io/test-runner/3677//#testresult/84d51ec01e7019f9","status":"passed","time":{"start":1693411349491,"stop":1693411350428,"duration":937}},{"uid":"ef3c4bb84947d5a4","reportUrl":"https://novasamatech.github.io/test-runner/3676//#testresult/ef3c4bb84947d5a4","status":"passed","time":{"start":1693396931741,"stop":1693396932596,"duration":855}},{"uid":"89ae57d36cd23da5","reportUrl":"https://novasamatech.github.io/test-runner/3675//#testresult/89ae57d36cd23da5","status":"passed","time":{"start":1693382522348,"stop":1693382522853,"duration":505}},{"uid":"d1ba73c997a424e1","reportUrl":"https://novasamatech.github.io/test-runner/3674//#testresult/d1ba73c997a424e1","status":"passed","time":{"start":1693368130128,"stop":1693368130806,"duration":678}},{"uid":"1d4d8fd4a6bc7ab1","reportUrl":"https://novasamatech.github.io/test-runner/3673//#testresult/1d4d8fd4a6bc7ab1","status":"passed","time":{"start":1693353787933,"stop":1693353788608,"duration":675}},{"uid":"825fa45307569d8d","reportUrl":"https://novasamatech.github.io/test-runner/3672//#testresult/825fa45307569d8d","status":"passed","time":{"start":1693339332569,"stop":1693339333104,"duration":535}},{"uid":"fee289c10f93da08","reportUrl":"https://novasamatech.github.io/test-runner/3671//#testresult/fee289c10f93da08","status":"passed","time":{"start":1693324953511,"stop":1693324954036,"duration":525}}]},"tags":[]},"source":"1b347e68329fc46c.json","parameterValues":["{'url': 'wss://wss-krest.peaq.network', 'name': 'krest'}"]}