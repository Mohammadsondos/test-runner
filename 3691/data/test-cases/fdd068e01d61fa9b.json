{"uid":"fdd068e01d61fa9b","name":"test_has_new_assets[Test for krest]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"3d67617994964329092e8a296bddf514","time":{"start":1693613098723,"stop":1693613100109,"duration":1386},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'get_constant'","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f63df338760>\nchain = <scripts.utils.chain_model.Chain object at 0x7f63df2cd600>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsubstrate = None\n\n    def get_properties(substrate: SubstrateInterface) -> Properties:\n        \"\"\"Get network properties from metadata\n    \n        Args:\n            substrate (SubstrateInterface): Initialized substrate interface\n    \n        Returns:\n            Properties: Oject with network properties\n        \"\"\"\n>       substrate.get_constant('system', 'ss58Prefix')\nE       AttributeError: 'NoneType' object has no attribute 'get_constant'\n\nscripts/utils/metadata_interaction.py:68: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'get_constant'","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f63df338760>\nchain = <scripts.utils.chain_model.Chain object at 0x7f63df2cd600>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsubstrate = None\n\n    def get_properties(substrate: SubstrateInterface) -> Properties:\n        \"\"\"Get network properties from metadata\n    \n        Args:\n            substrate (SubstrateInterface): Initialized substrate interface\n    \n        Returns:\n            Properties: Oject with network properties\n        \"\"\"\n>       substrate.get_constant('system', 'ss58Prefix')\nE       AttributeError: 'NoneType' object has no attribute 'get_constant'\n\nscripts/utils/metadata_interaction.py:68: AttributeError","steps":[],"attachments":[{"uid":"ae461b207d42b653","name":"stdout","source":"ae461b207d42b653.txt","type":"text/plain","size":1614}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az842-50"},{"name":"thread","value":"2045-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f63df2cd600>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b63c1b7ea8f4fbef","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1693613082318,"stop":1693613083692,"duration":1374}},{"uid":"9227960b857ab37e","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1693613065860,"stop":1693613067265,"duration":1405}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":52,"unknown":0,"total":53},"items":[{"uid":"57c8a5aaa73b79c","reportUrl":"https://novasamatech.github.io/test-runner/3690//#testresult/57c8a5aaa73b79c","status":"passed","time":{"start":1693598587472,"stop":1693598591789,"duration":4317}},{"uid":"266de5340952c63e","reportUrl":"https://novasamatech.github.io/test-runner/3689//#testresult/266de5340952c63e","status":"passed","time":{"start":1693584217655,"stop":1693584222497,"duration":4842}},{"uid":"96c5bdcec5dd4865","reportUrl":"https://novasamatech.github.io/test-runner/3688//#testresult/96c5bdcec5dd4865","status":"passed","time":{"start":1693569796780,"stop":1693569800863,"duration":4083}},{"uid":"8b6b34f18d395eac","reportUrl":"https://novasamatech.github.io/test-runner/3687//#testresult/8b6b34f18d395eac","status":"passed","time":{"start":1693555408095,"stop":1693555414395,"duration":6300}},{"uid":"2ff66136af4805be","reportUrl":"https://novasamatech.github.io/test-runner/3686//#testresult/2ff66136af4805be","status":"passed","time":{"start":1693540970602,"stop":1693540975675,"duration":5073}},{"uid":"81dc928bfbdcf934","reportUrl":"https://novasamatech.github.io/test-runner/3685//#testresult/81dc928bfbdcf934","status":"passed","time":{"start":1693526647175,"stop":1693526652918,"duration":5743}},{"uid":"d5de082a80d14c72","reportUrl":"https://novasamatech.github.io/test-runner/3684//#testresult/d5de082a80d14c72","status":"passed","time":{"start":1693512186188,"stop":1693512190666,"duration":4478}},{"uid":"5d34433cd8f9909a","reportUrl":"https://novasamatech.github.io/test-runner/3683//#testresult/5d34433cd8f9909a","status":"passed","time":{"start":1693497806583,"stop":1693497812589,"duration":6006}},{"uid":"2d3bb636d48dbfbb","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/2d3bb636d48dbfbb","status":"passed","time":{"start":1693483429158,"stop":1693483434708,"duration":5550}},{"uid":"11936b38d0365d8e","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/11936b38d0365d8e","status":"passed","time":{"start":1693468964919,"stop":1693468971306,"duration":6387}},{"uid":"4658c3b9f859679a","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/4658c3b9f859679a","status":"passed","time":{"start":1693454606941,"stop":1693454611531,"duration":4590}},{"uid":"a1b533eb60709d","reportUrl":"https://novasamatech.github.io/test-runner/3679//#testresult/a1b533eb60709d","status":"passed","time":{"start":1693440270539,"stop":1693440276425,"duration":5886}},{"uid":"bfa7d15a68e56ed3","reportUrl":"https://novasamatech.github.io/test-runner/3678//#testresult/bfa7d15a68e56ed3","status":"passed","time":{"start":1693425779771,"stop":1693425784180,"duration":4409}},{"uid":"9bc15d628c853e1","reportUrl":"https://novasamatech.github.io/test-runner/3677//#testresult/9bc15d628c853e1","status":"passed","time":{"start":1693411426105,"stop":1693411480885,"duration":54780}},{"uid":"a09b460dba201930","reportUrl":"https://novasamatech.github.io/test-runner/3676//#testresult/a09b460dba201930","status":"passed","time":{"start":1693397006104,"stop":1693397012740,"duration":6636}},{"uid":"716ea51965161034","reportUrl":"https://novasamatech.github.io/test-runner/3675//#testresult/716ea51965161034","status":"passed","time":{"start":1693382616463,"stop":1693382621574,"duration":5111}},{"uid":"ef89f406bfbb3373","reportUrl":"https://novasamatech.github.io/test-runner/3674//#testresult/ef89f406bfbb3373","status":"passed","time":{"start":1693368203064,"stop":1693368209104,"duration":6040}},{"uid":"7db6ec5f93f73beb","reportUrl":"https://novasamatech.github.io/test-runner/3673//#testresult/7db6ec5f93f73beb","status":"passed","time":{"start":1693353834991,"stop":1693353840419,"duration":5428}},{"uid":"23d7132200e0f931","reportUrl":"https://novasamatech.github.io/test-runner/3672//#testresult/23d7132200e0f931","status":"passed","time":{"start":1693339413750,"stop":1693339419457,"duration":5707}},{"uid":"9dcad966d8bbab52","reportUrl":"https://novasamatech.github.io/test-runner/3671//#testresult/9dcad966d8bbab52","status":"passed","time":{"start":1693325055295,"stop":1693325061363,"duration":6068}}]},"tags":[]},"source":"fdd068e01d61fa9b.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f63df2cd600>"]}