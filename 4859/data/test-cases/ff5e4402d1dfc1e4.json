{"uid":"ff5e4402d1dfc1e4","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1710187268774,"stop":1710187268810,"duration":36},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fc980f8dae0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fc980d0b8e0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fc980d0b2b0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1249-967"},{"name":"thread","value":"2096-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"309f9307e6f7a1f1","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187263706,"stop":1710187263740,"duration":34}},{"uid":"47dc4d99c19ee613","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187258562,"stop":1710187258595,"duration":33}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":23,"skipped":0,"passed":944,"unknown":0,"total":970},"items":[{"uid":"702ae791a2805bbd","reportUrl":"https://novasamatech.github.io/test-runner/4858//#testresult/702ae791a2805bbd","status":"passed","time":{"start":1710172870021,"stop":1710172870211,"duration":190}},{"uid":"b6aae6d05684def","reportUrl":"https://novasamatech.github.io/test-runner/4856//#testresult/b6aae6d05684def","status":"passed","time":{"start":1710144070139,"stop":1710144070693,"duration":554}},{"uid":"f200fec76df43ec1","reportUrl":"https://novasamatech.github.io/test-runner/4857//#testresult/f200fec76df43ec1","status":"passed","time":{"start":1710158472982,"stop":1710158473325,"duration":343}},{"uid":"a8446c41c13cf96e","reportUrl":"https://novasamatech.github.io/test-runner/4855//#testresult/a8446c41c13cf96e","status":"passed","time":{"start":1710129660989,"stop":1710129661217,"duration":228}},{"uid":"2388f8ccd45beb15","reportUrl":"https://novasamatech.github.io/test-runner/4854//#testresult/2388f8ccd45beb15","status":"passed","time":{"start":1710115306909,"stop":1710115307607,"duration":698}},{"uid":"2844f675bdd85114","reportUrl":"https://novasamatech.github.io/test-runner/4853//#testresult/2844f675bdd85114","status":"passed","time":{"start":1710100863273,"stop":1710100863862,"duration":589}},{"uid":"d77ec4b4e90062a6","reportUrl":"https://novasamatech.github.io/test-runner/4852//#testresult/d77ec4b4e90062a6","status":"passed","time":{"start":1710086463464,"stop":1710086463956,"duration":492}},{"uid":"1c0cbe7afd79b10","reportUrl":"https://novasamatech.github.io/test-runner/4851//#testresult/1c0cbe7afd79b10","status":"passed","time":{"start":1710072073334,"stop":1710072073631,"duration":297}},{"uid":"9b8cf327ea9d2109","reportUrl":"https://novasamatech.github.io/test-runner/4850//#testresult/9b8cf327ea9d2109","status":"passed","time":{"start":1710057665774,"stop":1710057665900,"duration":126}},{"uid":"ae534765616f31cb","reportUrl":"https://novasamatech.github.io/test-runner/4849//#testresult/ae534765616f31cb","status":"passed","time":{"start":1710043259704,"stop":1710043259857,"duration":153}},{"uid":"da0c6752f3f51d4b","reportUrl":"https://novasamatech.github.io/test-runner/4848//#testresult/da0c6752f3f51d4b","status":"passed","time":{"start":1710028904778,"stop":1710028904926,"duration":148}},{"uid":"694c4fab83c632e1","reportUrl":"https://novasamatech.github.io/test-runner/4847//#testresult/694c4fab83c632e1","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710014478475,"stop":1710014478627,"duration":152}},{"uid":"23a2335402af77fb","reportUrl":"https://novasamatech.github.io/test-runner/4846//#testresult/23a2335402af77fb","status":"passed","time":{"start":1710000061492,"stop":1710000061680,"duration":188}},{"uid":"47c507bdba5f76d","reportUrl":"https://novasamatech.github.io/test-runner/4845//#testresult/47c507bdba5f76d","status":"passed","time":{"start":1709985665586,"stop":1709985666228,"duration":642}},{"uid":"a272678fe1eeccdd","reportUrl":"https://novasamatech.github.io/test-runner/4844//#testresult/a272678fe1eeccdd","status":"passed","time":{"start":1709971260591,"stop":1709971261151,"duration":560}},{"uid":"3f66cf71eb36503","reportUrl":"https://novasamatech.github.io/test-runner/4843//#testresult/3f66cf71eb36503","status":"passed","time":{"start":1709956859220,"stop":1709956859874,"duration":654}},{"uid":"5c68aa9ff5bef75a","reportUrl":"https://novasamatech.github.io/test-runner/4842//#testresult/5c68aa9ff5bef75a","status":"passed","time":{"start":1709942501745,"stop":1709942502037,"duration":292}},{"uid":"34f302b9f542a718","reportUrl":"https://novasamatech.github.io/test-runner/4841//#testresult/34f302b9f542a718","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709928076763,"stop":1709928076828,"duration":65}},{"uid":"ca2b6e45d817df39","reportUrl":"https://novasamatech.github.io/test-runner/4840//#testresult/ca2b6e45d817df39","status":"passed","time":{"start":1709913660905,"stop":1709913661553,"duration":648}},{"uid":"2ff9ece9a3683aa0","reportUrl":"https://novasamatech.github.io/test-runner/4839//#testresult/2ff9ece9a3683aa0","status":"passed","time":{"start":1709899261965,"stop":1709899262674,"duration":709}}]},"tags":[]},"source":"ff5e4402d1dfc1e4.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}