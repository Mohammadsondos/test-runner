{"uid":"ae18596df9544c04","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1710187278697,"stop":1710187278726,"duration":29},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f57fb961960>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f57f96ec4f0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f57f96ee6e0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1249-967"},{"name":"thread","value":"2102-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"43011a07bad60d88","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187273634,"stop":1710187273662,"duration":28}},{"uid":"8c0a54130b66ca65","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187268543,"stop":1710187268600,"duration":57}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":19,"skipped":0,"passed":498,"unknown":0,"total":518},"items":[{"uid":"c6203115afea2138","reportUrl":"https://novasamatech.github.io/test-runner/4858//#testresult/c6203115afea2138","status":"passed","time":{"start":1710172884009,"stop":1710172884202,"duration":193}},{"uid":"b445f1a4a74ab26a","reportUrl":"https://novasamatech.github.io/test-runner/4856//#testresult/b445f1a4a74ab26a","status":"passed","time":{"start":1710144070132,"stop":1710144070763,"duration":631}},{"uid":"f9ee9f62fc88d55b","reportUrl":"https://novasamatech.github.io/test-runner/4857//#testresult/f9ee9f62fc88d55b","status":"passed","time":{"start":1710158483202,"stop":1710158483552,"duration":350}},{"uid":"2a67144624b09e7b","reportUrl":"https://novasamatech.github.io/test-runner/4855//#testresult/2a67144624b09e7b","status":"passed","time":{"start":1710129661046,"stop":1710129661275,"duration":229}},{"uid":"5a1d2576e18c64c1","reportUrl":"https://novasamatech.github.io/test-runner/4854//#testresult/5a1d2576e18c64c1","status":"passed","time":{"start":1710115307066,"stop":1710115307858,"duration":792}},{"uid":"20c93fc84e566b44","reportUrl":"https://novasamatech.github.io/test-runner/4853//#testresult/20c93fc84e566b44","status":"passed","time":{"start":1710100863358,"stop":1710100864127,"duration":769}},{"uid":"2a2e9b8bc75d4cf1","reportUrl":"https://novasamatech.github.io/test-runner/4852//#testresult/2a2e9b8bc75d4cf1","status":"passed","time":{"start":1710086463498,"stop":1710086464175,"duration":677}},{"uid":"ea7068dd6e40793e","reportUrl":"https://novasamatech.github.io/test-runner/4851//#testresult/ea7068dd6e40793e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710072084624,"stop":1710072084860,"duration":236}},{"uid":"35c96d9332285cd1","reportUrl":"https://novasamatech.github.io/test-runner/4850//#testresult/35c96d9332285cd1","status":"passed","time":{"start":1710057665626,"stop":1710057665834,"duration":208}},{"uid":"b7825270b56d86f6","reportUrl":"https://novasamatech.github.io/test-runner/4849//#testresult/b7825270b56d86f6","status":"passed","time":{"start":1710043259798,"stop":1710043259940,"duration":142}},{"uid":"2ba19aeed2ef1e01","reportUrl":"https://novasamatech.github.io/test-runner/4848//#testresult/2ba19aeed2ef1e01","status":"passed","time":{"start":1710028904610,"stop":1710028904864,"duration":254}},{"uid":"67b1dac75dcc1a79","reportUrl":"https://novasamatech.github.io/test-runner/4847//#testresult/67b1dac75dcc1a79","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710014488376,"stop":1710014488521,"duration":145}},{"uid":"ae092b119ac585d7","reportUrl":"https://novasamatech.github.io/test-runner/4846//#testresult/ae092b119ac585d7","status":"passed","time":{"start":1710000061457,"stop":1710000061614,"duration":157}},{"uid":"cc8c62b49373c456","reportUrl":"https://novasamatech.github.io/test-runner/4845//#testresult/cc8c62b49373c456","status":"passed","time":{"start":1709985665688,"stop":1709985666387,"duration":699}},{"uid":"f01feb3e469004b8","reportUrl":"https://novasamatech.github.io/test-runner/4844//#testresult/f01feb3e469004b8","status":"passed","time":{"start":1709971260572,"stop":1709971261247,"duration":675}},{"uid":"6a564ab257d0431c","reportUrl":"https://novasamatech.github.io/test-runner/4843//#testresult/6a564ab257d0431c","status":"passed","time":{"start":1709956857517,"stop":1709956858157,"duration":640}},{"uid":"26f9db92f6dd155e","reportUrl":"https://novasamatech.github.io/test-runner/4842//#testresult/26f9db92f6dd155e","status":"passed","time":{"start":1709942501501,"stop":1709942501741,"duration":240}},{"uid":"ef5d3f56088053c1","reportUrl":"https://novasamatech.github.io/test-runner/4841//#testresult/ef5d3f56088053c1","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709928084013,"stop":1709928084113,"duration":100}},{"uid":"c19c64a119134062","reportUrl":"https://novasamatech.github.io/test-runner/4840//#testresult/c19c64a119134062","status":"passed","time":{"start":1709913660865,"stop":1709913661649,"duration":784}},{"uid":"2fcfc2bbbe071180","reportUrl":"https://novasamatech.github.io/test-runner/4839//#testresult/2fcfc2bbbe071180","status":"passed","time":{"start":1709899261569,"stop":1709899262252,"duration":683}}]},"tags":[]},"source":"ae18596df9544c04.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}