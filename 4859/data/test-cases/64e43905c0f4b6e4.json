{"uid":"64e43905c0f4b6e4","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1710187269924,"stop":1710187269949,"duration":25},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fbaf4139ba0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fbaedb2f850>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fbaedb2f040>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1249-967"},{"name":"thread","value":"2099-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"941ec36a720c9fde","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187264844,"stop":1710187264890,"duration":46}},{"uid":"937a6ee39b0086c4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710187259707,"stop":1710187259734,"duration":27}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":28,"skipped":0,"passed":941,"unknown":0,"total":970},"items":[{"uid":"a5e93f19d2a7601d","reportUrl":"https://novasamatech.github.io/test-runner/4858//#testresult/a5e93f19d2a7601d","status":"passed","time":{"start":1710172884309,"stop":1710172884659,"duration":350}},{"uid":"d3a6f6d76fc535ce","reportUrl":"https://novasamatech.github.io/test-runner/4856//#testresult/d3a6f6d76fc535ce","status":"passed","time":{"start":1710144071131,"stop":1710144071752,"duration":621}},{"uid":"475a7168582daa5","reportUrl":"https://novasamatech.github.io/test-runner/4857//#testresult/475a7168582daa5","status":"passed","time":{"start":1710158473843,"stop":1710158474334,"duration":491}},{"uid":"d49481ac0b005a6f","reportUrl":"https://novasamatech.github.io/test-runner/4855//#testresult/d49481ac0b005a6f","status":"passed","time":{"start":1710129662091,"stop":1710129662376,"duration":285}},{"uid":"465d10d95e276c66","reportUrl":"https://novasamatech.github.io/test-runner/4854//#testresult/465d10d95e276c66","status":"passed","time":{"start":1710115307931,"stop":1710115308729,"duration":798}},{"uid":"5de72c84bdff6a0","reportUrl":"https://novasamatech.github.io/test-runner/4853//#testresult/5de72c84bdff6a0","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1710100863933,"stop":1710100864291,"duration":358}},{"uid":"342bbab33ba46f3b","reportUrl":"https://novasamatech.github.io/test-runner/4852//#testresult/342bbab33ba46f3b","status":"passed","time":{"start":1710086463822,"stop":1710086464456,"duration":634}},{"uid":"fcdf55b00608078c","reportUrl":"https://novasamatech.github.io/test-runner/4851//#testresult/fcdf55b00608078c","status":"passed","time":{"start":1710072073455,"stop":1710072074059,"duration":604}},{"uid":"e9dc17cd5abdb56","reportUrl":"https://novasamatech.github.io/test-runner/4850//#testresult/e9dc17cd5abdb56","status":"passed","time":{"start":1710057665836,"stop":1710057666053,"duration":217}},{"uid":"93b5bcf1652388da","reportUrl":"https://novasamatech.github.io/test-runner/4849//#testresult/93b5bcf1652388da","status":"passed","time":{"start":1710043260154,"stop":1710043260378,"duration":224}},{"uid":"5a1367dc0aa94291","reportUrl":"https://novasamatech.github.io/test-runner/4848//#testresult/5a1367dc0aa94291","status":"passed","time":{"start":1710028904867,"stop":1710028905119,"duration":252}},{"uid":"fcb248a4598203b4","reportUrl":"https://novasamatech.github.io/test-runner/4847//#testresult/fcb248a4598203b4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710014488664,"stop":1710014488806,"duration":142}},{"uid":"8c23f592c25dd5ce","reportUrl":"https://novasamatech.github.io/test-runner/4846//#testresult/8c23f592c25dd5ce","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710000063459,"stop":1710000063531,"duration":72}},{"uid":"1cb697bd3e25920c","reportUrl":"https://novasamatech.github.io/test-runner/4845//#testresult/1cb697bd3e25920c","status":"passed","time":{"start":1709985665918,"stop":1709985666771,"duration":853}},{"uid":"48762f9f7bc09f15","reportUrl":"https://novasamatech.github.io/test-runner/4844//#testresult/48762f9f7bc09f15","status":"passed","time":{"start":1709971262409,"stop":1709971263140,"duration":731}},{"uid":"e4d032a2efe4005","reportUrl":"https://novasamatech.github.io/test-runner/4843//#testresult/e4d032a2efe4005","status":"passed","time":{"start":1709956857427,"stop":1709956858145,"duration":718}},{"uid":"73551c7c768f724f","reportUrl":"https://novasamatech.github.io/test-runner/4842//#testresult/73551c7c768f724f","status":"passed","time":{"start":1709942501651,"stop":1709942501942,"duration":291}},{"uid":"b53ad8bb3f05dc8f","reportUrl":"https://novasamatech.github.io/test-runner/4841//#testresult/b53ad8bb3f05dc8f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709928084229,"stop":1709928084282,"duration":53}},{"uid":"fb8d8c6dd929ead8","reportUrl":"https://novasamatech.github.io/test-runner/4840//#testresult/fb8d8c6dd929ead8","status":"passed","time":{"start":1709913661689,"stop":1709913662639,"duration":950}},{"uid":"57db72b8b33e0f17","reportUrl":"https://novasamatech.github.io/test-runner/4839//#testresult/57db72b8b33e0f17","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709899283349,"stop":1709899283769,"duration":420}}]},"tags":[]},"source":"64e43905c0f4b6e4.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}