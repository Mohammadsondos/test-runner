{"uid":"ef779086dee89f16","name":"test_precision[Test for Acala]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"5d4dc364a46a184b6df0ed015dfe9861","time":{"start":1685909069570,"stop":1685909070920,"duration":1350},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7f843fecc490>\nchain = <scripts.utils.chain_model.Chain object at 0x7f843fe9e050>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f843d88b340>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xe3e55067b8f34af44ca80756be68539be844072056b59af66809a4b35ca02e22']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7f843fecc490>\nchain = <scripts.utils.chain_model.Chain object at 0x7f843fe9e050>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f843d88b340>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xe3e55067b8f34af44ca80756be68539be844072056b59af66809a4b35ca02e22']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"b2ab4192bc6b9377","name":"stdout","source":"b2ab4192bc6b9377.txt","type":"text/plain","size":1137}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az1241-799"},{"name":"thread","value":"1903-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f843fe9e050>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"10dd9f6c3a3bce45","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1685909052360,"stop":1685909054201,"duration":1841}},{"uid":"5b0d07cb3d2338fc","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1685909034839,"stop":1685909036569,"duration":1730}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":185,"unknown":0,"total":186},"items":[{"uid":"f3d7eada7b6bd65d","reportUrl":"https://novasamatech.github.io/test-runner/3147//#testresult/f3d7eada7b6bd65d","status":"passed","time":{"start":1685894656625,"stop":1685894665540,"duration":8915}},{"uid":"5afdddb92bc56b41","reportUrl":"https://novasamatech.github.io/test-runner/3146//#testresult/5afdddb92bc56b41","status":"passed","time":{"start":1685880280251,"stop":1685880289255,"duration":9004}},{"uid":"9446dbb587a68bb8","reportUrl":"https://novasamatech.github.io/test-runner/3145//#testresult/9446dbb587a68bb8","status":"passed","time":{"start":1685865851942,"stop":1685865864442,"duration":12500}},{"uid":"21acb3684652ba7e","reportUrl":"https://novasamatech.github.io/test-runner/3144//#testresult/21acb3684652ba7e","status":"passed","time":{"start":1685851442182,"stop":1685851450916,"duration":8734}},{"uid":"acb3d16b7ed44811","reportUrl":"https://novasamatech.github.io/test-runner/3143//#testresult/acb3d16b7ed44811","status":"passed","time":{"start":1685837753659,"stop":1685837763724,"duration":10065}},{"uid":"fa7ad53eb8e29aa9","reportUrl":"https://novasamatech.github.io/test-runner/3142//#testresult/fa7ad53eb8e29aa9","status":"passed","time":{"start":1685822686975,"stop":1685822696821,"duration":9846}},{"uid":"6c17ecaf16793c63","reportUrl":"https://novasamatech.github.io/test-runner/3141//#testresult/6c17ecaf16793c63","status":"passed","time":{"start":1685808259184,"stop":1685808266750,"duration":7566}},{"uid":"d148056d839dd3a9","reportUrl":"https://novasamatech.github.io/test-runner/3140//#testresult/d148056d839dd3a9","status":"passed","time":{"start":1685793886554,"stop":1685793893526,"duration":6972}},{"uid":"67065a0170eccc21","reportUrl":"https://novasamatech.github.io/test-runner/3139//#testresult/67065a0170eccc21","status":"passed","time":{"start":1685779436424,"stop":1685779444693,"duration":8269}},{"uid":"1322ae2d205898aa","reportUrl":"https://novasamatech.github.io/test-runner/3138//#testresult/1322ae2d205898aa","status":"passed","time":{"start":1685765053898,"stop":1685765061120,"duration":7222}},{"uid":"66a4cc75c0456424","reportUrl":"https://novasamatech.github.io/test-runner/3137//#testresult/66a4cc75c0456424","status":"passed","time":{"start":1685751249643,"stop":1685751261243,"duration":11600}},{"uid":"60e8eefdec275032","reportUrl":"https://novasamatech.github.io/test-runner/3136//#testresult/60e8eefdec275032","status":"passed","time":{"start":1685736227151,"stop":1685736236253,"duration":9102}},{"uid":"a12d21fd69866607","reportUrl":"https://novasamatech.github.io/test-runner/3135//#testresult/a12d21fd69866607","status":"passed","time":{"start":1685721851159,"stop":1685721859503,"duration":8344}},{"uid":"5aabdd9c81eab724","reportUrl":"https://novasamatech.github.io/test-runner/3134//#testresult/5aabdd9c81eab724","status":"passed","time":{"start":1685707495212,"stop":1685707504269,"duration":9057}},{"uid":"9fd94e700445aac1","reportUrl":"https://novasamatech.github.io/test-runner/3133//#testresult/9fd94e700445aac1","status":"passed","time":{"start":1685693042000,"stop":1685693051242,"duration":9242}},{"uid":"3d11e7f79ede98e3","reportUrl":"https://novasamatech.github.io/test-runner/3132//#testresult/3d11e7f79ede98e3","status":"passed","time":{"start":1685678649117,"stop":1685678657980,"duration":8863}},{"uid":"40e36e3495dff767","reportUrl":"https://novasamatech.github.io/test-runner/3131//#testresult/40e36e3495dff767","status":"passed","time":{"start":1685664867644,"stop":1685664875357,"duration":7713}},{"uid":"136665d8070a28aa","reportUrl":"https://novasamatech.github.io/test-runner/3130//#testresult/136665d8070a28aa","status":"passed","time":{"start":1685649837447,"stop":1685649847138,"duration":9691}},{"uid":"ae3feb4a9241ef65","reportUrl":"https://novasamatech.github.io/test-runner/3129//#testresult/ae3feb4a9241ef65","status":"passed","time":{"start":1685635441503,"stop":1685635449340,"duration":7837}},{"uid":"8d4112abf52c647c","reportUrl":"https://novasamatech.github.io/test-runner/3128//#testresult/8d4112abf52c647c","status":"passed","time":{"start":1685621087570,"stop":1685621096603,"duration":9033}}]},"tags":[]},"source":"ef779086dee89f16.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f843fe9e050>"]}