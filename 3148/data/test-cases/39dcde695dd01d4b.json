{"uid":"39dcde695dd01d4b","name":"test_address_prefix[Test for Acala]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"dfa1b9d6c2975e1a61d31d78750331a3","time":{"start":1685909075179,"stop":1685909076326,"duration":1147},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7fc760560520>\nchain = <scripts.utils.chain_model.Chain object at 0x7fc760b183d0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fc75a19caf0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xe3e55067b8f34af44ca80756be68539be844072056b59af66809a4b35ca02e22']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7fc760560520>\nchain = <scripts.utils.chain_model.Chain object at 0x7fc760b183d0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fc75a19caf0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xe3e55067b8f34af44ca80756be68539be844072056b59af66809a4b35ca02e22']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"98ab42747172a7ef","name":"stdout","source":"98ab42747172a7ef.txt","type":"text/plain","size":1137}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az247-352"},{"name":"thread","value":"1928-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fc760b183d0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"32ae3912ebb620c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1685909058210,"stop":1685909059382,"duration":1172}},{"uid":"267f6b49fefd5f50","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1685909040868,"stop":1685909042281,"duration":1413}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":188,"unknown":0,"total":189},"items":[{"uid":"8828e226fc873940","reportUrl":"https://novasamatech.github.io/test-runner/3147//#testresult/8828e226fc873940","status":"passed","time":{"start":1685894675962,"stop":1685894684825,"duration":8863}},{"uid":"151c62e28afedf19","reportUrl":"https://novasamatech.github.io/test-runner/3146//#testresult/151c62e28afedf19","status":"passed","time":{"start":1685880279700,"stop":1685880288778,"duration":9078}},{"uid":"6564a3e03ea73456","reportUrl":"https://novasamatech.github.io/test-runner/3145//#testresult/6564a3e03ea73456","status":"passed","time":{"start":1685865837861,"stop":1685865846391,"duration":8530}},{"uid":"87558fd7d3f6327e","reportUrl":"https://novasamatech.github.io/test-runner/3144//#testresult/87558fd7d3f6327e","status":"passed","time":{"start":1685851451004,"stop":1685851462377,"duration":11373}},{"uid":"e5654e87dc535bbe","reportUrl":"https://novasamatech.github.io/test-runner/3143//#testresult/e5654e87dc535bbe","status":"passed","time":{"start":1685837748083,"stop":1685837756921,"duration":8838}},{"uid":"15d311e8a6c39554","reportUrl":"https://novasamatech.github.io/test-runner/3142//#testresult/15d311e8a6c39554","status":"passed","time":{"start":1685822679939,"stop":1685822687147,"duration":7208}},{"uid":"81ed7815b28a2a02","reportUrl":"https://novasamatech.github.io/test-runner/3141//#testresult/81ed7815b28a2a02","status":"passed","time":{"start":1685808272646,"stop":1685808284651,"duration":12005}},{"uid":"730e70033f65426e","reportUrl":"https://novasamatech.github.io/test-runner/3140//#testresult/730e70033f65426e","status":"passed","time":{"start":1685793891704,"stop":1685793900021,"duration":8317}},{"uid":"ae482767a7e9c9b3","reportUrl":"https://novasamatech.github.io/test-runner/3139//#testresult/ae482767a7e9c9b3","status":"passed","time":{"start":1685779436609,"stop":1685779445310,"duration":8701}},{"uid":"3674f74b443a2f99","reportUrl":"https://novasamatech.github.io/test-runner/3138//#testresult/3674f74b443a2f99","status":"passed","time":{"start":1685765051149,"stop":1685765059560,"duration":8411}},{"uid":"97846af4df1a765c","reportUrl":"https://novasamatech.github.io/test-runner/3137//#testresult/97846af4df1a765c","status":"passed","time":{"start":1685751257890,"stop":1685751269949,"duration":12059}},{"uid":"af5a1560b24056ac","reportUrl":"https://novasamatech.github.io/test-runner/3136//#testresult/af5a1560b24056ac","status":"passed","time":{"start":1685736226792,"stop":1685736234851,"duration":8059}},{"uid":"3ff5463fad11e44c","reportUrl":"https://novasamatech.github.io/test-runner/3135//#testresult/3ff5463fad11e44c","status":"passed","time":{"start":1685721856705,"stop":1685721866068,"duration":9363}},{"uid":"c303f99ecf53a603","reportUrl":"https://novasamatech.github.io/test-runner/3134//#testresult/c303f99ecf53a603","status":"passed","time":{"start":1685707491499,"stop":1685707499360,"duration":7861}},{"uid":"ffc01e2a9c7b9b63","reportUrl":"https://novasamatech.github.io/test-runner/3133//#testresult/ffc01e2a9c7b9b63","status":"passed","time":{"start":1685693056088,"stop":1685693068658,"duration":12570}},{"uid":"6b8a4588d01957a3","reportUrl":"https://novasamatech.github.io/test-runner/3132//#testresult/6b8a4588d01957a3","status":"passed","time":{"start":1685678646835,"stop":1685678654850,"duration":8015}},{"uid":"d92c476daadb2f8f","reportUrl":"https://novasamatech.github.io/test-runner/3131//#testresult/d92c476daadb2f8f","status":"passed","time":{"start":1685664860517,"stop":1685664871519,"duration":11002}},{"uid":"dde71a0482f63bf2","reportUrl":"https://novasamatech.github.io/test-runner/3130//#testresult/dde71a0482f63bf2","status":"passed","time":{"start":1685649832941,"stop":1685649841955,"duration":9014}},{"uid":"cde15e371deaa638","reportUrl":"https://novasamatech.github.io/test-runner/3129//#testresult/cde15e371deaa638","status":"passed","time":{"start":1685635444851,"stop":1685635454596,"duration":9745}},{"uid":"1a3110bb9137ef86","reportUrl":"https://novasamatech.github.io/test-runner/3128//#testresult/1a3110bb9137ef86","status":"passed","time":{"start":1685621084983,"stop":1685621093055,"duration":8072}}]},"tags":[]},"source":"39dcde695dd01d4b.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fc760b183d0>"]}