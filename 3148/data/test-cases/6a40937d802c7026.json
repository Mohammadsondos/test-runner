{"uid":"6a40937d802c7026","name":"test_has_new_assets[Test for Acala]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"811bc5c930abadf9421eacf26316cc27","time":{"start":1685909064162,"stop":1685909065403,"duration":1241},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f318438e980>\nchain = <scripts.utils.chain_model.Chain object at 0x7f318438c460>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f317dad1db0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xe3e55067b8f34af44ca80756be68539be844072056b59af66809a4b35ca02e22']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f318438e980>\nchain = <scripts.utils.chain_model.Chain object at 0x7f318438c460>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f317dad1db0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xe3e55067b8f34af44ca80756be68539be844072056b59af66809a4b35ca02e22']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"d293ba08785c252","name":"stdout","source":"d293ba08785c252.txt","type":"text/plain","size":1137}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az585-92"},{"name":"thread","value":"1934-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f318438c460>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"67c4cb376632266f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1685909047452,"stop":1685909048545,"duration":1093}},{"uid":"11c6bb656250542b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1685909030696,"stop":1685909032003,"duration":1307}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":187,"unknown":0,"total":188},"items":[{"uid":"86b217d4a05d7793","reportUrl":"https://novasamatech.github.io/test-runner/3147//#testresult/86b217d4a05d7793","status":"passed","time":{"start":1685894658196,"stop":1685894666759,"duration":8563}},{"uid":"40cd82e2dd4e2167","reportUrl":"https://novasamatech.github.io/test-runner/3146//#testresult/40cd82e2dd4e2167","status":"passed","time":{"start":1685880296956,"stop":1685880307293,"duration":10337}},{"uid":"b14b28348649a84c","reportUrl":"https://novasamatech.github.io/test-runner/3145//#testresult/b14b28348649a84c","status":"passed","time":{"start":1685865835789,"stop":1685865843583,"duration":7794}},{"uid":"59540bb5beff26f3","reportUrl":"https://novasamatech.github.io/test-runner/3144//#testresult/59540bb5beff26f3","status":"passed","time":{"start":1685851438688,"stop":1685851446376,"duration":7688}},{"uid":"1fa7ac20ed8421f0","reportUrl":"https://novasamatech.github.io/test-runner/3143//#testresult/1fa7ac20ed8421f0","status":"passed","time":{"start":1685837782683,"stop":1685837792433,"duration":9750}},{"uid":"97d5d7b128f3280e","reportUrl":"https://novasamatech.github.io/test-runner/3142//#testresult/97d5d7b128f3280e","status":"passed","time":{"start":1685822681025,"stop":1685822688000,"duration":6975}},{"uid":"e070ea44175af083","reportUrl":"https://novasamatech.github.io/test-runner/3141//#testresult/e070ea44175af083","status":"passed","time":{"start":1685808272536,"stop":1685808284582,"duration":12046}},{"uid":"e9c5f89c0c92cc66","reportUrl":"https://novasamatech.github.io/test-runner/3140//#testresult/e9c5f89c0c92cc66","status":"passed","time":{"start":1685793886817,"stop":1685793894027,"duration":7210}},{"uid":"b73e1d705f47a3fb","reportUrl":"https://novasamatech.github.io/test-runner/3139//#testresult/b73e1d705f47a3fb","status":"passed","time":{"start":1685779442828,"stop":1685779452656,"duration":9828}},{"uid":"f32466dcce765972","reportUrl":"https://novasamatech.github.io/test-runner/3138//#testresult/f32466dcce765972","status":"passed","time":{"start":1685765062837,"stop":1685765075630,"duration":12793}},{"uid":"8a1541eb70c40df3","reportUrl":"https://novasamatech.github.io/test-runner/3137//#testresult/8a1541eb70c40df3","status":"passed","time":{"start":1685751239421,"stop":1685751247465,"duration":8044}},{"uid":"e2d87cebcb4920f1","reportUrl":"https://novasamatech.github.io/test-runner/3136//#testresult/e2d87cebcb4920f1","status":"passed","time":{"start":1685736226970,"stop":1685736235611,"duration":8641}},{"uid":"a8e5165802dca75d","reportUrl":"https://novasamatech.github.io/test-runner/3135//#testresult/a8e5165802dca75d","status":"passed","time":{"start":1685721855105,"stop":1685721864002,"duration":8897}},{"uid":"b57dd8565f56d461","reportUrl":"https://novasamatech.github.io/test-runner/3134//#testresult/b57dd8565f56d461","status":"passed","time":{"start":1685707501667,"stop":1685707513146,"duration":11479}},{"uid":"f4994278f8417356","reportUrl":"https://novasamatech.github.io/test-runner/3133//#testresult/f4994278f8417356","status":"passed","time":{"start":1685693039153,"stop":1685693046569,"duration":7416}},{"uid":"ed202951bd3b8236","reportUrl":"https://novasamatech.github.io/test-runner/3132//#testresult/ed202951bd3b8236","status":"passed","time":{"start":1685678643616,"stop":1685678651469,"duration":7853}},{"uid":"d18cff269f65d5bc","reportUrl":"https://novasamatech.github.io/test-runner/3131//#testresult/d18cff269f65d5bc","status":"passed","time":{"start":1685664868332,"stop":1685664881318,"duration":12986}},{"uid":"9d718811175b001d","reportUrl":"https://novasamatech.github.io/test-runner/3130//#testresult/9d718811175b001d","status":"passed","time":{"start":1685649835578,"stop":1685649845639,"duration":10061}},{"uid":"6a651100d3f6bf27","reportUrl":"https://novasamatech.github.io/test-runner/3129//#testresult/6a651100d3f6bf27","status":"passed","time":{"start":1685635441996,"stop":1685635449168,"duration":7172}},{"uid":"4fd43bfcbcd820a","reportUrl":"https://novasamatech.github.io/test-runner/3128//#testresult/4fd43bfcbcd820a","status":"passed","time":{"start":1685621092218,"stop":1685621102177,"duration":9959}}]},"tags":[]},"source":"6a40937d802c7026.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f318438c460>"]}