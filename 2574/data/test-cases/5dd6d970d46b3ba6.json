{"uid":"5dd6d970d46b3ba6","name":"test_can_create_connection[Test for Myriad, url: wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1905bde48a0f8eb493d41d695f659f1e","time":{"start":1677945891879,"stop":1677945892024,"duration":145},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable","statusTrace":"data = {'name': 'Myriad', 'url': 'wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable","statusTrace":"data = {'name': 'Myriad', 'url': 'wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"6e90162e96d055c9","name":"stdout","source":"6e90162e96d055c9.txt","type":"text/plain","size":338}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az482-827"},{"name":"thread","value":"1729-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0', 'name': 'Myriad'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b7c6a7fad4e88386","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable","time":{"start":1677945881610,"stop":1677945881768,"duration":158}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":56,"skipped":0,"passed":530,"unknown":0,"total":586},"items":[{"uid":"65927dd35d93bd6a","reportUrl":"https://nova-wallet.github.io/test-runner/2573//#testresult/65927dd35d93bd6a","status":"passed","time":{"start":1677931505267,"stop":1677931505405,"duration":138}},{"uid":"83b820ba3ae94098","reportUrl":"https://nova-wallet.github.io/test-runner/2572//#testresult/83b820ba3ae94098","status":"passed","time":{"start":1677917095673,"stop":1677917095827,"duration":154}},{"uid":"b137e3337f3c787e","reportUrl":"https://nova-wallet.github.io/test-runner/2571//#testresult/b137e3337f3c787e","status":"passed","time":{"start":1677902692148,"stop":1677902692494,"duration":346}},{"uid":"afa833583800b894","reportUrl":"https://nova-wallet.github.io/test-runner/2570//#testresult/afa833583800b894","status":"passed","time":{"start":1677888827195,"stop":1677888827353,"duration":158}},{"uid":"fc30aae44b6468f5","reportUrl":"https://nova-wallet.github.io/test-runner/2569//#testresult/fc30aae44b6468f5","status":"passed","time":{"start":1677873875125,"stop":1677873875248,"duration":123}},{"uid":"498d7c2e7757fc24","reportUrl":"https://nova-wallet.github.io/test-runner/2568//#testresult/498d7c2e7757fc24","status":"passed","time":{"start":1677859466313,"stop":1677859466439,"duration":126}},{"uid":"6fe4e0659ad381a6","reportUrl":"https://nova-wallet.github.io/test-runner/2567//#testresult/6fe4e0659ad381a6","status":"passed","time":{"start":1677845134833,"stop":1677845134953,"duration":120}},{"uid":"4a715a1e48450408","reportUrl":"https://nova-wallet.github.io/test-runner/2566//#testresult/4a715a1e48450408","status":"passed","time":{"start":1677830697783,"stop":1677830697884,"duration":101}},{"uid":"2828a53bc3d73513","reportUrl":"https://nova-wallet.github.io/test-runner/2565//#testresult/2828a53bc3d73513","status":"passed","time":{"start":1677817879425,"stop":1677817879521,"duration":96}},{"uid":"210a09715d5751e1","reportUrl":"https://nova-wallet.github.io/test-runner/2564//#testresult/210a09715d5751e1","status":"passed","time":{"start":1677808450970,"stop":1677808451119,"duration":149}},{"uid":"5cdbff8f31e87c65","reportUrl":"https://nova-wallet.github.io/test-runner/2563//#testresult/5cdbff8f31e87c65","status":"passed","time":{"start":1677787467656,"stop":1677787467756,"duration":100}},{"uid":"cdbbd350289a7657","reportUrl":"https://nova-wallet.github.io/test-runner/2562//#testresult/cdbbd350289a7657","status":"passed","time":{"start":1677773061505,"stop":1677773061650,"duration":145}},{"uid":"5d64ae9b6c0350a0","reportUrl":"https://nova-wallet.github.io/test-runner/2561//#testresult/5d64ae9b6c0350a0","status":"passed","time":{"start":1677758766446,"stop":1677758766665,"duration":219}},{"uid":"3c7899230adeb081","reportUrl":"https://nova-wallet.github.io/test-runner/2560//#testresult/3c7899230adeb081","status":"passed","time":{"start":1677744299742,"stop":1677744299879,"duration":137}},{"uid":"47ade82d8fafa6bb","reportUrl":"https://nova-wallet.github.io/test-runner/2559//#testresult/47ade82d8fafa6bb","status":"passed","time":{"start":1677729867511,"stop":1677729867629,"duration":118}},{"uid":"463f2f702f45b5df","reportUrl":"https://nova-wallet.github.io/test-runner/2558//#testresult/463f2f702f45b5df","status":"passed","time":{"start":1677716146845,"stop":1677716147079,"duration":234}},{"uid":"572c25a207ed9906","reportUrl":"https://nova-wallet.github.io/test-runner/2557//#testresult/572c25a207ed9906","status":"passed","time":{"start":1677701074458,"stop":1677701074617,"duration":159}},{"uid":"4b248eb8a448fd8","reportUrl":"https://nova-wallet.github.io/test-runner/2556//#testresult/4b248eb8a448fd8","status":"passed","time":{"start":1677686686157,"stop":1677686686348,"duration":191}},{"uid":"2ca3d4ae8e6f8f87","reportUrl":"https://nova-wallet.github.io/test-runner/2555//#testresult/2ca3d4ae8e6f8f87","status":"passed","time":{"start":1677672354747,"stop":1677672354873,"duration":126}},{"uid":"51313fec4d9ff55","reportUrl":"https://nova-wallet.github.io/test-runner/2554//#testresult/51313fec4d9ff55","status":"passed","time":{"start":1677657939131,"stop":1677657939300,"duration":169}}]},"tags":[]},"source":"5dd6d970d46b3ba6.json","parameterValues":["{'url': 'wss://gateway.mainnet.octopus.network/myriad/a4cb0a6e30ff5233a3567eb4e8cb71e0', 'name': 'Myriad'}"]}