{"uid":"ba6f481b58a1ca4","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1710705680829,"stop":1710705680863,"duration":34},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x75dacc501570>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x75dacc2f7be0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x75dacc2f7cd0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az740-762"},{"name":"thread","value":"2044-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"15d75a9e59d6aa0f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710705675757,"stop":1710705675796,"duration":39}},{"uid":"51ac4319715ce97e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710705670702,"stop":1710705670725,"duration":23}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":29,"skipped":0,"passed":524,"unknown":0,"total":554},"items":[{"uid":"77edfd0243680283","reportUrl":"https://novasamatech.github.io/test-runner/4894//#testresult/77edfd0243680283","status":"passed","time":{"start":1710691269539,"stop":1710691269858,"duration":319}},{"uid":"3fcd5f41c0781e93","reportUrl":"https://novasamatech.github.io/test-runner/4893//#testresult/3fcd5f41c0781e93","status":"passed","time":{"start":1710676865549,"stop":1710676865882,"duration":333}},{"uid":"e18c300b36b85889","reportUrl":"https://novasamatech.github.io/test-runner/4892//#testresult/e18c300b36b85889","status":"passed","time":{"start":1710662466833,"stop":1710662467427,"duration":594}},{"uid":"fe7b55055a8572cd","reportUrl":"https://novasamatech.github.io/test-runner/4891//#testresult/fe7b55055a8572cd","status":"passed","time":{"start":1710648064567,"stop":1710648065254,"duration":687}},{"uid":"f49efab7402791f2","reportUrl":"https://novasamatech.github.io/test-runner/4890//#testresult/f49efab7402791f2","status":"passed","time":{"start":1710633704245,"stop":1710633704435,"duration":190}},{"uid":"a71420c23c6d475e","reportUrl":"https://novasamatech.github.io/test-runner/4889//#testresult/a71420c23c6d475e","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710619283056,"stop":1710619283126,"duration":70}},{"uid":"9c07ac123243e353","reportUrl":"https://novasamatech.github.io/test-runner/4888//#testresult/9c07ac123243e353","status":"passed","time":{"start":1710604860733,"stop":1710604861430,"duration":697}},{"uid":"88041e1c469c1bb2","reportUrl":"https://novasamatech.github.io/test-runner/4887//#testresult/88041e1c469c1bb2","status":"passed","time":{"start":1710590464620,"stop":1710590464924,"duration":304}},{"uid":"5ca64c107c41525d","reportUrl":"https://novasamatech.github.io/test-runner/4886//#testresult/5ca64c107c41525d","status":"passed","time":{"start":1710576068550,"stop":1710576068866,"duration":316}},{"uid":"39e964f33c6f3a66","reportUrl":"https://novasamatech.github.io/test-runner/4885//#testresult/39e964f33c6f3a66","status":"passed","time":{"start":1710561661343,"stop":1710561661475,"duration":132}},{"uid":"8fead9d78ea078c4","reportUrl":"https://novasamatech.github.io/test-runner/4884//#testresult/8fead9d78ea078c4","status":"passed","time":{"start":1710547296936,"stop":1710547297576,"duration":640}},{"uid":"4c772d851d895cfb","reportUrl":"https://novasamatech.github.io/test-runner/4883//#testresult/4c772d851d895cfb","status":"passed","time":{"start":1710532861169,"stop":1710532861318,"duration":149}},{"uid":"8eb5aac000a53fc9","reportUrl":"https://novasamatech.github.io/test-runner/4882//#testresult/8eb5aac000a53fc9","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710518471563,"stop":1710518471909,"duration":346}},{"uid":"b4150d53db7eefc7","reportUrl":"https://novasamatech.github.io/test-runner/4881//#testresult/b4150d53db7eefc7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710504086668,"stop":1710504086716,"duration":48}},{"uid":"1556ff45be391e8","reportUrl":"https://novasamatech.github.io/test-runner/4880//#testresult/1556ff45be391e8","status":"passed","time":{"start":1710489663648,"stop":1710489663836,"duration":188}},{"uid":"896518e77f5c0deb","reportUrl":"https://novasamatech.github.io/test-runner/4879//#testresult/896518e77f5c0deb","status":"passed","time":{"start":1710475265278,"stop":1710475265683,"duration":405}},{"uid":"f4dcc46672b88c44","reportUrl":"https://novasamatech.github.io/test-runner/4878//#testresult/f4dcc46672b88c44","status":"passed","time":{"start":1710460893802,"stop":1710460893936,"duration":134}},{"uid":"7289b705fdb8b2bb","reportUrl":"https://novasamatech.github.io/test-runner/4877//#testresult/7289b705fdb8b2bb","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710446481227,"stop":1710446481285,"duration":58}},{"uid":"d101cfe1386d4a33","reportUrl":"https://novasamatech.github.io/test-runner/4876//#testresult/d101cfe1386d4a33","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710432089272,"stop":1710432089323,"duration":51}},{"uid":"492a6008e6ce63a2","reportUrl":"https://novasamatech.github.io/test-runner/4875//#testresult/492a6008e6ce63a2","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710417701565,"stop":1710417701610,"duration":45}}]},"tags":[]},"source":"ba6f481b58a1ca4.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}