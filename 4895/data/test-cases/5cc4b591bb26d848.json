{"uid":"5cc4b591bb26d848","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1710705670600,"stop":1710705670655,"duration":55},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x772297603940>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x772295345150>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x772295345330>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az740-762"},{"name":"thread","value":"2038-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"234c0e2e2f2a1a60","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710705665538,"stop":1710705665563,"duration":25}},{"uid":"adb030bd00cf9ade","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710705660377,"stop":1710705660421,"duration":44}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":34,"skipped":0,"passed":969,"unknown":0,"total":1006},"items":[{"uid":"ad708682602d6616","reportUrl":"https://novasamatech.github.io/test-runner/4894//#testresult/ad708682602d6616","status":"passed","time":{"start":1710691269294,"stop":1710691269744,"duration":450}},{"uid":"6101eef10c3fd667","reportUrl":"https://novasamatech.github.io/test-runner/4893//#testresult/6101eef10c3fd667","status":"passed","time":{"start":1710676865494,"stop":1710676865829,"duration":335}},{"uid":"cbffe26eb3479031","reportUrl":"https://novasamatech.github.io/test-runner/4892//#testresult/cbffe26eb3479031","status":"passed","time":{"start":1710662466561,"stop":1710662467196,"duration":635}},{"uid":"60430db60e7e4f12","reportUrl":"https://novasamatech.github.io/test-runner/4891//#testresult/60430db60e7e4f12","status":"passed","time":{"start":1710648064739,"stop":1710648065303,"duration":564}},{"uid":"17f8a4c649978ce","reportUrl":"https://novasamatech.github.io/test-runner/4890//#testresult/17f8a4c649978ce","status":"passed","time":{"start":1710633704808,"stop":1710633705250,"duration":442}},{"uid":"9edd762a1a6c4dda","reportUrl":"https://novasamatech.github.io/test-runner/4889//#testresult/9edd762a1a6c4dda","status":"failed","statusDetails":"AssertionError: Difference in block numbers is greater than 3:            wss_block_number=19449688, rpc_block_number=19449683\nassert 5 <= 3\n +  where 5 = abs((19449688 - 19449683))","time":{"start":1710619272344,"stop":1710619272536,"duration":192}},{"uid":"a66b943976936b6e","reportUrl":"https://novasamatech.github.io/test-runner/4888//#testresult/a66b943976936b6e","status":"passed","time":{"start":1710604861227,"stop":1710604861543,"duration":316}},{"uid":"8fcca55c7b67b40b","reportUrl":"https://novasamatech.github.io/test-runner/4887//#testresult/8fcca55c7b67b40b","status":"passed","time":{"start":1710590464631,"stop":1710590465000,"duration":369}},{"uid":"6740bf81f8bbb46e","reportUrl":"https://novasamatech.github.io/test-runner/4886//#testresult/6740bf81f8bbb46e","status":"passed","time":{"start":1710576068098,"stop":1710576068613,"duration":515}},{"uid":"3ce99e1a88cb8a89","reportUrl":"https://novasamatech.github.io/test-runner/4885//#testresult/3ce99e1a88cb8a89","status":"passed","time":{"start":1710561661451,"stop":1710561661699,"duration":248}},{"uid":"a1ee5c5492bfc43c","reportUrl":"https://novasamatech.github.io/test-runner/4884//#testresult/a1ee5c5492bfc43c","status":"passed","time":{"start":1710547297007,"stop":1710547297655,"duration":648}},{"uid":"22ad5b4e38c11ab5","reportUrl":"https://novasamatech.github.io/test-runner/4883//#testresult/22ad5b4e38c11ab5","status":"passed","time":{"start":1710532861270,"stop":1710532861493,"duration":223}},{"uid":"f90f52c645058f0c","reportUrl":"https://novasamatech.github.io/test-runner/4882//#testresult/f90f52c645058f0c","status":"passed","time":{"start":1710518460733,"stop":1710518461248,"duration":515}},{"uid":"a7ce2fef33fcd3a6","reportUrl":"https://novasamatech.github.io/test-runner/4881//#testresult/a7ce2fef33fcd3a6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710504076489,"stop":1710504076550,"duration":61}},{"uid":"370a40b8de01becb","reportUrl":"https://novasamatech.github.io/test-runner/4880//#testresult/370a40b8de01becb","status":"passed","time":{"start":1710489663789,"stop":1710489664073,"duration":284}},{"uid":"f4ae2baf23e0fdcd","reportUrl":"https://novasamatech.github.io/test-runner/4879//#testresult/f4ae2baf23e0fdcd","status":"passed","time":{"start":1710475265073,"stop":1710475265430,"duration":357}},{"uid":"fa6db36cc33357b","reportUrl":"https://novasamatech.github.io/test-runner/4878//#testresult/fa6db36cc33357b","status":"passed","time":{"start":1710460893747,"stop":1710460894012,"duration":265}},{"uid":"e4fd890b7a1c6d67","reportUrl":"https://novasamatech.github.io/test-runner/4877//#testresult/e4fd890b7a1c6d67","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710446472127,"stop":1710446472170,"duration":43}},{"uid":"95aa821a3c481ec2","reportUrl":"https://novasamatech.github.io/test-runner/4876//#testresult/95aa821a3c481ec2","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710432080219,"stop":1710432080263,"duration":44}},{"uid":"e7c7042ab38ddff1","reportUrl":"https://novasamatech.github.io/test-runner/4875//#testresult/e7c7042ab38ddff1","status":"passed","time":{"start":1710417686723,"stop":1710417687016,"duration":293}}]},"tags":[]},"source":"5cc4b591bb26d848.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}