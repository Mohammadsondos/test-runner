{"uid":"e2c10b69aca12e82","name":"test_can_create_connection[Test for Westend, url: wss://westend.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"069699d857f75062eec2c2e7a6900f83","time":{"start":1699646514505,"stop":1699646514616,"duration":111},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'Westend', 'url': 'wss://westend.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'Westend', 'url': 'wss://westend.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"b66e4a1edfc1d03d","name":"stdout","source":"b66e4a1edfc1d03d.txt","type":"text/plain","size":570}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az621-935"},{"name":"thread","value":"2352-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"74bf43a1694b5114","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1699646499295,"stop":1699646499378,"duration":83}},{"uid":"364a7f8fce2ffce1","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1699646483947,"stop":1699646484097,"duration":150}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":469,"unknown":0,"total":473},"items":[{"uid":"35883a7a45d7a1fc","reportUrl":"https://novasamatech.github.io/test-runner/4112//#testresult/35883a7a45d7a1fc","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1699632110814,"stop":1699632110910,"duration":96}},{"uid":"4bf2527d8ecc16f1","reportUrl":"https://novasamatech.github.io/test-runner/4111//#testresult/4bf2527d8ecc16f1","status":"passed","time":{"start":1699617672931,"stop":1699617673980,"duration":1049}},{"uid":"7dc81d7b63f22d8e","reportUrl":"https://novasamatech.github.io/test-runner/4110//#testresult/7dc81d7b63f22d8e","status":"passed","time":{"start":1699603284460,"stop":1699603285177,"duration":717}},{"uid":"7bd80d48f551543a","reportUrl":"https://novasamatech.github.io/test-runner/4109//#testresult/7bd80d48f551543a","status":"passed","time":{"start":1699588870041,"stop":1699588871023,"duration":982}},{"uid":"a981d43d580b3f0f","reportUrl":"https://novasamatech.github.io/test-runner/4108//#testresult/a981d43d580b3f0f","status":"passed","time":{"start":1699574525542,"stop":1699574526536,"duration":994}},{"uid":"8e98541e17fdf33c","reportUrl":"https://novasamatech.github.io/test-runner/4107//#testresult/8e98541e17fdf33c","status":"passed","time":{"start":1699560093941,"stop":1699560094788,"duration":847}},{"uid":"6ceab51f476db143","reportUrl":"https://novasamatech.github.io/test-runner/4106//#testresult/6ceab51f476db143","status":"passed","time":{"start":1699545677820,"stop":1699545678946,"duration":1126}},{"uid":"a1e74428c07d89f0","reportUrl":"https://novasamatech.github.io/test-runner/4105//#testresult/a1e74428c07d89f0","status":"passed","time":{"start":1699531284710,"stop":1699531285644,"duration":934}},{"uid":"a7386e8cb819d9b9","reportUrl":"https://novasamatech.github.io/test-runner/4104//#testresult/a7386e8cb819d9b9","status":"passed","time":{"start":1699516893535,"stop":1699516894514,"duration":979}},{"uid":"fe673000954ef529","reportUrl":"https://novasamatech.github.io/test-runner/4103//#testresult/fe673000954ef529","status":"passed","time":{"start":1699502474062,"stop":1699502475006,"duration":944}},{"uid":"c632b9e1ce633e3","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/c632b9e1ce633e3","status":"passed","time":{"start":1699488132354,"stop":1699488133089,"duration":735}},{"uid":"9650e96f30ddce1","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/9650e96f30ddce1","status":"passed","time":{"start":1699473669487,"stop":1699473671197,"duration":1710}},{"uid":"6830f5e8d401c08b","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/6830f5e8d401c08b","status":"passed","time":{"start":1699459276762,"stop":1699459277722,"duration":960}},{"uid":"185d7f167ef46c5e","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/185d7f167ef46c5e","status":"passed","time":{"start":1699444877171,"stop":1699444878059,"duration":888}},{"uid":"35e7856eb9553e25","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/35e7856eb9553e25","status":"passed","time":{"start":1699430483678,"stop":1699430484606,"duration":928}},{"uid":"1ec26c06e4d01ef7","reportUrl":"https://novasamatech.github.io/test-runner/4097//#testresult/1ec26c06e4d01ef7","status":"passed","time":{"start":1699416096825,"stop":1699416097547,"duration":722}},{"uid":"ef37395c3fedcb25","reportUrl":"https://novasamatech.github.io/test-runner/4096//#testresult/ef37395c3fedcb25","status":"passed","time":{"start":1699401718084,"stop":1699401719030,"duration":946}},{"uid":"613bce4f4806411c","reportUrl":"https://novasamatech.github.io/test-runner/4095//#testresult/613bce4f4806411c","status":"passed","time":{"start":1699387273450,"stop":1699387274417,"duration":967}},{"uid":"f4e4d05b357e314c","reportUrl":"https://novasamatech.github.io/test-runner/4094//#testresult/f4e4d05b357e314c","status":"passed","time":{"start":1699372872539,"stop":1699372873469,"duration":930}},{"uid":"abd94dc1dae7cfb8","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/abd94dc1dae7cfb8","status":"passed","time":{"start":1699358474617,"stop":1699358475566,"duration":949}}]},"tags":[]},"source":"e2c10b69aca12e82.json","parameterValues":["{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"]}