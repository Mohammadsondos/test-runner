{"uid":"8a777c8698b2ddaf","name":"test_can_create_connection[Test for Robonomics, url: wss://robonomics.0xsamsara.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"ff4b4dfd921eb68b6d52b770acd94398","time":{"start":1699646971441,"stop":1699646971939,"duration":498},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 10 Nov 2023 20:09:31 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None","statusTrace":"data = {'name': 'Robonomics', 'url': 'wss://robonomics.0xsamsara.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 10 Nov 2023 20:09:31 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 10 Nov 2023 20:09:31 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None","statusTrace":"data = {'name': 'Robonomics', 'url': 'wss://robonomics.0xsamsara.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 10 Nov 2023 20:09:31 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"19adf6c267dd7030","name":"stdout","source":"19adf6c267dd7030.txt","type":"text/plain","size":822}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az621-935"},{"name":"thread","value":"2352-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://robonomics.0xsamsara.com', 'name': 'Robonomics'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"34423b77ee03a3f2","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 10 Nov 2023 20:09:16 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None","time":{"start":1699646955787,"stop":1699646956345,"duration":558}},{"uid":"324151a3deee1ce4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Fri, 10 Nov 2023 20:09:00 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None","time":{"start":1699646940088,"stop":1699646940682,"duration":594}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":233,"unknown":0,"total":234},"items":[{"uid":"76279726cbc481f6","reportUrl":"https://novasamatech.github.io/test-runner/4112//#testresult/76279726cbc481f6","status":"passed","time":{"start":1699632082157,"stop":1699632082875,"duration":718}},{"uid":"ee8d33d95c4ead10","reportUrl":"https://novasamatech.github.io/test-runner/4111//#testresult/ee8d33d95c4ead10","status":"passed","time":{"start":1699617678697,"stop":1699617679282,"duration":585}},{"uid":"c9d119bdcea54c02","reportUrl":"https://novasamatech.github.io/test-runner/4110//#testresult/c9d119bdcea54c02","status":"passed","time":{"start":1699603289045,"stop":1699603289890,"duration":845}},{"uid":"f2b15b00050dce87","reportUrl":"https://novasamatech.github.io/test-runner/4109//#testresult/f2b15b00050dce87","status":"passed","time":{"start":1699588876349,"stop":1699588876901,"duration":552}},{"uid":"2cb13466a6879cc3","reportUrl":"https://novasamatech.github.io/test-runner/4108//#testresult/2cb13466a6879cc3","status":"passed","time":{"start":1699574531817,"stop":1699574532463,"duration":646}},{"uid":"5ebf155f9ebd0bfa","reportUrl":"https://novasamatech.github.io/test-runner/4107//#testresult/5ebf155f9ebd0bfa","status":"passed","time":{"start":1699560170633,"stop":1699560171313,"duration":680}},{"uid":"d8d6e7ced8ea9275","reportUrl":"https://novasamatech.github.io/test-runner/4106//#testresult/d8d6e7ced8ea9275","status":"passed","time":{"start":1699545697630,"stop":1699545698210,"duration":580}},{"uid":"c2b6834dd3b4edc0","reportUrl":"https://novasamatech.github.io/test-runner/4105//#testresult/c2b6834dd3b4edc0","status":"passed","time":{"start":1699531367168,"stop":1699531367800,"duration":632}},{"uid":"eca249d405022414","reportUrl":"https://novasamatech.github.io/test-runner/4104//#testresult/eca249d405022414","status":"passed","time":{"start":1699516899611,"stop":1699516900172,"duration":561}},{"uid":"71783ba679e2be94","reportUrl":"https://novasamatech.github.io/test-runner/4103//#testresult/71783ba679e2be94","status":"passed","time":{"start":1699502483542,"stop":1699502484171,"duration":629}},{"uid":"443323ae306994ed","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/443323ae306994ed","status":"passed","time":{"start":1699488138062,"stop":1699488138960,"duration":898}},{"uid":"960207870a424191","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/960207870a424191","status":"passed","time":{"start":1699473678163,"stop":1699473678715,"duration":552}},{"uid":"4b64a4f9e24147d4","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/4b64a4f9e24147d4","status":"passed","time":{"start":1699459279074,"stop":1699459279606,"duration":532}},{"uid":"b09df85daf6aac1c","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/b09df85daf6aac1c","status":"passed","time":{"start":1699444882181,"stop":1699444882911,"duration":730}},{"uid":"85b238a12f938bd0","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/85b238a12f938bd0","status":"passed","time":{"start":1699430489318,"stop":1699430490025,"duration":707}},{"uid":"9a89784e9bae4a1","reportUrl":"https://novasamatech.github.io/test-runner/4097//#testresult/9a89784e9bae4a1","status":"passed","time":{"start":1699416103371,"stop":1699416104214,"duration":843}},{"uid":"2c4c59dca3b63a70","reportUrl":"https://novasamatech.github.io/test-runner/4096//#testresult/2c4c59dca3b63a70","status":"passed","time":{"start":1699401725283,"stop":1699401725911,"duration":628}},{"uid":"619b7b5eed764de4","reportUrl":"https://novasamatech.github.io/test-runner/4095//#testresult/619b7b5eed764de4","status":"passed","time":{"start":1699387275794,"stop":1699387276254,"duration":460}},{"uid":"4ff16a282b116eaf","reportUrl":"https://novasamatech.github.io/test-runner/4094//#testresult/4ff16a282b116eaf","status":"passed","time":{"start":1699372877623,"stop":1699372878145,"duration":522}},{"uid":"19194b5e34422dbd","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/19194b5e34422dbd","status":"passed","time":{"start":1699358481346,"stop":1699358481975,"duration":629}}]},"tags":[]},"source":"8a777c8698b2ddaf.json","parameterValues":["{'url': 'wss://robonomics.0xsamsara.com', 'name': 'Robonomics'}"]}