{"uid":"5efdd40972d0c0b","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1709654488832,"stop":1709654489116,"duration":284},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7ffa0d07dc60>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7ffa0ce4ddb0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7ffa0ce4cca0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az915-834"},{"name":"thread","value":"2045-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"256c9fa4bdad1519","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709654483494,"stop":1709654483795,"duration":301}},{"uid":"8f46ad42bf0e7a33","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709654478140,"stop":1709654478458,"duration":318}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":20,"skipped":0,"passed":910,"unknown":0,"total":933},"items":[{"uid":"bbd4d9dfd5a28955","reportUrl":"https://novasamatech.github.io/test-runner/4821//#testresult/bbd4d9dfd5a28955","status":"passed","time":{"start":1709640075277,"stop":1709640076312,"duration":1035}},{"uid":"695f7bb5f1f5a0cd","reportUrl":"https://novasamatech.github.io/test-runner/4820//#testresult/695f7bb5f1f5a0cd","status":"passed","time":{"start":1709625669885,"stop":1709625671075,"duration":1190}},{"uid":"ed4a3ad6956739ef","reportUrl":"https://novasamatech.github.io/test-runner/4819//#testresult/ed4a3ad6956739ef","status":"passed","time":{"start":1709611259574,"stop":1709611260723,"duration":1149}},{"uid":"6a171599ae4ea542","reportUrl":"https://novasamatech.github.io/test-runner/4818//#testresult/6a171599ae4ea542","status":"passed","time":{"start":1709596894134,"stop":1709596895414,"duration":1280}},{"uid":"a380fad3f14c2730","reportUrl":"https://novasamatech.github.io/test-runner/4817//#testresult/a380fad3f14c2730","status":"passed","time":{"start":1709582473555,"stop":1709582474183,"duration":628}},{"uid":"73e257e4c55534a","reportUrl":"https://novasamatech.github.io/test-runner/4816//#testresult/73e257e4c55534a","status":"failed","statusDetails":"AssertionError: Failed to connect to Ethereum RPC node\nassert False\n +  where False = <bound method Web3.is_connected of <web3.main.Web3 object at 0x7feb81e80880>>()\n +    where <bound method Web3.is_connected of <web3.main.Web3 object at 0x7feb81e80880>> = <web3.main.Web3 object at 0x7feb81e80880>.is_connected","time":{"start":1709568082764,"stop":1709568093104,"duration":10340}},{"uid":"cd78f2fb79191c81","reportUrl":"https://novasamatech.github.io/test-runner/4815//#testresult/cd78f2fb79191c81","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709553991136,"stop":1709553991509,"duration":373}},{"uid":"b982f199b8469eb4","reportUrl":"https://novasamatech.github.io/test-runner/4814//#testresult/b982f199b8469eb4","status":"passed","time":{"start":1709539721275,"stop":1709539722396,"duration":1121}},{"uid":"6ae5a7926a0d87f2","reportUrl":"https://novasamatech.github.io/test-runner/4813//#testresult/6ae5a7926a0d87f2","status":"passed","time":{"start":1709525140593,"stop":1709525141506,"duration":913}},{"uid":"aeec12864129b38d","reportUrl":"https://novasamatech.github.io/test-runner/4812//#testresult/aeec12864129b38d","status":"passed","time":{"start":1709510512084,"stop":1709510513428,"duration":1344}},{"uid":"fac9eb1fc9a87f7f","reportUrl":"https://novasamatech.github.io/test-runner/4811//#testresult/fac9eb1fc9a87f7f","status":"passed","time":{"start":1709496074191,"stop":1709496076236,"duration":2045}},{"uid":"841658cd02ffc5fb","reportUrl":"https://novasamatech.github.io/test-runner/4810//#testresult/841658cd02ffc5fb","status":"passed","time":{"start":1709481660120,"stop":1709481661419,"duration":1299}},{"uid":"9dc1799fc751dc2a","reportUrl":"https://novasamatech.github.io/test-runner/4809//#testresult/9dc1799fc751dc2a","status":"passed","time":{"start":1709467284136,"stop":1709467285240,"duration":1104}},{"uid":"4648743caca6244f","reportUrl":"https://novasamatech.github.io/test-runner/4808//#testresult/4648743caca6244f","status":"passed","time":{"start":1709452855608,"stop":1709452856880,"duration":1272}},{"uid":"7f206659c33157a6","reportUrl":"https://novasamatech.github.io/test-runner/4807//#testresult/7f206659c33157a6","status":"passed","time":{"start":1709438468521,"stop":1709438470290,"duration":1769}},{"uid":"1ed322949bfbcba1","reportUrl":"https://novasamatech.github.io/test-runner/4806//#testresult/1ed322949bfbcba1","status":"passed","time":{"start":1709424107043,"stop":1709424108090,"duration":1047}},{"uid":"d1eadefb1c6eae6b","reportUrl":"https://novasamatech.github.io/test-runner/4805//#testresult/d1eadefb1c6eae6b","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709409680288,"stop":1709409680591,"duration":303}},{"uid":"bf539f913debdccb","reportUrl":"https://novasamatech.github.io/test-runner/4804//#testresult/bf539f913debdccb","status":"passed","time":{"start":1709395273493,"stop":1709395274837,"duration":1344}},{"uid":"9696a0fe20fe513f","reportUrl":"https://novasamatech.github.io/test-runner/4803//#testresult/9696a0fe20fe513f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709380876411,"stop":1709380876568,"duration":157}},{"uid":"e833e4e8f2a9a0bf","reportUrl":"https://novasamatech.github.io/test-runner/4802//#testresult/e833e4e8f2a9a0bf","status":"passed","time":{"start":1709366467819,"stop":1709366469063,"duration":1244}}]},"tags":[]},"source":"5efdd40972d0c0b.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}