{"uid":"26d8efeb82e7c475","name":"test_can_create_connection[Test for CLV Parachain, url: wss://rpc-para.clover.finance]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"285ace9874728e1e6eff7918cb458ce7","time":{"start":1705262674019,"stop":1705262674019,"duration":0},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 20:04:34 GMT', 'content-length': '0'} -+-+- b''","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for CLV Parachain, url: wss://rpc-para.clover.finance]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 20:04:34 GMT', 'content-length': '0'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1705262642345,"stop":1705262643183,"duration":838},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 20:04:03 GMT', 'content-length': '0'} -+-+- b''\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1705262658255,"stop":1705262658951,"duration":696},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 20:04:18 GMT', 'content-length': '0'} -+-+- b''\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"connection_by_url","time":{"start":1705262674020,"stop":1705262674769,"duration":749},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 20:04:34 GMT', 'content-length': '0'} -+-+- b''\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 23, in connection_by_url\n    connection = create_connection_by_url(data[\"url\"])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/substrate_interface.py\", line 30, in create_connection_by_url\n    substrate = SubstrateInterface(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 132, in __init__\n    self.connect_websocket()\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 177, in connect_websocket\n    self.websocket = create_connection(\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 610, in create_connection\n    websock.connect(url, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_core.py\", line 255, in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 57, in handshake\n    status, resp = _get_resp_headers(sock)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/websocket/_handshake.py\", line 150, in _get_resp_headers\n    raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 20:04:34 GMT', 'content-length': '0'} -+-+- b''","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for CLV Parachain, url: wss://rpc-para.clover.finance]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n>       connection = create_connection_by_url(data[\"url\"])\n\ntests/conftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:132: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:177: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:610: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:255: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.TEMPORARY_REDIRECT: 307>, <HTTPStatus.PERMANENT_REDIRECT: 308>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 20:04:34 GMT', 'content-length': '0'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"add8b3a25e2e91ae","name":"stdout","source":"add8b3a25e2e91ae.txt","type":"text/plain","size":771}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1567-939"},{"name":"thread","value":"2076-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://rpc-para.clover.finance', 'name': 'CLV Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"559c7aa53880c52d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 20:04:18 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705262658255,"stop":1705262658255,"duration":0}},{"uid":"ef86d1b6bfe0badd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 20:04:03 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705262642343,"stop":1705262642343,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":33,"skipped":0,"passed":694,"unknown":0,"total":727},"items":[{"uid":"91a5e6c429c97921","reportUrl":"https://novasamatech.github.io/test-runner/4512//#testresult/91a5e6c429c97921","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 16:05:22 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705248321687,"stop":1705248321687,"duration":0}},{"uid":"111091b9f7f7d1d9","reportUrl":"https://novasamatech.github.io/test-runner/4511//#testresult/111091b9f7f7d1d9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 12:03:40 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705233819772,"stop":1705233819772,"duration":0}},{"uid":"cf37d90e1581d014","reportUrl":"https://novasamatech.github.io/test-runner/4510//#testresult/cf37d90e1581d014","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 08:04:31 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705219470809,"stop":1705219470809,"duration":0}},{"uid":"1e325643b5a04be0","reportUrl":"https://novasamatech.github.io/test-runner/4509//#testresult/1e325643b5a04be0","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 04:03:15 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705204994671,"stop":1705204994671,"duration":0}},{"uid":"8fa9992409fdd1ab","reportUrl":"https://novasamatech.github.io/test-runner/4508//#testresult/8fa9992409fdd1ab","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sun, 14 Jan 2024 00:05:29 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705190728528,"stop":1705190728528,"duration":0}},{"uid":"d68da5f2780d21e6","reportUrl":"https://novasamatech.github.io/test-runner/4507//#testresult/d68da5f2780d21e6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sat, 13 Jan 2024 20:03:22 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705176201638,"stop":1705176201638,"duration":0}},{"uid":"1a5a16df9fe46a9e","reportUrl":"https://novasamatech.github.io/test-runner/4506//#testresult/1a5a16df9fe46a9e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sat, 13 Jan 2024 16:03:54 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705161833788,"stop":1705161833788,"duration":0}},{"uid":"964858a08ed55f46","reportUrl":"https://novasamatech.github.io/test-runner/4505//#testresult/964858a08ed55f46","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sat, 13 Jan 2024 12:03:35 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705147414228,"stop":1705147414228,"duration":0}},{"uid":"bb50487de0d55ae1","reportUrl":"https://novasamatech.github.io/test-runner/4504//#testresult/bb50487de0d55ae1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sat, 13 Jan 2024 08:03:19 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705132998588,"stop":1705132998588,"duration":0}},{"uid":"ce52c73fc209f77c","reportUrl":"https://novasamatech.github.io/test-runner/4503//#testresult/ce52c73fc209f77c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sat, 13 Jan 2024 04:03:37 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705118617061,"stop":1705118617061,"duration":0}},{"uid":"2bb2f527db28d895","reportUrl":"https://novasamatech.github.io/test-runner/4502//#testresult/2bb2f527db28d895","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Sat, 13 Jan 2024 00:04:16 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705104255795,"stop":1705104255795,"duration":0}},{"uid":"d92c34f7679e85c0","reportUrl":"https://novasamatech.github.io/test-runner/4501//#testresult/d92c34f7679e85c0","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Fri, 12 Jan 2024 20:04:40 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705089879673,"stop":1705089879673,"duration":0}},{"uid":"7fd2fa96501c9d14","reportUrl":"https://novasamatech.github.io/test-runner/4500//#testresult/7fd2fa96501c9d14","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Fri, 12 Jan 2024 16:03:44 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705075423397,"stop":1705075423397,"duration":0}},{"uid":"13edd1ac7519e3e7","reportUrl":"https://novasamatech.github.io/test-runner/4499//#testresult/13edd1ac7519e3e7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Fri, 12 Jan 2024 12:06:14 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705061174356,"stop":1705061174356,"duration":0}},{"uid":"69fe305f50e0189b","reportUrl":"https://novasamatech.github.io/test-runner/4498//#testresult/69fe305f50e0189b","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1705046736600,"stop":1705046736600,"duration":0}},{"uid":"a451f3d3bdb2035","reportUrl":"https://novasamatech.github.io/test-runner/4497//#testresult/a451f3d3bdb2035","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Fri, 12 Jan 2024 04:03:46 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705032225326,"stop":1705032225326,"duration":0}},{"uid":"67a221afd831ef3b","reportUrl":"https://novasamatech.github.io/test-runner/4496//#testresult/67a221afd831ef3b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Fri, 12 Jan 2024 00:04:18 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705017857572,"stop":1705017857572,"duration":0}},{"uid":"1d935edf5cd40324","reportUrl":"https://novasamatech.github.io/test-runner/4495//#testresult/1d935edf5cd40324","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Thu, 11 Jan 2024 20:03:56 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1705003436088,"stop":1705003436088,"duration":0}},{"uid":"e4e1ff224235a55c","reportUrl":"https://novasamatech.github.io/test-runner/4494//#testresult/e4e1ff224235a55c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Thu, 11 Jan 2024 16:05:03 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1704989102520,"stop":1704989102520,"duration":0}},{"uid":"f78351dfcde57702","reportUrl":"https://novasamatech.github.io/test-runner/4493//#testresult/f78351dfcde57702","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'alt-svc': 'h3=\":443\"; ma=2592000', 'server': 'Caddy', 'date': 'Thu, 11 Jan 2024 12:04:22 GMT', 'content-length': '0'} -+-+- b''","time":{"start":1704974661577,"stop":1704974661577,"duration":0}}]},"tags":[]},"source":"26d8efeb82e7c475.json","parameterValues":["{'url': 'wss://rpc-para.clover.finance', 'name': 'CLV Parachain'}"]}