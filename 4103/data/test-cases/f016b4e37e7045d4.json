{"uid":"f016b4e37e7045d4","name":"test_can_create_connection[Test for Moonriver, url: wss://moonriver.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"90ea9856c4c0a688d86ac22df2f1ecd3","time":{"start":1699502565013,"stop":1699502625700,"duration":60687},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Moonriver', 'url': 'wss://moonriver.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Moonriver', 'url': 'wss://moonriver.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"24231cc3928e2004","name":"stdout","source":"24231cc3928e2004.txt","type":"text/plain","size":484}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az717-395"},{"name":"thread","value":"2236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://moonriver.api.onfinality.io/public-ws', 'name': 'Moonriver'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7af2ba28f9a23136","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699502489186,"stop":1699502549872,"duration":60686}},{"uid":"fc399c7359aae05e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1699502472938,"stop":1699502473973,"duration":1035}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":461,"unknown":0,"total":463},"items":[{"uid":"1c420c1347b09821","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/1c420c1347b09821","status":"passed","time":{"start":1699488129453,"stop":1699488130211,"duration":758}},{"uid":"d42cb8d9222c7e5","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/d42cb8d9222c7e5","status":"passed","time":{"start":1699473667438,"stop":1699473668488,"duration":1050}},{"uid":"f59c4a22ffb83833","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/f59c4a22ffb83833","status":"passed","time":{"start":1699459274459,"stop":1699459275513,"duration":1054}},{"uid":"c10b002a71754bf0","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/c10b002a71754bf0","status":"passed","time":{"start":1699444875722,"stop":1699444876579,"duration":857}},{"uid":"e0e94e908a737552","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/e0e94e908a737552","status":"passed","time":{"start":1699430481665,"stop":1699430482648,"duration":983}},{"uid":"8f6dd18db3da6a9d","reportUrl":"https://novasamatech.github.io/test-runner/4097//#testresult/8f6dd18db3da6a9d","status":"passed","time":{"start":1699416093954,"stop":1699416094718,"duration":764}},{"uid":"18009df8eecaf2a9","reportUrl":"https://novasamatech.github.io/test-runner/4096//#testresult/18009df8eecaf2a9","status":"passed","time":{"start":1699401716509,"stop":1699401717399,"duration":890}},{"uid":"700c6741b2d6c822","reportUrl":"https://novasamatech.github.io/test-runner/4095//#testresult/700c6741b2d6c822","status":"passed","time":{"start":1699387271791,"stop":1699387272862,"duration":1071}},{"uid":"77c4194e59774421","reportUrl":"https://novasamatech.github.io/test-runner/4094//#testresult/77c4194e59774421","status":"passed","time":{"start":1699372871236,"stop":1699372872383,"duration":1147}},{"uid":"2b75c850586f4094","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/2b75c850586f4094","status":"passed","time":{"start":1699358471933,"stop":1699358473067,"duration":1134}},{"uid":"4e4ea4269a980fd0","reportUrl":"https://novasamatech.github.io/test-runner/4092//#testresult/4e4ea4269a980fd0","status":"passed","time":{"start":1699344071873,"stop":1699344072656,"duration":783}},{"uid":"f94b49aacdba67ad","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/f94b49aacdba67ad","status":"passed","time":{"start":1699329678725,"stop":1699329679562,"duration":837}},{"uid":"bab345803000d3a8","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/bab345803000d3a8","status":"passed","time":{"start":1699315317858,"stop":1699315318927,"duration":1069}},{"uid":"5e3b668628a5b455","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/5e3b668628a5b455","status":"passed","time":{"start":1699300866734,"stop":1699300868125,"duration":1391}},{"uid":"a5ba2f85b961c288","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/a5ba2f85b961c288","status":"passed","time":{"start":1699286474108,"stop":1699286475261,"duration":1153}},{"uid":"3019a11c5e734824","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/3019a11c5e734824","status":"passed","time":{"start":1699272077954,"stop":1699272079383,"duration":1429}},{"uid":"1b7e3edeffaa368c","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/1b7e3edeffaa368c","status":"passed","time":{"start":1699257699080,"stop":1699257699930,"duration":850}},{"uid":"3e3bd4a7a1f2cf72","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/3e3bd4a7a1f2cf72","status":"passed","time":{"start":1699243286061,"stop":1699243287156,"duration":1095}},{"uid":"a3d67cbf3efadf41","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/a3d67cbf3efadf41","status":"passed","time":{"start":1699228912524,"stop":1699228913608,"duration":1084}},{"uid":"2b22ca529c18c0e8","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/2b22ca529c18c0e8","status":"passed","time":{"start":1699214473254,"stop":1699214474106,"duration":852}}]},"tags":[]},"source":"f016b4e37e7045d4.json","parameterValues":["{'url': 'wss://moonriver.api.onfinality.io/public-ws', 'name': 'Moonriver'}"]}