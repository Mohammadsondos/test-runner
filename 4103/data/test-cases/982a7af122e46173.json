{"uid":"982a7af122e46173","name":"test_address_prefix[Test for Karura]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"bdc275591070a0f0c0a5ac4c6c84d691","time":{"start":1699502500693,"stop":1699502501019,"duration":326},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7fa88a472ec0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fa88a75fbe0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fa88a550f40>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xe9d6c025fa5fb49bfd8ccfefc45ff72a8db22dec469d1b1fe5e132a2e6c56d66']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az717-395"},{"name":"thread","value":"2108-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fa88a75fbe0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"812870e9c13601c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699502484885,"stop":1699502485444,"duration":559}},{"uid":"8e3a96745960f432","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699502469350,"stop":1699502469674,"duration":324}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":20,"skipped":0,"passed":442,"unknown":0,"total":462},"items":[{"uid":"eb55423f143bd545","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/eb55423f143bd545","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699488144700,"stop":1699488145001,"duration":301}},{"uid":"fedf02c224df27ad","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/fedf02c224df27ad","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699473715228,"stop":1699473715571,"duration":343}},{"uid":"b9006a47e14c1b7f","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/b9006a47e14c1b7f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699459305718,"stop":1699459306521,"duration":803}},{"uid":"1ffd60d6e90bc700","reportUrl":"https://novasamatech.github.io/test-runner/4099//#testresult/1ffd60d6e90bc700","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699444911392,"stop":1699444911712,"duration":320}},{"uid":"d146f6470d136d66","reportUrl":"https://novasamatech.github.io/test-runner/4098//#testresult/d146f6470d136d66","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699430496552,"stop":1699430496952,"duration":400}},{"uid":"c91dcb75ea388dea","reportUrl":"https://novasamatech.github.io/test-runner/4097//#testresult/c91dcb75ea388dea","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699416119816,"stop":1699416120165,"duration":349}},{"uid":"81f8cd49e15cbd0","reportUrl":"https://novasamatech.github.io/test-runner/4096//#testresult/81f8cd49e15cbd0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699401746611,"stop":1699401746880,"duration":269}},{"uid":"2608cfc345494367","reportUrl":"https://novasamatech.github.io/test-runner/4095//#testresult/2608cfc345494367","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699387298013,"stop":1699387298603,"duration":590}},{"uid":"2d97bd3b93d78db7","reportUrl":"https://novasamatech.github.io/test-runner/4094//#testresult/2d97bd3b93d78db7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699372903709,"stop":1699372904160,"duration":451}},{"uid":"6b907241318d7361","reportUrl":"https://novasamatech.github.io/test-runner/4093//#testresult/6b907241318d7361","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699358505149,"stop":1699358505498,"duration":349}},{"uid":"aa7b77c6097a5887","reportUrl":"https://novasamatech.github.io/test-runner/4092//#testresult/aa7b77c6097a5887","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699344118097,"stop":1699344118204,"duration":107}},{"uid":"de0e2f9123a90b10","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/de0e2f9123a90b10","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699329697229,"stop":1699329697503,"duration":274}},{"uid":"560b1e09cdaadde8","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/560b1e09cdaadde8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699315345780,"stop":1699315346379,"duration":599}},{"uid":"4f2599f2d1777ba3","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/4f2599f2d1777ba3","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699300903397,"stop":1699300903872,"duration":475}},{"uid":"4c08cc8f2cef6356","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/4c08cc8f2cef6356","status":"passed","time":{"start":1699286483142,"stop":1699286492817,"duration":9675}},{"uid":"7b5aa61819561ccc","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/7b5aa61819561ccc","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699272120468,"stop":1699272121157,"duration":689}},{"uid":"ffc42d10b5088a67","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/ffc42d10b5088a67","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699257703298,"stop":1699257703464,"duration":166}},{"uid":"9da63901f7e9bded","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/9da63901f7e9bded","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699243319313,"stop":1699243319716,"duration":403}},{"uid":"e5c01b87bc9ed6ac","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/e5c01b87bc9ed6ac","status":"passed","time":{"start":1699228921860,"stop":1699228933279,"duration":11419}},{"uid":"333794f165c7866b","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/333794f165c7866b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699214497385,"stop":1699214497884,"duration":499}}]},"tags":[]},"source":"982a7af122e46173.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fa88a75fbe0>"]}