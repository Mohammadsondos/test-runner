{"uid":"c59001d6a91c209e","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1712937681717,"stop":1712937681743,"duration":26},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f02a05f95a0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f02a050cdc0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f02a050c070>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az700-504"},{"name":"thread","value":"2166-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"47e785e0c5a9f624","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712937676656,"stop":1712937676681,"duration":25}},{"uid":"c1a56d2e4dbd8ee7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712937671509,"stop":1712937671621,"duration":112}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":47,"skipped":0,"passed":624,"unknown":0,"total":675},"items":[{"uid":"a9fb99d502ca08ab","reportUrl":"https://novasamatech.github.io/test-runner/5051//#testresult/a9fb99d502ca08ab","status":"passed","time":{"start":1712923262031,"stop":1712923262238,"duration":207}},{"uid":"42f446266656b956","reportUrl":"https://novasamatech.github.io/test-runner/5050//#testresult/42f446266656b956","status":"passed","time":{"start":1712908861980,"stop":1712908862163,"duration":183}},{"uid":"4f444838b1e1224e","reportUrl":"https://novasamatech.github.io/test-runner/5049//#testresult/4f444838b1e1224e","status":"passed","time":{"start":1712894457794,"stop":1712894458159,"duration":365}},{"uid":"eaa3355f7fe1fa59","reportUrl":"https://novasamatech.github.io/test-runner/5048//#testresult/eaa3355f7fe1fa59","status":"passed","time":{"start":1712880115508,"stop":1712880115890,"duration":382}},{"uid":"6321a67b3a75b993","reportUrl":"https://novasamatech.github.io/test-runner/5047//#testresult/6321a67b3a75b993","status":"passed","time":{"start":1712865674309,"stop":1712865674488,"duration":179}},{"uid":"9b6d78c4b6c47fb4","reportUrl":"https://novasamatech.github.io/test-runner/5046//#testresult/9b6d78c4b6c47fb4","status":"passed","time":{"start":1712851261977,"stop":1712851262134,"duration":157}},{"uid":"56762e01d94fcf41","reportUrl":"https://novasamatech.github.io/test-runner/5045//#testresult/56762e01d94fcf41","status":"passed","time":{"start":1712836872915,"stop":1712836873553,"duration":638}},{"uid":"9866a8a976068a","reportUrl":"https://novasamatech.github.io/test-runner/5044//#testresult/9866a8a976068a","status":"passed","time":{"start":1712822471923,"stop":1712822472591,"duration":668}},{"uid":"81ab201f2bda2ef","reportUrl":"https://novasamatech.github.io/test-runner/5043//#testresult/81ab201f2bda2ef","status":"passed","time":{"start":1712808066099,"stop":1712808066687,"duration":588}},{"uid":"f21cc58f76020500","reportUrl":"https://novasamatech.github.io/test-runner/5042//#testresult/f21cc58f76020500","status":"failed","statusDetails":"AssertionError: Difference in block numbers is greater than 3:            wss_block_number=19628678, rpc_block_number=19628670\nassert 8 <= 3\n +  where 8 = abs((19628678 - 19628670))","time":{"start":1712793726480,"stop":1712793726761,"duration":281}},{"uid":"a2311f4be4db3f06","reportUrl":"https://novasamatech.github.io/test-runner/5041//#testresult/a2311f4be4db3f06","status":"passed","time":{"start":1712779293583,"stop":1712779293805,"duration":222}},{"uid":"9dfabb8a7c4bdff8","reportUrl":"https://novasamatech.github.io/test-runner/5040//#testresult/9dfabb8a7c4bdff8","status":"passed","time":{"start":1712764867125,"stop":1712764867388,"duration":263}},{"uid":"100801ab622c8335","reportUrl":"https://novasamatech.github.io/test-runner/5039//#testresult/100801ab622c8335","status":"passed","time":{"start":1712750461810,"stop":1712750462042,"duration":232}},{"uid":"ae4a5cd61ab435e2","reportUrl":"https://novasamatech.github.io/test-runner/5038//#testresult/ae4a5cd61ab435e2","status":"passed","time":{"start":1712736065017,"stop":1712736065715,"duration":698}},{"uid":"6449757bb8bfa547","reportUrl":"https://novasamatech.github.io/test-runner/5037//#testresult/6449757bb8bfa547","status":"passed","time":{"start":1712721664742,"stop":1712721665436,"duration":694}},{"uid":"3db0f023f4c72efd","reportUrl":"https://novasamatech.github.io/test-runner/5036//#testresult/3db0f023f4c72efd","status":"passed","time":{"start":1712707302235,"stop":1712707302452,"duration":217}},{"uid":"c8fc32140151b455","reportUrl":"https://novasamatech.github.io/test-runner/5035//#testresult/c8fc32140151b455","status":"passed","time":{"start":1712692866928,"stop":1712692867117,"duration":189}},{"uid":"8a09f94b7fccde28","reportUrl":"https://novasamatech.github.io/test-runner/5034//#testresult/8a09f94b7fccde28","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712678473218,"stop":1712678473587,"duration":369}},{"uid":"6500b3ddcea97dac","reportUrl":"https://novasamatech.github.io/test-runner/5033//#testresult/6500b3ddcea97dac","status":"passed","time":{"start":1712664086727,"stop":1712664087056,"duration":329}},{"uid":"1c5b49aef5550627","reportUrl":"https://novasamatech.github.io/test-runner/5032//#testresult/1c5b49aef5550627","status":"passed","time":{"start":1712649670327,"stop":1712649670477,"duration":150}}]},"tags":[]},"source":"c59001d6a91c209e.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}