{"uid":"493564368c229c4d","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1712937671439,"stop":1712937671479,"duration":40},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f02a05f9540>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f02a0504d30>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f02a0505210>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az700-504"},{"name":"thread","value":"2166-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"18320e355cbd68ef","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712937666359,"stop":1712937666403,"duration":44}},{"uid":"30dbc5d75f86e13","status":"broken","statusDetails":"ValueError: {'code': -32000, 'message': \"<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n: invalid character '<' looking for beginning of value\"}","time":{"start":1712937661105,"stop":1712937661261,"duration":156}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":54,"skipped":0,"passed":1072,"unknown":0,"total":1127},"items":[{"uid":"7464fb518ac2f170","reportUrl":"https://novasamatech.github.io/test-runner/5051//#testresult/7464fb518ac2f170","status":"passed","time":{"start":1712923261601,"stop":1712923262028,"duration":427}},{"uid":"d9a53ec004b6b388","reportUrl":"https://novasamatech.github.io/test-runner/5050//#testresult/d9a53ec004b6b388","status":"passed","time":{"start":1712908861623,"stop":1712908861977,"duration":354}},{"uid":"a3010c998fe79d13","reportUrl":"https://novasamatech.github.io/test-runner/5049//#testresult/a3010c998fe79d13","status":"passed","time":{"start":1712894456704,"stop":1712894457791,"duration":1087}},{"uid":"723da18d6ab4b7f7","reportUrl":"https://novasamatech.github.io/test-runner/5048//#testresult/723da18d6ab4b7f7","status":"passed","time":{"start":1712880114961,"stop":1712880115505,"duration":544}},{"uid":"bc9951f82ad25430","reportUrl":"https://novasamatech.github.io/test-runner/5047//#testresult/bc9951f82ad25430","status":"passed","time":{"start":1712865673904,"stop":1712865674306,"duration":402}},{"uid":"e071c5445c343e0e","reportUrl":"https://novasamatech.github.io/test-runner/5046//#testresult/e071c5445c343e0e","status":"passed","time":{"start":1712851261702,"stop":1712851261973,"duration":271}},{"uid":"b30fa3cc581f3fb3","reportUrl":"https://novasamatech.github.io/test-runner/5045//#testresult/b30fa3cc581f3fb3","status":"passed","time":{"start":1712836872298,"stop":1712836872912,"duration":614}},{"uid":"d63803107274abe5","reportUrl":"https://novasamatech.github.io/test-runner/5044//#testresult/d63803107274abe5","status":"passed","time":{"start":1712822471178,"stop":1712822471919,"duration":741}},{"uid":"86485f196f964914","reportUrl":"https://novasamatech.github.io/test-runner/5043//#testresult/86485f196f964914","status":"passed","time":{"start":1712808065510,"stop":1712808066097,"duration":587}},{"uid":"89435a1438ec6d3c","reportUrl":"https://novasamatech.github.io/test-runner/5042//#testresult/89435a1438ec6d3c","status":"passed","time":{"start":1712793715233,"stop":1712793715692,"duration":459}},{"uid":"2f4d87a3c079da25","reportUrl":"https://novasamatech.github.io/test-runner/5041//#testresult/2f4d87a3c079da25","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712779288404,"stop":1712779288469,"duration":65}},{"uid":"c33cf6bc050ca58b","reportUrl":"https://novasamatech.github.io/test-runner/5040//#testresult/c33cf6bc050ca58b","status":"passed","time":{"start":1712764866824,"stop":1712764867122,"duration":298}},{"uid":"730958234ac0ee98","reportUrl":"https://novasamatech.github.io/test-runner/5039//#testresult/730958234ac0ee98","status":"passed","time":{"start":1712750461397,"stop":1712750461806,"duration":409}},{"uid":"de0de039a922c69a","reportUrl":"https://novasamatech.github.io/test-runner/5038//#testresult/de0de039a922c69a","status":"passed","time":{"start":1712736064146,"stop":1712736065014,"duration":868}},{"uid":"dddfa58ae30403fb","reportUrl":"https://novasamatech.github.io/test-runner/5037//#testresult/dddfa58ae30403fb","status":"passed","time":{"start":1712721663877,"stop":1712721664738,"duration":861}},{"uid":"ef2231113689764d","reportUrl":"https://novasamatech.github.io/test-runner/5036//#testresult/ef2231113689764d","status":"passed","time":{"start":1712707302005,"stop":1712707302232,"duration":227}},{"uid":"ebe41dfa09e337fd","reportUrl":"https://novasamatech.github.io/test-runner/5035//#testresult/ebe41dfa09e337fd","status":"passed","time":{"start":1712692865309,"stop":1712692866925,"duration":1616}},{"uid":"2977a1503d12d477","reportUrl":"https://novasamatech.github.io/test-runner/5034//#testresult/2977a1503d12d477","status":"passed","time":{"start":1712678461057,"stop":1712678461898,"duration":841}},{"uid":"e8db86d7aac2ee26","reportUrl":"https://novasamatech.github.io/test-runner/5033//#testresult/e8db86d7aac2ee26","status":"passed","time":{"start":1712664086307,"stop":1712664086723,"duration":416}},{"uid":"cd60696fff575d5b","reportUrl":"https://novasamatech.github.io/test-runner/5032//#testresult/cd60696fff575d5b","status":"passed","time":{"start":1712649670118,"stop":1712649670324,"duration":206}}]},"tags":[]},"source":"493564368c229c4d.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}