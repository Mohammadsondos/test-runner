{"uid":"90132589e4daa84b","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1710964873521,"stop":1710964873573,"duration":52},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7ff95d5ed450>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7ff95d5250f0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7ff95d524100>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az738-717"},{"name":"thread","value":"2186-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"29457a08a45a49ce","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710964868424,"stop":1710964868487,"duration":63}},{"uid":"9cca346f1d000c86","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710964863266,"stop":1710964863311,"duration":45}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":36,"skipped":0,"passed":985,"unknown":0,"total":1024},"items":[{"uid":"7a782927a7bf3890","reportUrl":"https://novasamatech.github.io/test-runner/4912//#testresult/7a782927a7bf3890","status":"passed","time":{"start":1710950462036,"stop":1710950462318,"duration":282}},{"uid":"b62b3c91be607a7a","reportUrl":"https://novasamatech.github.io/test-runner/4911//#testresult/b62b3c91be607a7a","status":"passed","time":{"start":1710936069320,"stop":1710936069663,"duration":343}},{"uid":"f1da8497475ed197","reportUrl":"https://novasamatech.github.io/test-runner/4910//#testresult/f1da8497475ed197","status":"passed","time":{"start":1710921666694,"stop":1710921667092,"duration":398}},{"uid":"7d9c90074f0e3516","reportUrl":"https://novasamatech.github.io/test-runner/4909//#testresult/7d9c90074f0e3516","status":"passed","time":{"start":1710907266214,"stop":1710907266482,"duration":268}},{"uid":"3f9b4e7f966fb50b","reportUrl":"https://novasamatech.github.io/test-runner/4908//#testresult/3f9b4e7f966fb50b","status":"passed","time":{"start":1710892898745,"stop":1710892899288,"duration":543}},{"uid":"f821b1571ccb1462","reportUrl":"https://novasamatech.github.io/test-runner/4907//#testresult/f821b1571ccb1462","status":"passed","time":{"start":1710878473564,"stop":1710878474182,"duration":618}},{"uid":"16782e3f13793d22","reportUrl":"https://novasamatech.github.io/test-runner/4906//#testresult/16782e3f13793d22","status":"passed","time":{"start":1710864068775,"stop":1710864069119,"duration":344}},{"uid":"243c1b092be9bc7a","reportUrl":"https://novasamatech.github.io/test-runner/4905//#testresult/243c1b092be9bc7a","status":"passed","time":{"start":1710849676756,"stop":1710849677320,"duration":564}},{"uid":"b6b063cd34f6669a","reportUrl":"https://novasamatech.github.io/test-runner/4904//#testresult/b6b063cd34f6669a","status":"passed","time":{"start":1710835259318,"stop":1710835259930,"duration":612}},{"uid":"ceeb68cf4c4bf933","reportUrl":"https://novasamatech.github.io/test-runner/4903//#testresult/ceeb68cf4c4bf933","status":"passed","time":{"start":1710820868276,"stop":1710820868845,"duration":569}},{"uid":"6a45980fd5d8220b","reportUrl":"https://novasamatech.github.io/test-runner/4902//#testresult/6a45980fd5d8220b","status":"passed","time":{"start":1710806500200,"stop":1710806500528,"duration":328}},{"uid":"913e5ffd1693370f","reportUrl":"https://novasamatech.github.io/test-runner/4901//#testresult/913e5ffd1693370f","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792069537,"stop":1710792069882,"duration":345}},{"uid":"b34f4b46e05e0fb5","reportUrl":"https://novasamatech.github.io/test-runner/4900//#testresult/b34f4b46e05e0fb5","status":"passed","time":{"start":1710777672077,"stop":1710777672579,"duration":502}},{"uid":"fb9e5ba93771e35c","reportUrl":"https://novasamatech.github.io/test-runner/4899//#testresult/fb9e5ba93771e35c","status":"passed","time":{"start":1710763263699,"stop":1710763264101,"duration":402}},{"uid":"8579af94a8ab176d","reportUrl":"https://novasamatech.github.io/test-runner/4898//#testresult/8579af94a8ab176d","status":"passed","time":{"start":1710748866642,"stop":1710748866861,"duration":219}},{"uid":"81c3a8f51bbebc13","reportUrl":"https://novasamatech.github.io/test-runner/4897//#testresult/81c3a8f51bbebc13","status":"passed","time":{"start":1710734464224,"stop":1710734464551,"duration":327}},{"uid":"d7193ad24019a969","reportUrl":"https://novasamatech.github.io/test-runner/4896//#testresult/d7193ad24019a969","status":"passed","time":{"start":1710720101792,"stop":1710720102384,"duration":592}},{"uid":"5cc4b591bb26d848","reportUrl":"https://novasamatech.github.io/test-runner/4895//#testresult/5cc4b591bb26d848","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710705670600,"stop":1710705670655,"duration":55}},{"uid":"ad708682602d6616","reportUrl":"https://novasamatech.github.io/test-runner/4894//#testresult/ad708682602d6616","status":"passed","time":{"start":1710691269294,"stop":1710691269744,"duration":450}},{"uid":"6101eef10c3fd667","reportUrl":"https://novasamatech.github.io/test-runner/4893//#testresult/6101eef10c3fd667","status":"passed","time":{"start":1710676865494,"stop":1710676865829,"duration":335}}]},"tags":[]},"source":"90132589e4daa84b.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}