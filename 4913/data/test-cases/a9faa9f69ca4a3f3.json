{"uid":"a9faa9f69ca4a3f3","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1710964872845,"stop":1710964872913,"duration":68},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f954d48d540>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f954c1dbbe0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f954c1db5e0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az738-717"},{"name":"thread","value":"2189-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a5a5fbe4f90214a7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710964867747,"stop":1710964867790,"duration":43}},{"uid":"a97549d37088ea17","status":"failed","statusDetails":"AssertionError: Difference in block numbers is greater than 3:            wss_block_number=19478152, rpc_block_number=19478147\nassert 5 <= 3\n +  where 5 = abs((19478152 - 19478147))","time":{"start":1710964862482,"stop":1710964862661,"duration":179}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":31,"skipped":0,"passed":540,"unknown":0,"total":572},"items":[{"uid":"e79f2bddf7b5c77d","reportUrl":"https://novasamatech.github.io/test-runner/4912//#testresult/e79f2bddf7b5c77d","status":"passed","time":{"start":1710950461943,"stop":1710950462191,"duration":248}},{"uid":"3845f56569bf429","reportUrl":"https://novasamatech.github.io/test-runner/4911//#testresult/3845f56569bf429","status":"passed","time":{"start":1710936069482,"stop":1710936069788,"duration":306}},{"uid":"2fc166c7ce911539","reportUrl":"https://novasamatech.github.io/test-runner/4910//#testresult/2fc166c7ce911539","status":"passed","time":{"start":1710921666981,"stop":1710921667265,"duration":284}},{"uid":"4e17763a33e81acd","reportUrl":"https://novasamatech.github.io/test-runner/4909//#testresult/4e17763a33e81acd","status":"passed","time":{"start":1710907265938,"stop":1710907266211,"duration":273}},{"uid":"489b059646eeae1f","reportUrl":"https://novasamatech.github.io/test-runner/4908//#testresult/489b059646eeae1f","status":"passed","time":{"start":1710892898850,"stop":1710892899557,"duration":707}},{"uid":"90377a0b5ae20e02","reportUrl":"https://novasamatech.github.io/test-runner/4907//#testresult/90377a0b5ae20e02","status":"passed","time":{"start":1710878473988,"stop":1710878474709,"duration":721}},{"uid":"abbd0acf9aec3263","reportUrl":"https://novasamatech.github.io/test-runner/4906//#testresult/abbd0acf9aec3263","status":"passed","time":{"start":1710864068672,"stop":1710864068955,"duration":283}},{"uid":"181042c4b0c6d821","reportUrl":"https://novasamatech.github.io/test-runner/4905//#testresult/181042c4b0c6d821","status":"passed","time":{"start":1710849705430,"stop":1710849706067,"duration":637}},{"uid":"42077b991d6a0d17","reportUrl":"https://novasamatech.github.io/test-runner/4904//#testresult/42077b991d6a0d17","status":"passed","time":{"start":1710835259602,"stop":1710835263341,"duration":3739}},{"uid":"96b37ce4a34cfd9c","reportUrl":"https://novasamatech.github.io/test-runner/4903//#testresult/96b37ce4a34cfd9c","status":"passed","time":{"start":1710820868385,"stop":1710820869088,"duration":703}},{"uid":"c4624ec74e2d132d","reportUrl":"https://novasamatech.github.io/test-runner/4902//#testresult/c4624ec74e2d132d","status":"passed","time":{"start":1710806500102,"stop":1710806500330,"duration":228}},{"uid":"5ea3e0680b628582","reportUrl":"https://novasamatech.github.io/test-runner/4901//#testresult/5ea3e0680b628582","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792080109,"stop":1710792080486,"duration":377}},{"uid":"1252afe935fdda2f","reportUrl":"https://novasamatech.github.io/test-runner/4900//#testresult/1252afe935fdda2f","status":"passed","time":{"start":1710777672143,"stop":1710777672494,"duration":351}},{"uid":"d6536b7c4d77f151","reportUrl":"https://novasamatech.github.io/test-runner/4899//#testresult/d6536b7c4d77f151","status":"passed","time":{"start":1710763264215,"stop":1710763264572,"duration":357}},{"uid":"2537b00b0fb0181e","reportUrl":"https://novasamatech.github.io/test-runner/4898//#testresult/2537b00b0fb0181e","status":"passed","time":{"start":1710748865731,"stop":1710748865861,"duration":130}},{"uid":"4a2035a4d546e9fa","reportUrl":"https://novasamatech.github.io/test-runner/4897//#testresult/4a2035a4d546e9fa","status":"passed","time":{"start":1710734469279,"stop":1710734469583,"duration":304}},{"uid":"278ab5578ec567d0","reportUrl":"https://novasamatech.github.io/test-runner/4896//#testresult/278ab5578ec567d0","status":"passed","time":{"start":1710720101883,"stop":1710720102254,"duration":371}},{"uid":"ba6f481b58a1ca4","reportUrl":"https://novasamatech.github.io/test-runner/4895//#testresult/ba6f481b58a1ca4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710705680829,"stop":1710705680863,"duration":34}},{"uid":"77edfd0243680283","reportUrl":"https://novasamatech.github.io/test-runner/4894//#testresult/77edfd0243680283","status":"passed","time":{"start":1710691269539,"stop":1710691269858,"duration":319}},{"uid":"3fcd5f41c0781e93","reportUrl":"https://novasamatech.github.io/test-runner/4893//#testresult/3fcd5f41c0781e93","status":"passed","time":{"start":1710676865549,"stop":1710676865882,"duration":333}}]},"tags":[]},"source":"a9faa9f69ca4a3f3.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}