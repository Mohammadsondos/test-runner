{"uid":"8b9b61612cb53488","name":"test_can_create_connection[Test for Ethereum, url: wss://mainnet.infura.io/ws/v3/9dddd77ac74043dc9a8dc48f82822c7d]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"8648006843d3c1e523f8e03992ec2516","time":{"start":1682554423526,"stop":1682554423729,"duration":203},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","statusTrace":"data = {'name': 'Ethereum', 'url': 'wss://mainnet.infura.io/ws/v3/9dddd77ac74043dc9a8dc48f82822c7d'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fc2b45ef160>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","statusTrace":"data = {'name': 'Ethereum', 'url': 'wss://mainnet.infura.io/ws/v3/9dddd77ac74043dc9a8dc48f82822c7d'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fc2b45ef160>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"ea110b40dda4e8e9","name":"stdout","source":"ea110b40dda4e8e9.txt","type":"text/plain","size":400}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az301-874"},{"name":"thread","value":"1886-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.infura.io/ws/v3/9dddd77ac74043dc9a8dc48f82822c7d', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d0b136f8edbd03e2","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","time":{"start":1682554413138,"stop":1682554413345,"duration":207}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":0,"unknown":0,"total":9},"items":[{"uid":"b1826b3ecbbe58d2","reportUrl":"https://nova-wallet.github.io/test-runner/2897//#testresult/b1826b3ecbbe58d2","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","time":{"start":1682539461826,"stop":1682539462041,"duration":215}},{"uid":"b6496c5a49f3dc57","reportUrl":"https://nova-wallet.github.io/test-runner/2896//#testresult/b6496c5a49f3dc57","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","time":{"start":1682525071148,"stop":1682525071526,"duration":378}},{"uid":"cc465a26506f2b9b","reportUrl":"https://nova-wallet.github.io/test-runner/2895//#testresult/cc465a26506f2b9b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","time":{"start":1682510730102,"stop":1682510730423,"duration":321}},{"uid":"d1753f81bb9da462","reportUrl":"https://nova-wallet.github.io/test-runner/2894//#testresult/d1753f81bb9da462","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","time":{"start":1682496290499,"stop":1682496290861,"duration":362}},{"uid":"500402fcfb207049","reportUrl":"https://nova-wallet.github.io/test-runner/2893//#testresult/500402fcfb207049","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","time":{"start":1682481872346,"stop":1682481872718,"duration":372}},{"uid":"c395c173fca5f1d0","reportUrl":"https://nova-wallet.github.io/test-runner/2892//#testresult/c395c173fca5f1d0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","time":{"start":1682467994257,"stop":1682467994469,"duration":212}},{"uid":"20b703d5d1dfb71d","reportUrl":"https://nova-wallet.github.io/test-runner/2891//#testresult/20b703d5d1dfb71d","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","time":{"start":1682453077544,"stop":1682453077910,"duration":366}},{"uid":"4c9a663949407369","reportUrl":"https://nova-wallet.github.io/test-runner/2890//#testresult/4c9a663949407369","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available'}","time":{"start":1682438662757,"stop":1682438662779,"duration":22}}]},"tags":[]},"source":"8b9b61612cb53488.json","parameterValues":["{'url': 'wss://mainnet.infura.io/ws/v3/9dddd77ac74043dc9a8dc48f82822c7d', 'name': 'Ethereum'}"]}