{"uid":"d33ac4549a889280","name":"test_can_create_connection[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a8a096f58d8ed03b8ac7981f4a569c1a","time":{"start":1682554472570,"stop":1682554472968,"duration":398},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","statusTrace":"data = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fd0451b7c10>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n                            raise SubstrateRequestException(message['error'])\n    \n                        # If result handler is set, pass result through and loop until handler return value is set\n                        if callable(result_handler):\n    \n                            # Set subscription ID and only listen to messages containing this ID\n                            subscription_id = message['result']\n                            self.debug_message(f\"Websocket subscription [{subscription_id}] created\")\n    \n                        else:\n                            json_body = message\n    \n                # Process subscription updates\n                for message in self.__rpc_message_queue:\n                    # Check if message is meant for this subscription\n                    if 'params' in message and message['params']['subscription'] == subscription_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        self.debug_message(f\"Websocket result [{subscription_id} #{update_nr}]: {message}\")\n    \n                        # Call result_handler with message for processing\n                        callback_result = result_handler(message, update_nr, subscription_id)\n                        if callback_result is not None:\n                            json_body = callback_result\n    \n                        update_nr += 1\n    \n        else:\n    \n            if result_handler:\n                raise ConfigurationError(\"Result handlers only available for websockets (ws://) connections\")\n    \n            response = self.session.request(\"POST\", self.url, data=json.dumps(payload), headers=self.default_headers)\n    \n            if response.status_code != 200:\n                raise SubstrateRequestException(\n                    \"RPC request failed with HTTP status code {}\".format(response.status_code))\n    \n            json_body = response.json()\n    \n            # Check if response has error\n            if 'error' in json_body:\n>               raise SubstrateRequestException(json_body['error'])\nE               substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:787: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","statusTrace":"data = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fd0451b7c10>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n                            raise SubstrateRequestException(message['error'])\n    \n                        # If result handler is set, pass result through and loop until handler return value is set\n                        if callable(result_handler):\n    \n                            # Set subscription ID and only listen to messages containing this ID\n                            subscription_id = message['result']\n                            self.debug_message(f\"Websocket subscription [{subscription_id}] created\")\n    \n                        else:\n                            json_body = message\n    \n                # Process subscription updates\n                for message in self.__rpc_message_queue:\n                    # Check if message is meant for this subscription\n                    if 'params' in message and message['params']['subscription'] == subscription_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        self.debug_message(f\"Websocket result [{subscription_id} #{update_nr}]: {message}\")\n    \n                        # Call result_handler with message for processing\n                        callback_result = result_handler(message, update_nr, subscription_id)\n                        if callback_result is not None:\n                            json_body = callback_result\n    \n                        update_nr += 1\n    \n        else:\n    \n            if result_handler:\n                raise ConfigurationError(\"Result handlers only available for websockets (ws://) connections\")\n    \n            response = self.session.request(\"POST\", self.url, data=json.dumps(payload), headers=self.default_headers)\n    \n            if response.status_code != 200:\n                raise SubstrateRequestException(\n                    \"RPC request failed with HTTP status code {}\".format(response.status_code))\n    \n            json_body = response.json()\n    \n            # Check if response has error\n            if 'error' in json_body:\n>               raise SubstrateRequestException(json_body['error'])\nE               substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:787: SubstrateRequestException","steps":[],"attachments":[{"uid":"5c791e626b3e8f0d","name":"stdout","source":"5c791e626b3e8f0d.txt","type":"text/plain","size":342}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az301-874"},{"name":"thread","value":"1883-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5860e73f3e704b5b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","time":{"start":1682554462047,"stop":1682554462428,"duration":381}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":0,"unknown":0,"total":9},"items":[{"uid":"e9b5a6e547eeb17e","reportUrl":"https://nova-wallet.github.io/test-runner/2897//#testresult/e9b5a6e547eeb17e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","time":{"start":1682539520917,"stop":1682539521231,"duration":314}},{"uid":"f9ba600717c8492f","reportUrl":"https://nova-wallet.github.io/test-runner/2896//#testresult/f9ba600717c8492f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","time":{"start":1682525141477,"stop":1682525141750,"duration":273}},{"uid":"ecddffeb62b63d3f","reportUrl":"https://nova-wallet.github.io/test-runner/2895//#testresult/ecddffeb62b63d3f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","time":{"start":1682510863697,"stop":1682510864116,"duration":419}},{"uid":"5e3ee0938d7d60a1","reportUrl":"https://nova-wallet.github.io/test-runner/2894//#testresult/5e3ee0938d7d60a1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","time":{"start":1682496350014,"stop":1682496350281,"duration":267}},{"uid":"c86c0aa8f7201cc8","reportUrl":"https://nova-wallet.github.io/test-runner/2893//#testresult/c86c0aa8f7201cc8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","time":{"start":1682481932204,"stop":1682481932463,"duration":259}},{"uid":"ddbdb8017fed318e","reportUrl":"https://nova-wallet.github.io/test-runner/2892//#testresult/ddbdb8017fed318e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","time":{"start":1682468070940,"stop":1682468071432,"duration":492}},{"uid":"6bff114c61e2f7c0","reportUrl":"https://nova-wallet.github.io/test-runner/2891//#testresult/6bff114c61e2f7c0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","time":{"start":1682453135737,"stop":1682453135998,"duration":261}},{"uid":"5b8bb261f142f0f4","reportUrl":"https://nova-wallet.github.io/test-runner/2890//#testresult/5b8bb261f142f0f4","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'The method system_chain does not exist/is not available', 'data': None}","time":{"start":1682438715705,"stop":1682438716108,"duration":403}}]},"tags":[]},"source":"d33ac4549a889280.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}