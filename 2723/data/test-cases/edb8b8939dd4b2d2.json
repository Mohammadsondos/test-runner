{"uid":"edb8b8939dd4b2d2","name":"test_can_create_connection[Test for Composable Finance, url: wss://rpc.composable.finance]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e1c6edf5649802bd02e402a73e097467","time":{"start":1680062695237,"stop":1680062695253,"duration":16},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f6129cae1d0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Composable Finance', 'url': 'wss://rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f6129cae1d0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f6129cae1d0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Composable Finance', 'url': 'wss://rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f6129cae1d0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"3f52f1ea018f0139","name":"stdout","source":"3f52f1ea018f0139.txt","type":"text/plain","size":232}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az445-162"},{"name":"thread","value":"1780-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.composable.finance', 'name': 'Composable Finance'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f507859666174833","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1680062685054,"stop":1680062685111,"duration":57}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":57,"skipped":0,"passed":847,"unknown":0,"total":904},"items":[{"uid":"5cb57ca806eacc6b","reportUrl":"https://nova-wallet.github.io/test-runner/2722//#testresult/5cb57ca806eacc6b","status":"passed","time":{"start":1680052292094,"stop":1680052292481,"duration":387}},{"uid":"2a273b1ff01bfeae","reportUrl":"https://nova-wallet.github.io/test-runner/2721//#testresult/2a273b1ff01bfeae","status":"passed","time":{"start":1680034465436,"stop":1680034466142,"duration":706}},{"uid":"6e019b1a7e65bed2","reportUrl":"https://nova-wallet.github.io/test-runner/2720//#testresult/6e019b1a7e65bed2","status":"passed","time":{"start":1680020721639,"stop":1680020722169,"duration":530}},{"uid":"49a9e5356bf8a865","reportUrl":"https://nova-wallet.github.io/test-runner/2718//#testresult/49a9e5356bf8a865","status":"passed","time":{"start":1679991489264,"stop":1679991489651,"duration":387}},{"uid":"7078fa70ddee84d2","reportUrl":"https://nova-wallet.github.io/test-runner/2717//#testresult/7078fa70ddee84d2","status":"passed","time":{"start":1679976968369,"stop":1679976968755,"duration":386}},{"uid":"fbf53a74a5ea0619","reportUrl":"https://nova-wallet.github.io/test-runner/2716//#testresult/fbf53a74a5ea0619","status":"passed","time":{"start":1679965626559,"stop":1679965627393,"duration":834}},{"uid":"f5564224d35c971b","reportUrl":"https://nova-wallet.github.io/test-runner/2715//#testresult/f5564224d35c971b","status":"passed","time":{"start":1679948138621,"stop":1679948139117,"duration":496}},{"uid":"7fadef5eba91b1f6","reportUrl":"https://nova-wallet.github.io/test-runner/2714//#testresult/7fadef5eba91b1f6","status":"passed","time":{"start":1679933857299,"stop":1679933858025,"duration":726}},{"uid":"ee26897887a9c8d","reportUrl":"https://nova-wallet.github.io/test-runner/2713//#testresult/ee26897887a9c8d","status":"passed","time":{"start":1679923533995,"stop":1679923534733,"duration":738}},{"uid":"258b04071cad07d0","reportUrl":"https://nova-wallet.github.io/test-runner/2712//#testresult/258b04071cad07d0","status":"passed","time":{"start":1679905090338,"stop":1679905091031,"duration":693}},{"uid":"59a6cb3c63a00d81","reportUrl":"https://nova-wallet.github.io/test-runner/2710//#testresult/59a6cb3c63a00d81","status":"passed","time":{"start":1679879038775,"stop":1679879039812,"duration":1037}},{"uid":"b3994da9cb4e3e2d","reportUrl":"https://nova-wallet.github.io/test-runner/2709//#testresult/b3994da9cb4e3e2d","status":"passed","time":{"start":1679861582895,"stop":1679861583582,"duration":687}},{"uid":"321235915e1f68c1","reportUrl":"https://nova-wallet.github.io/test-runner/2708//#testresult/321235915e1f68c1","status":"passed","time":{"start":1679847370283,"stop":1679847371155,"duration":872}},{"uid":"c4afd090a1b4c947","reportUrl":"https://nova-wallet.github.io/test-runner/2707//#testresult/c4afd090a1b4c947","status":"passed","time":{"start":1679833409030,"stop":1679833410187,"duration":1157}},{"uid":"b9d5910acf386591","reportUrl":"https://nova-wallet.github.io/test-runner/2706//#testresult/b9d5910acf386591","status":"passed","time":{"start":1679818524788,"stop":1679818525493,"duration":705}},{"uid":"6a685d18ebff2bb4","reportUrl":"https://nova-wallet.github.io/test-runner/2705//#testresult/6a685d18ebff2bb4","status":"passed","time":{"start":1679804131388,"stop":1679804132421,"duration":1033}},{"uid":"4f46f310a7a4343f","reportUrl":"https://nova-wallet.github.io/test-runner/2704//#testresult/4f46f310a7a4343f","status":"passed","time":{"start":1679792997740,"stop":1679792998657,"duration":917}},{"uid":"8eb5743bb1e44ad9","reportUrl":"https://nova-wallet.github.io/test-runner/2703//#testresult/8eb5743bb1e44ad9","status":"passed","time":{"start":1679775183912,"stop":1679775184658,"duration":746}},{"uid":"5400bc76a674f920","reportUrl":"https://nova-wallet.github.io/test-runner/2702//#testresult/5400bc76a674f920","status":"passed","time":{"start":1679760960248,"stop":1679760961268,"duration":1020}},{"uid":"965df62ceece80a9","reportUrl":"https://nova-wallet.github.io/test-runner/2701//#testresult/965df62ceece80a9","status":"passed","time":{"start":1679746980026,"stop":1679746980813,"duration":787}}]},"tags":[]},"source":"edb8b8939dd4b2d2.json","parameterValues":["{'url': 'wss://rpc.composable.finance', 'name': 'Composable Finance'}"]}