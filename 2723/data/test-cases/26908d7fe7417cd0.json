{"uid":"26908d7fe7417cd0","name":"test_can_create_connection[Test for Picasso, url: wss://rpc.composablenodes.tech]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"fe841532cdb2a6375da339c7f464ca1d","time":{"start":1680062687364,"stop":1680062687412,"duration":48},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 530 None","statusTrace":"data = {'name': 'Picasso', 'url': 'wss://rpc.composablenodes.tech'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 530 None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 530 None","statusTrace":"data = {'name': 'Picasso', 'url': 'wss://rpc.composablenodes.tech'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 530 None\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"66c03b589c830875","name":"stdout","source":"66c03b589c830875.txt","type":"text/plain","size":214}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az445-162"},{"name":"thread","value":"1783-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.composablenodes.tech', 'name': 'Picasso'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"dd21f3b7b85b1b9b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 530 None","time":{"start":1680062677221,"stop":1680062677283,"duration":62}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":113,"unknown":0,"total":114},"items":[{"uid":"43e6163d396ed02d","reportUrl":"https://nova-wallet.github.io/test-runner/2722//#testresult/43e6163d396ed02d","status":"passed","time":{"start":1680052287661,"stop":1680052288132,"duration":471}},{"uid":"72c2b3501c6da014","reportUrl":"https://nova-wallet.github.io/test-runner/2721//#testresult/72c2b3501c6da014","status":"passed","time":{"start":1680034460605,"stop":1680034461099,"duration":494}},{"uid":"51f4f83ca36e6a53","reportUrl":"https://nova-wallet.github.io/test-runner/2720//#testresult/51f4f83ca36e6a53","status":"passed","time":{"start":1680020717502,"stop":1680020717971,"duration":469}},{"uid":"257d137aec0941e1","reportUrl":"https://nova-wallet.github.io/test-runner/2718//#testresult/257d137aec0941e1","status":"passed","time":{"start":1679991484409,"stop":1679991484874,"duration":465}},{"uid":"c7d80a5ef12a7c1","reportUrl":"https://nova-wallet.github.io/test-runner/2717//#testresult/c7d80a5ef12a7c1","status":"passed","time":{"start":1679976962127,"stop":1679976962591,"duration":464}},{"uid":"e1e2241be8ff6bf9","reportUrl":"https://nova-wallet.github.io/test-runner/2716//#testresult/e1e2241be8ff6bf9","status":"passed","time":{"start":1679965619283,"stop":1679965619793,"duration":510}},{"uid":"3ac832bd1c954fb1","reportUrl":"https://nova-wallet.github.io/test-runner/2715//#testresult/3ac832bd1c954fb1","status":"passed","time":{"start":1679948131069,"stop":1679948131556,"duration":487}},{"uid":"eba17e89e77d3da5","reportUrl":"https://nova-wallet.github.io/test-runner/2714//#testresult/eba17e89e77d3da5","status":"passed","time":{"start":1679933849677,"stop":1679933850159,"duration":482}},{"uid":"6ea8dfa94dce41ec","reportUrl":"https://nova-wallet.github.io/test-runner/2713//#testresult/6ea8dfa94dce41ec","status":"passed","time":{"start":1679923528873,"stop":1679923529561,"duration":688}},{"uid":"21904adb42f61b11","reportUrl":"https://nova-wallet.github.io/test-runner/2712//#testresult/21904adb42f61b11","status":"passed","time":{"start":1679905083572,"stop":1679905084400,"duration":828}},{"uid":"c15e26a0a7152bd5","reportUrl":"https://nova-wallet.github.io/test-runner/2710//#testresult/c15e26a0a7152bd5","status":"passed","time":{"start":1679879033777,"stop":1679879034583,"duration":806}},{"uid":"afdd4978150b436a","reportUrl":"https://nova-wallet.github.io/test-runner/2709//#testresult/afdd4978150b436a","status":"passed","time":{"start":1679861573477,"stop":1679861573978,"duration":501}},{"uid":"76feee67034ee16","reportUrl":"https://nova-wallet.github.io/test-runner/2708//#testresult/76feee67034ee16","status":"passed","time":{"start":1679847365820,"stop":1679847366565,"duration":745}},{"uid":"5cf4750fe2da715a","reportUrl":"https://nova-wallet.github.io/test-runner/2707//#testresult/5cf4750fe2da715a","status":"passed","time":{"start":1679833415717,"stop":1679833416458,"duration":741}},{"uid":"368f8b9821fe120a","reportUrl":"https://nova-wallet.github.io/test-runner/2706//#testresult/368f8b9821fe120a","status":"passed","time":{"start":1679818518829,"stop":1679818519582,"duration":753}},{"uid":"bfb90675274cfff5","reportUrl":"https://nova-wallet.github.io/test-runner/2705//#testresult/bfb90675274cfff5","status":"passed","time":{"start":1679804125996,"stop":1679804126695,"duration":699}},{"uid":"ebebe941a34208be","reportUrl":"https://nova-wallet.github.io/test-runner/2704//#testresult/ebebe941a34208be","status":"passed","time":{"start":1679792991623,"stop":1679792992375,"duration":752}},{"uid":"46ce7811c72065ac","reportUrl":"https://nova-wallet.github.io/test-runner/2703//#testresult/46ce7811c72065ac","status":"passed","time":{"start":1679775178608,"stop":1679775179088,"duration":480}},{"uid":"311ca79f3f85dcbe","reportUrl":"https://nova-wallet.github.io/test-runner/2702//#testresult/311ca79f3f85dcbe","status":"passed","time":{"start":1679760957521,"stop":1679760958205,"duration":684}},{"uid":"d0dc1549f613c322","reportUrl":"https://nova-wallet.github.io/test-runner/2701//#testresult/d0dc1549f613c322","status":"passed","time":{"start":1679746974256,"stop":1679746975018,"duration":762}}]},"tags":[]},"source":"26908d7fe7417cd0.json","parameterValues":["{'url': 'wss://rpc.composablenodes.tech', 'name': 'Picasso'}"]}