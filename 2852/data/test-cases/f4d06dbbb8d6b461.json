{"uid":"f4d06dbbb8d6b461","name":"test_can_create_connection[Test for Exosama, url: wss://rpc.exosama.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e6ed7d340c7eaf9147505ae9416b61bb","time":{"start":1681905966819,"stop":1681905967255,"duration":436},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","statusTrace":"data = {'name': 'Exosama', 'url': 'wss://rpc.exosama.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f16a9ba7280>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","statusTrace":"data = {'name': 'Exosama', 'url': 'wss://rpc.exosama.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f16a9ba7280>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"be212dd831480ba","name":"stdout","source":"be212dd831480ba.txt","type":"text/plain","size":280}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1256-26"},{"name":"thread","value":"1782-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.exosama.com', 'name': 'Exosama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"caedc8b7d90ddeca","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681905956212,"stop":1681905956659,"duration":447}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":29,"skipped":0,"passed":0,"unknown":0,"total":29},"items":[{"uid":"2dbee9f182e49679","reportUrl":"https://nova-wallet.github.io/test-runner/2851//#testresult/2dbee9f182e49679","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681891527666,"stop":1681891528075,"duration":409}},{"uid":"5d3748a889421f4b","reportUrl":"https://nova-wallet.github.io/test-runner/2850//#testresult/5d3748a889421f4b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681882925998,"stop":1681882926409,"duration":411}},{"uid":"a02940cbfd06c4ee","reportUrl":"https://nova-wallet.github.io/test-runner/2849//#testresult/a02940cbfd06c4ee","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681877106487,"stop":1681877107074,"duration":587}},{"uid":"79499ad9cabe4bed","reportUrl":"https://nova-wallet.github.io/test-runner/2848//#testresult/79499ad9cabe4bed","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681863282023,"stop":1681863282732,"duration":709}},{"uid":"7e71782406265c52","reportUrl":"https://nova-wallet.github.io/test-runner/2847//#testresult/7e71782406265c52","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681848302666,"stop":1681848303079,"duration":413}},{"uid":"67773a8977e4ee38","reportUrl":"https://nova-wallet.github.io/test-runner/2845//#testresult/67773a8977e4ee38","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681819586808,"stop":1681819587484,"duration":676}},{"uid":"f2ce9ed9562ef56b","reportUrl":"https://nova-wallet.github.io/test-runner/2844//#testresult/f2ce9ed9562ef56b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681805099311,"stop":1681805099868,"duration":557}},{"uid":"cfac0b5218c85d2f","reportUrl":"https://nova-wallet.github.io/test-runner/2843//#testresult/cfac0b5218c85d2f","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681790699469,"stop":1681790699882,"duration":413}},{"uid":"a4d3e7ea7dcd3409","reportUrl":"https://nova-wallet.github.io/test-runner/2842//#testresult/a4d3e7ea7dcd3409","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681776798957,"stop":1681776799640,"duration":683}},{"uid":"41dc64e86835a8f5","reportUrl":"https://nova-wallet.github.io/test-runner/2841//#testresult/41dc64e86835a8f5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681761893177,"stop":1681761893587,"duration":410}},{"uid":"fd256f84771d95aa","reportUrl":"https://nova-wallet.github.io/test-runner/2840//#testresult/fd256f84771d95aa","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681747517040,"stop":1681747517673,"duration":633}},{"uid":"69e585eccc73bfcc","reportUrl":"https://nova-wallet.github.io/test-runner/2839//#testresult/69e585eccc73bfcc","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681733150109,"stop":1681733150550,"duration":441}},{"uid":"275440d61b0003d7","reportUrl":"https://nova-wallet.github.io/test-runner/2838//#testresult/275440d61b0003d7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681718704931,"stop":1681718705366,"duration":435}},{"uid":"f36f445699427ac4","reportUrl":"https://nova-wallet.github.io/test-runner/2837//#testresult/f36f445699427ac4","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681704307036,"stop":1681704307600,"duration":564}},{"uid":"540494618f6b2be7","reportUrl":"https://nova-wallet.github.io/test-runner/2836//#testresult/540494618f6b2be7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681690413756,"stop":1681690414297,"duration":541}},{"uid":"a86b48a6fc29a553","reportUrl":"https://nova-wallet.github.io/test-runner/2835//#testresult/a86b48a6fc29a553","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681675462030,"stop":1681675462449,"duration":419}},{"uid":"4014a8ad44e2fc37","reportUrl":"https://nova-wallet.github.io/test-runner/2834//#testresult/4014a8ad44e2fc37","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681661095211,"stop":1681661095923,"duration":712}},{"uid":"4f526c27fecf9424","reportUrl":"https://nova-wallet.github.io/test-runner/2833//#testresult/4f526c27fecf9424","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681646728192,"stop":1681646728596,"duration":404}},{"uid":"d85f8ecba3a8b708","reportUrl":"https://nova-wallet.github.io/test-runner/2832//#testresult/d85f8ecba3a8b708","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681632299111,"stop":1681632299503,"duration":392}},{"uid":"731f60072d58e6c","reportUrl":"https://nova-wallet.github.io/test-runner/2831//#testresult/731f60072d58e6c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681617880766,"stop":1681617881165,"duration":399}}]},"tags":[]},"source":"f4d06dbbb8d6b461.json","parameterValues":["{'url': 'wss://rpc.exosama.com', 'name': 'Exosama'}"]}