{"uid":"53c225655439b6cf","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1714161682411,"stop":1714161682821,"duration":410},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fb8a7b59a20>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fb8a7a7ad70>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fb8a7a797b0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az773-465"},{"name":"thread","value":"2089-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"df114808bb0e3274","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1714161676978,"stop":1714161677376,"duration":398}},{"uid":"ad9b0327e8c2d081","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1714161671453,"stop":1714161671860,"duration":407}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":53,"skipped":0,"passed":1157,"unknown":0,"total":1213},"items":[{"uid":"f17fb795e8bf7461","reportUrl":"https://novasamatech.github.io/test-runner/5139//#testresult/f17fb795e8bf7461","status":"passed","time":{"start":1714147267016,"stop":1714147267210,"duration":194}},{"uid":"4922c0b97074b96e","reportUrl":"https://novasamatech.github.io/test-runner/5136//#testresult/4922c0b97074b96e","status":"passed","time":{"start":1714140435561,"stop":1714140435799,"duration":238}},{"uid":"682018d391c63159","reportUrl":"https://novasamatech.github.io/test-runner/5135//#testresult/682018d391c63159","status":"passed","time":{"start":1714132869263,"stop":1714132869877,"duration":614}},{"uid":"f7be08dde04cc33","reportUrl":"https://novasamatech.github.io/test-runner/5134//#testresult/f7be08dde04cc33","status":"passed","time":{"start":1714118464622,"stop":1714118465010,"duration":388}},{"uid":"d7583736299c8e2d","reportUrl":"https://novasamatech.github.io/test-runner/5133//#testresult/d7583736299c8e2d","status":"passed","time":{"start":1714104058781,"stop":1714104059409,"duration":628}},{"uid":"7e33bc5a6f8cbcc0","reportUrl":"https://novasamatech.github.io/test-runner/5132//#testresult/7e33bc5a6f8cbcc0","status":"passed","time":{"start":1714089697196,"stop":1714089697754,"duration":558}},{"uid":"9c3e97659c2b4c8d","reportUrl":"https://novasamatech.github.io/test-runner/5131//#testresult/9c3e97659c2b4c8d","status":"passed","time":{"start":1714075260200,"stop":1714075260389,"duration":189}},{"uid":"371fb299bd58e0d","reportUrl":"https://novasamatech.github.io/test-runner/5130//#testresult/371fb299bd58e0d","status":"passed","time":{"start":1714060857014,"stop":1714060857171,"duration":157}},{"uid":"dd92e8eb1826954f","reportUrl":"https://novasamatech.github.io/test-runner/5129//#testresult/dd92e8eb1826954f","status":"passed","time":{"start":1714046464119,"stop":1714046464282,"duration":163}},{"uid":"ce17a276589cb878","reportUrl":"https://novasamatech.github.io/test-runner/5128//#testresult/ce17a276589cb878","status":"passed","time":{"start":1714032059293,"stop":1714032059537,"duration":244}},{"uid":"9f304872ad5e68b","reportUrl":"https://novasamatech.github.io/test-runner/5127//#testresult/9f304872ad5e68b","status":"passed","time":{"start":1714017661771,"stop":1714017662021,"duration":250}},{"uid":"e8bda1fc01ee458","reportUrl":"https://novasamatech.github.io/test-runner/5126//#testresult/e8bda1fc01ee458","status":"passed","time":{"start":1714003295319,"stop":1714003295946,"duration":627}},{"uid":"ef8a823cac4f618c","reportUrl":"https://novasamatech.github.io/test-runner/5125//#testresult/ef8a823cac4f618c","status":"passed","time":{"start":1713988859232,"stop":1713988859559,"duration":327}},{"uid":"da92113d4b7672f7","reportUrl":"https://novasamatech.github.io/test-runner/5124//#testresult/da92113d4b7672f7","status":"passed","time":{"start":1713974473332,"stop":1713974473648,"duration":316}},{"uid":"4aa22e3d7ecf96eb","reportUrl":"https://novasamatech.github.io/test-runner/5123//#testresult/4aa22e3d7ecf96eb","status":"passed","time":{"start":1713960060300,"stop":1713960060468,"duration":168}},{"uid":"ed06b1418e82a309","reportUrl":"https://novasamatech.github.io/test-runner/5122//#testresult/ed06b1418e82a309","status":"passed","time":{"start":1713945660420,"stop":1713945660998,"duration":578}},{"uid":"2ed492d316e2fc6c","reportUrl":"https://novasamatech.github.io/test-runner/5121//#testresult/2ed492d316e2fc6c","status":"passed","time":{"start":1713931273832,"stop":1713931274594,"duration":762}},{"uid":"cc57b9310e5f5dfa","reportUrl":"https://novasamatech.github.io/test-runner/5120//#testresult/cc57b9310e5f5dfa","status":"passed","time":{"start":1713916900885,"stop":1713916901111,"duration":226}},{"uid":"4525e1364153adc6","reportUrl":"https://novasamatech.github.io/test-runner/5119//#testresult/4525e1364153adc6","status":"passed","time":{"start":1713902463083,"stop":1713902463307,"duration":224}},{"uid":"7bd6a2bb26939cbf","reportUrl":"https://novasamatech.github.io/test-runner/5118//#testresult/7bd6a2bb26939cbf","status":"passed","time":{"start":1713888076028,"stop":1713888076255,"duration":227}}]},"tags":[]},"source":"53c225655439b6cf.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}