{"uid":"ca8dc0e70e3216b4","name":"test_can_create_connection[Test for Subsocial, url: wss://para.subsocial.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"eeff8b834d6317592539220cb3a9b9a2","time":{"start":1683635514915,"stop":1683635514970,"duration":55},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden","statusTrace":"data = {'name': 'Subsocial', 'url': 'wss://para.subsocial.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden","statusTrace":"data = {'name': 'Subsocial', 'url': 'wss://para.subsocial.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"da21029d2c5773d9","name":"stdout","source":"da21029d2c5773d9.txt","type":"text/plain","size":220}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az168-260"},{"name":"thread","value":"2280-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://para.subsocial.network', 'name': 'Subsocial'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2e7f629ac579b77e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden","time":{"start":1683635504662,"stop":1683635504759,"duration":97}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":79,"unknown":0,"total":82},"items":[{"uid":"a061dbccbaa619b5","reportUrl":"https://nova-wallet.github.io/test-runner/2976//#testresult/a061dbccbaa619b5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden","time":{"start":1683619491640,"stop":1683619491672,"duration":32}},{"uid":"2a25eb1b3599657c","reportUrl":"https://nova-wallet.github.io/test-runner/2975//#testresult/2a25eb1b3599657c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 403 Forbidden","time":{"start":1683605085187,"stop":1683605085222,"duration":35}},{"uid":"45e1144e9041f455","reportUrl":"https://nova-wallet.github.io/test-runner/2972//#testresult/45e1144e9041f455","status":"passed","time":{"start":1683561877596,"stop":1683561878127,"duration":531}},{"uid":"57a11752a4fedaad","reportUrl":"https://nova-wallet.github.io/test-runner/2969//#testresult/57a11752a4fedaad","status":"passed","time":{"start":1683518660250,"stop":1683518660541,"duration":291}},{"uid":"a01aa17155d300fc","reportUrl":"https://nova-wallet.github.io/test-runner/2968//#testresult/a01aa17155d300fc","status":"passed","time":{"start":1683504761926,"stop":1683504762248,"duration":322}},{"uid":"a3bee6e297ec202b","reportUrl":"https://nova-wallet.github.io/test-runner/2967//#testresult/a3bee6e297ec202b","status":"passed","time":{"start":1683489844766,"stop":1683489845070,"duration":304}},{"uid":"3c696e86ea0de8a8","reportUrl":"https://nova-wallet.github.io/test-runner/2966//#testresult/3c696e86ea0de8a8","status":"passed","time":{"start":1683475442238,"stop":1683475442514,"duration":276}},{"uid":"fb730aa06df57a7a","reportUrl":"https://nova-wallet.github.io/test-runner/2965//#testresult/fb730aa06df57a7a","status":"passed","time":{"start":1683461100722,"stop":1683461101554,"duration":832}},{"uid":"699ec8e42b2518b4","reportUrl":"https://nova-wallet.github.io/test-runner/2964//#testresult/699ec8e42b2518b4","status":"passed","time":{"start":1683446675844,"stop":1683446676237,"duration":393}},{"uid":"12d17b136a8b164e","reportUrl":"https://nova-wallet.github.io/test-runner/2963//#testresult/12d17b136a8b164e","status":"passed","time":{"start":1683432265986,"stop":1683432266411,"duration":425}},{"uid":"806a464f6f3c25b3","reportUrl":"https://nova-wallet.github.io/test-runner/2962//#testresult/806a464f6f3c25b3","status":"passed","time":{"start":1683418429852,"stop":1683418430155,"duration":303}},{"uid":"d9b887522d264ead","reportUrl":"https://nova-wallet.github.io/test-runner/2961//#testresult/d9b887522d264ead","status":"passed","time":{"start":1683403460926,"stop":1683403461322,"duration":396}},{"uid":"757be2764d0a362b","reportUrl":"https://nova-wallet.github.io/test-runner/2960//#testresult/757be2764d0a362b","status":"passed","time":{"start":1683389042330,"stop":1683389042662,"duration":332}},{"uid":"661bc7487d2ffbea","reportUrl":"https://nova-wallet.github.io/test-runner/2959//#testresult/661bc7487d2ffbea","status":"passed","time":{"start":1683374679091,"stop":1683374679755,"duration":664}},{"uid":"c5dc751f5dbdb3e7","reportUrl":"https://nova-wallet.github.io/test-runner/2958//#testresult/c5dc751f5dbdb3e7","status":"passed","time":{"start":1683360285648,"stop":1683360285925,"duration":277}},{"uid":"591d2105821083b5","reportUrl":"https://nova-wallet.github.io/test-runner/2956//#testresult/591d2105821083b5","status":"passed","time":{"start":1683331963108,"stop":1683331963522,"duration":414}},{"uid":"5471ac8681663993","reportUrl":"https://nova-wallet.github.io/test-runner/2955//#testresult/5471ac8681663993","status":"passed","time":{"start":1683317583300,"stop":1683317583807,"duration":507}},{"uid":"f9b7014c48e2b1ae","reportUrl":"https://nova-wallet.github.io/test-runner/2954//#testresult/f9b7014c48e2b1ae","status":"passed","time":{"start":1683303369813,"stop":1683303370082,"duration":269}},{"uid":"7b0c9415c4d47a09","reportUrl":"https://nova-wallet.github.io/test-runner/2952//#testresult/7b0c9415c4d47a09","status":"passed","time":{"start":1683292448992,"stop":1683292449282,"duration":290}},{"uid":"48ff7926562c1c0d","reportUrl":"https://nova-wallet.github.io/test-runner/2935//#testresult/48ff7926562c1c0d","status":"passed","time":{"start":1683087289458,"stop":1683087289922,"duration":464}}]},"tags":[]},"source":"ca8dc0e70e3216b4.json","parameterValues":["{'url': 'wss://para.subsocial.network', 'name': 'Subsocial'}"]}