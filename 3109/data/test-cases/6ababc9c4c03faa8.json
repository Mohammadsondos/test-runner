{"uid":"6ababc9c4c03faa8","name":"test_can_create_connection[Test for Picasso, url: wss://picasso-rpc.composable.finance]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a99dc3895865408a2004c053a1261232","time":{"start":1685347483096,"stop":1685347483201,"duration":105},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f7131a1e500>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'picasso-rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Picasso', 'url': 'wss://picasso-rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f7131a1e500>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f7131a1e500>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'picasso-rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Picasso', 'url': 'wss://picasso-rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f7131a1e500>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"99793861d0089994","name":"stdout","source":"99793861d0089994.txt","type":"text/plain","size":372}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az626-200"},{"name":"thread","value":"1871-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://picasso-rpc.composable.finance', 'name': 'Picasso'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2d5ab2b3766219d0","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1685347467954,"stop":1685347467994,"duration":40}},{"uid":"820ab03cfbbe9e63","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1685347452608,"stop":1685347452766,"duration":158}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":147,"unknown":0,"total":150},"items":[{"uid":"181354b4baaffc43","reportUrl":"https://nova-wallet.github.io/test-runner/3107//#testresult/181354b4baaffc43","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1685343466192,"stop":1685343466207,"duration":15}},{"uid":"a127c0d147c52704","reportUrl":"https://nova-wallet.github.io/test-runner/3101//#testresult/a127c0d147c52704","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1685333063104,"stop":1685333063129,"duration":25}},{"uid":"62a5328bc6930f4d","reportUrl":"https://nova-wallet.github.io/test-runner/3098//#testresult/62a5328bc6930f4d","status":"passed","time":{"start":1685289881606,"stop":1685289882372,"duration":766}},{"uid":"2016dffc2054b2b5","reportUrl":"https://nova-wallet.github.io/test-runner/3086//#testresult/2016dffc2054b2b5","status":"passed","time":{"start":1685174660194,"stop":1685174661211,"duration":1017}},{"uid":"16516c9e2f019b58","reportUrl":"https://nova-wallet.github.io/test-runner/3083//#testresult/16516c9e2f019b58","status":"passed","time":{"start":1685131445042,"stop":1685131445887,"duration":845}},{"uid":"2c69432611db86aa","reportUrl":"https://nova-wallet.github.io/test-runner/3082//#testresult/2c69432611db86aa","status":"passed","time":{"start":1685117058803,"stop":1685117059661,"duration":858}},{"uid":"2ae9ad87997b24c3","reportUrl":"https://nova-wallet.github.io/test-runner/3081//#testresult/2ae9ad87997b24c3","status":"passed","time":{"start":1685102702421,"stop":1685102703404,"duration":983}},{"uid":"b5c448457427d7d9","reportUrl":"https://nova-wallet.github.io/test-runner/3077//#testresult/b5c448457427d7d9","status":"passed","time":{"start":1685045041198,"stop":1685045042076,"duration":878}},{"uid":"5113aa2a0bc37de9","reportUrl":"https://nova-wallet.github.io/test-runner/3076//#testresult/5113aa2a0bc37de9","status":"passed","time":{"start":1685030665210,"stop":1685030665953,"duration":743}},{"uid":"5450a1c775ffdb6","reportUrl":"https://nova-wallet.github.io/test-runner/3074//#testresult/5450a1c775ffdb6","status":"passed","time":{"start":1685005753262,"stop":1685005754233,"duration":971}},{"uid":"d98b89af44a2ed37","reportUrl":"https://nova-wallet.github.io/test-runner/3054//#testresult/d98b89af44a2ed37","status":"passed","time":{"start":1684742681970,"stop":1684742682904,"duration":934}},{"uid":"f9be77dae35afc46","reportUrl":"https://nova-wallet.github.io/test-runner/3052//#testresult/f9be77dae35afc46","status":"passed","time":{"start":1684714428321,"stop":1684714429374,"duration":1053}},{"uid":"b3f95499dd165791","reportUrl":"https://nova-wallet.github.io/test-runner/3050//#testresult/b3f95499dd165791","status":"passed","time":{"start":1684685049536,"stop":1684685050058,"duration":522}},{"uid":"fce2a59ad69289e6","reportUrl":"https://nova-wallet.github.io/test-runner/3049//#testresult/fce2a59ad69289e6","status":"passed","time":{"start":1684670665085,"stop":1684670665582,"duration":497}},{"uid":"4dc449a5da1bbe32","reportUrl":"https://nova-wallet.github.io/test-runner/3048//#testresult/4dc449a5da1bbe32","status":"passed","time":{"start":1684656276933,"stop":1684656277690,"duration":757}},{"uid":"a596ac435a3765c6","reportUrl":"https://nova-wallet.github.io/test-runner/3047//#testresult/a596ac435a3765c6","status":"passed","time":{"start":1684641841952,"stop":1684641843007,"duration":1055}},{"uid":"1deb8ccca6495e30","reportUrl":"https://nova-wallet.github.io/test-runner/3046//#testresult/1deb8ccca6495e30","status":"passed","time":{"start":1684628062881,"stop":1684628063632,"duration":751}},{"uid":"ddd9a923f5a02fec","reportUrl":"https://nova-wallet.github.io/test-runner/3045//#testresult/ddd9a923f5a02fec","status":"passed","time":{"start":1684613046111,"stop":1684613047001,"duration":890}},{"uid":"cb1e0e8e6671d385","reportUrl":"https://nova-wallet.github.io/test-runner/3044//#testresult/cb1e0e8e6671d385","status":"passed","time":{"start":1684598646369,"stop":1684598647453,"duration":1084}},{"uid":"73c822999580da0c","reportUrl":"https://nova-wallet.github.io/test-runner/3043//#testresult/73c822999580da0c","status":"passed","time":{"start":1684584277053,"stop":1684584277986,"duration":933}}]},"tags":[]},"source":"6ababc9c4c03faa8.json","parameterValues":["{'url': 'wss://picasso-rpc.composable.finance', 'name': 'Picasso'}"]}