{"uid":"b5a23c23175668fb","name":"test_can_create_connection[Test for Pendulum, url: wss://rpc-pendulum.prd.pendulumchain.tech]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9556d02acce7432224d0012965c21eef","time":{"start":1677312351556,"stop":1677312351780,"duration":224},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'Pendulum', 'url': 'wss://rpc-pendulum.prd.pendulumchain.tech'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'Pendulum', 'url': 'wss://rpc-pendulum.prd.pendulumchain.tech'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"bd42a1dd5de4eae0","name":"stdout","source":"bd42a1dd5de4eae0.txt","type":"text/plain","size":250}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az168-854"},{"name":"thread","value":"1719-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-pendulum.prd.pendulumchain.tech', 'name': 'Pendulum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"20aed82d7fd55770","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1677312341241,"stop":1677312341475,"duration":234}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":31,"unknown":0,"total":32},"items":[{"uid":"37fe62f05711313e","reportUrl":"https://nova-wallet.github.io/test-runner/2529//#testresult/37fe62f05711313e","status":"passed","time":{"start":1677297896781,"stop":1677297896840,"duration":59}},{"uid":"8b95ab29ca974017","reportUrl":"https://nova-wallet.github.io/test-runner/2528//#testresult/8b95ab29ca974017","status":"passed","time":{"start":1677284130275,"stop":1677284130336,"duration":61}},{"uid":"15a131fa6524903d","reportUrl":"https://nova-wallet.github.io/test-runner/2527//#testresult/15a131fa6524903d","status":"passed","time":{"start":1677269121060,"stop":1677269121404,"duration":344}},{"uid":"92fa64e7670065ca","reportUrl":"https://nova-wallet.github.io/test-runner/2526//#testresult/92fa64e7670065ca","status":"passed","time":{"start":1677254721074,"stop":1677254721343,"duration":269}},{"uid":"2f1b366c29f59efa","reportUrl":"https://nova-wallet.github.io/test-runner/2525//#testresult/2f1b366c29f59efa","status":"passed","time":{"start":1677240390841,"stop":1677240391133,"duration":292}},{"uid":"4c7b6c082af4bba9","reportUrl":"https://nova-wallet.github.io/test-runner/2524//#testresult/4c7b6c082af4bba9","status":"passed","time":{"start":1677225945553,"stop":1677225945911,"duration":358}},{"uid":"29f8a4ba49d28ca1","reportUrl":"https://nova-wallet.github.io/test-runner/2523//#testresult/29f8a4ba49d28ca1","status":"passed","time":{"start":1677211526738,"stop":1677211527002,"duration":264}},{"uid":"5a40e3cee636a66a","reportUrl":"https://nova-wallet.github.io/test-runner/2522//#testresult/5a40e3cee636a66a","status":"passed","time":{"start":1677197697873,"stop":1677197698274,"duration":401}},{"uid":"cff53f0247de4954","reportUrl":"https://nova-wallet.github.io/test-runner/2521//#testresult/cff53f0247de4954","status":"passed","time":{"start":1677182720813,"stop":1677182721188,"duration":375}},{"uid":"bb0341ebdcc00eff","reportUrl":"https://nova-wallet.github.io/test-runner/2520//#testresult/bb0341ebdcc00eff","status":"passed","time":{"start":1677168298757,"stop":1677168298844,"duration":87}},{"uid":"c048208cdacf549e","reportUrl":"https://nova-wallet.github.io/test-runner/2519//#testresult/c048208cdacf549e","status":"passed","time":{"start":1677154031499,"stop":1677154031871,"duration":372}},{"uid":"8f3a077e15ccece1","reportUrl":"https://nova-wallet.github.io/test-runner/2518//#testresult/8f3a077e15ccece1","status":"passed","time":{"start":1677139530739,"stop":1677139531052,"duration":313}},{"uid":"9e51b2f14e20c9ff","reportUrl":"https://nova-wallet.github.io/test-runner/2517//#testresult/9e51b2f14e20c9ff","status":"passed","time":{"start":1677125126253,"stop":1677125126666,"duration":413}},{"uid":"6856f90bcc86978a","reportUrl":"https://nova-wallet.github.io/test-runner/2516//#testresult/6856f90bcc86978a","status":"passed","time":{"start":1677111360626,"stop":1677111360971,"duration":345}},{"uid":"f15568d34ba36927","reportUrl":"https://nova-wallet.github.io/test-runner/2515//#testresult/f15568d34ba36927","status":"passed","time":{"start":1677096310931,"stop":1677096311002,"duration":71}},{"uid":"38b78b8efe69ec72","reportUrl":"https://nova-wallet.github.io/test-runner/2514//#testresult/38b78b8efe69ec72","status":"passed","time":{"start":1677081941148,"stop":1677081941638,"duration":490}},{"uid":"3e43e0bdcb7457a1","reportUrl":"https://nova-wallet.github.io/test-runner/2513//#testresult/3e43e0bdcb7457a1","status":"passed","time":{"start":1677067587626,"stop":1677067587714,"duration":88}},{"uid":"5331d7db38b5a1ed","reportUrl":"https://nova-wallet.github.io/test-runner/2512//#testresult/5331d7db38b5a1ed","status":"passed","time":{"start":1677053156808,"stop":1677053157169,"duration":361}},{"uid":"d7ffd6ef0e18d7a2","reportUrl":"https://nova-wallet.github.io/test-runner/2511//#testresult/d7ffd6ef0e18d7a2","status":"passed","time":{"start":1677038722777,"stop":1677038723178,"duration":401}},{"uid":"d390e9e358e1496d","reportUrl":"https://nova-wallet.github.io/test-runner/2510//#testresult/d390e9e358e1496d","status":"passed","time":{"start":1677024856060,"stop":1677024856338,"duration":278}}]},"tags":[]},"source":"b5a23c23175668fb.json","parameterValues":["{'url': 'wss://rpc-pendulum.prd.pendulumchain.tech', 'name': 'Pendulum'}"]}