{"uid":"bcfece47d2efcc56","name":"test_can_create_connection[Test for Parallel Heiko, url: wss://heiko-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"8fa31f697c1af35d83c08e74e8150e6e","time":{"start":1677297853146,"stop":1677297853250,"duration":104},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'heiko-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f238cfa2560>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'heiko-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Parallel Heiko', 'url': 'wss://heiko-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'heiko-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f238cfa2560>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'heiko-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f238cfa2560>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'heiko-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Parallel Heiko', 'url': 'wss://heiko-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'heiko-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f238cfa2560>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"39afe9ca1bb7dc74","name":"stdout","source":"39afe9ca1bb7dc74.txt","type":"text/plain","size":230}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az251-3"},{"name":"thread","value":"1733-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://heiko-rpc.dwellir.com', 'name': 'Parallel Heiko'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d736a639d4bbb0d7","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677297842914,"stop":1677297843013,"duration":99}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":31,"skipped":0,"passed":0,"unknown":0,"total":31},"items":[{"uid":"a716c3a8ca8d64a3","reportUrl":"https://nova-wallet.github.io/test-runner/2528//#testresult/a716c3a8ca8d64a3","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677284082456,"stop":1677284082522,"duration":66}},{"uid":"fbea1e404c8c1c6b","reportUrl":"https://nova-wallet.github.io/test-runner/2527//#testresult/fbea1e404c8c1c6b","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677269066005,"stop":1677269066054,"duration":49}},{"uid":"2149f33af7749f92","reportUrl":"https://nova-wallet.github.io/test-runner/2526//#testresult/2149f33af7749f92","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677254665473,"stop":1677254665549,"duration":76}},{"uid":"8df98e003628e7a0","reportUrl":"https://nova-wallet.github.io/test-runner/2525//#testresult/8df98e003628e7a0","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677240333705,"stop":1677240333794,"duration":89}},{"uid":"4d8a52ff5b40b705","reportUrl":"https://nova-wallet.github.io/test-runner/2524//#testresult/4d8a52ff5b40b705","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677225874607,"stop":1677225874651,"duration":44}},{"uid":"1fab5846fd32713d","reportUrl":"https://nova-wallet.github.io/test-runner/2523//#testresult/1fab5846fd32713d","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677211452521,"stop":1677211452594,"duration":73}},{"uid":"2f341daf5705b185","reportUrl":"https://nova-wallet.github.io/test-runner/2522//#testresult/2f341daf5705b185","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677197647147,"stop":1677197647197,"duration":50}},{"uid":"1852899009f8c544","reportUrl":"https://nova-wallet.github.io/test-runner/2521//#testresult/1852899009f8c544","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677182648501,"stop":1677182648556,"duration":55}},{"uid":"511597798279b3e1","reportUrl":"https://nova-wallet.github.io/test-runner/2520//#testresult/511597798279b3e1","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677168251324,"stop":1677168251424,"duration":100}},{"uid":"1158a2b125a07a53","reportUrl":"https://nova-wallet.github.io/test-runner/2519//#testresult/1158a2b125a07a53","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677153971018,"stop":1677153971118,"duration":100}},{"uid":"b8de068b78dabf4","reportUrl":"https://nova-wallet.github.io/test-runner/2518//#testresult/b8de068b78dabf4","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677139469246,"stop":1677139469307,"duration":61}},{"uid":"ba44b4b3e04485c8","reportUrl":"https://nova-wallet.github.io/test-runner/2517//#testresult/ba44b4b3e04485c8","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677125054852,"stop":1677125054981,"duration":129}},{"uid":"20d01a8c73ea6f19","reportUrl":"https://nova-wallet.github.io/test-runner/2516//#testresult/20d01a8c73ea6f19","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677111313520,"stop":1677111313643,"duration":123}},{"uid":"b0b6d7dc923844e9","reportUrl":"https://nova-wallet.github.io/test-runner/2515//#testresult/b0b6d7dc923844e9","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677096245984,"stop":1677096246099,"duration":115}},{"uid":"2b9388d3b4252ec","reportUrl":"https://nova-wallet.github.io/test-runner/2514//#testresult/2b9388d3b4252ec","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677081866200,"stop":1677081866238,"duration":38}},{"uid":"2dac361c13933d34","reportUrl":"https://nova-wallet.github.io/test-runner/2513//#testresult/2dac361c13933d34","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677067528541,"stop":1677067528580,"duration":39}},{"uid":"5099b563a43f7f77","reportUrl":"https://nova-wallet.github.io/test-runner/2512//#testresult/5099b563a43f7f77","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677053093688,"stop":1677053093704,"duration":16}},{"uid":"86fc40d6daefa760","reportUrl":"https://nova-wallet.github.io/test-runner/2511//#testresult/86fc40d6daefa760","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677038670948,"stop":1677038671107,"duration":159}},{"uid":"44468deabef8bf7c","reportUrl":"https://nova-wallet.github.io/test-runner/2510//#testresult/44468deabef8bf7c","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677024810650,"stop":1677024810723,"duration":73}},{"uid":"fa78ac114df12575","reportUrl":"https://nova-wallet.github.io/test-runner/2509//#testresult/fa78ac114df12575","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677009848256,"stop":1677009848312,"duration":56}}]},"tags":[]},"source":"bcfece47d2efcc56.json","parameterValues":["{'url': 'wss://heiko-rpc.dwellir.com', 'name': 'Parallel Heiko'}"]}