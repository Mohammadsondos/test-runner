{"uid":"7bb923168fcbb79d","name":"test_can_create_connection[Test for Acala, url: wss://acala-rpc-1.aca-api.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"d540b13063feb2f835f8f0383eff06ca","time":{"start":1690056389609,"stop":1690056449823,"duration":60214},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc-1.aca-api.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc-1.aca-api.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"a260be45aa0c609e","name":"stdout","source":"a260be45aa0c609e.txt","type":"text/plain","size":360}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1125-465"},{"name":"thread","value":"1924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://acala-rpc-1.aca-api.network', 'name': 'Acala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8a7e302684d1b3d7","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1690056314254,"stop":1690056374444,"duration":60190}},{"uid":"13c2c5716bebfd0a","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1690056238797,"stop":1690056299009,"duration":60212}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":439,"unknown":0,"total":441},"items":[{"uid":"7e162bf6ab4a2936","reportUrl":"https://novasamatech.github.io/test-runner/3435//#testresult/7e162bf6ab4a2936","status":"passed","time":{"start":1690041825371,"stop":1690041825513,"duration":142}},{"uid":"2633b0072e37ab11","reportUrl":"https://novasamatech.github.io/test-runner/3434//#testresult/2633b0072e37ab11","status":"passed","time":{"start":1690027462411,"stop":1690027462791,"duration":380}},{"uid":"4d29a6c281a99241","reportUrl":"https://novasamatech.github.io/test-runner/3433//#testresult/4d29a6c281a99241","status":"passed","time":{"start":1690013062979,"stop":1690013063280,"duration":301}},{"uid":"43d5aa1d5eaebf75","reportUrl":"https://novasamatech.github.io/test-runner/3432//#testresult/43d5aa1d5eaebf75","status":"passed","time":{"start":1689998629861,"stop":1689998629950,"duration":89}},{"uid":"3f5ba17a26384efa","reportUrl":"https://novasamatech.github.io/test-runner/3431//#testresult/3f5ba17a26384efa","status":"passed","time":{"start":1689984831136,"stop":1689984831262,"duration":126}},{"uid":"6cc66d20a735bc4","reportUrl":"https://novasamatech.github.io/test-runner/3430//#testresult/6cc66d20a735bc4","status":"passed","time":{"start":1689969850658,"stop":1689969851276,"duration":618}},{"uid":"852772dc62bc48e0","reportUrl":"https://novasamatech.github.io/test-runner/3429//#testresult/852772dc62bc48e0","status":"passed","time":{"start":1689955451024,"stop":1689955451372,"duration":348}},{"uid":"a72dd00c8b4aaca6","reportUrl":"https://novasamatech.github.io/test-runner/3428//#testresult/a72dd00c8b4aaca6","status":"passed","time":{"start":1689941107121,"stop":1689941107514,"duration":393}},{"uid":"e76a54c2a2293cab","reportUrl":"https://novasamatech.github.io/test-runner/3427//#testresult/e76a54c2a2293cab","status":"passed","time":{"start":1689926660989,"stop":1689926661364,"duration":375}},{"uid":"10e61e319122b3e2","reportUrl":"https://novasamatech.github.io/test-runner/3426//#testresult/10e61e319122b3e2","status":"passed","time":{"start":1689912239594,"stop":1689912239812,"duration":218}},{"uid":"427cc4b3267affaa","reportUrl":"https://novasamatech.github.io/test-runner/3425//#testresult/427cc4b3267affaa","status":"passed","time":{"start":1689898446192,"stop":1689898446438,"duration":246}},{"uid":"360f7e8a962f9aeb","reportUrl":"https://novasamatech.github.io/test-runner/3424//#testresult/360f7e8a962f9aeb","status":"passed","time":{"start":1689883449737,"stop":1689883450020,"duration":283}},{"uid":"dff7bd71bc50473c","reportUrl":"https://novasamatech.github.io/test-runner/3423//#testresult/dff7bd71bc50473c","status":"passed","time":{"start":1689869061689,"stop":1689869062053,"duration":364}},{"uid":"c55e23f4dcaf794","reportUrl":"https://novasamatech.github.io/test-runner/3422//#testresult/c55e23f4dcaf794","status":"passed","time":{"start":1689854708058,"stop":1689854708312,"duration":254}},{"uid":"781c9970d6ada163","reportUrl":"https://novasamatech.github.io/test-runner/3421//#testresult/781c9970d6ada163","status":"passed","time":{"start":1689840254645,"stop":1689840254735,"duration":90}},{"uid":"e652b52662ff2bba","reportUrl":"https://novasamatech.github.io/test-runner/3420//#testresult/e652b52662ff2bba","status":"passed","time":{"start":1689825837521,"stop":1689825837638,"duration":117}},{"uid":"712c75f1ea45959a","reportUrl":"https://novasamatech.github.io/test-runner/3419//#testresult/712c75f1ea45959a","status":"passed","time":{"start":1689812073020,"stop":1689812073392,"duration":372}},{"uid":"f6a3dba2c759473","reportUrl":"https://novasamatech.github.io/test-runner/3418//#testresult/f6a3dba2c759473","status":"passed","time":{"start":1689797051003,"stop":1689797051500,"duration":497}},{"uid":"585941f7bf8088c4","reportUrl":"https://novasamatech.github.io/test-runner/3417//#testresult/585941f7bf8088c4","status":"passed","time":{"start":1689782645106,"stop":1689782645439,"duration":333}},{"uid":"f3bd39c7568e3abe","reportUrl":"https://novasamatech.github.io/test-runner/3416//#testresult/f3bd39c7568e3abe","status":"passed","time":{"start":1689768304426,"stop":1689768304519,"duration":93}}]},"tags":[]},"source":"7bb923168fcbb79d.json","parameterValues":["{'url': 'wss://acala-rpc-1.aca-api.network', 'name': 'Acala'}"]}