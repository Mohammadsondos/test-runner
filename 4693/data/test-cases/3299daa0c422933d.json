{"uid":"3299daa0c422933d","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1707840074989,"stop":1707840075032,"duration":43},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f490c271ab0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f490c107bb0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f490c107b50>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az777-201"},{"name":"thread","value":"2035-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"68ffaa15bae194fc","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707840069920,"stop":1707840069954,"duration":34}},{"uid":"f23bf7dbcb0c21fe","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707840064742,"stop":1707840064803,"duration":61}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":4,"skipped":0,"passed":877,"unknown":0,"total":884},"items":[{"uid":"28fc5ae038ad0158","reportUrl":"https://novasamatech.github.io/test-runner/4692//#testresult/28fc5ae038ad0158","status":"passed","time":{"start":1707825672172,"stop":1707825672854,"duration":682}},{"uid":"a5d0db94d45e5f6","reportUrl":"https://novasamatech.github.io/test-runner/4691//#testresult/a5d0db94d45e5f6","status":"passed","time":{"start":1707811264570,"stop":1707811265294,"duration":724}},{"uid":"64a5b1ee7bc7ee27","reportUrl":"https://novasamatech.github.io/test-runner/4690//#testresult/64a5b1ee7bc7ee27","status":"passed","time":{"start":1707796863826,"stop":1707796864117,"duration":291}},{"uid":"718cfaa07ed7a85e","reportUrl":"https://novasamatech.github.io/test-runner/4689//#testresult/718cfaa07ed7a85e","status":"passed","time":{"start":1707782500900,"stop":1707782501059,"duration":159}},{"uid":"9ece846e8c25899f","reportUrl":"https://novasamatech.github.io/test-runner/4688//#testresult/9ece846e8c25899f","status":"passed","time":{"start":1707768056239,"stop":1707768056456,"duration":217}},{"uid":"7b7f7c25dc40df8b","reportUrl":"https://novasamatech.github.io/test-runner/4687//#testresult/7b7f7c25dc40df8b","status":"passed","time":{"start":1707753661695,"stop":1707753662500,"duration":805}},{"uid":"b6141127318add59","reportUrl":"https://novasamatech.github.io/test-runner/4686//#testresult/b6141127318add59","status":"passed","time":{"start":1707739261273,"stop":1707739261563,"duration":290}},{"uid":"c4a99323d4e292b4","reportUrl":"https://novasamatech.github.io/test-runner/4685//#testresult/c4a99323d4e292b4","status":"passed","time":{"start":1707724866056,"stop":1707724866352,"duration":296}},{"uid":"3a6e73d14c17389c","reportUrl":"https://novasamatech.github.io/test-runner/4684//#testresult/3a6e73d14c17389c","status":"passed","time":{"start":1707710469190,"stop":1707710469813,"duration":623}},{"uid":"a920a0a131fb2325","reportUrl":"https://novasamatech.github.io/test-runner/4683//#testresult/a920a0a131fb2325","status":"passed","time":{"start":1707696114153,"stop":1707696114738,"duration":585}},{"uid":"4d088f91d3009084","reportUrl":"https://novasamatech.github.io/test-runner/4682//#testresult/4d088f91d3009084","status":"passed","time":{"start":1707681665519,"stop":1707681665911,"duration":392}},{"uid":"beb9522c02f3ac00","reportUrl":"https://novasamatech.github.io/test-runner/4681//#testresult/beb9522c02f3ac00","status":"passed","time":{"start":1707667257525,"stop":1707667257682,"duration":157}},{"uid":"14bafae76008ffd","reportUrl":"https://novasamatech.github.io/test-runner/4680//#testresult/14bafae76008ffd","status":"passed","time":{"start":1707652859214,"stop":1707652859523,"duration":309}},{"uid":"e40c18222b63ec67","reportUrl":"https://novasamatech.github.io/test-runner/4678//#testresult/e40c18222b63ec67","status":"passed","time":{"start":1707624069815,"stop":1707624070490,"duration":675}},{"uid":"9ec5961a4fd2c2f","reportUrl":"https://novasamatech.github.io/test-runner/4679//#testresult/9ec5961a4fd2c2f","status":"passed","time":{"start":1707638461198,"stop":1707638461536,"duration":338}},{"uid":"8c5994dfc28038b9","reportUrl":"https://novasamatech.github.io/test-runner/4677//#testresult/8c5994dfc28038b9","status":"passed","time":{"start":1707609708623,"stop":1707609708954,"duration":331}},{"uid":"f7066f8dcce54a83","reportUrl":"https://novasamatech.github.io/test-runner/4676//#testresult/f7066f8dcce54a83","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707595294383,"stop":1707595294762,"duration":379}},{"uid":"75e93e6ba10aa02c","reportUrl":"https://novasamatech.github.io/test-runner/4675//#testresult/75e93e6ba10aa02c","status":"passed","time":{"start":1707580862995,"stop":1707580863705,"duration":710}},{"uid":"6460426e4cf2c6c1","reportUrl":"https://novasamatech.github.io/test-runner/4674//#testresult/6460426e4cf2c6c1","status":"passed","time":{"start":1707566460985,"stop":1707566461189,"duration":204}},{"uid":"e5ca01ec20894979","reportUrl":"https://novasamatech.github.io/test-runner/4673//#testresult/e5ca01ec20894979","status":"passed","time":{"start":1707552064489,"stop":1707552064777,"duration":288}}]},"tags":[]},"source":"3299daa0c422933d.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}