{"uid":"7785ac51c69a0ebb","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1707840074831,"stop":1707840074885,"duration":54},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f2ecf23b940>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f2eccfbe740>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f2eccfbeda0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az777-201"},{"name":"thread","value":"2032-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8549722e42a58864","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707840069742,"stop":1707840069797,"duration":55}},{"uid":"4dc93f36f0946ee1","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707840064557,"stop":1707840064623,"duration":66}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":4,"skipped":0,"passed":879,"unknown":0,"total":884},"items":[{"uid":"fc2327160caded7c","reportUrl":"https://novasamatech.github.io/test-runner/4692//#testresult/fc2327160caded7c","status":"passed","time":{"start":1707825671984,"stop":1707825672573,"duration":589}},{"uid":"1fd00bfd0feb8aad","reportUrl":"https://novasamatech.github.io/test-runner/4691//#testresult/1fd00bfd0feb8aad","status":"passed","time":{"start":1707811264219,"stop":1707811264801,"duration":582}},{"uid":"dea5b8b4b9478add","reportUrl":"https://novasamatech.github.io/test-runner/4690//#testresult/dea5b8b4b9478add","status":"passed","time":{"start":1707796869076,"stop":1707796869287,"duration":211}},{"uid":"f628a573ef4d0ccf","reportUrl":"https://novasamatech.github.io/test-runner/4689//#testresult/f628a573ef4d0ccf","status":"passed","time":{"start":1707782500037,"stop":1707782500386,"duration":349}},{"uid":"d2b5dbe0878892a5","reportUrl":"https://novasamatech.github.io/test-runner/4688//#testresult/d2b5dbe0878892a5","status":"passed","time":{"start":1707768055918,"stop":1707768056195,"duration":277}},{"uid":"b7c57cd5cb96da35","reportUrl":"https://novasamatech.github.io/test-runner/4687//#testresult/b7c57cd5cb96da35","status":"passed","time":{"start":1707753661557,"stop":1707753662146,"duration":589}},{"uid":"a93062ba16a0503","reportUrl":"https://novasamatech.github.io/test-runner/4686//#testresult/a93062ba16a0503","status":"passed","time":{"start":1707739261337,"stop":1707739261671,"duration":334}},{"uid":"59781a09bc6f4469","reportUrl":"https://novasamatech.github.io/test-runner/4685//#testresult/59781a09bc6f4469","status":"passed","time":{"start":1707724865962,"stop":1707724866236,"duration":274}},{"uid":"e912fbd186cd0a9","reportUrl":"https://novasamatech.github.io/test-runner/4684//#testresult/e912fbd186cd0a9","status":"passed","time":{"start":1707710468453,"stop":1707710468978,"duration":525}},{"uid":"6aa8d160938c6bee","reportUrl":"https://novasamatech.github.io/test-runner/4683//#testresult/6aa8d160938c6bee","status":"passed","time":{"start":1707696113637,"stop":1707696114265,"duration":628}},{"uid":"34fdf52f2c40c5b4","reportUrl":"https://novasamatech.github.io/test-runner/4682//#testresult/34fdf52f2c40c5b4","status":"passed","time":{"start":1707681654987,"stop":1707681655301,"duration":314}},{"uid":"be308201b0816010","reportUrl":"https://novasamatech.github.io/test-runner/4681//#testresult/be308201b0816010","status":"passed","time":{"start":1707667257548,"stop":1707667257747,"duration":199}},{"uid":"e929f0e89d26ef33","reportUrl":"https://novasamatech.github.io/test-runner/4680//#testresult/e929f0e89d26ef33","status":"passed","time":{"start":1707652859355,"stop":1707652859638,"duration":283}},{"uid":"d070719fee33bad1","reportUrl":"https://novasamatech.github.io/test-runner/4678//#testresult/d070719fee33bad1","status":"passed","time":{"start":1707624069213,"stop":1707624069832,"duration":619}},{"uid":"a851800daf28281e","reportUrl":"https://novasamatech.github.io/test-runner/4679//#testresult/a851800daf28281e","status":"passed","time":{"start":1707638460699,"stop":1707638461043,"duration":344}},{"uid":"685e15f786200b80","reportUrl":"https://novasamatech.github.io/test-runner/4677//#testresult/685e15f786200b80","status":"passed","time":{"start":1707609708519,"stop":1707609708804,"duration":285}},{"uid":"f37ba7e91d2a24dd","reportUrl":"https://novasamatech.github.io/test-runner/4676//#testresult/f37ba7e91d2a24dd","status":"passed","time":{"start":1707595270176,"stop":1707595270826,"duration":650}},{"uid":"c3076bf3823c8072","reportUrl":"https://novasamatech.github.io/test-runner/4675//#testresult/c3076bf3823c8072","status":"passed","time":{"start":1707580862456,"stop":1707580863116,"duration":660}},{"uid":"aee6a3081110e7cf","reportUrl":"https://novasamatech.github.io/test-runner/4674//#testresult/aee6a3081110e7cf","status":"passed","time":{"start":1707566466314,"stop":1707566466523,"duration":209}},{"uid":"af347d52ed16a453","reportUrl":"https://novasamatech.github.io/test-runner/4673//#testresult/af347d52ed16a453","status":"passed","time":{"start":1707552064432,"stop":1707552064711,"duration":279}}]},"tags":[]},"source":"7785ac51c69a0ebb.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}