{"uid":"8a93174dad9c8bd4","name":"test_can_create_connection[Test for Crab, url: wss://darwiniacrab-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"43bb4e4c68b5681eefac14319069a456","time":{"start":1693958676600,"stop":1693958679969,"duration":3369},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Crab', 'url': 'wss://darwiniacrab-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","statusTrace":"data = {'name': 'Crab', 'url': 'wss://darwiniacrab-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b1dbda60c6f8c68a","name":"stdout","source":"b1dbda60c6f8c68a.txt","type":"text/plain","size":606}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az358-171"},{"name":"thread","value":"2044-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://darwiniacrab-rpc.dwellir.com', 'name': 'Crab'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ef338e9251119dee","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693958658092,"stop":1693958661486,"duration":3394}},{"uid":"1735f35ece0ac123","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693958639662,"stop":1693958643016,"duration":3354}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":67,"unknown":0,"total":76},"items":[{"uid":"5c1e1a9709325a3c","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/5c1e1a9709325a3c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693944171741,"stop":1693944175153,"duration":3412}},{"uid":"9994e632a8d33a4","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/9994e632a8d33a4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693929820990,"stop":1693929824330,"duration":3340}},{"uid":"4fdd6e94597e1c35","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/4fdd6e94597e1c35","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693915849302,"stop":1693915852797,"duration":3495}},{"uid":"51e109c641a74bef","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/51e109c641a74bef","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693901070403,"stop":1693901073952,"duration":3549}},{"uid":"13fcd9aa44d315b5","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/13fcd9aa44d315b5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693872225142,"stop":1693872228602,"duration":3460}},{"uid":"c9a688ae99385270","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/c9a688ae99385270","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693857773839,"stop":1693857777187,"duration":3348}},{"uid":"86731fb5887ead0d","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/86731fb5887ead0d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693843385696,"stop":1693843389195,"duration":3499}},{"uid":"a3edc0677e71c43e","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/a3edc0677e71c43e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- None","time":{"start":1693828975792,"stop":1693828979267,"duration":3475}},{"uid":"711ac6003ec7b401","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/711ac6003ec7b401","status":"passed","time":{"start":1693814548920,"stop":1693814549740,"duration":820}},{"uid":"ec3b9b3ff0bfa953","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/ec3b9b3ff0bfa953","status":"passed","time":{"start":1693800105555,"stop":1693800106156,"duration":601}},{"uid":"816eb064a28493c8","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/816eb064a28493c8","status":"passed","time":{"start":1693785773416,"stop":1693785774197,"duration":781}},{"uid":"89fbc9c7da9aa790","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/89fbc9c7da9aa790","status":"passed","time":{"start":1693771360792,"stop":1693771361398,"duration":606}},{"uid":"78f89f74466d29b8","reportUrl":"https://novasamatech.github.io/test-runner/3701//#testresult/78f89f74466d29b8","status":"passed","time":{"start":1693756919068,"stop":1693756919853,"duration":785}},{"uid":"3f4885f051d72bc6","reportUrl":"https://novasamatech.github.io/test-runner/3700//#testresult/3f4885f051d72bc6","status":"passed","time":{"start":1693742549171,"stop":1693742549765,"duration":594}},{"uid":"69a65151af13ab60","reportUrl":"https://novasamatech.github.io/test-runner/3699//#testresult/69a65151af13ab60","status":"passed","time":{"start":1693728133090,"stop":1693728133587,"duration":497}},{"uid":"a4681b0ab93c83c0","reportUrl":"https://novasamatech.github.io/test-runner/3698//#testresult/a4681b0ab93c83c0","status":"passed","time":{"start":1693713725438,"stop":1693713726009,"duration":571}},{"uid":"caf69eb1f9ef74bc","reportUrl":"https://novasamatech.github.io/test-runner/3697//#testresult/caf69eb1f9ef74bc","status":"passed","time":{"start":1693699355336,"stop":1693699355807,"duration":471}},{"uid":"4ecacb1e1b9566a8","reportUrl":"https://novasamatech.github.io/test-runner/3696//#testresult/4ecacb1e1b9566a8","status":"passed","time":{"start":1693684917865,"stop":1693684918475,"duration":610}},{"uid":"436184456c0e3d48","reportUrl":"https://novasamatech.github.io/test-runner/3695//#testresult/436184456c0e3d48","status":"passed","time":{"start":1693670510932,"stop":1693670511438,"duration":506}},{"uid":"cf869ae49ce0f390","reportUrl":"https://novasamatech.github.io/test-runner/3694//#testresult/cf869ae49ce0f390","status":"passed","time":{"start":1693656110250,"stop":1693656110814,"duration":564}}]},"tags":[]},"source":"8a93174dad9c8bd4.json","parameterValues":["{'url': 'wss://darwiniacrab-rpc.dwellir.com', 'name': 'Crab'}"]}