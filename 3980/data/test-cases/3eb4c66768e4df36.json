{"uid":"3eb4c66768e4df36","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1697745737124,"stop":1697745737403,"duration":279},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 19 Oct 2023 20:02:17 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 19 Oct 2023 20:02:17 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 19 Oct 2023 20:02:17 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 19 Oct 2023 20:02:17 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"5a07f417d2d105fe","name":"stdout","source":"5a07f417d2d105fe.txt","type":"text/plain","size":1464}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az440-256"},{"name":"thread","value":"2085-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"194203c4e9050172","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 19 Oct 2023 20:02:01 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1697745721685,"stop":1697745721969,"duration":284}},{"uid":"476def6209b4f606","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 19 Oct 2023 20:01:46 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1697745706088,"stop":1697745706490,"duration":402}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":45,"skipped":0,"passed":295,"unknown":0,"total":340},"items":[{"uid":"f55ddaddd28be8a2","reportUrl":"https://novasamatech.github.io/test-runner/3979//#testresult/f55ddaddd28be8a2","status":"passed","time":{"start":1697731312861,"stop":1697731313433,"duration":572}},{"uid":"a4f5560b235e2a6e","reportUrl":"https://novasamatech.github.io/test-runner/3978//#testresult/a4f5560b235e2a6e","status":"passed","time":{"start":1697716939582,"stop":1697716940073,"duration":491}},{"uid":"18643a5ca42d8d62","reportUrl":"https://novasamatech.github.io/test-runner/3977//#testresult/18643a5ca42d8d62","status":"passed","time":{"start":1697702500254,"stop":1697702500627,"duration":373}},{"uid":"ff261ec5b0fbe696","reportUrl":"https://novasamatech.github.io/test-runner/3976//#testresult/ff261ec5b0fbe696","status":"passed","time":{"start":1697688129948,"stop":1697688130610,"duration":662}},{"uid":"9d8557d3ed470243","reportUrl":"https://novasamatech.github.io/test-runner/3975//#testresult/9d8557d3ed470243","status":"passed","time":{"start":1697673733128,"stop":1697673733509,"duration":381}},{"uid":"2a7cadfbf9004313","reportUrl":"https://novasamatech.github.io/test-runner/3974//#testresult/2a7cadfbf9004313","status":"passed","time":{"start":1697659319868,"stop":1697659320256,"duration":388}},{"uid":"74a4dbb9351abac7","reportUrl":"https://novasamatech.github.io/test-runner/3973//#testresult/74a4dbb9351abac7","status":"passed","time":{"start":1697644901238,"stop":1697644901624,"duration":386}},{"uid":"7626b25d91284377","reportUrl":"https://novasamatech.github.io/test-runner/3972//#testresult/7626b25d91284377","status":"passed","time":{"start":1697630523846,"stop":1697630524512,"duration":666}},{"uid":"e68b2d17e7b10d4b","reportUrl":"https://novasamatech.github.io/test-runner/3971//#testresult/e68b2d17e7b10d4b","status":"passed","time":{"start":1697616098338,"stop":1697616098898,"duration":560}},{"uid":"480dc92c69ee522c","reportUrl":"https://novasamatech.github.io/test-runner/3970//#testresult/480dc92c69ee522c","status":"passed","time":{"start":1697601701622,"stop":1697601702171,"duration":549}},{"uid":"651c2f168dd321b","reportUrl":"https://novasamatech.github.io/test-runner/3969//#testresult/651c2f168dd321b","status":"passed","time":{"start":1697587356541,"stop":1697587357201,"duration":660}},{"uid":"aaf238d9fd1b439a","reportUrl":"https://novasamatech.github.io/test-runner/3968//#testresult/aaf238d9fd1b439a","status":"passed","time":{"start":1697572895558,"stop":1697572895941,"duration":383}},{"uid":"679cf96d25eb4f1d","reportUrl":"https://novasamatech.github.io/test-runner/3967//#testresult/679cf96d25eb4f1d","status":"passed","time":{"start":1697558518306,"stop":1697558518685,"duration":379}},{"uid":"41683e117a3456be","reportUrl":"https://novasamatech.github.io/test-runner/3966//#testresult/41683e117a3456be","status":"passed","time":{"start":1697544108407,"stop":1697544108806,"duration":399}},{"uid":"75f463902b07bd2f","reportUrl":"https://novasamatech.github.io/test-runner/3965//#testresult/75f463902b07bd2f","status":"passed","time":{"start":1697529699918,"stop":1697529700469,"duration":551}},{"uid":"afab9c716c252ed","reportUrl":"https://novasamatech.github.io/test-runner/3964//#testresult/afab9c716c252ed","status":"passed","time":{"start":1697515292486,"stop":1697515292872,"duration":386}},{"uid":"70900b31b30061fe","reportUrl":"https://novasamatech.github.io/test-runner/3963//#testresult/70900b31b30061fe","status":"passed","time":{"start":1697500943605,"stop":1697500944163,"duration":558}},{"uid":"c93271e1f572bc66","reportUrl":"https://novasamatech.github.io/test-runner/3962//#testresult/c93271e1f572bc66","status":"passed","time":{"start":1697486502561,"stop":1697486502945,"duration":384}},{"uid":"df8ff1d53e431fd","reportUrl":"https://novasamatech.github.io/test-runner/3961//#testresult/df8ff1d53e431fd","status":"passed","time":{"start":1697472126257,"stop":1697472126767,"duration":510}},{"uid":"32912ee032ec0304","reportUrl":"https://novasamatech.github.io/test-runner/3960//#testresult/32912ee032ec0304","status":"passed","time":{"start":1697457723253,"stop":1697457723850,"duration":597}}]},"tags":[]},"source":"3eb4c66768e4df36.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}