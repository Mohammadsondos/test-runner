{"uid":"7d47cbe61c3a6fd0","name":"test_can_create_connection[Test for Picasso, url: wss://picasso-rpc.composable.finance]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a99dc3895865408a2004c053a1261232","time":{"start":1680077118569,"stop":1680077118631,"duration":62},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f7f7ca914e0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'picasso-rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Picasso', 'url': 'wss://picasso-rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f7f7ca914e0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f7f7ca914e0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'picasso-rpc.composable.finance', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Picasso', 'url': 'wss://picasso-rpc.composable.finance'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'picasso-rpc.composable.finance', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7f7f7ca914e0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"2b6456c50349889e","name":"stdout","source":"2b6456c50349889e.txt","type":"text/plain","size":248}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az357-248"},{"name":"thread","value":"1772-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://picasso-rpc.composable.finance', 'name': 'Picasso'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9a3b28d0cb7142e9","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1680077108197,"stop":1680077108415,"duration":218}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":57,"skipped":0,"passed":848,"unknown":0,"total":905},"items":[{"uid":"145cb04484d9991e","reportUrl":"https://nova-wallet.github.io/test-runner/2723//#testresult/145cb04484d9991e","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1680062677091,"stop":1680062677132,"duration":41}},{"uid":"3bde85dd3a5fec67","reportUrl":"https://nova-wallet.github.io/test-runner/2722//#testresult/3bde85dd3a5fec67","status":"passed","time":{"start":1680052287186,"stop":1680052287657,"duration":471}},{"uid":"67f5919fdd659da8","reportUrl":"https://nova-wallet.github.io/test-runner/2721//#testresult/67f5919fdd659da8","status":"passed","time":{"start":1680034459769,"stop":1680034460602,"duration":833}},{"uid":"7a33e8c5bdef29ce","reportUrl":"https://nova-wallet.github.io/test-runner/2720//#testresult/7a33e8c5bdef29ce","status":"passed","time":{"start":1680020716823,"stop":1680020717498,"duration":675}},{"uid":"1ba33aaa58815450","reportUrl":"https://nova-wallet.github.io/test-runner/2718//#testresult/1ba33aaa58815450","status":"passed","time":{"start":1679991483616,"stop":1679991484406,"duration":790}},{"uid":"2ac2a44a3edf7daa","reportUrl":"https://nova-wallet.github.io/test-runner/2717//#testresult/2ac2a44a3edf7daa","status":"passed","time":{"start":1679976961644,"stop":1679976962124,"duration":480}},{"uid":"92dbd868aced25c7","reportUrl":"https://nova-wallet.github.io/test-runner/2716//#testresult/92dbd868aced25c7","status":"passed","time":{"start":1679965618750,"stop":1679965619280,"duration":530}},{"uid":"31a96baea3a95384","reportUrl":"https://nova-wallet.github.io/test-runner/2715//#testresult/31a96baea3a95384","status":"passed","time":{"start":1679948130589,"stop":1679948131066,"duration":477}},{"uid":"b1df35f40d0aca24","reportUrl":"https://nova-wallet.github.io/test-runner/2714//#testresult/b1df35f40d0aca24","status":"passed","time":{"start":1679933848963,"stop":1679933849674,"duration":711}},{"uid":"437d429e9baa73c7","reportUrl":"https://nova-wallet.github.io/test-runner/2713//#testresult/437d429e9baa73c7","status":"passed","time":{"start":1679923528000,"stop":1679923528869,"duration":869}},{"uid":"b5e26313cc24a015","reportUrl":"https://nova-wallet.github.io/test-runner/2712//#testresult/b5e26313cc24a015","status":"passed","time":{"start":1679905082785,"stop":1679905083569,"duration":784}},{"uid":"4806a1d81c782d6f","reportUrl":"https://nova-wallet.github.io/test-runner/2710//#testresult/4806a1d81c782d6f","status":"passed","time":{"start":1679879032282,"stop":1679879033774,"duration":1492}},{"uid":"3223cbd7aed2064e","reportUrl":"https://nova-wallet.github.io/test-runner/2709//#testresult/3223cbd7aed2064e","status":"passed","time":{"start":1679861572786,"stop":1679861573474,"duration":688}},{"uid":"cb3a2cb89dde0c","reportUrl":"https://nova-wallet.github.io/test-runner/2708//#testresult/cb3a2cb89dde0c","status":"passed","time":{"start":1679847364998,"stop":1679847365816,"duration":818}},{"uid":"60fa233d13d6370d","reportUrl":"https://nova-wallet.github.io/test-runner/2707//#testresult/60fa233d13d6370d","status":"passed","time":{"start":1679833414961,"stop":1679833415713,"duration":752}},{"uid":"a9dcf70c3a8d79f7","reportUrl":"https://nova-wallet.github.io/test-runner/2706//#testresult/a9dcf70c3a8d79f7","status":"passed","time":{"start":1679818517916,"stop":1679818518826,"duration":910}},{"uid":"1d9db49935743b08","reportUrl":"https://nova-wallet.github.io/test-runner/2705//#testresult/1d9db49935743b08","status":"passed","time":{"start":1679804125106,"stop":1679804125993,"duration":887}},{"uid":"d1064aff817c3484","reportUrl":"https://nova-wallet.github.io/test-runner/2704//#testresult/d1064aff817c3484","status":"passed","time":{"start":1679792990447,"stop":1679792991619,"duration":1172}},{"uid":"53491e97ba728160","reportUrl":"https://nova-wallet.github.io/test-runner/2703//#testresult/53491e97ba728160","status":"passed","time":{"start":1679775177599,"stop":1679775178605,"duration":1006}},{"uid":"39238d87617401c5","reportUrl":"https://nova-wallet.github.io/test-runner/2702//#testresult/39238d87617401c5","status":"passed","time":{"start":1679760956484,"stop":1679760957516,"duration":1032}}]},"tags":[]},"source":"7d47cbe61c3a6fd0.json","parameterValues":["{'url': 'wss://picasso-rpc.composable.finance', 'name': 'Picasso'}"]}