{"uid":"41a3d3b66427aa3f","name":"test_can_create_connection[Test for Kusama, url: wss://kusama.public.curie.radiumblock.xyz/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"05e5cbccaeff7205cc25868802d14c80","time":{"start":1671581584789,"stop":1671581584839,"duration":50},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -5] No address associated with hostname","statusTrace":"hostname = 'kusama.public.curie.radiumblock.xyz', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fcc6c52a9b0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'kusama.public.curie.radiumblock.xyz', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -5] No address associated with hostname\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Kusama', 'url': 'wss://kusama.public.curie.radiumblock.xyz/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'kusama.public.curie.radiumblock.xyz', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fcc6c52a9b0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -5] No address associated with hostname\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -5] No address associated with hostname","statusTrace":"hostname = 'kusama.public.curie.radiumblock.xyz', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fcc6c52a9b0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'kusama.public.curie.radiumblock.xyz', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -5] No address associated with hostname\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Kusama', 'url': 'wss://kusama.public.curie.radiumblock.xyz/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'kusama.public.curie.radiumblock.xyz', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fcc6c52a9b0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -5] No address associated with hostname\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"7fe72c9fdf6f6ec7","name":"stdout","source":"7fe72c9fdf6f6ec7.txt","type":"text/plain","size":284}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az422-244"},{"name":"thread","value":"1788-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.public.curie.radiumblock.xyz/ws', 'name': 'Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3e4920630c48c7e0","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -5] No address associated with hostname","time":{"start":1671581574592,"stop":1671581574677,"duration":85}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":309,"unknown":0,"total":364},"items":[{"uid":"fe7905dd03815af2","reportUrl":"https://nova-wallet.github.io/test-runner/2121//#testresult/fe7905dd03815af2","status":"passed","time":{"start":1671566644571,"stop":1671566644666,"duration":95}},{"uid":"d50d009520865324","reportUrl":"https://nova-wallet.github.io/test-runner/2120//#testresult/d50d009520865324","status":"passed","time":{"start":1671552252052,"stop":1671552252174,"duration":122}},{"uid":"8cdebabbe9c0a2bf","reportUrl":"https://nova-wallet.github.io/test-runner/2119//#testresult/8cdebabbe9c0a2bf","status":"passed","time":{"start":1671537889223,"stop":1671537889553,"duration":330}},{"uid":"2ed49ede82dedc34","reportUrl":"https://nova-wallet.github.io/test-runner/2118//#testresult/2ed49ede82dedc34","status":"passed","time":{"start":1671523462339,"stop":1671523462776,"duration":437}},{"uid":"9e1083c2707cf6ae","reportUrl":"https://nova-wallet.github.io/test-runner/2117//#testresult/9e1083c2707cf6ae","status":"passed","time":{"start":1671509042199,"stop":1671509042424,"duration":225}},{"uid":"edaafdd2853df458","reportUrl":"https://nova-wallet.github.io/test-runner/2116//#testresult/edaafdd2853df458","status":"passed","time":{"start":1671495214947,"stop":1671495215042,"duration":95}},{"uid":"6b845cf0007bcb19","reportUrl":"https://nova-wallet.github.io/test-runner/2115//#testresult/6b845cf0007bcb19","status":"passed","time":{"start":1671480228657,"stop":1671480228781,"duration":124}},{"uid":"37423d1de5caaed9","reportUrl":"https://nova-wallet.github.io/test-runner/2113//#testresult/37423d1de5caaed9","status":"passed","time":{"start":1671451498134,"stop":1671451498266,"duration":132}},{"uid":"eaed0f361f13deb8","reportUrl":"https://nova-wallet.github.io/test-runner/2112//#testresult/eaed0f361f13deb8","status":"passed","time":{"start":1671437059776,"stop":1671437059891,"duration":115}},{"uid":"c2fd6bbe68afde46","reportUrl":"https://nova-wallet.github.io/test-runner/2111//#testresult/c2fd6bbe68afde46","status":"passed","time":{"start":1671422662765,"stop":1671422662987,"duration":222}},{"uid":"9a90bbb7cd5b370d","reportUrl":"https://nova-wallet.github.io/test-runner/2110//#testresult/9a90bbb7cd5b370d","status":"passed","time":{"start":1671408756664,"stop":1671408757042,"duration":378}},{"uid":"9299fb17781d72fa","reportUrl":"https://nova-wallet.github.io/test-runner/2109//#testresult/9299fb17781d72fa","status":"passed","time":{"start":1671393823912,"stop":1671393824007,"duration":95}},{"uid":"c9072c8f8fa2a968","reportUrl":"https://nova-wallet.github.io/test-runner/2108//#testresult/c9072c8f8fa2a968","status":"passed","time":{"start":1671379454019,"stop":1671379454442,"duration":423}},{"uid":"796ddd1a458231ef","reportUrl":"https://nova-wallet.github.io/test-runner/2107//#testresult/796ddd1a458231ef","status":"passed","time":{"start":1671365225369,"stop":1671365225655,"duration":286}},{"uid":"c24d016ea2fabb9","reportUrl":"https://nova-wallet.github.io/test-runner/2106//#testresult/c24d016ea2fabb9","status":"passed","time":{"start":1671350770261,"stop":1671350770352,"duration":91}},{"uid":"f3c227e5f6612497","reportUrl":"https://nova-wallet.github.io/test-runner/2105//#testresult/f3c227e5f6612497","status":"passed","time":{"start":1671336269563,"stop":1671336269957,"duration":394}},{"uid":"b347e8bf4b92a96c","reportUrl":"https://nova-wallet.github.io/test-runner/2104//#testresult/b347e8bf4b92a96c","status":"passed","time":{"start":1671322394034,"stop":1671322394325,"duration":291}},{"uid":"50108fc794d02d57","reportUrl":"https://nova-wallet.github.io/test-runner/2103//#testresult/50108fc794d02d57","status":"passed","time":{"start":1671307422534,"stop":1671307422629,"duration":95}},{"uid":"8c7df4584ae4b57c","reportUrl":"https://nova-wallet.github.io/test-runner/2102//#testresult/8c7df4584ae4b57c","status":"passed","time":{"start":1671293043577,"stop":1671293043965,"duration":388}},{"uid":"cf707eaa1e0dc21","reportUrl":"https://nova-wallet.github.io/test-runner/2101//#testresult/cf707eaa1e0dc21","status":"passed","time":{"start":1671278660479,"stop":1671278660601,"duration":122}}]},"tags":[]},"source":"41a3d3b66427aa3f.json","parameterValues":["{'url': 'wss://kusama.public.curie.radiumblock.xyz/ws', 'name': 'Kusama'}"]}