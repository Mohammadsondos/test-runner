{"uid":"972f41e8142515f1","name":"test_can_create_connection[Test for Karura, url: wss://karura-rpc-1.aca-api.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1e9e7a74f12b7ce492708745e5aab6c0","time":{"start":1685289868062,"stop":1685289878370,"duration":10308},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 28 May 2023 16:04:38 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-1.aca-api.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 28 May 2023 16:04:38 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:148: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 28 May 2023 16:04:38 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-1.aca-api.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 28 May 2023 16:04:38 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:148: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"68b02df70a57f0ee","name":"stdout","source":"68b02df70a57f0ee.txt","type":"text/plain","size":862}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az470-702"},{"name":"thread","value":"1864-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://karura-rpc-1.aca-api.network', 'name': 'Karura'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9cd403770285a93d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 28 May 2023 16:04:17 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1685289847542,"stop":1685289857849,"duration":10307}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":146,"unknown":0,"total":147},"items":[{"uid":"16da50c4494b5043","reportUrl":"https://nova-wallet.github.io/test-runner/3086//#testresult/16da50c4494b5043","status":"passed","time":{"start":1685174645871,"stop":1685174646157,"duration":286}},{"uid":"26c30ff1dcac472f","reportUrl":"https://nova-wallet.github.io/test-runner/3083//#testresult/26c30ff1dcac472f","status":"passed","time":{"start":1685131428477,"stop":1685131429125,"duration":648}},{"uid":"db1c20d12977dc15","reportUrl":"https://nova-wallet.github.io/test-runner/3082//#testresult/db1c20d12977dc15","status":"passed","time":{"start":1685117042152,"stop":1685117042569,"duration":417}},{"uid":"aabf6bc6ec1ef4b4","reportUrl":"https://nova-wallet.github.io/test-runner/3081//#testresult/aabf6bc6ec1ef4b4","status":"passed","time":{"start":1685102685425,"stop":1685102685674,"duration":249}},{"uid":"cd62f875fa718df7","reportUrl":"https://nova-wallet.github.io/test-runner/3077//#testresult/cd62f875fa718df7","status":"passed","time":{"start":1685045026637,"stop":1685045026879,"duration":242}},{"uid":"f97ad31101e600e8","reportUrl":"https://nova-wallet.github.io/test-runner/3076//#testresult/f97ad31101e600e8","status":"passed","time":{"start":1685030650597,"stop":1685030650866,"duration":269}},{"uid":"92a2cea4afbd45c8","reportUrl":"https://nova-wallet.github.io/test-runner/3074//#testresult/92a2cea4afbd45c8","status":"passed","time":{"start":1685005738545,"stop":1685005738804,"duration":259}},{"uid":"b08e5b76e80b383d","reportUrl":"https://nova-wallet.github.io/test-runner/3054//#testresult/b08e5b76e80b383d","status":"passed","time":{"start":1684742667791,"stop":1684742668019,"duration":228}},{"uid":"fc10484f8b55b466","reportUrl":"https://nova-wallet.github.io/test-runner/3052//#testresult/fc10484f8b55b466","status":"passed","time":{"start":1684714412627,"stop":1684714412897,"duration":270}},{"uid":"6a868e3fbbb2723c","reportUrl":"https://nova-wallet.github.io/test-runner/3050//#testresult/6a868e3fbbb2723c","status":"passed","time":{"start":1684685034579,"stop":1684685034692,"duration":113}},{"uid":"44015f471b227e6a","reportUrl":"https://nova-wallet.github.io/test-runner/3049//#testresult/44015f471b227e6a","status":"passed","time":{"start":1684670648939,"stop":1684670649035,"duration":96}},{"uid":"95bc5fa02fa9781c","reportUrl":"https://nova-wallet.github.io/test-runner/3048//#testresult/95bc5fa02fa9781c","status":"passed","time":{"start":1684656260716,"stop":1684656261292,"duration":576}},{"uid":"956aa8694aacda67","reportUrl":"https://nova-wallet.github.io/test-runner/3047//#testresult/956aa8694aacda67","status":"passed","time":{"start":1684641827810,"stop":1684641827941,"duration":131}},{"uid":"e901efe1886beffb","reportUrl":"https://nova-wallet.github.io/test-runner/3046//#testresult/e901efe1886beffb","status":"passed","time":{"start":1684628046629,"stop":1684628047144,"duration":515}},{"uid":"c85b6dfb08670bd4","reportUrl":"https://nova-wallet.github.io/test-runner/3045//#testresult/c85b6dfb08670bd4","status":"passed","time":{"start":1684613029245,"stop":1684613029622,"duration":377}},{"uid":"39dcf8df9ef48cb7","reportUrl":"https://nova-wallet.github.io/test-runner/3044//#testresult/39dcf8df9ef48cb7","status":"passed","time":{"start":1684598631327,"stop":1684598631603,"duration":276}},{"uid":"8a692e651dc1005c","reportUrl":"https://nova-wallet.github.io/test-runner/3043//#testresult/8a692e651dc1005c","status":"passed","time":{"start":1684584262707,"stop":1684584262978,"duration":271}},{"uid":"a2f36a303c6f1efb","reportUrl":"https://nova-wallet.github.io/test-runner/3042//#testresult/a2f36a303c6f1efb","status":"passed","time":{"start":1684569823968,"stop":1684569824047,"duration":79}},{"uid":"8ba6da0f0f2cf35d","reportUrl":"https://nova-wallet.github.io/test-runner/3041//#testresult/8ba6da0f0f2cf35d","status":"passed","time":{"start":1684555424845,"stop":1684555424967,"duration":122}},{"uid":"5245e73fd0caf19e","reportUrl":"https://nova-wallet.github.io/test-runner/3040//#testresult/5245e73fd0caf19e","status":"passed","time":{"start":1684541525705,"stop":1684541525830,"duration":125}}]},"tags":[]},"source":"972f41e8142515f1.json","parameterValues":["{'url': 'wss://karura-rpc-1.aca-api.network', 'name': 'Karura'}"]}