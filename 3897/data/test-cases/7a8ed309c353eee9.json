{"uid":"7a8ed309c353eee9","name":"test_can_create_connection[Test for Kapex, url: wss://kapex-parachain.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"4d0ec98b022b8004b2ac65e5ee37df7e","time":{"start":1696550636481,"stop":1696550668075,"duration":31594},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 00:04:28 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '31294', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","statusTrace":"data = {'name': 'Kapex', 'url': 'wss://kapex-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 00:04:28 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '31294', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 00:04:28 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '31294', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","statusTrace":"data = {'name': 'Kapex', 'url': 'wss://kapex-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 00:04:28 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '31294', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"5c9e6d0cdadcd51d","name":"stdout","source":"5c9e6d0cdadcd51d.txt","type":"text/plain","size":1077}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az189-319"},{"name":"thread","value":"2218-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kapex-parachain.api.onfinality.io/public-ws', 'name': 'Kapex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e5e4df8f9502a517","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 00:03:41 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '20028', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696550601056,"stop":1696550621394,"duration":20338}},{"uid":"810bc4b127c9974f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Fri, 06 Oct 2023 00:03:05 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '20033', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696550565592,"stop":1696550585964,"duration":20372}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":132,"unknown":0,"total":137},"items":[{"uid":"89c77a2cd2c874c3","reportUrl":"https://novasamatech.github.io/test-runner/3896//#testresult/89c77a2cd2c874c3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Thu, 05 Oct 2023 20:03:17 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '20080', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696536176734,"stop":1696536197279,"duration":20545}},{"uid":"efb3b02871cac73a","reportUrl":"https://novasamatech.github.io/test-runner/3895//#testresult/efb3b02871cac73a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Thu, 05 Oct 2023 16:04:24 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '51744', 'x-kong-proxy-latency': '0', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696521812035,"stop":1696521864109,"duration":52074}},{"uid":"1c78f0652e424866","reportUrl":"https://novasamatech.github.io/test-runner/3894//#testresult/1c78f0652e424866","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Thu, 05 Oct 2023 12:05:16 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '22089', 'x-kong-proxy-latency': '60000', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696507433771,"stop":1696507516445,"duration":82674}},{"uid":"c5f52fe0efc305c7","reportUrl":"https://novasamatech.github.io/test-runner/3893//#testresult/c5f52fe0efc305c7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Thu, 05 Oct 2023 09:06:27 GMT', 'x-continent': 'EU', 'x-cluster': 'gx', 'x-kong-upstream-latency': '20027', 'x-kong-proxy-latency': '1', 'via': 'kong/2.3.3'} -+-+- b''","time":{"start":1696496766778,"stop":1696496787125,"duration":20347}},{"uid":"1171e2f0db174e4b","reportUrl":"https://novasamatech.github.io/test-runner/3892//#testresult/1171e2f0db174e4b","status":"passed","time":{"start":1696492967548,"stop":1696492967992,"duration":444}},{"uid":"7c69ec4ddb121dc7","reportUrl":"https://novasamatech.github.io/test-runner/3891//#testresult/7c69ec4ddb121dc7","status":"passed","time":{"start":1696478509132,"stop":1696478509595,"duration":463}},{"uid":"4e9c5a614631055e","reportUrl":"https://novasamatech.github.io/test-runner/3890//#testresult/4e9c5a614631055e","status":"passed","time":{"start":1696464183457,"stop":1696464184182,"duration":725}},{"uid":"c49eb449bc919c5b","reportUrl":"https://novasamatech.github.io/test-runner/3889//#testresult/c49eb449bc919c5b","status":"passed","time":{"start":1696449757946,"stop":1696449758350,"duration":404}},{"uid":"a2455866db77cd5b","reportUrl":"https://novasamatech.github.io/test-runner/3888//#testresult/a2455866db77cd5b","status":"passed","time":{"start":1696435348289,"stop":1696435348682,"duration":393}},{"uid":"1634363f4d6072e1","reportUrl":"https://novasamatech.github.io/test-runner/3887//#testresult/1634363f4d6072e1","status":"passed","time":{"start":1696420945946,"stop":1696420946616,"duration":670}},{"uid":"8598a7a83786f572","reportUrl":"https://novasamatech.github.io/test-runner/3886//#testresult/8598a7a83786f572","status":"passed","time":{"start":1696406579123,"stop":1696406579787,"duration":664}},{"uid":"fc350568d8474732","reportUrl":"https://novasamatech.github.io/test-runner/3885//#testresult/fc350568d8474732","status":"passed","time":{"start":1696392103640,"stop":1696392104074,"duration":434}},{"uid":"5ae6f870a8db2733","reportUrl":"https://novasamatech.github.io/test-runner/3884//#testresult/5ae6f870a8db2733","status":"passed","time":{"start":1696377739510,"stop":1696377739936,"duration":426}},{"uid":"117f0a056bad9f85","reportUrl":"https://novasamatech.github.io/test-runner/3883//#testresult/117f0a056bad9f85","status":"passed","time":{"start":1696363317729,"stop":1696363318312,"duration":583}},{"uid":"ecc0c96b63f7c5b2","reportUrl":"https://novasamatech.github.io/test-runner/3882//#testresult/ecc0c96b63f7c5b2","status":"passed","time":{"start":1696348931799,"stop":1696348932202,"duration":403}},{"uid":"8da6aef9b79fa41c","reportUrl":"https://novasamatech.github.io/test-runner/3881//#testresult/8da6aef9b79fa41c","status":"passed","time":{"start":1696334588091,"stop":1696334588757,"duration":666}},{"uid":"b49e131004c636b1","reportUrl":"https://novasamatech.github.io/test-runner/3880//#testresult/b49e131004c636b1","status":"passed","time":{"start":1696320108666,"stop":1696320109142,"duration":476}},{"uid":"4dcec2a7da835cce","reportUrl":"https://novasamatech.github.io/test-runner/3879//#testresult/4dcec2a7da835cce","status":"passed","time":{"start":1696305762756,"stop":1696305763417,"duration":661}},{"uid":"a2109dc0c9334534","reportUrl":"https://novasamatech.github.io/test-runner/3878//#testresult/a2109dc0c9334534","status":"passed","time":{"start":1696291368140,"stop":1696291368783,"duration":643}},{"uid":"e353129b4417dd8b","reportUrl":"https://novasamatech.github.io/test-runner/3877//#testresult/e353129b4417dd8b","status":"passed","time":{"start":1696276953631,"stop":1696276954245,"duration":614}}]},"tags":[]},"source":"7a8ed309c353eee9.json","parameterValues":["{'url': 'wss://kapex-parachain.api.onfinality.io/public-ws', 'name': 'Kapex'}"]}