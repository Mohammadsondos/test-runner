{"uid":"12e3102f6a3801c","name":"test_can_create_connection[Test for Equilibrium, url: wss://node.pol.equilibrium.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"aa0a741cef39a0b8ded091916ea5120b","time":{"start":1691049898984,"stop":1691049899326,"duration":342},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"6e2abc1acb8645dc","name":"stdout","source":"6e2abc1acb8645dc.txt","type":"text/plain","size":531}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az396-187"},{"name":"thread","value":"1962-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"fc733e2fdc55e425","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1691049883524,"stop":1691049883864,"duration":340}},{"uid":"18334bfae75a5d2","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1691049868003,"stop":1691049868344,"duration":341}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":26,"skipped":0,"passed":457,"unknown":0,"total":483},"items":[{"uid":"30e926fd18b2c946","reportUrl":"https://novasamatech.github.io/test-runner/3504//#testresult/30e926fd18b2c946","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1691035471981,"stop":1691035472223,"duration":242}},{"uid":"6d702e0d2ffc24ca","reportUrl":"https://novasamatech.github.io/test-runner/3503//#testresult/6d702e0d2ffc24ca","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1691021673257,"stop":1691021673622,"duration":365}},{"uid":"bdf0797a9ee91a37","reportUrl":"https://novasamatech.github.io/test-runner/3502//#testresult/bdf0797a9ee91a37","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1691006697918,"stop":1691006698255,"duration":337}},{"uid":"624764443844fd19","reportUrl":"https://novasamatech.github.io/test-runner/3501//#testresult/624764443844fd19","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690992299015,"stop":1690992299276,"duration":261}},{"uid":"39d6a8a633306a0d","reportUrl":"https://novasamatech.github.io/test-runner/3500//#testresult/39d6a8a633306a0d","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690977946652,"stop":1690977947018,"duration":366}},{"uid":"9b50b3393bf16c73","reportUrl":"https://novasamatech.github.io/test-runner/3499//#testresult/9b50b3393bf16c73","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690963493996,"stop":1690963494254,"duration":258}},{"uid":"d3048c825c761f03","reportUrl":"https://novasamatech.github.io/test-runner/3498//#testresult/d3048c825c761f03","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690949096788,"stop":1690949097129,"duration":341}},{"uid":"2ca472f7cdb07157","reportUrl":"https://novasamatech.github.io/test-runner/3497//#testresult/2ca472f7cdb07157","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690935250654,"stop":1690935250993,"duration":339}},{"uid":"2b02981f4514757a","reportUrl":"https://novasamatech.github.io/test-runner/3496//#testresult/2b02981f4514757a","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690920284656,"stop":1690920284960,"duration":304}},{"uid":"1ba8995f64fb07c","reportUrl":"https://novasamatech.github.io/test-runner/3495//#testresult/1ba8995f64fb07c","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690905885690,"stop":1690905886069,"duration":379}},{"uid":"3cac8986483407a5","reportUrl":"https://novasamatech.github.io/test-runner/3494//#testresult/3cac8986483407a5","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690891528036,"stop":1690891528374,"duration":338}},{"uid":"dd4419a1904b8213","reportUrl":"https://novasamatech.github.io/test-runner/3493//#testresult/dd4419a1904b8213","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690877135382,"stop":1690877135798,"duration":416}},{"uid":"b034e3f466cfc05a","reportUrl":"https://novasamatech.github.io/test-runner/3492//#testresult/b034e3f466cfc05a","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690862691745,"stop":1690862692214,"duration":469}},{"uid":"bebc6c3c0713310a","reportUrl":"https://novasamatech.github.io/test-runner/3491//#testresult/bebc6c3c0713310a","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690849000904,"stop":1690849001146,"duration":242}},{"uid":"3dfb48d837f25f01","reportUrl":"https://novasamatech.github.io/test-runner/3490//#testresult/3dfb48d837f25f01","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690833862590,"stop":1690833862961,"duration":371}},{"uid":"29dc776165a9b33f","reportUrl":"https://novasamatech.github.io/test-runner/3489//#testresult/29dc776165a9b33f","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690819500746,"stop":1690819501087,"duration":341}},{"uid":"8467276214adf52d","reportUrl":"https://novasamatech.github.io/test-runner/3488//#testresult/8467276214adf52d","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690805135699,"stop":1690805135942,"duration":243}},{"uid":"98373081a8c1467e","reportUrl":"https://novasamatech.github.io/test-runner/3487//#testresult/98373081a8c1467e","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690790722057,"stop":1690790722418,"duration":361}},{"uid":"b214565e406b2b7f","reportUrl":"https://novasamatech.github.io/test-runner/3486//#testresult/b214565e406b2b7f","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690776309277,"stop":1690776309646,"duration":369}},{"uid":"e24b38628391a0b3","reportUrl":"https://novasamatech.github.io/test-runner/3485//#testresult/e24b38628391a0b3","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)","time":{"start":1690762499600,"stop":1690762499927,"duration":327}}]},"tags":[]},"source":"12e3102f6a3801c.json","parameterValues":["{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"]}