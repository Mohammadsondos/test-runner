{"uid":"cd210e1a8520c8bc","name":"test_can_create_connection[Test for 3DPass, url: wss://rpc2.3dpass.org]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"f5a6d4af0313219dce7fc1642cad31bd","time":{"start":1699344342748,"stop":1699344343327,"duration":579},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Tue, 07 Nov 2023 08:05:43 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': '3DPass', 'url': 'wss://rpc2.3dpass.org'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Tue, 07 Nov 2023 08:05:43 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Tue, 07 Nov 2023 08:05:43 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': '3DPass', 'url': 'wss://rpc2.3dpass.org'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Tue, 07 Nov 2023 08:05:43 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"1f45f7c4950dfb76","name":"stdout","source":"1f45f7c4950dfb76.txt","type":"text/plain","size":1428}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1567-741"},{"name":"thread","value":"2179-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc2.3dpass.org', 'name': '3DPass'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c20ef48768d0b0d3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Tue, 07 Nov 2023 08:05:27 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699344327211,"stop":1699344327645,"duration":434}},{"uid":"edc8ecd98454057a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.14.0 (Ubuntu)', 'date': 'Tue, 07 Nov 2023 08:05:12 GMT', 'content-type': 'text/html', 'content-length': '182', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699344092559,"stop":1699344312083,"duration":219524}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":34,"skipped":0,"passed":418,"unknown":0,"total":452},"items":[{"uid":"b9b3d4db5bd1ec72","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/b9b3d4db5bd1ec72","status":"passed","time":{"start":1699329704422,"stop":1699329705096,"duration":674}},{"uid":"79cb079b6d588cd0","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/79cb079b6d588cd0","status":"passed","time":{"start":1699315344648,"stop":1699315345202,"duration":554}},{"uid":"5f1090c2af936fb6","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/5f1090c2af936fb6","status":"passed","time":{"start":1699300895500,"stop":1699300896133,"duration":633}},{"uid":"1d11810affc00b6c","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/1d11810affc00b6c","status":"passed","time":{"start":1699286530331,"stop":1699286530896,"duration":565}},{"uid":"6a71c02d30ef7e22","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/6a71c02d30ef7e22","status":"passed","time":{"start":1699272123470,"stop":1699272123972,"duration":502}},{"uid":"afc87fe00dbdb477","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/afc87fe00dbdb477","status":"passed","time":{"start":1699257723302,"stop":1699257723942,"duration":640}},{"uid":"49a27fa538417c0","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/49a27fa538417c0","status":"passed","time":{"start":1699243305800,"stop":1699243306458,"duration":658}},{"uid":"9a1deabde5194d4e","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/9a1deabde5194d4e","status":"passed","time":{"start":1699228931193,"stop":1699228931773,"duration":580}},{"uid":"3960ec324cc96b14","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/3960ec324cc96b14","status":"passed","time":{"start":1699214499036,"stop":1699214499698,"duration":662}},{"uid":"6f1a9a39448e7ba8","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/6f1a9a39448e7ba8","status":"passed","time":{"start":1699200094278,"stop":1699200094916,"duration":638}},{"uid":"7942f9b201f8227c","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/7942f9b201f8227c","status":"passed","time":{"start":1699185689548,"stop":1699185690124,"duration":576}},{"uid":"556285d3cca3bee8","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/556285d3cca3bee8","status":"passed","time":{"start":1699171286938,"stop":1699171287487,"duration":549}},{"uid":"40765d97b5842df9","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/40765d97b5842df9","status":"passed","time":{"start":1699156888738,"stop":1699156889119,"duration":381}},{"uid":"5e5a9a74b88a42fc","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/5e5a9a74b88a42fc","status":"passed","time":{"start":1699142547857,"stop":1699142548574,"duration":717}},{"uid":"f68a161698163552","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/f68a161698163552","status":"passed","time":{"start":1699128099539,"stop":1699128100116,"duration":577}},{"uid":"f52b2adf887fa906","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/f52b2adf887fa906","status":"passed","time":{"start":1699113700779,"stop":1699113701295,"duration":516}},{"uid":"77a12ffd4165fe69","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/77a12ffd4165fe69","status":"passed","time":{"start":1699099297735,"stop":1699099298390,"duration":655}},{"uid":"569c5abf2484df6","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/569c5abf2484df6","status":"passed","time":{"start":1699084895141,"stop":1699084895717,"duration":576}},{"uid":"ed9c6f06bbad7365","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/ed9c6f06bbad7365","status":"passed","time":{"start":1699070494571,"stop":1699070495321,"duration":750}},{"uid":"ce5ef259bffaa66b","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/ce5ef259bffaa66b","status":"passed","time":{"start":1699041710617,"stop":1699041711174,"duration":557}}]},"tags":[]},"source":"cd210e1a8520c8bc.json","parameterValues":["{'url': 'wss://rpc2.3dpass.org', 'name': '3DPass'}"]}