{"uid":"a9ad06c159e24e7d","name":"test_has_new_assets[Test for Karura]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"542add1edc8e11ecaf0268a3083bd9e1","time":{"start":1699344112840,"stop":1699344113537,"duration":697},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f743e273130>\nchain = <scripts.utils.chain_model.Chain object at 0x7f743e2734f0>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f743e2990f0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x7ee3d11abe1980df410eb5ef840da82e830be0befd705394f912b66a379e7bac']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az176-439"},{"name":"thread","value":"2223-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f743e2734f0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"65abf881f27858a1","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699344096936,"stop":1699344097682,"duration":746}},{"uid":"4b05e9859ccc4fe8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699344081115,"stop":1699344081693,"duration":578}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":442,"unknown":0,"total":451},"items":[{"uid":"a64da18ae6e9b75a","reportUrl":"https://novasamatech.github.io/test-runner/4091//#testresult/a64da18ae6e9b75a","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699329697869,"stop":1699329698018,"duration":149}},{"uid":"a7ff036e4f526a70","reportUrl":"https://novasamatech.github.io/test-runner/4090//#testresult/a7ff036e4f526a70","status":"passed","time":{"start":1699315310800,"stop":1699315319055,"duration":8255}},{"uid":"9b2f34ef4bf43e1b","reportUrl":"https://novasamatech.github.io/test-runner/4089//#testresult/9b2f34ef4bf43e1b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699300896297,"stop":1699300896404,"duration":107}},{"uid":"e07ea6a0f6567140","reportUrl":"https://novasamatech.github.io/test-runner/4088//#testresult/e07ea6a0f6567140","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699286504264,"stop":1699286504989,"duration":725}},{"uid":"5a3ba46f1a3b44da","reportUrl":"https://novasamatech.github.io/test-runner/4087//#testresult/5a3ba46f1a3b44da","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699272101443,"stop":1699272101649,"duration":206}},{"uid":"bcb298209affc277","reportUrl":"https://novasamatech.github.io/test-runner/4086//#testresult/bcb298209affc277","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699257700230,"stop":1699257700416,"duration":186}},{"uid":"94105bbfa154390d","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/94105bbfa154390d","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699243303283,"stop":1699243303635,"duration":352}},{"uid":"45c3606be0f15991","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/45c3606be0f15991","status":"passed","time":{"start":1699228914658,"stop":1699228930355,"duration":15697}},{"uid":"2a1c36b25e849aa9","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/2a1c36b25e849aa9","status":"passed","time":{"start":1699214479887,"stop":1699214490516,"duration":10629}},{"uid":"23d52d0e923d5968","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/23d52d0e923d5968","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699200099453,"stop":1699200100055,"duration":602}},{"uid":"f92430539957fb67","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/f92430539957fb67","status":"passed","time":{"start":1699185663439,"stop":1699185671597,"duration":8158}},{"uid":"40b1d37c90527642","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/40b1d37c90527642","status":"passed","time":{"start":1699171274059,"stop":1699171284011,"duration":9952}},{"uid":"738a2dbf1449716b","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/738a2dbf1449716b","status":"passed","time":{"start":1699156872747,"stop":1699156884364,"duration":11617}},{"uid":"a625f8289cd3905d","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/a625f8289cd3905d","status":"passed","time":{"start":1699142537359,"stop":1699142549773,"duration":12414}},{"uid":"fca1693f2f0fc56e","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/fca1693f2f0fc56e","status":"passed","time":{"start":1699128081157,"stop":1699128091679,"duration":10522}},{"uid":"f1be28d41279851f","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/f1be28d41279851f","status":"passed","time":{"start":1699113678509,"stop":1699113689783,"duration":11274}},{"uid":"eed0fbba3eb6b596","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/eed0fbba3eb6b596","status":"passed","time":{"start":1699099265122,"stop":1699099273648,"duration":8526}},{"uid":"a822eed14e4d4119","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/a822eed14e4d4119","status":"passed","time":{"start":1699084868228,"stop":1699084877381,"duration":9153}},{"uid":"a0c0cc2870688c40","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/a0c0cc2870688c40","status":"passed","time":{"start":1699070464103,"stop":1699070482252,"duration":18149}},{"uid":"2d504e4fcc99b6f","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/2d504e4fcc99b6f","status":"passed","time":{"start":1699041664292,"stop":1699041676101,"duration":11809}}]},"tags":[]},"source":"a9ad06c159e24e7d.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f743e2734f0>"]}