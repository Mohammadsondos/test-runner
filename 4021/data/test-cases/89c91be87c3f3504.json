{"uid":"89c91be87c3f3504","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1698321734537,"stop":1698321735036,"duration":499},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 26 Oct 2023 12:02:14 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 26 Oct 2023 12:02:14 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 26 Oct 2023 12:02:14 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 26 Oct 2023 12:02:14 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f588b30e40c6b298","name":"stdout","source":"f588b30e40c6b298.txt","type":"text/plain","size":825}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az398-748"},{"name":"thread","value":"2112-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cb1d7c70cd4004c7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 26 Oct 2023 12:01:58 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698321718915,"stop":1698321719441,"duration":526}},{"uid":"864a614c754ea845","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Thu, 26 Oct 2023 12:01:43 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698321703233,"stop":1698321703760,"duration":527}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":18,"skipped":0,"passed":358,"unknown":0,"total":376},"items":[{"uid":"822945d65455cde7","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/822945d65455cde7","status":"passed","time":{"start":1698307302237,"stop":1698307303079,"duration":842}},{"uid":"501dbcb3c60bf88e","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/501dbcb3c60bf88e","status":"passed","time":{"start":1698292892862,"stop":1698292893738,"duration":876}},{"uid":"1187338d02a6329a","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/1187338d02a6329a","status":"passed","time":{"start":1698278527827,"stop":1698278528328,"duration":501}},{"uid":"3add66ef32feca49","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/3add66ef32feca49","status":"passed","time":{"start":1698264093929,"stop":1698264094550,"duration":621}},{"uid":"33ba69c7482a1457","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/33ba69c7482a1457","status":"passed","time":{"start":1698249700151,"stop":1698249700825,"duration":674}},{"uid":"7e9cbe4c90e00e15","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/7e9cbe4c90e00e15","status":"passed","time":{"start":1698235300227,"stop":1698235301206,"duration":979}},{"uid":"275bbc42e920087f","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/275bbc42e920087f","status":"passed","time":{"start":1698221190925,"stop":1698221191774,"duration":849}},{"uid":"a9c476c28917271e","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/a9c476c28917271e","status":"passed","time":{"start":1698207122221,"stop":1698207122900,"duration":679}},{"uid":"8ae7f1c400c3ab9e","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/8ae7f1c400c3ab9e","status":"passed","time":{"start":1698192413717,"stop":1698192414659,"duration":942}},{"uid":"12c6f639d3d8d07e","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/12c6f639d3d8d07e","status":"passed","time":{"start":1698178264367,"stop":1698178265142,"duration":775}},{"uid":"252c65062652f4e2","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/252c65062652f4e2","status":"passed","time":{"start":1698163576176,"stop":1698163576891,"duration":715}},{"uid":"638cb7ccd482a505","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/638cb7ccd482a505","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 24 Oct 2023 12:08:41 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1698149321200,"stop":1698149322024,"duration":824}},{"uid":"dd08fa4e61de34d5","reportUrl":"https://novasamatech.github.io/test-runner/4008//#testresult/dd08fa4e61de34d5","status":"passed","time":{"start":1698134498062,"stop":1698134498700,"duration":638}},{"uid":"a0f98acffcebc13c","reportUrl":"https://novasamatech.github.io/test-runner/4002//#testresult/a0f98acffcebc13c","status":"passed","time":{"start":1698048099168,"stop":1698048099683,"duration":515}},{"uid":"eec18f548158a44c","reportUrl":"https://novasamatech.github.io/test-runner/4001//#testresult/eec18f548158a44c","status":"passed","time":{"start":1698033699361,"stop":1698033700146,"duration":785}},{"uid":"f3e906e6127042bd","reportUrl":"https://novasamatech.github.io/test-runner/4000//#testresult/f3e906e6127042bd","status":"passed","time":{"start":1698019330324,"stop":1698019331200,"duration":876}},{"uid":"171364185302a5f9","reportUrl":"https://novasamatech.github.io/test-runner/3999//#testresult/171364185302a5f9","status":"passed","time":{"start":1698004892684,"stop":1698004893499,"duration":815}},{"uid":"c85b9a1ca34ce073","reportUrl":"https://novasamatech.github.io/test-runner/3998//#testresult/c85b9a1ca34ce073","status":"passed","time":{"start":1697990503523,"stop":1697990504201,"duration":678}},{"uid":"417bb2bc4cf3cc89","reportUrl":"https://novasamatech.github.io/test-runner/3997//#testresult/417bb2bc4cf3cc89","status":"passed","time":{"start":1697976095531,"stop":1697976096390,"duration":859}},{"uid":"5e66ddbbc92eda25","reportUrl":"https://novasamatech.github.io/test-runner/3996//#testresult/5e66ddbbc92eda25","status":"passed","time":{"start":1697961701439,"stop":1697961702463,"duration":1024}}]},"tags":[]},"source":"89c91be87c3f3504.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}