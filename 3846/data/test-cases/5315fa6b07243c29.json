{"uid":"5315fa6b07243c29","name":"test_can_create_connection[Test for Aventus, url: wss://public-rpc.mainnet.aventus.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"44233bbaddf25c1595c9c2f0c82f319e","time":{"start":1695830609981,"stop":1695830610419,"duration":438},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 27 Sep 2023 16:03:30 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 27 Sep 2023 16:03:30 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 27 Sep 2023 16:03:30 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Aventus', 'url': 'wss://public-rpc.mainnet.aventus.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 27 Sep 2023 16:03:30 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"af4a83c612d15b8e","name":"stdout","source":"af4a83c612d15b8e.txt","type":"text/plain","size":1134}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1032-571"},{"name":"thread","value":"2032-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"31daee976851a4ec","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 27 Sep 2023 16:03:14 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695830594610,"stop":1695830594864,"duration":254}},{"uid":"3c445f61829b82a1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Wed, 27 Sep 2023 16:02:59 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695830578978,"stop":1695830579431,"duration":453}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":201,"unknown":0,"total":206},"items":[{"uid":"39a67acf2035571f","reportUrl":"https://novasamatech.github.io/test-runner/3845//#testresult/39a67acf2035571f","status":"passed","time":{"start":1695816128736,"stop":1695816129439,"duration":703}},{"uid":"eee53dd2efcbc9c5","reportUrl":"https://novasamatech.github.io/test-runner/3844//#testresult/eee53dd2efcbc9c5","status":"passed","time":{"start":1695801741201,"stop":1695801741828,"duration":627}},{"uid":"6f837d954648cf8a","reportUrl":"https://novasamatech.github.io/test-runner/3843//#testresult/6f837d954648cf8a","status":"passed","time":{"start":1695787329862,"stop":1695787330344,"duration":482}},{"uid":"f27e8351c974e879","reportUrl":"https://novasamatech.github.io/test-runner/3842//#testresult/f27e8351c974e879","status":"passed","time":{"start":1695772970354,"stop":1695772970852,"duration":498}},{"uid":"a2d1c5d88538b218","reportUrl":"https://novasamatech.github.io/test-runner/3841//#testresult/a2d1c5d88538b218","status":"passed","time":{"start":1695758544763,"stop":1695758545396,"duration":633}},{"uid":"4bc2374f3f8d3923","reportUrl":"https://novasamatech.github.io/test-runner/3840//#testresult/4bc2374f3f8d3923","status":"passed","time":{"start":1695744139139,"stop":1695744139656,"duration":517}},{"uid":"ffd145c76db1bcf2","reportUrl":"https://novasamatech.github.io/test-runner/3839//#testresult/ffd145c76db1bcf2","status":"passed","time":{"start":1695729749190,"stop":1695729749683,"duration":493}},{"uid":"d20ab53651f58bd","reportUrl":"https://novasamatech.github.io/test-runner/3838//#testresult/d20ab53651f58bd","status":"passed","time":{"start":1695715341593,"stop":1695715342032,"duration":439}},{"uid":"dda572fe28c1d67","reportUrl":"https://novasamatech.github.io/test-runner/3837//#testresult/dda572fe28c1d67","status":"passed","time":{"start":1695700907084,"stop":1695700907424,"duration":340}},{"uid":"d507a79e80021d8","reportUrl":"https://novasamatech.github.io/test-runner/3836//#testresult/d507a79e80021d8","status":"passed","time":{"start":1695686624012,"stop":1695686624521,"duration":509}},{"uid":"8ab4e9d41d8b176","reportUrl":"https://novasamatech.github.io/test-runner/3835//#testresult/8ab4e9d41d8b176","status":"passed","time":{"start":1695672142085,"stop":1695672142585,"duration":500}},{"uid":"e7c2e43ec8ff8d11","reportUrl":"https://novasamatech.github.io/test-runner/3834//#testresult/e7c2e43ec8ff8d11","status":"passed","time":{"start":1695657755603,"stop":1695657756104,"duration":501}},{"uid":"78fffa4354c1df8a","reportUrl":"https://novasamatech.github.io/test-runner/3833//#testresult/78fffa4354c1df8a","status":"passed","time":{"start":1695643333787,"stop":1695643334449,"duration":662}},{"uid":"3bfb646c5da881f9","reportUrl":"https://novasamatech.github.io/test-runner/3832//#testresult/3bfb646c5da881f9","status":"passed","time":{"start":1695628974736,"stop":1695628975104,"duration":368}},{"uid":"e56f21f9a770593a","reportUrl":"https://novasamatech.github.io/test-runner/3831//#testresult/e56f21f9a770593a","status":"passed","time":{"start":1695614530791,"stop":1695614531274,"duration":483}},{"uid":"7df15986e39d661f","reportUrl":"https://novasamatech.github.io/test-runner/3830//#testresult/7df15986e39d661f","status":"passed","time":{"start":1695600172989,"stop":1695600173597,"duration":608}},{"uid":"8835d239f3411468","reportUrl":"https://novasamatech.github.io/test-runner/3829//#testresult/8835d239f3411468","status":"passed","time":{"start":1695585741967,"stop":1695585742314,"duration":347}},{"uid":"c01a1535acc4f515","reportUrl":"https://novasamatech.github.io/test-runner/3828//#testresult/c01a1535acc4f515","status":"passed","time":{"start":1695571325990,"stop":1695571326478,"duration":488}},{"uid":"c7ccb1d83db8ca68","reportUrl":"https://novasamatech.github.io/test-runner/3827//#testresult/c7ccb1d83db8ca68","status":"passed","time":{"start":1695556921516,"stop":1695556922048,"duration":532}},{"uid":"35ff13180bf2de3b","reportUrl":"https://novasamatech.github.io/test-runner/3826//#testresult/35ff13180bf2de3b","status":"passed","time":{"start":1695542530664,"stop":1695542531302,"duration":638}}]},"tags":[]},"source":"5315fa6b07243c29.json","parameterValues":["{'url': 'wss://public-rpc.mainnet.aventus.io', 'name': 'Aventus'}"]}