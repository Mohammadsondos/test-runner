{"uid":"2c335589c7cd45d0","name":"test_can_create_connection[Test for Altair, url: wss://altair.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"21accf31cfdd1e2d64086949e5ee4c2e","time":{"start":1699200295291,"stop":1699200475958,"duration":180667},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Altair', 'url': 'wss://altair.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Altair', 'url': 'wss://altair.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"6daf84eedc073d70","name":"stdout","source":"6daf84eedc073d70.txt","type":"text/plain","size":381}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1380-0"},{"name":"thread","value":"2457-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://altair.api.onfinality.io/public-ws', 'name': 'Altair'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a53fc0da8f13f241","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699200159506,"stop":1699200280169,"duration":120663}},{"uid":"25b4b149a5b6a091","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699200073929,"stop":1699200144326,"duration":70397}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":436,"unknown":0,"total":442},"items":[{"uid":"7088f6039103db36","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/7088f6039103db36","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699185897376,"stop":1699185958095,"duration":60719}},{"uid":"ae4b875b30fe72b0","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/ae4b875b30fe72b0","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699171425087,"stop":1699171548924,"duration":123837}},{"uid":"b64a137442ada78a","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/b64a137442ada78a","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699157322651,"stop":1699157383440,"duration":60789}},{"uid":"717af21a40b86c4e","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/717af21a40b86c4e","status":"passed","time":{"start":1699142529168,"stop":1699142531486,"duration":2318}},{"uid":"809a2021d26113f2","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/809a2021d26113f2","status":"passed","time":{"start":1699128080083,"stop":1699128081175,"duration":1092}},{"uid":"ff9e480ce4aadc3","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/ff9e480ce4aadc3","status":"passed","time":{"start":1699113685612,"stop":1699113686535,"duration":923}},{"uid":"cd1a806b8de5cceb","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/cd1a806b8de5cceb","status":"passed","time":{"start":1699099281218,"stop":1699099282017,"duration":799}},{"uid":"53edd4dbdf52199c","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/53edd4dbdf52199c","status":"passed","time":{"start":1699084874629,"stop":1699084875601,"duration":972}},{"uid":"e913efc7fcf35f4e","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/e913efc7fcf35f4e","status":"passed","time":{"start":1699070468708,"stop":1699070469477,"duration":769}},{"uid":"2ecb9bb754541bb5","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/2ecb9bb754541bb5","status":"passed","time":{"start":1699041676589,"stop":1699041677549,"duration":960}},{"uid":"a973652d0fcb8342","reportUrl":"https://novasamatech.github.io/test-runner/4072//#testresult/a973652d0fcb8342","status":"passed","time":{"start":1699056121684,"stop":1699056122608,"duration":924}},{"uid":"6af79de8a907a29f","reportUrl":"https://novasamatech.github.io/test-runner/4070//#testresult/6af79de8a907a29f","status":"passed","time":{"start":1699027329026,"stop":1699027329764,"duration":738}},{"uid":"3795d1ee14b2e000","reportUrl":"https://novasamatech.github.io/test-runner/4069//#testresult/3795d1ee14b2e000","status":"passed","time":{"start":1699012879248,"stop":1699012880205,"duration":957}},{"uid":"2625700c06e51f7c","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/2625700c06e51f7c","status":"passed","time":{"start":1698998557291,"stop":1698998558260,"duration":969}},{"uid":"34493b486a9d7d0c","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/34493b486a9d7d0c","status":"passed","time":{"start":1698984077427,"stop":1698984078382,"duration":955}},{"uid":"28849d0917b2e3f1","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/28849d0917b2e3f1","status":"passed","time":{"start":1698969749264,"stop":1698969750218,"duration":954}},{"uid":"1966464fa8b0c7ba","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/1966464fa8b0c7ba","status":"passed","time":{"start":1698955283862,"stop":1698955284606,"duration":744}},{"uid":"ed7293bd3950a1e0","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/ed7293bd3950a1e0","status":"passed","time":{"start":1698940914181,"stop":1698940915138,"duration":957}},{"uid":"da55884e35bda56c","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/da55884e35bda56c","status":"passed","time":{"start":1698926517242,"stop":1698926518228,"duration":986}},{"uid":"19acf527c780e959","reportUrl":"https://novasamatech.github.io/test-runner/4062//#testresult/19acf527c780e959","status":"passed","time":{"start":1698912096017,"stop":1698912096925,"duration":908}}]},"tags":[]},"source":"2c335589c7cd45d0.json","parameterValues":["{'url': 'wss://altair.api.onfinality.io/public-ws', 'name': 'Altair'}"]}