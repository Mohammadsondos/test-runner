{"uid":"be4098d56ef83730","name":"test_can_create_connection[Test for KILT, url: wss://spiritnet.kilt.io/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e9f49a30f86013b1729b9ba9efef42ff","time":{"start":1692403931354,"stop":1692403941946,"duration":10592},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sat, 19 Aug 2023 00:12:21 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'KILT', 'url': 'wss://spiritnet.kilt.io/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sat, 19 Aug 2023 00:12:21 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sat, 19 Aug 2023 00:12:21 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'KILT', 'url': 'wss://spiritnet.kilt.io/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sat, 19 Aug 2023 00:12:21 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"6ea3a53188969e99","name":"stdout","source":"6ea3a53188969e99.txt","type":"text/plain","size":1263}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az409-556"},{"name":"thread","value":"1986-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://spiritnet.kilt.io/', 'name': 'KILT'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d9301c83fadcb3f0","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sat, 19 Aug 2023 00:11:56 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1692403905693,"stop":1692403916228,"duration":10535}},{"uid":"868df006f5ecf528","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sat, 19 Aug 2023 00:11:30 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1692403879913,"stop":1692403890494,"duration":10581}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":593,"unknown":0,"total":596},"items":[{"uid":"b058821eeb54c24a","reportUrl":"https://novasamatech.github.io/test-runner/3600//#testresult/b058821eeb54c24a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Fri, 18 Aug 2023 16:05:05 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1692374702959,"stop":1692374705819,"duration":2860}},{"uid":"f14d9240e1de656b","reportUrl":"https://novasamatech.github.io/test-runner/3601//#testresult/f14d9240e1de656b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Fri, 18 Aug 2023 20:04:48 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1692389085554,"stop":1692389088903,"duration":3349}},{"uid":"284781a733cf609b","reportUrl":"https://novasamatech.github.io/test-runner/3599//#testresult/284781a733cf609b","status":"passed","time":{"start":1692360296987,"stop":1692360297694,"duration":707}},{"uid":"4e361a0adcb80add","reportUrl":"https://novasamatech.github.io/test-runner/3598//#testresult/4e361a0adcb80add","status":"passed","time":{"start":1692345866789,"stop":1692345867653,"duration":864}},{"uid":"132df6a859ab55a5","reportUrl":"https://novasamatech.github.io/test-runner/3597//#testresult/132df6a859ab55a5","status":"passed","time":{"start":1692331546671,"stop":1692331547264,"duration":593}},{"uid":"3263a4f69f8286e7","reportUrl":"https://novasamatech.github.io/test-runner/3596//#testresult/3263a4f69f8286e7","status":"passed","time":{"start":1692317520346,"stop":1692317520999,"duration":653}},{"uid":"c1833317a147162b","reportUrl":"https://novasamatech.github.io/test-runner/3594//#testresult/c1833317a147162b","status":"passed","time":{"start":1692288254684,"stop":1692288255329,"duration":645}},{"uid":"27448026c5f866c5","reportUrl":"https://novasamatech.github.io/test-runner/3595//#testresult/27448026c5f866c5","status":"passed","time":{"start":1692302662747,"stop":1692302663426,"duration":679}},{"uid":"64d9b602cced199b","reportUrl":"https://novasamatech.github.io/test-runner/3593//#testresult/64d9b602cced199b","status":"passed","time":{"start":1692273912904,"stop":1692273913574,"duration":670}},{"uid":"2c5d8d660b9c92f8","reportUrl":"https://novasamatech.github.io/test-runner/3592//#testresult/2c5d8d660b9c92f8","status":"passed","time":{"start":1692259470582,"stop":1692259471565,"duration":983}},{"uid":"f47bfd8030913e7","reportUrl":"https://novasamatech.github.io/test-runner/3591//#testresult/f47bfd8030913e7","status":"passed","time":{"start":1692245048659,"stop":1692245049524,"duration":865}},{"uid":"10186e7dee8806f","reportUrl":"https://novasamatech.github.io/test-runner/3590//#testresult/10186e7dee8806f","status":"passed","time":{"start":1692231116609,"stop":1692231117285,"duration":676}},{"uid":"a9ba5c122c59e89c","reportUrl":"https://novasamatech.github.io/test-runner/3589//#testresult/a9ba5c122c59e89c","status":"passed","time":{"start":1692216248167,"stop":1692216248806,"duration":639}},{"uid":"b90a6624eedbf586","reportUrl":"https://novasamatech.github.io/test-runner/3588//#testresult/b90a6624eedbf586","status":"passed","time":{"start":1692201865394,"stop":1692201866161,"duration":767}},{"uid":"7c0e0e25a809db3d","reportUrl":"https://novasamatech.github.io/test-runner/3587//#testresult/7c0e0e25a809db3d","status":"passed","time":{"start":1692187489894,"stop":1692187490382,"duration":488}},{"uid":"ba43ee8f424e9979","reportUrl":"https://novasamatech.github.io/test-runner/3586//#testresult/ba43ee8f424e9979","status":"passed","time":{"start":1692173068313,"stop":1692173069282,"duration":969}},{"uid":"a9a8ca633ba68516","reportUrl":"https://novasamatech.github.io/test-runner/3585//#testresult/a9a8ca633ba68516","status":"passed","time":{"start":1692158660776,"stop":1692158661630,"duration":854}},{"uid":"65cd71cd8d974a6e","reportUrl":"https://novasamatech.github.io/test-runner/3584//#testresult/65cd71cd8d974a6e","status":"passed","time":{"start":1692144737612,"stop":1692144738280,"duration":668}},{"uid":"615350d571512d42","reportUrl":"https://novasamatech.github.io/test-runner/3583//#testresult/615350d571512d42","status":"passed","time":{"start":1692129852710,"stop":1692129853532,"duration":822}},{"uid":"3706facaa71eba1f","reportUrl":"https://novasamatech.github.io/test-runner/3582//#testresult/3706facaa71eba1f","status":"passed","time":{"start":1692115458984,"stop":1692115459948,"duration":964}}]},"tags":[]},"source":"be4098d56ef83730.json","parameterValues":["{'url': 'wss://spiritnet.kilt.io/', 'name': 'KILT'}"]}