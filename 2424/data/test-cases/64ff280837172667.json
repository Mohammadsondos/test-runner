{"uid":"64ff280837172667","name":"test_can_create_connection[Test for GM, url: wss://leemo.gmordie.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"5511fed58647d3e88cb327965482906f","time":{"start":1675873479443,"stop":1675873489466,"duration":10023},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -3] Temporary failure in name resolution","statusTrace":"hostname = 'leemo.gmordie.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fcb29e1e8f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'leemo.gmordie.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -3] Temporary failure in name resolution\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'GM', 'url': 'wss://leemo.gmordie.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'leemo.gmordie.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fcb29e1e8f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -3] Temporary failure in name resolution\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -3] Temporary failure in name resolution","statusTrace":"hostname = 'leemo.gmordie.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fcb29e1e8f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'leemo.gmordie.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -3] Temporary failure in name resolution\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'GM', 'url': 'wss://leemo.gmordie.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'leemo.gmordie.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7fcb29e1e8f0>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -3] Temporary failure in name resolution\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"c1aa726e9525fde2","name":"stdout","source":"c1aa726e9525fde2.txt","type":"text/plain","size":244}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az341-867"},{"name":"thread","value":"1751-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://leemo.gmordie.com', 'name': 'GM'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"51ac44036ccced53","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -3] Temporary failure in name resolution","time":{"start":1675873459280,"stop":1675873469314,"duration":10034}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":491,"unknown":0,"total":546},"items":[{"uid":"5cd1e9cf7fb3af7b","reportUrl":"https://nova-wallet.github.io/test-runner/2423//#testresult/5cd1e9cf7fb3af7b","status":"passed","time":{"start":1675859214831,"stop":1675859215462,"duration":631}},{"uid":"caafe8c08e1f065a","reportUrl":"https://nova-wallet.github.io/test-runner/2422//#testresult/caafe8c08e1f065a","status":"passed","time":{"start":1675844575965,"stop":1675844576590,"duration":625}},{"uid":"ef55e22588fb2cba","reportUrl":"https://nova-wallet.github.io/test-runner/2421//#testresult/ef55e22588fb2cba","status":"passed","time":{"start":1675830106376,"stop":1675830107003,"duration":627}},{"uid":"74621ff8e463229d","reportUrl":"https://nova-wallet.github.io/test-runner/2420//#testresult/74621ff8e463229d","status":"passed","time":{"start":1675818829929,"stop":1675818830578,"duration":649}},{"uid":"793bfee328dcfec2","reportUrl":"https://nova-wallet.github.io/test-runner/2419//#testresult/793bfee328dcfec2","status":"passed","time":{"start":1675801160826,"stop":1675801161678,"duration":852}},{"uid":"40105d8a8480ec40","reportUrl":"https://nova-wallet.github.io/test-runner/2417//#testresult/40105d8a8480ec40","status":"passed","time":{"start":1675772854879,"stop":1675772855854,"duration":975}},{"uid":"ee7730900c7c1322","reportUrl":"https://nova-wallet.github.io/test-runner/2416//#testresult/ee7730900c7c1322","status":"passed","time":{"start":1675758158535,"stop":1675758159235,"duration":700}},{"uid":"c912ec6ea56069f6","reportUrl":"https://nova-wallet.github.io/test-runner/2415//#testresult/c912ec6ea56069f6","status":"passed","time":{"start":1675743661579,"stop":1675743662298,"duration":719}},{"uid":"a3d88a42dc34069f","reportUrl":"https://nova-wallet.github.io/test-runner/2414//#testresult/a3d88a42dc34069f","status":"passed","time":{"start":1675732348939,"stop":1675732349927,"duration":988}},{"uid":"3682b1c3dbcba925","reportUrl":"https://nova-wallet.github.io/test-runner/2413//#testresult/3682b1c3dbcba925","status":"passed","time":{"start":1675714788458,"stop":1675714789488,"duration":1030}},{"uid":"f3bffc6f45e64c0e","reportUrl":"https://nova-wallet.github.io/test-runner/2412//#testresult/f3bffc6f45e64c0e","status":"passed","time":{"start":1675700357216,"stop":1675700358175,"duration":959}},{"uid":"c609a9dc89dbbfc6","reportUrl":"https://nova-wallet.github.io/test-runner/2410//#testresult/c609a9dc89dbbfc6","status":"passed","time":{"start":1675671516685,"stop":1675671517720,"duration":1035}},{"uid":"15ef9a700731100b","reportUrl":"https://nova-wallet.github.io/test-runner/2409//#testresult/15ef9a700731100b","status":"passed","time":{"start":1675657016643,"stop":1675657017616,"duration":973}},{"uid":"82a095ea3090047b","reportUrl":"https://nova-wallet.github.io/test-runner/2408//#testresult/82a095ea3090047b","status":"passed","time":{"start":1675645569992,"stop":1675645570849,"duration":857}},{"uid":"ae66b2f1802eae94","reportUrl":"https://nova-wallet.github.io/test-runner/2407//#testresult/ae66b2f1802eae94","status":"passed","time":{"start":1675627997392,"stop":1675627998043,"duration":651}},{"uid":"aa8bdff5bd57241b","reportUrl":"https://nova-wallet.github.io/test-runner/2406//#testresult/aa8bdff5bd57241b","status":"passed","time":{"start":1675614099602,"stop":1675614100295,"duration":693}},{"uid":"a3bc612ea291cfd1","reportUrl":"https://nova-wallet.github.io/test-runner/2405//#testresult/a3bc612ea291cfd1","status":"passed","time":{"start":1675599851145,"stop":1675599852069,"duration":924}},{"uid":"925e48a280c5134d","reportUrl":"https://nova-wallet.github.io/test-runner/2404//#testresult/925e48a280c5134d","status":"passed","time":{"start":1675585256587,"stop":1675585257284,"duration":697}},{"uid":"e9c06efdc0cac4c","reportUrl":"https://nova-wallet.github.io/test-runner/2403//#testresult/e9c06efdc0cac4c","status":"passed","time":{"start":1675570575927,"stop":1675570576747,"duration":820}},{"uid":"19a5b457ece95941","reportUrl":"https://nova-wallet.github.io/test-runner/2402//#testresult/19a5b457ece95941","status":"passed","time":{"start":1675559593591,"stop":1675559594402,"duration":811}}]},"tags":[]},"source":"64ff280837172667.json","parameterValues":["{'url': 'wss://leemo.gmordie.com', 'name': 'GM'}"]}