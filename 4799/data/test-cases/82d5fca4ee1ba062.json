{"uid":"82d5fca4ee1ba062","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1709323285675,"stop":1709323285752,"duration":77},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f4ebf965a50>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f4ebd75c8e0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f4ebd75e590>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1113-370"},{"name":"thread","value":"2065-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"398a3dec87a27476","status":"failed","statusDetails":"AssertionError: assert 'error' not in {'error': {'code': -32005, 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.0333333333333334}, 'see': 'https://infura.io/dashboard'}, 'message': 'daily request count exceeded, request rate limited'}, 'id': 0, 'jsonrpc': '2.0'}","time":{"start":1709323280597,"stop":1709323280660,"duration":63}},{"uid":"4d5bb5672deedcfd","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709323275479,"stop":1709323275561,"duration":82}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":7,"skipped":0,"passed":450,"unknown":0,"total":458},"items":[{"uid":"31e1e55062544c90","reportUrl":"https://novasamatech.github.io/test-runner/4798//#testresult/31e1e55062544c90","status":"passed","time":{"start":1709308864285,"stop":1709308864724,"duration":439}},{"uid":"d21531eabe797e20","reportUrl":"https://novasamatech.github.io/test-runner/4796//#testresult/d21531eabe797e20","status":"passed","time":{"start":1709289996272,"stop":1709289996719,"duration":447}},{"uid":"48a8a9fbb6d64103","reportUrl":"https://novasamatech.github.io/test-runner/4789//#testresult/48a8a9fbb6d64103","status":"passed","time":{"start":1709193661260,"stop":1709193661396,"duration":136}},{"uid":"f53b0fcc396f7baa","reportUrl":"https://novasamatech.github.io/test-runner/4788//#testresult/f53b0fcc396f7baa","status":"passed","time":{"start":1709179265646,"stop":1709179266418,"duration":772}},{"uid":"901a302408eccbd0","reportUrl":"https://novasamatech.github.io/test-runner/4787//#testresult/901a302408eccbd0","status":"passed","time":{"start":1709164904552,"stop":1709164905247,"duration":695}},{"uid":"811394a53441f46","reportUrl":"https://novasamatech.github.io/test-runner/4786//#testresult/811394a53441f46","status":"passed","time":{"start":1709150484419,"stop":1709150484615,"duration":196}},{"uid":"8e8392a4db0fa142","reportUrl":"https://novasamatech.github.io/test-runner/4785//#testresult/8e8392a4db0fa142","status":"passed","time":{"start":1709136077019,"stop":1709136077252,"duration":233}},{"uid":"3a67d90c971c92ac","reportUrl":"https://novasamatech.github.io/test-runner/4784//#testresult/3a67d90c971c92ac","status":"passed","time":{"start":1709121699884,"stop":1709121700222,"duration":338}},{"uid":"fe7c205e9f47f08f","reportUrl":"https://novasamatech.github.io/test-runner/4783//#testresult/fe7c205e9f47f08f","status":"passed","time":{"start":1709107266142,"stop":1709107266316,"duration":174}},{"uid":"af0ac6a3a57fbc3f","reportUrl":"https://novasamatech.github.io/test-runner/4782//#testresult/af0ac6a3a57fbc3f","status":"passed","time":{"start":1709092860350,"stop":1709092860726,"duration":376}},{"uid":"c4f58f5479c15985","reportUrl":"https://novasamatech.github.io/test-runner/4781//#testresult/c4f58f5479c15985","status":"passed","time":{"start":1709078493191,"stop":1709078493392,"duration":201}},{"uid":"2a4cee63fb0b211d","reportUrl":"https://novasamatech.github.io/test-runner/4780//#testresult/2a4cee63fb0b211d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709064087229,"stop":1709064087583,"duration":354}},{"uid":"61baad65e9bb5a40","reportUrl":"https://novasamatech.github.io/test-runner/4779//#testresult/61baad65e9bb5a40","status":"passed","time":{"start":1709049669000,"stop":1709049669756,"duration":756}},{"uid":"848fbf56eda79e2d","reportUrl":"https://novasamatech.github.io/test-runner/4778//#testresult/848fbf56eda79e2d","status":"passed","time":{"start":1709035284695,"stop":1709035284893,"duration":198}},{"uid":"262fe56eb02d3b84","reportUrl":"https://novasamatech.github.io/test-runner/4776//#testresult/262fe56eb02d3b84","status":"passed","time":{"start":1709032476226,"stop":1709032476399,"duration":173}},{"uid":"8256c577c1125a0d","reportUrl":"https://novasamatech.github.io/test-runner/4703//#testresult/8256c577c1125a0d","status":"passed","time":{"start":1707984058097,"stop":1707984058308,"duration":211}},{"uid":"a12103007b877fc6","reportUrl":"https://novasamatech.github.io/test-runner/4702//#testresult/a12103007b877fc6","status":"passed","time":{"start":1707969665748,"stop":1707969665943,"duration":195}},{"uid":"7f1d435ec352118","reportUrl":"https://novasamatech.github.io/test-runner/4701//#testresult/7f1d435ec352118","status":"passed","time":{"start":1707955311242,"stop":1707955311484,"duration":242}},{"uid":"ced0555594ec5c57","reportUrl":"https://novasamatech.github.io/test-runner/4700//#testresult/ced0555594ec5c57","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707940880836,"stop":1707940880909,"duration":73}},{"uid":"3a03f7fc8493e56e","reportUrl":"https://novasamatech.github.io/test-runner/4699//#testresult/3a03f7fc8493e56e","status":"passed","time":{"start":1707926463441,"stop":1707926464216,"duration":775}}]},"tags":[]},"source":"82d5fca4ee1ba062.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}