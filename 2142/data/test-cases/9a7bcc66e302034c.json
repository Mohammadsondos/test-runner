{"uid":"9a7bcc66e302034c","name":"test_can_create_connection[Test for Polkadex Solochain, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2b59599e767efd554c785382b5f8231a","time":{"start":1671869209975,"stop":1671869210437,"duration":462},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Polkadex Solochain', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Polkadex Solochain', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"f44a796126f7597c","name":"stdout","source":"f44a796126f7597c.txt","type":"text/plain","size":236}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az422-244"},{"name":"thread","value":"1712-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex Solochain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7f947c5af55bdae4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1671869199468,"stop":1671869199841,"duration":373}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":355,"unknown":0,"total":410},"items":[{"uid":"9055413987971c45","reportUrl":"https://nova-wallet.github.io/test-runner/2141//#testresult/9055413987971c45","status":"passed","time":{"start":1671854789267,"stop":1671854790187,"duration":920}},{"uid":"13dc9c568815e46c","reportUrl":"https://nova-wallet.github.io/test-runner/2140//#testresult/13dc9c568815e46c","status":"passed","time":{"start":1671840750577,"stop":1671840751538,"duration":961}},{"uid":"7ae316ebafa3fa25","reportUrl":"https://nova-wallet.github.io/test-runner/2139//#testresult/7ae316ebafa3fa25","status":"passed","time":{"start":1671825911509,"stop":1671825912479,"duration":970}},{"uid":"5b7261c1d5a68cb8","reportUrl":"https://nova-wallet.github.io/test-runner/2138//#testresult/5b7261c1d5a68cb8","status":"passed","time":{"start":1671811504570,"stop":1671811505553,"duration":983}},{"uid":"64f2a05ac980148f","reportUrl":"https://nova-wallet.github.io/test-runner/2137//#testresult/64f2a05ac980148f","status":"passed","time":{"start":1671797168914,"stop":1671797169834,"duration":920}},{"uid":"57a6b5fe700dfb4d","reportUrl":"https://nova-wallet.github.io/test-runner/2136//#testresult/57a6b5fe700dfb4d","status":"passed","time":{"start":1671782721721,"stop":1671782723326,"duration":1605}},{"uid":"b1bc9da7238b6c71","reportUrl":"https://nova-wallet.github.io/test-runner/2135//#testresult/b1bc9da7238b6c71","status":"passed","time":{"start":1671768316607,"stop":1671768317522,"duration":915}},{"uid":"fd1a5d94ac6529ce","reportUrl":"https://nova-wallet.github.io/test-runner/2134//#testresult/fd1a5d94ac6529ce","status":"passed","time":{"start":1671754454711,"stop":1671754457256,"duration":2545}},{"uid":"832d612cdc86eeb3","reportUrl":"https://nova-wallet.github.io/test-runner/2133//#testresult/832d612cdc86eeb3","status":"passed","time":{"start":1671739492518,"stop":1671739492871,"duration":353}},{"uid":"faf08fe8fbbd8c33","reportUrl":"https://nova-wallet.github.io/test-runner/2132//#testresult/faf08fe8fbbd8c33","status":"passed","time":{"start":1671725125529,"stop":1671725126259,"duration":730}},{"uid":"a677e9b26f9bd2eb","reportUrl":"https://nova-wallet.github.io/test-runner/2131//#testresult/a677e9b26f9bd2eb","status":"passed","time":{"start":1671710780564,"stop":1671710780667,"duration":103}},{"uid":"6dfeaa647b044926","reportUrl":"https://nova-wallet.github.io/test-runner/2130//#testresult/6dfeaa647b044926","status":"passed","time":{"start":1671696322121,"stop":1671696322925,"duration":804}},{"uid":"da1a6a4b08bbda7f","reportUrl":"https://nova-wallet.github.io/test-runner/2129//#testresult/da1a6a4b08bbda7f","status":"passed","time":{"start":1671681917201,"stop":1671681917599,"duration":398}},{"uid":"2f164698f4c48fba","reportUrl":"https://nova-wallet.github.io/test-runner/2128//#testresult/2f164698f4c48fba","status":"passed","time":{"start":1671668319604,"stop":1671668320024,"duration":420}},{"uid":"31590c2426a81f8a","reportUrl":"https://nova-wallet.github.io/test-runner/2127//#testresult/31590c2426a81f8a","status":"passed","time":{"start":1671653098174,"stop":1671653098888,"duration":714}},{"uid":"16cc47f61517d26c","reportUrl":"https://nova-wallet.github.io/test-runner/2126//#testresult/16cc47f61517d26c","status":"passed","time":{"start":1671638728560,"stop":1671638729821,"duration":1261}},{"uid":"c60d72064b0abb5e","reportUrl":"https://nova-wallet.github.io/test-runner/2125//#testresult/c60d72064b0abb5e","status":"passed","time":{"start":1671624364541,"stop":1671624365913,"duration":1372}},{"uid":"595973853fdd13fd","reportUrl":"https://nova-wallet.github.io/test-runner/2124//#testresult/595973853fdd13fd","status":"passed","time":{"start":1671609973500,"stop":1671609974940,"duration":1440}},{"uid":"96f24b579afb7956","reportUrl":"https://nova-wallet.github.io/test-runner/2123//#testresult/96f24b579afb7956","status":"passed","time":{"start":1671595504955,"stop":1671595505347,"duration":392}},{"uid":"818067bd0f53adcf","reportUrl":"https://nova-wallet.github.io/test-runner/2122//#testresult/818067bd0f53adcf","status":"passed","time":{"start":1671581644462,"stop":1671581645335,"duration":873}}]},"tags":[]},"source":"9a7bcc66e302034c.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex Solochain'}"]}