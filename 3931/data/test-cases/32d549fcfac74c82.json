{"uid":"32d549fcfac74c82","name":"test_has_new_assets[Test for Composable Finance]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"6ed403c188bd8bbaba3701ff58033048","time":{"start":1697040178037,"stop":1697040179757,"duration":1720},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f95346f17b0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f9534952b90>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1124: in init_runtime\n    block_header = self.rpc_request('chain_getHeader', [self.block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f95186f43a0>\nmethod = 'chain_getHeader'\nparams = ['0xb677ec5243477391f3e5606cb5d9ac06ef2e8526de68c569e47ccbbaf588a122']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az614-854"},{"name":"thread","value":"2143-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f9534952b90>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"12572b5f1c0337b0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697040161158,"stop":1697040162897,"duration":1739}},{"uid":"3945f078b958447","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1697040144108,"stop":1697040145869,"duration":1761}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":285,"unknown":0,"total":290},"items":[{"uid":"a3394e2f135a63ae","reportUrl":"https://novasamatech.github.io/test-runner/3930//#testresult/a3394e2f135a63ae","status":"passed","time":{"start":1697025727618,"stop":1697025732660,"duration":5042}},{"uid":"5a3cec5fa42bb561","reportUrl":"https://novasamatech.github.io/test-runner/3929//#testresult/5a3cec5fa42bb561","status":"passed","time":{"start":1697011437300,"stop":1697011443937,"duration":6637}},{"uid":"ee8ea3ef6d34d461","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/ee8ea3ef6d34d461","status":"passed","time":{"start":1696996940222,"stop":1696996946869,"duration":6647}},{"uid":"6c8c7faaac0111ef","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/6c8c7faaac0111ef","status":"passed","time":{"start":1696982648377,"stop":1696982652975,"duration":4598}},{"uid":"80cc2c79269b0e2e","reportUrl":"https://novasamatech.github.io/test-runner/3926//#testresult/80cc2c79269b0e2e","status":"passed","time":{"start":1696968129708,"stop":1696968137171,"duration":7463}},{"uid":"6b5c558313f3a5d8","reportUrl":"https://novasamatech.github.io/test-runner/3925//#testresult/6b5c558313f3a5d8","status":"passed","time":{"start":1696953726318,"stop":1696953739492,"duration":13174}},{"uid":"ca5659dacc6583dd","reportUrl":"https://novasamatech.github.io/test-runner/3924//#testresult/ca5659dacc6583dd","status":"passed","time":{"start":1696939326208,"stop":1696939336183,"duration":9975}},{"uid":"ff2434994c71538d","reportUrl":"https://novasamatech.github.io/test-runner/3923//#testresult/ff2434994c71538d","status":"passed","time":{"start":1696924952497,"stop":1696924960533,"duration":8036}},{"uid":"ef66308fabf20e2a","reportUrl":"https://novasamatech.github.io/test-runner/3922//#testresult/ef66308fabf20e2a","status":"passed","time":{"start":1696910528053,"stop":1696910535476,"duration":7423}},{"uid":"fe5daa46c1dc567","reportUrl":"https://novasamatech.github.io/test-runner/3921//#testresult/fe5daa46c1dc567","status":"passed","time":{"start":1696896186309,"stop":1696896195357,"duration":9048}},{"uid":"9b71febb6a3f06c","reportUrl":"https://novasamatech.github.io/test-runner/3920//#testresult/9b71febb6a3f06c","status":"passed","time":{"start":1696881726628,"stop":1696881731371,"duration":4743}},{"uid":"d1a16680e189536f","reportUrl":"https://novasamatech.github.io/test-runner/3919//#testresult/d1a16680e189536f","status":"passed","time":{"start":1696867359655,"stop":1696867370855,"duration":11200}},{"uid":"d8f4d259e43faffd","reportUrl":"https://novasamatech.github.io/test-runner/3918//#testresult/d8f4d259e43faffd","status":"passed","time":{"start":1696852921826,"stop":1696852930508,"duration":8682}},{"uid":"1dcb2f98e270a352","reportUrl":"https://novasamatech.github.io/test-runner/3917//#testresult/1dcb2f98e270a352","status":"passed","time":{"start":1696838525102,"stop":1696838531576,"duration":6474}},{"uid":"5e7cd802290a8bcd","reportUrl":"https://novasamatech.github.io/test-runner/3916//#testresult/5e7cd802290a8bcd","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696824154100,"stop":1696824155844,"duration":1744}},{"uid":"9410e72a5d15851a","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/9410e72a5d15851a","status":"passed","time":{"start":1696809774965,"stop":1696809783453,"duration":8488}},{"uid":"2c331d77f1ab5f9a","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/2c331d77f1ab5f9a","status":"passed","time":{"start":1696795337953,"stop":1696795342785,"duration":4832}},{"uid":"b88c9420de027030","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/b88c9420de027030","status":"passed","time":{"start":1696780927672,"stop":1696780938464,"duration":10792}},{"uid":"d16479b5bea6782a","reportUrl":"https://novasamatech.github.io/test-runner/3912//#testresult/d16479b5bea6782a","status":"passed","time":{"start":1696766531424,"stop":1696766538387,"duration":6963}},{"uid":"a7b1dbfa885cfa76","reportUrl":"https://novasamatech.github.io/test-runner/3911//#testresult/a7b1dbfa885cfa76","status":"passed","time":{"start":1696752146524,"stop":1696752151821,"duration":5297}}]},"tags":[]},"source":"32d549fcfac74c82.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f9534952b90>"]}