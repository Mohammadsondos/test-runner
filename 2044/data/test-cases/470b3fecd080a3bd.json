{"uid":"470b3fecd080a3bd","name":"test_can_create_connection[Test for Polkadot, url: wss://polkadot.public.curie.radiumblock.io/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a5de27066c49991b0497e12a217d610d","time":{"start":1670458398632,"stop":1670458399057,"duration":425},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","statusTrace":"data = {'name': 'Polkadot', 'url': 'wss://polkadot.public.curie.radiumblock.io/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","statusTrace":"data = {'name': 'Polkadot', 'url': 'wss://polkadot.public.curie.radiumblock.io/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"8de261a69c8eab13","name":"stdout","source":"8de261a69c8eab13.txt","type":"text/plain","size":298}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az565-345"},{"name":"thread","value":"1665-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.public.curie.radiumblock.io/ws', 'name': 'Polkadot'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3ce925f20adf8aee","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670458388309,"stop":1670458388521,"duration":212}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":64,"skipped":0,"passed":118,"unknown":0,"total":182},"items":[{"uid":"3432971302241171","reportUrl":"https://nova-wallet.github.io/test-runner/2043//#testresult/3432971302241171","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670443432518,"stop":1670443432740,"duration":222}},{"uid":"b1c9d0778e6ee371","reportUrl":"https://nova-wallet.github.io/test-runner/2042//#testresult/b1c9d0778e6ee371","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670429050984,"stop":1670429051207,"duration":223}},{"uid":"ac5420cf40c57f16","reportUrl":"https://nova-wallet.github.io/test-runner/2041//#testresult/ac5420cf40c57f16","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670414702920,"stop":1670414703262,"duration":342}},{"uid":"f932e1c0353954fc","reportUrl":"https://nova-wallet.github.io/test-runner/2040//#testresult/f932e1c0353954fc","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670400253536,"stop":1670400253613,"duration":77}},{"uid":"7871e29eef037b83","reportUrl":"https://nova-wallet.github.io/test-runner/2039//#testresult/7871e29eef037b83","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670385841026,"stop":1670385841305,"duration":279}},{"uid":"55e5cea9741fa41a","reportUrl":"https://nova-wallet.github.io/test-runner/2038//#testresult/55e5cea9741fa41a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670372033542,"stop":1670372033760,"duration":218}},{"uid":"bb1ffc542d4f1756","reportUrl":"https://nova-wallet.github.io/test-runner/2037//#testresult/bb1ffc542d4f1756","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670357040392,"stop":1670357040588,"duration":196}},{"uid":"dcddd903fdc7e53e","reportUrl":"https://nova-wallet.github.io/test-runner/2036//#testresult/dcddd903fdc7e53e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670342634146,"stop":1670342634359,"duration":213}},{"uid":"4717eb88ead1e6c4","reportUrl":"https://nova-wallet.github.io/test-runner/2035//#testresult/4717eb88ead1e6c4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1670333394046,"stop":1670333394278,"duration":232}},{"uid":"5f7a8af7b2222b62","reportUrl":"https://nova-wallet.github.io/test-runner/2027//#testresult/5f7a8af7b2222b62","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670241909851,"stop":1670241910028,"duration":177}},{"uid":"34d906b6d613879f","reportUrl":"https://nova-wallet.github.io/test-runner/2026//#testresult/34d906b6d613879f","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670227474005,"stop":1670227474204,"duration":199}},{"uid":"3d342428bb1275ec","reportUrl":"https://nova-wallet.github.io/test-runner/2025//#testresult/3d342428bb1275ec","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670213051818,"stop":1670213051912,"duration":94}},{"uid":"25866ae0e5b43d77","reportUrl":"https://nova-wallet.github.io/test-runner/2024//#testresult/25866ae0e5b43d77","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670199250383,"stop":1670199250740,"duration":357}},{"uid":"12d3e6f779212388","reportUrl":"https://nova-wallet.github.io/test-runner/2023//#testresult/12d3e6f779212388","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670184258772,"stop":1670184258844,"duration":72}},{"uid":"b6ce1c2b8d0bdfe2","reportUrl":"https://nova-wallet.github.io/test-runner/2022//#testresult/b6ce1c2b8d0bdfe2","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670169840500,"stop":1670169840588,"duration":88}},{"uid":"a66e8bc8d68984ef","reportUrl":"https://nova-wallet.github.io/test-runner/2021//#testresult/a66e8bc8d68984ef","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670156720046,"stop":1670156720205,"duration":159}},{"uid":"ce4cb7df4eae2327","reportUrl":"https://nova-wallet.github.io/test-runner/2020//#testresult/ce4cb7df4eae2327","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670141805716,"stop":1670141805911,"duration":195}},{"uid":"994b3716c542cd27","reportUrl":"https://nova-wallet.github.io/test-runner/2019//#testresult/994b3716c542cd27","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670127385959,"stop":1670127386314,"duration":355}},{"uid":"7fc806b901cc3625","reportUrl":"https://nova-wallet.github.io/test-runner/2018//#testresult/7fc806b901cc3625","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670116145209,"stop":1670116145544,"duration":335}},{"uid":"60353ccc63aea86f","reportUrl":"https://nova-wallet.github.io/test-runner/2017//#testresult/60353ccc63aea86f","status":"broken","statusDetails":"ValueError: Unsupported type registry preset \"metadata_types\"","time":{"start":1670098413443,"stop":1670098413514,"duration":71}}]},"tags":[]},"source":"470b3fecd080a3bd.json","parameterValues":["{'url': 'wss://polkadot.public.curie.radiumblock.io/ws', 'name': 'Polkadot'}"]}