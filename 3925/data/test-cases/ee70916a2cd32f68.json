{"uid":"ee70916a2cd32f68","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1696953745992,"stop":1696953746476,"duration":484},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 10 Oct 2023 16:02:26 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 10 Oct 2023 16:02:26 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 10 Oct 2023 16:02:26 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 10 Oct 2023 16:02:26 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"ee7af55997aa02e9","name":"stdout","source":"ee7af55997aa02e9.txt","type":"text/plain","size":1464}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az453-619"},{"name":"thread","value":"2079-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c5d181c43fa38515","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 10 Oct 2023 16:02:10 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1696953730347,"stop":1696953730833,"duration":486}},{"uid":"3c571c1923cb292b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Tue, 10 Oct 2023 16:01:55 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1696953714687,"stop":1696953715188,"duration":501}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":43,"skipped":0,"passed":242,"unknown":0,"total":285},"items":[{"uid":"ddec3ef105215661","reportUrl":"https://novasamatech.github.io/test-runner/3924//#testresult/ddec3ef105215661","status":"passed","time":{"start":1696939305222,"stop":1696939305755,"duration":533}},{"uid":"603a3ccfe0d56342","reportUrl":"https://novasamatech.github.io/test-runner/3923//#testresult/603a3ccfe0d56342","status":"passed","time":{"start":1696924904912,"stop":1696924905417,"duration":505}},{"uid":"e18d597cac68b0a3","reportUrl":"https://novasamatech.github.io/test-runner/3922//#testresult/e18d597cac68b0a3","status":"passed","time":{"start":1696910498751,"stop":1696910499268,"duration":517}},{"uid":"32f468f39b5b0cfe","reportUrl":"https://novasamatech.github.io/test-runner/3921//#testresult/32f468f39b5b0cfe","status":"passed","time":{"start":1696896159166,"stop":1696896159828,"duration":662}},{"uid":"94e283ec1057154d","reportUrl":"https://novasamatech.github.io/test-runner/3920//#testresult/94e283ec1057154d","status":"passed","time":{"start":1696881706680,"stop":1696881707255,"duration":575}},{"uid":"7472eeb445fa7e5e","reportUrl":"https://novasamatech.github.io/test-runner/3919//#testresult/7472eeb445fa7e5e","status":"passed","time":{"start":1696867322725,"stop":1696867323093,"duration":368}},{"uid":"a68ffd4afa3e230b","reportUrl":"https://novasamatech.github.io/test-runner/3918//#testresult/a68ffd4afa3e230b","status":"passed","time":{"start":1696852914956,"stop":1696852915575,"duration":619}},{"uid":"c894eb63f1d2bf8e","reportUrl":"https://novasamatech.github.io/test-runner/3917//#testresult/c894eb63f1d2bf8e","status":"passed","time":{"start":1696838504230,"stop":1696838504774,"duration":544}},{"uid":"5e13cce97a67c578","reportUrl":"https://novasamatech.github.io/test-runner/3916//#testresult/5e13cce97a67c578","status":"passed","time":{"start":1696824102962,"stop":1696824103525,"duration":563}},{"uid":"e8bfaff4c81d9843","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/e8bfaff4c81d9843","status":"passed","time":{"start":1696809745797,"stop":1696809746314,"duration":517}},{"uid":"16f15667da633ee3","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/16f15667da633ee3","status":"passed","time":{"start":1696795332661,"stop":1696795333237,"duration":576}},{"uid":"c60e3a2d3f3409b2","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/c60e3a2d3f3409b2","status":"passed","time":{"start":1696780924807,"stop":1696780925376,"duration":569}},{"uid":"6cabce2265c9ce82","reportUrl":"https://novasamatech.github.io/test-runner/3912//#testresult/6cabce2265c9ce82","status":"passed","time":{"start":1696766509149,"stop":1696766509653,"duration":504}},{"uid":"7e6f07c3f940bf19","reportUrl":"https://novasamatech.github.io/test-runner/3911//#testresult/7e6f07c3f940bf19","status":"passed","time":{"start":1696752116644,"stop":1696752117406,"duration":762}},{"uid":"342a993a5892c69a","reportUrl":"https://novasamatech.github.io/test-runner/3910//#testresult/342a993a5892c69a","status":"passed","time":{"start":1696737701223,"stop":1696737701638,"duration":415}},{"uid":"8378642cef32da93","reportUrl":"https://novasamatech.github.io/test-runner/3909//#testresult/8378642cef32da93","status":"passed","time":{"start":1696723354686,"stop":1696723355255,"duration":569}},{"uid":"dddf712e85516b05","reportUrl":"https://novasamatech.github.io/test-runner/3908//#testresult/dddf712e85516b05","status":"passed","time":{"start":1696708894398,"stop":1696708894935,"duration":537}},{"uid":"ca1bfccbb2d0699e","reportUrl":"https://novasamatech.github.io/test-runner/3907//#testresult/ca1bfccbb2d0699e","status":"passed","time":{"start":1696694534287,"stop":1696694534929,"duration":642}},{"uid":"6902b5a9c4fbf8de","reportUrl":"https://novasamatech.github.io/test-runner/3906//#testresult/6902b5a9c4fbf8de","status":"passed","time":{"start":1696680103660,"stop":1696680104250,"duration":590}},{"uid":"453c55ab351dccf","reportUrl":"https://novasamatech.github.io/test-runner/3905//#testresult/453c55ab351dccf","status":"passed","time":{"start":1696665711319,"stop":1696665712094,"duration":775}}]},"tags":[]},"source":"ee70916a2cd32f68.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}