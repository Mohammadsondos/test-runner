{"uid":"77bad7aeebc8040b","name":"test_precision[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"d509d66f8aae8d37ee667169b62aafd3","time":{"start":1692058393800,"stop":1692058395680,"duration":1880},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7fb3e976abc0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fb3e97680a0>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fb3e166e8f0>\nmethod = 'state_getMetadata'\nparams = ['0xe0a931220d386eb087fa1464088c62aa67d1d9823a0bea3d59ce58fef181c2a7']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az178-670"},{"name":"thread","value":"1966-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fb3e97680a0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1ec23a3e5541a518","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692058376212,"stop":1692058378171,"duration":1959}},{"uid":"5852957276d90862","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key to receive a higher rate limit'}","time":{"start":1692058356289,"stop":1692058358297,"duration":2008}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":577,"unknown":0,"total":582},"items":[{"uid":"e316fdc1654a0ba","reportUrl":"https://novasamatech.github.io/test-runner/3577//#testresult/e316fdc1654a0ba","status":"passed","time":{"start":1692043492475,"stop":1692043505439,"duration":12964}},{"uid":"fd943c9a39b78a80","reportUrl":"https://novasamatech.github.io/test-runner/3576//#testresult/fd943c9a39b78a80","status":"passed","time":{"start":1692029075312,"stop":1692029086129,"duration":10817}},{"uid":"e3aca2a40c25e6a0","reportUrl":"https://novasamatech.github.io/test-runner/3575//#testresult/e3aca2a40c25e6a0","status":"passed","time":{"start":1692014751039,"stop":1692014762425,"duration":11386}},{"uid":"89d5104f7eb66f41","reportUrl":"https://novasamatech.github.io/test-runner/3574//#testresult/89d5104f7eb66f41","status":"passed","time":{"start":1692000316033,"stop":1692000329821,"duration":13788}},{"uid":"a907d9e0842c74a6","reportUrl":"https://novasamatech.github.io/test-runner/3573//#testresult/a907d9e0842c74a6","status":"passed","time":{"start":1691985874514,"stop":1691985885202,"duration":10688}},{"uid":"3670757b8fc4df","reportUrl":"https://novasamatech.github.io/test-runner/3572//#testresult/3670757b8fc4df","status":"passed","time":{"start":1691971980187,"stop":1691971990666,"duration":10479}},{"uid":"7cd63ec693029af6","reportUrl":"https://novasamatech.github.io/test-runner/3571//#testresult/7cd63ec693029af6","status":"passed","time":{"start":1691957096391,"stop":1691957113192,"duration":16801}},{"uid":"45fd65520794526f","reportUrl":"https://novasamatech.github.io/test-runner/3570//#testresult/45fd65520794526f","status":"passed","time":{"start":1691942670122,"stop":1691942678323,"duration":8201}},{"uid":"d41add59408c0d2d","reportUrl":"https://novasamatech.github.io/test-runner/3569//#testresult/d41add59408c0d2d","status":"passed","time":{"start":1691928291153,"stop":1691928301071,"duration":9918}},{"uid":"5058327961afc2e7","reportUrl":"https://novasamatech.github.io/test-runner/3568//#testresult/5058327961afc2e7","status":"passed","time":{"start":1691913887960,"stop":1691913897867,"duration":9907}},{"uid":"d2e42668f324a827","reportUrl":"https://novasamatech.github.io/test-runner/3567//#testresult/d2e42668f324a827","status":"passed","time":{"start":1691899473039,"stop":1691899484926,"duration":11887}},{"uid":"78cb88e2258c7820","reportUrl":"https://novasamatech.github.io/test-runner/3566//#testresult/78cb88e2258c7820","status":"passed","time":{"start":1691885596977,"stop":1691885607232,"duration":10255}},{"uid":"7c7b76768b54d870","reportUrl":"https://novasamatech.github.io/test-runner/3565//#testresult/7c7b76768b54d870","status":"passed","time":{"start":1691870664884,"stop":1691870677592,"duration":12708}},{"uid":"8e85ec0400da44bb","reportUrl":"https://novasamatech.github.io/test-runner/3564//#testresult/8e85ec0400da44bb","status":"passed","time":{"start":1691856292633,"stop":1691856301803,"duration":9170}},{"uid":"fa9fd487bad5d976","reportUrl":"https://novasamatech.github.io/test-runner/3562//#testresult/fa9fd487bad5d976","status":"passed","time":{"start":1691827495315,"stop":1691827506239,"duration":10924}},{"uid":"f1cab5a21b2efafa","reportUrl":"https://novasamatech.github.io/test-runner/3563//#testresult/f1cab5a21b2efafa","status":"passed","time":{"start":1691841903791,"stop":1691841916852,"duration":13061}},{"uid":"e1e67af7c69ffacd","reportUrl":"https://novasamatech.github.io/test-runner/3561//#testresult/e1e67af7c69ffacd","status":"passed","time":{"start":1691813069572,"stop":1691813081588,"duration":12016}},{"uid":"aec3dc135bc5b5dc","reportUrl":"https://novasamatech.github.io/test-runner/3560//#testresult/aec3dc135bc5b5dc","status":"passed","time":{"start":1691799116758,"stop":1691799127533,"duration":10775}},{"uid":"8442ad0c3d89d0ca","reportUrl":"https://novasamatech.github.io/test-runner/3559//#testresult/8442ad0c3d89d0ca","status":"passed","time":{"start":1691784258562,"stop":1691784271010,"duration":12448}},{"uid":"e311ea2f7ac96dbb","reportUrl":"https://novasamatech.github.io/test-runner/3558//#testresult/e311ea2f7ac96dbb","status":"passed","time":{"start":1691769874247,"stop":1691769885158,"duration":10911}}]},"tags":[]},"source":"77bad7aeebc8040b.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fb3e97680a0>"]}