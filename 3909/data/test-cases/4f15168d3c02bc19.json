{"uid":"4f15168d3c02bc19","name":"test_has_new_assets[Test for Composable Finance]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"6ed403c188bd8bbaba3701ff58033048","time":{"start":1696723494587,"stop":1696723496380,"duration":1793},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7ff51de79870>\nchain = <scripts.utils.chain_model.Chain object at 0x7ff51de7aa10>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7ff507555a50>\nmethod = 'state_getMetadata'\nparams = ['0xac919c67f3e72e7804f9f4795138a72a771443576a4f81785e6d22e1f301c35f']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az471-123"},{"name":"thread","value":"2185-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7ff51de7aa10>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d2b0d116e7faaec5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696723477596,"stop":1696723479416,"duration":1820}},{"uid":"be7fdfe0b4ca01ee","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1696723400620,"stop":1696723462385,"duration":61765}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":265,"unknown":0,"total":268},"items":[{"uid":"d3db36de9420cc4b","reportUrl":"https://novasamatech.github.io/test-runner/3908//#testresult/d3db36de9420cc4b","status":"passed","time":{"start":1696708914346,"stop":1696708920590,"duration":6244}},{"uid":"537d92c32567ab9a","reportUrl":"https://novasamatech.github.io/test-runner/3907//#testresult/537d92c32567ab9a","status":"passed","time":{"start":1696694517919,"stop":1696694526566,"duration":8647}},{"uid":"a8d55652178403","reportUrl":"https://novasamatech.github.io/test-runner/3906//#testresult/a8d55652178403","status":"passed","time":{"start":1696680116114,"stop":1696680122417,"duration":6303}},{"uid":"8a11c4fdcb3e4193","reportUrl":"https://novasamatech.github.io/test-runner/3905//#testresult/8a11c4fdcb3e4193","status":"passed","time":{"start":1696665791937,"stop":1696665799371,"duration":7434}},{"uid":"b24cf2f7f2cb19ef","reportUrl":"https://novasamatech.github.io/test-runner/3904//#testresult/b24cf2f7f2cb19ef","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696651360189,"stop":1696651362075,"duration":1886}},{"uid":"3ace5506cc9924e3","reportUrl":"https://novasamatech.github.io/test-runner/3903//#testresult/3ace5506cc9924e3","status":"passed","time":{"start":1696636984919,"stop":1696636990410,"duration":5491}},{"uid":"af2e68e56c41aac3","reportUrl":"https://novasamatech.github.io/test-runner/3902//#testresult/af2e68e56c41aac3","status":"passed","time":{"start":1696622536938,"stop":1696622541805,"duration":4867}},{"uid":"75825caf00fcd300","reportUrl":"https://novasamatech.github.io/test-runner/3901//#testresult/75825caf00fcd300","status":"passed","time":{"start":1696608140840,"stop":1696608148167,"duration":7327}},{"uid":"4e429883d6f15e72","reportUrl":"https://novasamatech.github.io/test-runner/3900//#testresult/4e429883d6f15e72","status":"passed","time":{"start":1696593751530,"stop":1696593761889,"duration":10359}},{"uid":"cae930fb273f5e34","reportUrl":"https://novasamatech.github.io/test-runner/3899//#testresult/cae930fb273f5e34","status":"passed","time":{"start":1696579323919,"stop":1696579329682,"duration":5763}},{"uid":"e92e7285878fc63","reportUrl":"https://novasamatech.github.io/test-runner/3898//#testresult/e92e7285878fc63","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696564971740,"stop":1696564973573,"duration":1833}},{"uid":"3f3627467af9055f","reportUrl":"https://novasamatech.github.io/test-runner/3897//#testresult/3f3627467af9055f","status":"passed","time":{"start":1696550558928,"stop":1696550564203,"duration":5275}},{"uid":"57bc51bd875e2c74","reportUrl":"https://novasamatech.github.io/test-runner/3896//#testresult/57bc51bd875e2c74","status":"passed","time":{"start":1696536124306,"stop":1696536131747,"duration":7441}},{"uid":"b0c75e61b7f24826","reportUrl":"https://novasamatech.github.io/test-runner/3895//#testresult/b0c75e61b7f24826","status":"passed","time":{"start":1696521757043,"stop":1696521765000,"duration":7957}},{"uid":"c93e4d4ac319d991","reportUrl":"https://novasamatech.github.io/test-runner/3894//#testresult/c93e4d4ac319d991","status":"passed","time":{"start":1696507320908,"stop":1696507326243,"duration":5335}},{"uid":"d777a3842fa9c95a","reportUrl":"https://novasamatech.github.io/test-runner/3893//#testresult/d777a3842fa9c95a","status":"passed","time":{"start":1696496680375,"stop":1696496685615,"duration":5240}},{"uid":"da1bc577d925d5d7","reportUrl":"https://novasamatech.github.io/test-runner/3892//#testresult/da1bc577d925d5d7","status":"passed","time":{"start":1696492928938,"stop":1696492934639,"duration":5701}},{"uid":"6b9f141ad1fca493","reportUrl":"https://novasamatech.github.io/test-runner/3891//#testresult/6b9f141ad1fca493","status":"passed","time":{"start":1696478525495,"stop":1696478531404,"duration":5909}},{"uid":"8fe625ab0c930ac1","reportUrl":"https://novasamatech.github.io/test-runner/3890//#testresult/8fe625ab0c930ac1","status":"passed","time":{"start":1696464178904,"stop":1696464189246,"duration":10342}},{"uid":"9ef65c5fca92a41c","reportUrl":"https://novasamatech.github.io/test-runner/3889//#testresult/9ef65c5fca92a41c","status":"passed","time":{"start":1696449723562,"stop":1696449727943,"duration":4381}}]},"tags":[]},"source":"4f15168d3c02bc19.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7ff51de7aa10>"]}