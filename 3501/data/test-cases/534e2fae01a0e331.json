{"uid":"534e2fae01a0e331","name":"test_can_create_connection[Test for Acala, url: wss://acala-rpc-2.aca-api.network/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"27cececd4a2d1bb98a4885dc7b61b765","time":{"start":1690992293025,"stop":1690992293334,"duration":309},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Wed, 02 Aug 2023 16:04:53 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc-2.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Wed, 02 Aug 2023 16:04:53 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Wed, 02 Aug 2023 16:04:53 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc-2.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Wed, 02 Aug 2023 16:04:53 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"2a87d7f7a55d050","name":"stdout","source":"2a87d7f7a55d050.txt","type":"text/plain","size":1254}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az357-707"},{"name":"thread","value":"1999-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://acala-rpc-2.aca-api.network/ws', 'name': 'Acala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1dda22e78501d861","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Wed, 02 Aug 2023 16:04:37 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1690992277620,"stop":1690992277932,"duration":312}},{"uid":"2d55c776af1be33c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Wed, 02 Aug 2023 16:04:22 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1690992261956,"stop":1690992262428,"duration":472}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":501,"unknown":0,"total":506},"items":[{"uid":"c49283ad6f28238c","reportUrl":"https://novasamatech.github.io/test-runner/3500//#testresult/c49283ad6f28238c","status":"passed","time":{"start":1690977908185,"stop":1690977909024,"duration":839}},{"uid":"8a3155d66da7127f","reportUrl":"https://novasamatech.github.io/test-runner/3499//#testresult/8a3155d66da7127f","status":"passed","time":{"start":1690963457111,"stop":1690963457681,"duration":570}},{"uid":"4c3851170738f41c","reportUrl":"https://novasamatech.github.io/test-runner/3498//#testresult/4c3851170738f41c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'awselb/2.0', 'date': 'Wed, 02 Aug 2023 04:04:50 GMT', 'content-type': 'text/html', 'content-length': '122', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1690949090432,"stop":1690949090863,"duration":431}},{"uid":"f29400b5073c4375","reportUrl":"https://novasamatech.github.io/test-runner/3497//#testresult/f29400b5073c4375","status":"passed","time":{"start":1690935212310,"stop":1690935212837,"duration":527}},{"uid":"51ef2d2b54a9dae","reportUrl":"https://novasamatech.github.io/test-runner/3496//#testresult/51ef2d2b54a9dae","status":"passed","time":{"start":1690920246566,"stop":1690920247110,"duration":544}},{"uid":"62b84a92ce23d6c0","reportUrl":"https://novasamatech.github.io/test-runner/3495//#testresult/62b84a92ce23d6c0","status":"passed","time":{"start":1690905848142,"stop":1690905848861,"duration":719}},{"uid":"60141d3525bfb265","reportUrl":"https://novasamatech.github.io/test-runner/3494//#testresult/60141d3525bfb265","status":"passed","time":{"start":1690891490382,"stop":1690891490920,"duration":538}},{"uid":"d3c86281896d26f5","reportUrl":"https://novasamatech.github.io/test-runner/3493//#testresult/d3c86281896d26f5","status":"passed","time":{"start":1690877067455,"stop":1690877067928,"duration":473}},{"uid":"38b1e9a2664a060f","reportUrl":"https://novasamatech.github.io/test-runner/3492//#testresult/38b1e9a2664a060f","status":"passed","time":{"start":1690862653462,"stop":1690862654179,"duration":717}},{"uid":"11b76e2e07e111a9","reportUrl":"https://novasamatech.github.io/test-runner/3491//#testresult/11b76e2e07e111a9","status":"passed","time":{"start":1690848965032,"stop":1690848965402,"duration":370}},{"uid":"55059c58ec8fa8d0","reportUrl":"https://novasamatech.github.io/test-runner/3490//#testresult/55059c58ec8fa8d0","status":"passed","time":{"start":1690833823862,"stop":1690833824579,"duration":717}},{"uid":"8a32189665929074","reportUrl":"https://novasamatech.github.io/test-runner/3489//#testresult/8a32189665929074","status":"passed","time":{"start":1690819462366,"stop":1690819462932,"duration":566}},{"uid":"19c51c2014330e19","reportUrl":"https://novasamatech.github.io/test-runner/3488//#testresult/19c51c2014330e19","status":"passed","time":{"start":1690805100434,"stop":1690805100804,"duration":370}},{"uid":"60dfa4873f411f39","reportUrl":"https://novasamatech.github.io/test-runner/3487//#testresult/60dfa4873f411f39","status":"passed","time":{"start":1690790685157,"stop":1690790685532,"duration":375}},{"uid":"809ab1b6db417052","reportUrl":"https://novasamatech.github.io/test-runner/3486//#testresult/809ab1b6db417052","status":"passed","time":{"start":1690776256704,"stop":1690776257098,"duration":394}},{"uid":"dace68330ce38e20","reportUrl":"https://novasamatech.github.io/test-runner/3485//#testresult/dace68330ce38e20","status":"passed","time":{"start":1690762463246,"stop":1690762463795,"duration":549}},{"uid":"5c159d5ef58c3582","reportUrl":"https://novasamatech.github.io/test-runner/3484//#testresult/5c159d5ef58c3582","status":"passed","time":{"start":1690747424436,"stop":1690747424980,"duration":544}},{"uid":"244cbdb6560e3d09","reportUrl":"https://novasamatech.github.io/test-runner/3483//#testresult/244cbdb6560e3d09","status":"passed","time":{"start":1690733044665,"stop":1690733045054,"duration":389}},{"uid":"a518e6aec266536c","reportUrl":"https://novasamatech.github.io/test-runner/3482//#testresult/a518e6aec266536c","status":"passed","time":{"start":1690718667445,"stop":1690718667842,"duration":397}},{"uid":"565bf6318e6a66c3","reportUrl":"https://novasamatech.github.io/test-runner/3481//#testresult/565bf6318e6a66c3","status":"passed","time":{"start":1690704296434,"stop":1690704296831,"duration":397}}]},"tags":[]},"source":"534e2fae01a0e331.json","parameterValues":["{'url': 'wss://acala-rpc-2.aca-api.network/ws', 'name': 'Acala'}"]}