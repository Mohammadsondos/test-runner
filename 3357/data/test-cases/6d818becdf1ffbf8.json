{"uid":"6d818becdf1ffbf8","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1688918678077,"stop":1688918678108,"duration":31},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 09 Jul 2023 16:04:38 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 09 Jul 2023 16:04:38 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 09 Jul 2023 16:04:38 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 09 Jul 2023 16:04:38 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"d5ad66da9e0ae557","name":"stdout","source":"d5ad66da9e0ae557.txt","type":"text/plain","size":1098}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az617-720"},{"name":"thread","value":"1950-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2ffaa21e8399ae44","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 09 Jul 2023 16:04:22 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688918662963,"stop":1688918662989,"duration":26}},{"uid":"db311220ddad3751","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sun, 09 Jul 2023 16:04:07 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688918647791,"stop":1688918647824,"duration":33}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":95,"skipped":0,"passed":267,"unknown":0,"total":362},"items":[{"uid":"6c560b82cc2a8da8","reportUrl":"https://novasamatech.github.io/test-runner/3355//#testresult/6c560b82cc2a8da8","status":"passed","time":{"start":1688889882179,"stop":1688889882234,"duration":55}},{"uid":"6082f45a7aa419f5","reportUrl":"https://novasamatech.github.io/test-runner/3356//#testresult/6082f45a7aa419f5","status":"passed","time":{"start":1688904304140,"stop":1688904304516,"duration":376}},{"uid":"b9a105d1cf2a6e87","reportUrl":"https://novasamatech.github.io/test-runner/3354//#testresult/b9a105d1cf2a6e87","status":"passed","time":{"start":1688875465049,"stop":1688875465340,"duration":291}},{"uid":"256119cdedfce7ef","reportUrl":"https://novasamatech.github.io/test-runner/3353//#testresult/256119cdedfce7ef","status":"passed","time":{"start":1688861860882,"stop":1688861860966,"duration":84}},{"uid":"589a25135f4b5c6b","reportUrl":"https://novasamatech.github.io/test-runner/3352//#testresult/589a25135f4b5c6b","status":"passed","time":{"start":1688846657796,"stop":1688846657887,"duration":91}},{"uid":"8efe959f830bfe69","reportUrl":"https://novasamatech.github.io/test-runner/3351//#testresult/8efe959f830bfe69","status":"passed","time":{"start":1688832261723,"stop":1688832261884,"duration":161}},{"uid":"aa69aab35f605f6f","reportUrl":"https://novasamatech.github.io/test-runner/3349//#testresult/aa69aab35f605f6f","status":"passed","time":{"start":1688803461538,"stop":1688803461800,"duration":262}},{"uid":"3a9b36308127fb22","reportUrl":"https://novasamatech.github.io/test-runner/3350//#testresult/3a9b36308127fb22","status":"passed","time":{"start":1688817911079,"stop":1688817911119,"duration":40}},{"uid":"997d3b7896c0f56c","reportUrl":"https://novasamatech.github.io/test-runner/3348//#testresult/997d3b7896c0f56c","status":"passed","time":{"start":1688789050960,"stop":1688789051023,"duration":63}},{"uid":"97168c119de84df7","reportUrl":"https://novasamatech.github.io/test-runner/3347//#testresult/97168c119de84df7","status":"passed","time":{"start":1688775312503,"stop":1688775312584,"duration":81}},{"uid":"e02288543fbe3a96","reportUrl":"https://novasamatech.github.io/test-runner/3346//#testresult/e02288543fbe3a96","status":"passed","time":{"start":1688760248495,"stop":1688760248577,"duration":82}},{"uid":"f179f8f175bce326","reportUrl":"https://novasamatech.github.io/test-runner/3345//#testresult/f179f8f175bce326","status":"passed","time":{"start":1688745892603,"stop":1688745892806,"duration":203}},{"uid":"9aad4dbe4af95c8d","reportUrl":"https://novasamatech.github.io/test-runner/3344//#testresult/9aad4dbe4af95c8d","status":"passed","time":{"start":1688731534362,"stop":1688731534668,"duration":306}},{"uid":"52ae7ec95f45bf1b","reportUrl":"https://novasamatech.github.io/test-runner/3343//#testresult/52ae7ec95f45bf1b","status":"passed","time":{"start":1688717089277,"stop":1688717089689,"duration":412}},{"uid":"776a221332efb124","reportUrl":"https://novasamatech.github.io/test-runner/3342//#testresult/776a221332efb124","status":"passed","time":{"start":1688702666424,"stop":1688702666712,"duration":288}},{"uid":"aa58818be1199dae","reportUrl":"https://novasamatech.github.io/test-runner/3341//#testresult/aa58818be1199dae","status":"passed","time":{"start":1688688972021,"stop":1688688972328,"duration":307}},{"uid":"7606673c55d87059","reportUrl":"https://novasamatech.github.io/test-runner/3340//#testresult/7606673c55d87059","status":"passed","time":{"start":1688673862430,"stop":1688673862739,"duration":309}},{"uid":"fa3cc0fb184bf180","reportUrl":"https://novasamatech.github.io/test-runner/3339//#testresult/fa3cc0fb184bf180","status":"passed","time":{"start":1688659487777,"stop":1688659488024,"duration":247}},{"uid":"acb8b468ab370da7","reportUrl":"https://novasamatech.github.io/test-runner/3338//#testresult/acb8b468ab370da7","status":"passed","time":{"start":1688645150988,"stop":1688645151221,"duration":233}},{"uid":"3be64f36e9600d7","reportUrl":"https://novasamatech.github.io/test-runner/3337//#testresult/3be64f36e9600d7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 06 Jul 2023 08:05:23 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1688630722932,"stop":1688630723099,"duration":167}}]},"tags":[]},"source":"6d818becdf1ffbf8.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}