{"uid":"bff0ff34c25c5135","name":"test_can_create_connection[Test for Karura, url: wss://karura-rpc-3.aca-api.network/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9924fd062719dddab41b666be49e86a5","time":{"start":1688918690461,"stop":1688918700523,"duration":10062},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 09 Jul 2023 16:05:00 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-3.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 09 Jul 2023 16:05:00 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 09 Jul 2023 16:05:00 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-3.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 09 Jul 2023 16:05:00 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"a28b7743a9bd6b4c","name":"stdout","source":"a28b7743a9bd6b4c.txt","type":"text/plain","size":1302}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az617-720"},{"name":"thread","value":"1962-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://karura-rpc-3.aca-api.network/ws', 'name': 'Karura'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b3e74abe57770ed1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 09 Jul 2023 16:04:35 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1688918665312,"stop":1688918675370,"duration":10058}},{"uid":"6885d979525d28ee","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 09 Jul 2023 16:04:10 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1688918639950,"stop":1688918650149,"duration":10199}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":359,"unknown":0,"total":362},"items":[{"uid":"a6287693507f392a","reportUrl":"https://novasamatech.github.io/test-runner/3355//#testresult/a6287693507f392a","status":"passed","time":{"start":1688889845025,"stop":1688889845165,"duration":140}},{"uid":"f7d6268ec7654d84","reportUrl":"https://novasamatech.github.io/test-runner/3356//#testresult/f7d6268ec7654d84","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 09 Jul 2023 12:05:55 GMT', 'content-type': 'text/html', 'content-length': '132', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body>\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1688904345535,"stop":1688904355794,"duration":10259}},{"uid":"bbf12cd7a5625310","reportUrl":"https://novasamatech.github.io/test-runner/3354//#testresult/bbf12cd7a5625310","status":"passed","time":{"start":1688875456597,"stop":1688875457153,"duration":556}},{"uid":"f883c74da1e807a4","reportUrl":"https://novasamatech.github.io/test-runner/3353//#testresult/f883c74da1e807a4","status":"passed","time":{"start":1688861854477,"stop":1688861854571,"duration":94}},{"uid":"1827d00953c255f9","reportUrl":"https://novasamatech.github.io/test-runner/3352//#testresult/1827d00953c255f9","status":"passed","time":{"start":1688846636201,"stop":1688846636325,"duration":124}},{"uid":"9dcfdb19a0e7aeb7","reportUrl":"https://novasamatech.github.io/test-runner/3351//#testresult/9dcfdb19a0e7aeb7","status":"passed","time":{"start":1688832255379,"stop":1688832255499,"duration":120}},{"uid":"f6761835cfb7c119","reportUrl":"https://novasamatech.github.io/test-runner/3349//#testresult/f6761835cfb7c119","status":"passed","time":{"start":1688803454104,"stop":1688803454532,"duration":428}},{"uid":"bd50ca74d8a6a6c1","reportUrl":"https://novasamatech.github.io/test-runner/3350//#testresult/bd50ca74d8a6a6c1","status":"passed","time":{"start":1688817905390,"stop":1688817905483,"duration":93}},{"uid":"26ea51c0ecfca61f","reportUrl":"https://novasamatech.github.io/test-runner/3348//#testresult/26ea51c0ecfca61f","status":"passed","time":{"start":1688789044919,"stop":1688789044999,"duration":80}},{"uid":"875a2afcf237fdd3","reportUrl":"https://novasamatech.github.io/test-runner/3347//#testresult/875a2afcf237fdd3","status":"passed","time":{"start":1688775305022,"stop":1688775305189,"duration":167}},{"uid":"e7eb8af97fd401f4","reportUrl":"https://novasamatech.github.io/test-runner/3346//#testresult/e7eb8af97fd401f4","status":"passed","time":{"start":1688760241994,"stop":1688760242113,"duration":119}},{"uid":"a9bb63386f71a515","reportUrl":"https://novasamatech.github.io/test-runner/3345//#testresult/a9bb63386f71a515","status":"passed","time":{"start":1688745855031,"stop":1688745855359,"duration":328}},{"uid":"7e63c43e84f82412","reportUrl":"https://novasamatech.github.io/test-runner/3344//#testresult/7e63c43e84f82412","status":"passed","time":{"start":1688731525938,"stop":1688731526461,"duration":523}},{"uid":"6e5a74fb1ea9d000","reportUrl":"https://novasamatech.github.io/test-runner/3343//#testresult/6e5a74fb1ea9d000","status":"passed","time":{"start":1688717081118,"stop":1688717081558,"duration":440}},{"uid":"cd7fe320efb171ee","reportUrl":"https://novasamatech.github.io/test-runner/3342//#testresult/cd7fe320efb171ee","status":"passed","time":{"start":1688702657428,"stop":1688702658187,"duration":759}},{"uid":"41f09ebbec4632df","reportUrl":"https://novasamatech.github.io/test-runner/3341//#testresult/41f09ebbec4632df","status":"passed","time":{"start":1688688963923,"stop":1688688964348,"duration":425}},{"uid":"74e22cc8ad23be1d","reportUrl":"https://novasamatech.github.io/test-runner/3340//#testresult/74e22cc8ad23be1d","status":"passed","time":{"start":1688673854656,"stop":1688673855191,"duration":535}},{"uid":"71e493ffc5a3ee86","reportUrl":"https://novasamatech.github.io/test-runner/3339//#testresult/71e493ffc5a3ee86","status":"passed","time":{"start":1688659479657,"stop":1688659479933,"duration":276}},{"uid":"f220240487d67f37","reportUrl":"https://novasamatech.github.io/test-runner/3338//#testresult/f220240487d67f37","status":"passed","time":{"start":1688645142972,"stop":1688645143256,"duration":284}},{"uid":"6b00d6a3e46d0633","reportUrl":"https://novasamatech.github.io/test-runner/3337//#testresult/6b00d6a3e46d0633","status":"passed","time":{"start":1688630684271,"stop":1688630684640,"duration":369}}]},"tags":[]},"source":"bff0ff34c25c5135.json","parameterValues":["{'url': 'wss://karura-rpc-3.aca-api.network/ws', 'name': 'Karura'}"]}