{"uid":"5928d1ae4fc10af0","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-mainnet.public.blastapi.io]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"88ca5946422f3e630a47026f645af6fa","time":{"start":1711051269724,"stop":1711051269745,"duration":21},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fb73d591510>\ndata = {'name': 'Ethereum', 'url': 'https://eth-mainnet.public.blastapi.io'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fb73c3a1180>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fb73c3a0b80>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1536-160"},{"name":"thread","value":"2087-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"678113c45f06dae6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711051264664,"stop":1711051264690,"duration":26}},{"uid":"7f43b60abb6db5fb","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711051259526,"stop":1711051259552,"duration":26}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":36,"skipped":0,"passed":991,"unknown":0,"total":1030},"items":[{"uid":"8fa3d7217fefeef8","reportUrl":"https://novasamatech.github.io/test-runner/4918//#testresult/8fa3d7217fefeef8","status":"passed","time":{"start":1711036867724,"stop":1711036868271,"duration":547}},{"uid":"a6b91f8682e9bca3","reportUrl":"https://novasamatech.github.io/test-runner/4917//#testresult/a6b91f8682e9bca3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711022484372,"stop":1711022484429,"duration":57}},{"uid":"d08d6daffb753d5e","reportUrl":"https://novasamatech.github.io/test-runner/4916//#testresult/d08d6daffb753d5e","status":"passed","time":{"start":1711008063152,"stop":1711008063798,"duration":646}},{"uid":"6a057e9aef0982a","reportUrl":"https://novasamatech.github.io/test-runner/4915//#testresult/6a057e9aef0982a","status":"passed","time":{"start":1710993662621,"stop":1710993662999,"duration":378}},{"uid":"276753c4c45c1ec5","reportUrl":"https://novasamatech.github.io/test-runner/4914//#testresult/276753c4c45c1ec5","status":"passed","time":{"start":1710979307588,"stop":1710979308022,"duration":434}},{"uid":"45f094a76c57ac06","reportUrl":"https://novasamatech.github.io/test-runner/4913//#testresult/45f094a76c57ac06","status":"passed","time":{"start":1710964862477,"stop":1710964862801,"duration":324}},{"uid":"1bb826cb07a7a238","reportUrl":"https://novasamatech.github.io/test-runner/4912//#testresult/1bb826cb07a7a238","status":"passed","time":{"start":1710950462321,"stop":1710950462545,"duration":224}},{"uid":"e1266542e1491260","reportUrl":"https://novasamatech.github.io/test-runner/4911//#testresult/e1266542e1491260","status":"passed","time":{"start":1710936069549,"stop":1710936069844,"duration":295}},{"uid":"8244d855d34085c3","reportUrl":"https://novasamatech.github.io/test-runner/4910//#testresult/8244d855d34085c3","status":"passed","time":{"start":1710921667032,"stop":1710921667289,"duration":257}},{"uid":"ef8eefda760fd82d","reportUrl":"https://novasamatech.github.io/test-runner/4909//#testresult/ef8eefda760fd82d","status":"passed","time":{"start":1710907266123,"stop":1710907266323,"duration":200}},{"uid":"e943b18df3082815","reportUrl":"https://novasamatech.github.io/test-runner/4908//#testresult/e943b18df3082815","status":"passed","time":{"start":1710892898758,"stop":1710892899430,"duration":672}},{"uid":"2e3cfab27a637a04","reportUrl":"https://novasamatech.github.io/test-runner/4907//#testresult/2e3cfab27a637a04","status":"passed","time":{"start":1710878473826,"stop":1710878474421,"duration":595}},{"uid":"aa2b72ca6aa7e208","reportUrl":"https://novasamatech.github.io/test-runner/4906//#testresult/aa2b72ca6aa7e208","status":"passed","time":{"start":1710864069253,"stop":1710864069454,"duration":201}},{"uid":"2605d35e5402a991","reportUrl":"https://novasamatech.github.io/test-runner/4905//#testresult/2605d35e5402a991","status":"passed","time":{"start":1710849677395,"stop":1710849678125,"duration":730}},{"uid":"d5d6bf64e7a92343","reportUrl":"https://novasamatech.github.io/test-runner/4904//#testresult/d5d6bf64e7a92343","status":"passed","time":{"start":1710835259595,"stop":1710835262370,"duration":2775}},{"uid":"7106fd008936f2a","reportUrl":"https://novasamatech.github.io/test-runner/4903//#testresult/7106fd008936f2a","status":"passed","time":{"start":1710820868305,"stop":1710820868875,"duration":570}},{"uid":"b273da4e7aafda0c","reportUrl":"https://novasamatech.github.io/test-runner/4902//#testresult/b273da4e7aafda0c","status":"passed","time":{"start":1710806500334,"stop":1710806500467,"duration":133}},{"uid":"7ce64b20b4db29aa","reportUrl":"https://novasamatech.github.io/test-runner/4901//#testresult/7ce64b20b4db29aa","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792070001,"stop":1710792070352,"duration":351}},{"uid":"a8de52063d9bd256","reportUrl":"https://novasamatech.github.io/test-runner/4900//#testresult/a8de52063d9bd256","status":"passed","time":{"start":1710777672637,"stop":1710777672952,"duration":315}},{"uid":"535d649f15cdbeb7","reportUrl":"https://novasamatech.github.io/test-runner/4899//#testresult/535d649f15cdbeb7","status":"passed","time":{"start":1710763264622,"stop":1710763265051,"duration":429}}]},"tags":[]},"source":"5928d1ae4fc10af0.json","parameterValues":["{'url': 'https://eth-mainnet.public.blastapi.io', 'name': 'Ethereum'}"]}