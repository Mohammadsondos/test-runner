{"uid":"ec3c92e24616463","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1711051268807,"stop":1711051268854,"duration":47},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f3f13e95390>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f3f11c8ec80>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f3f11c8ed40>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1536-160"},{"name":"thread","value":"2090-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"400109e05dcbd995","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711051263729,"stop":1711051263773,"duration":44}},{"uid":"e031a321bbf0feca","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711051258557,"stop":1711051258614,"duration":57}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":37,"skipped":0,"passed":992,"unknown":0,"total":1030},"items":[{"uid":"7dcbf3c02c852ac5","reportUrl":"https://novasamatech.github.io/test-runner/4918//#testresult/7dcbf3c02c852ac5","status":"passed","time":{"start":1711036897580,"stop":1711036898763,"duration":1183}},{"uid":"a5aa6cb07ac7ccc5","reportUrl":"https://novasamatech.github.io/test-runner/4917//#testresult/a5aa6cb07ac7ccc5","status":"passed","time":{"start":1711022472828,"stop":1711022473237,"duration":409}},{"uid":"b5f4be46b2497dfc","reportUrl":"https://novasamatech.github.io/test-runner/4916//#testresult/b5f4be46b2497dfc","status":"passed","time":{"start":1711008077981,"stop":1711008078550,"duration":569}},{"uid":"2ec119338172aa03","reportUrl":"https://novasamatech.github.io/test-runner/4915//#testresult/2ec119338172aa03","status":"passed","time":{"start":1710993662254,"stop":1710993662461,"duration":207}},{"uid":"6ea0be1cdc23daaf","reportUrl":"https://novasamatech.github.io/test-runner/4914//#testresult/6ea0be1cdc23daaf","status":"passed","time":{"start":1710979306668,"stop":1710979307085,"duration":417}},{"uid":"3762f1f95f601773","reportUrl":"https://novasamatech.github.io/test-runner/4913//#testresult/3762f1f95f601773","status":"passed","time":{"start":1710964862036,"stop":1710964862479,"duration":443}},{"uid":"3dd86e012d6235b0","reportUrl":"https://novasamatech.github.io/test-runner/4912//#testresult/3dd86e012d6235b0","status":"passed","time":{"start":1710950461813,"stop":1710950461940,"duration":127}},{"uid":"994fb3ed33c2ffd1","reportUrl":"https://novasamatech.github.io/test-runner/4911//#testresult/994fb3ed33c2ffd1","status":"passed","time":{"start":1710936069180,"stop":1710936069479,"duration":299}},{"uid":"775bc2059d7f2e4f","reportUrl":"https://novasamatech.github.io/test-runner/4910//#testresult/775bc2059d7f2e4f","status":"passed","time":{"start":1710921666358,"stop":1710921666978,"duration":620}},{"uid":"a693ab2f862fd8a5","reportUrl":"https://novasamatech.github.io/test-runner/4909//#testresult/a693ab2f862fd8a5","status":"passed","time":{"start":1710907265746,"stop":1710907265935,"duration":189}},{"uid":"aac5aac92300d70c","reportUrl":"https://novasamatech.github.io/test-runner/4908//#testresult/aac5aac92300d70c","status":"passed","time":{"start":1710892898011,"stop":1710892898848,"duration":837}},{"uid":"545097b1e68b53ef","reportUrl":"https://novasamatech.github.io/test-runner/4907//#testresult/545097b1e68b53ef","status":"passed","time":{"start":1710878472887,"stop":1710878473986,"duration":1099}},{"uid":"b4669cd8ad8b1887","reportUrl":"https://novasamatech.github.io/test-runner/4906//#testresult/b4669cd8ad8b1887","status":"passed","time":{"start":1710864068288,"stop":1710864068668,"duration":380}},{"uid":"e6bd99c9ec85a373","reportUrl":"https://novasamatech.github.io/test-runner/4905//#testresult/e6bd99c9ec85a373","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710849694223,"stop":1710849694587,"duration":364}},{"uid":"16a48bb3cf9865b2","reportUrl":"https://novasamatech.github.io/test-runner/4904//#testresult/16a48bb3cf9865b2","status":"passed","time":{"start":1710835258862,"stop":1710835259599,"duration":737}},{"uid":"2ea6ad32c57090c1","reportUrl":"https://novasamatech.github.io/test-runner/4903//#testresult/2ea6ad32c57090c1","status":"passed","time":{"start":1710820867658,"stop":1710820868381,"duration":723}},{"uid":"d4d27bb7897e95b1","reportUrl":"https://novasamatech.github.io/test-runner/4902//#testresult/d4d27bb7897e95b1","status":"passed","time":{"start":1710806499895,"stop":1710806500098,"duration":203}},{"uid":"1dfc38194f1692c","reportUrl":"https://novasamatech.github.io/test-runner/4901//#testresult/1dfc38194f1692c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710792068957,"stop":1710792069309,"duration":352}},{"uid":"7c411de54af8fa2","reportUrl":"https://novasamatech.github.io/test-runner/4900//#testresult/7c411de54af8fa2","status":"passed","time":{"start":1710777671784,"stop":1710777672140,"duration":356}},{"uid":"cd4c3a26042d96e3","reportUrl":"https://novasamatech.github.io/test-runner/4899//#testresult/cd4c3a26042d96e3","status":"passed","time":{"start":1710763263331,"stop":1710763264212,"duration":881}}]},"tags":[]},"source":"ec3c92e24616463.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}