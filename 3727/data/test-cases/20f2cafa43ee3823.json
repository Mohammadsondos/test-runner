{"uid":"20f2cafa43ee3823","name":"test_can_create_connection[Test for Crab, url: wss://crab-rpc.darwinia.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"ae3c62215c32eca769411c39859d64a9","time":{"start":1694131413601,"stop":1694131417020,"duration":3419},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Fri, 08 Sep 2023 00:03:37 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '8032edd7290f0827-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None","statusTrace":"data = {'name': 'Crab', 'url': 'wss://crab-rpc.darwinia.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Fri, 08 Sep 2023 00:03:37 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '8032edd7290f0827-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Fri, 08 Sep 2023 00:03:37 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '8032edd7290f0827-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None","statusTrace":"data = {'name': 'Crab', 'url': 'wss://crab-rpc.darwinia.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Fri, 08 Sep 2023 00:03:37 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '8032edd7290f0827-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"fcdb3c8a3ff9d2f7","name":"stdout","source":"fcdb3c8a3ff9d2f7.txt","type":"text/plain","size":1269}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az404-815"},{"name":"thread","value":"2105-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://crab-rpc.darwinia.network/', 'name': 'Crab'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a642d7c547ceeaf2","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Fri, 08 Sep 2023 00:03:18 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '8032ed636a380827-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None","time":{"start":1694131395082,"stop":1694131398510,"duration":3428}},{"uid":"2acdb8051658ce40","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Fri, 08 Sep 2023 00:02:59 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '8032ecef8d26826e-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None","time":{"start":1694131376523,"stop":1694131379988,"duration":3465}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":87,"unknown":0,"total":88},"items":[{"uid":"351b551f19adb72","reportUrl":"https://novasamatech.github.io/test-runner/3726//#testresult/351b551f19adb72","status":"passed","time":{"start":1694116929790,"stop":1694116930666,"duration":876}},{"uid":"f1515216add0ba20","reportUrl":"https://novasamatech.github.io/test-runner/3725//#testresult/f1515216add0ba20","status":"passed","time":{"start":1694102577442,"stop":1694102578607,"duration":1165}},{"uid":"17b35a64cc20c831","reportUrl":"https://novasamatech.github.io/test-runner/3724//#testresult/17b35a64cc20c831","status":"passed","time":{"start":1694088185005,"stop":1694088187453,"duration":2448}},{"uid":"1fc93c78ada8f1a0","reportUrl":"https://novasamatech.github.io/test-runner/3723//#testresult/1fc93c78ada8f1a0","status":"passed","time":{"start":1694073786217,"stop":1694073787391,"duration":1174}},{"uid":"86844f5540959dff","reportUrl":"https://novasamatech.github.io/test-runner/3722//#testresult/86844f5540959dff","status":"passed","time":{"start":1694059353696,"stop":1694059354749,"duration":1053}},{"uid":"6ddc3736c62f0fec","reportUrl":"https://novasamatech.github.io/test-runner/3721//#testresult/6ddc3736c62f0fec","status":"passed","time":{"start":1694044974604,"stop":1694044975717,"duration":1113}},{"uid":"4975996444b25e4b","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/4975996444b25e4b","status":"passed","time":{"start":1694030526740,"stop":1694030527810,"duration":1070}},{"uid":"44900524fdf47710","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/44900524fdf47710","status":"passed","time":{"start":1694016168552,"stop":1694016169223,"duration":671}},{"uid":"9c6358074ffba73e","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/9c6358074ffba73e","status":"passed","time":{"start":1694001754325,"stop":1694001755372,"duration":1047}},{"uid":"512a9ced7a68a023","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/512a9ced7a68a023","status":"passed","time":{"start":1693987335173,"stop":1693987335897,"duration":724}},{"uid":"4a17109a51a5bb2e","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/4a17109a51a5bb2e","status":"passed","time":{"start":1693972933100,"stop":1693972934070,"duration":970}},{"uid":"5d6d09b7051b3d06","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/5d6d09b7051b3d06","status":"passed","time":{"start":1693958638596,"stop":1693958639658,"duration":1062}},{"uid":"71571c9b115d3d7","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/71571c9b115d3d7","status":"passed","time":{"start":1693944172236,"stop":1693944173367,"duration":1131}},{"uid":"42d0a7a429a97423","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/42d0a7a429a97423","status":"passed","time":{"start":1693929783325,"stop":1693929784071,"duration":746}},{"uid":"ed9581531614087d","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/ed9581531614087d","status":"passed","time":{"start":1693915810946,"stop":1693915812096,"duration":1150}},{"uid":"1a0c6e7ac30337e1","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/1a0c6e7ac30337e1","status":"passed","time":{"start":1693901032121,"stop":1693901032969,"duration":848}},{"uid":"47723a175d2800fe","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/47723a175d2800fe","status":"passed","time":{"start":1693872186839,"stop":1693872188077,"duration":1238}},{"uid":"33daa9ffee128c35","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/33daa9ffee128c35","status":"passed","time":{"start":1693857763755,"stop":1693857765855,"duration":2100}},{"uid":"6d93b78376a1748d","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/6d93b78376a1748d","status":"passed","time":{"start":1693843347636,"stop":1693843348558,"duration":922}},{"uid":"4187ed62b4355e0c","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/4187ed62b4355e0c","status":"passed","time":{"start":1693828936275,"stop":1693828938589,"duration":2314}}]},"tags":[]},"source":"20f2cafa43ee3823.json","parameterValues":["{'url': 'wss://crab-rpc.darwinia.network/', 'name': 'Crab'}"]}