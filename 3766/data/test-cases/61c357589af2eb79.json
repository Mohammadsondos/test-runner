{"uid":"61c357589af2eb79","name":"test_can_create_connection[Test for Ajuna, url: wss://rpc-parachain.ajuna.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9e45091b8d9f46b64ef77b6ae354ace8","time":{"start":1694678558235,"stop":1694678558470,"duration":235},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 14 Sep 2023 08:02:38 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 14 Sep 2023 08:02:38 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 14 Sep 2023 08:02:38 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Ajuna', 'url': 'wss://rpc-parachain.ajuna.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 14 Sep 2023 08:02:38 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"39af2bde1b4e3725","name":"stdout","source":"39af2bde1b4e3725.txt","type":"text/plain","size":1166}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az349-360"},{"name":"thread","value":"2060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5d67a9fa27ca3ca5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Thu, 14 Sep 2023 08:02:23 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694678542907,"stop":1694678543141,"duration":234}},{"uid":"75f32598141139f9","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1694678527601,"stop":1694678527770,"duration":169}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":122,"unknown":0,"total":127},"items":[{"uid":"6d213d47ec2947be","reportUrl":"https://novasamatech.github.io/test-runner/3765//#testresult/6d213d47ec2947be","status":"passed","time":{"start":1694664112192,"stop":1694664112563,"duration":371}},{"uid":"3e2991bde6c15245","reportUrl":"https://novasamatech.github.io/test-runner/3764//#testresult/3e2991bde6c15245","status":"passed","time":{"start":1694649758200,"stop":1694649758715,"duration":515}},{"uid":"2a5dfb0e593f4b55","reportUrl":"https://novasamatech.github.io/test-runner/3763//#testresult/2a5dfb0e593f4b55","status":"passed","time":{"start":1694635317483,"stop":1694635318009,"duration":526}},{"uid":"2d4584d6d3b91857","reportUrl":"https://novasamatech.github.io/test-runner/3762//#testresult/2d4584d6d3b91857","status":"passed","time":{"start":1694620947742,"stop":1694620948365,"duration":623}},{"uid":"1dbf081ba220d00e","reportUrl":"https://novasamatech.github.io/test-runner/3761//#testresult/1dbf081ba220d00e","status":"passed","time":{"start":1694606541736,"stop":1694606542260,"duration":524}},{"uid":"5ed7495f50f1fac4","reportUrl":"https://novasamatech.github.io/test-runner/3760//#testresult/5ed7495f50f1fac4","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Wed, 13 Sep 2023 09:29:19 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694597358899,"stop":1694597359228,"duration":329}},{"uid":"ef1da635de74bf42","reportUrl":"https://novasamatech.github.io/test-runner/3759//#testresult/ef1da635de74bf42","status":"passed","time":{"start":1694592160989,"stop":1694592161321,"duration":332}},{"uid":"6285ee65ad76b2c9","reportUrl":"https://novasamatech.github.io/test-runner/3758//#testresult/6285ee65ad76b2c9","status":"passed","time":{"start":1694577736851,"stop":1694577737204,"duration":353}},{"uid":"38ec9bc1aec64fad","reportUrl":"https://novasamatech.github.io/test-runner/3757//#testresult/38ec9bc1aec64fad","status":"passed","time":{"start":1694563379566,"stop":1694563379923,"duration":357}},{"uid":"bcf5f640af674263","reportUrl":"https://novasamatech.github.io/test-runner/3756//#testresult/bcf5f640af674263","status":"passed","time":{"start":1694548964928,"stop":1694548965565,"duration":637}},{"uid":"382cb373f00c63b1","reportUrl":"https://novasamatech.github.io/test-runner/3755//#testresult/382cb373f00c63b1","status":"passed","time":{"start":1694534539263,"stop":1694534539966,"duration":703}},{"uid":"e76c4090e0d8cd75","reportUrl":"https://novasamatech.github.io/test-runner/3754//#testresult/e76c4090e0d8cd75","status":"passed","time":{"start":1694520155138,"stop":1694520155507,"duration":369}},{"uid":"6ea4e17fd2a0aea6","reportUrl":"https://novasamatech.github.io/test-runner/3753//#testresult/6ea4e17fd2a0aea6","status":"passed","time":{"start":1694505724790,"stop":1694505725194,"duration":404}},{"uid":"21aa0f6d6a6d1037","reportUrl":"https://novasamatech.github.io/test-runner/3752//#testresult/21aa0f6d6a6d1037","status":"passed","time":{"start":1694491332190,"stop":1694491332730,"duration":540}},{"uid":"3ca85b8ad17f2dce","reportUrl":"https://novasamatech.github.io/test-runner/3751//#testresult/3ca85b8ad17f2dce","status":"passed","time":{"start":1694476966434,"stop":1694476966797,"duration":363}},{"uid":"e094c38526a35338","reportUrl":"https://novasamatech.github.io/test-runner/3750//#testresult/e094c38526a35338","status":"passed","time":{"start":1694462534014,"stop":1694462534344,"duration":330}},{"uid":"32d920b351755abc","reportUrl":"https://novasamatech.github.io/test-runner/3749//#testresult/32d920b351755abc","status":"passed","time":{"start":1694448138652,"stop":1694448139303,"duration":651}},{"uid":"bd0b2d41dead0e4a","reportUrl":"https://novasamatech.github.io/test-runner/3748//#testresult/bd0b2d41dead0e4a","status":"passed","time":{"start":1694433800550,"stop":1694433801152,"duration":602}},{"uid":"53efbc28a7cc19e0","reportUrl":"https://novasamatech.github.io/test-runner/3747//#testresult/53efbc28a7cc19e0","status":"passed","time":{"start":1694419730205,"stop":1694419730625,"duration":420}},{"uid":"1b5d11a176363ae9","reportUrl":"https://novasamatech.github.io/test-runner/3746//#testresult/1b5d11a176363ae9","status":"passed","time":{"start":1694404929371,"stop":1694404929898,"duration":527}}]},"tags":[]},"source":"61c357589af2eb79.json","parameterValues":["{'url': 'wss://rpc-parachain.ajuna.network', 'name': 'Ajuna'}"]}