{"uid":"48f904920f07fdb6","name":"test_can_create_connection[Test for Crab, url: wss://crab-rpc.darwinia.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"ae3c62215c32eca769411c39859d64a9","time":{"start":1694678579080,"stop":1694678582518,"duration":3438},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Thu, 14 Sep 2023 08:03:02 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '80671c5f5c093b65-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None","statusTrace":"data = {'name': 'Crab', 'url': 'wss://crab-rpc.darwinia.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Thu, 14 Sep 2023 08:03:02 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '80671c5f5c093b65-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Thu, 14 Sep 2023 08:03:02 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '80671c5f5c093b65-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None","statusTrace":"data = {'name': 'Crab', 'url': 'wss://crab-rpc.darwinia.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Thu, 14 Sep 2023 08:03:02 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '80671c5f5c093b65-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"a943b7a14c1d2c0c","name":"stdout","source":"a943b7a14c1d2c0c.txt","type":"text/plain","size":1269}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az349-360"},{"name":"thread","value":"2054-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://crab-rpc.darwinia.network/', 'name': 'Crab'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9dd143d4799f9342","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Thu, 14 Sep 2023 08:02:43 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '80671bea7cba3b65-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None","time":{"start":1694678560386,"stop":1694678563986,"duration":3600}},{"uid":"e2afcfb17e25b51b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'date': 'Thu, 14 Sep 2023 08:02:25 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'cf-cache-status': 'DYNAMIC', 'server': 'cloudflare', 'cf-ray': '80671b7498a5209c-IAD', 'alt-svc': 'h3=\":443\"; ma=86400'} -+-+- None","time":{"start":1694678541336,"stop":1694678545250,"duration":3914}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":125,"unknown":0,"total":127},"items":[{"uid":"38277057f21403db","reportUrl":"https://novasamatech.github.io/test-runner/3765//#testresult/38277057f21403db","status":"passed","time":{"start":1694664115338,"stop":1694664116555,"duration":1217}},{"uid":"b8af4505ca99efa8","reportUrl":"https://novasamatech.github.io/test-runner/3764//#testresult/b8af4505ca99efa8","status":"passed","time":{"start":1694649760430,"stop":1694649761605,"duration":1175}},{"uid":"7bf6531bf98c440a","reportUrl":"https://novasamatech.github.io/test-runner/3763//#testresult/7bf6531bf98c440a","status":"passed","time":{"start":1694635320073,"stop":1694635321293,"duration":1220}},{"uid":"ed02b8a3aa9f6465","reportUrl":"https://novasamatech.github.io/test-runner/3762//#testresult/ed02b8a3aa9f6465","status":"passed","time":{"start":1694620949166,"stop":1694620949995,"duration":829}},{"uid":"7d76469583909cf1","reportUrl":"https://novasamatech.github.io/test-runner/3761//#testresult/7d76469583909cf1","status":"passed","time":{"start":1694606543039,"stop":1694606544854,"duration":1815}},{"uid":"d94442d4b9a8cf68","reportUrl":"https://novasamatech.github.io/test-runner/3760//#testresult/d94442d4b9a8cf68","status":"passed","time":{"start":1694597346989,"stop":1694597361171,"duration":14182}},{"uid":"61c4c7d4e942738c","reportUrl":"https://novasamatech.github.io/test-runner/3759//#testresult/61c4c7d4e942738c","status":"passed","time":{"start":1694592133674,"stop":1694592134628,"duration":954}},{"uid":"fee24bdc0a4e817e","reportUrl":"https://novasamatech.github.io/test-runner/3758//#testresult/fee24bdc0a4e817e","status":"passed","time":{"start":1694577739200,"stop":1694577740763,"duration":1563}},{"uid":"de2aecf697559e","reportUrl":"https://novasamatech.github.io/test-runner/3757//#testresult/de2aecf697559e","status":"passed","time":{"start":1694563382254,"stop":1694563383709,"duration":1455}},{"uid":"4b89d91dee84a1cc","reportUrl":"https://novasamatech.github.io/test-runner/3756//#testresult/4b89d91dee84a1cc","status":"passed","time":{"start":1694548966879,"stop":1694548968418,"duration":1539}},{"uid":"bd34d38c93d2de54","reportUrl":"https://novasamatech.github.io/test-runner/3755//#testresult/bd34d38c93d2de54","status":"passed","time":{"start":1694534542500,"stop":1694534543492,"duration":992}},{"uid":"faf705faa18faa31","reportUrl":"https://novasamatech.github.io/test-runner/3754//#testresult/faf705faa18faa31","status":"passed","time":{"start":1694520158086,"stop":1694520159496,"duration":1410}},{"uid":"c459f3876edf3124","reportUrl":"https://novasamatech.github.io/test-runner/3753//#testresult/c459f3876edf3124","status":"passed","time":{"start":1694505726177,"stop":1694505727418,"duration":1241}},{"uid":"491a0e3c9233c5c7","reportUrl":"https://novasamatech.github.io/test-runner/3752//#testresult/491a0e3c9233c5c7","status":"passed","time":{"start":1694491396373,"stop":1694491398328,"duration":1955}},{"uid":"99cebd477a6c7d86","reportUrl":"https://novasamatech.github.io/test-runner/3751//#testresult/99cebd477a6c7d86","status":"passed","time":{"start":1694476967423,"stop":1694476968410,"duration":987}},{"uid":"1845efd2bcd13cee","reportUrl":"https://novasamatech.github.io/test-runner/3750//#testresult/1845efd2bcd13cee","status":"passed","time":{"start":1694462535182,"stop":1694462535963,"duration":781}},{"uid":"9554c2f9b87c6aed","reportUrl":"https://novasamatech.github.io/test-runner/3749//#testresult/9554c2f9b87c6aed","status":"passed","time":{"start":1694448140162,"stop":1694448141043,"duration":881}},{"uid":"94b9a9081152eaef","reportUrl":"https://novasamatech.github.io/test-runner/3748//#testresult/94b9a9081152eaef","status":"passed","time":{"start":1694433842435,"stop":1694433843930,"duration":1495}},{"uid":"b1833a33991b65c3","reportUrl":"https://novasamatech.github.io/test-runner/3747//#testresult/b1833a33991b65c3","status":"passed","time":{"start":1694419733156,"stop":1694419734546,"duration":1390}},{"uid":"bb0321c7b8844256","reportUrl":"https://novasamatech.github.io/test-runner/3746//#testresult/bb0321c7b8844256","status":"passed","time":{"start":1694404962286,"stop":1694404963145,"duration":859}}]},"tags":[]},"source":"48f904920f07fdb6.json","parameterValues":["{'url': 'wss://crab-rpc.darwinia.network/', 'name': 'Crab'}"]}