{"uid":"5a904a177bf6491d","name":"test_has_new_assets[Test for Equilibrium]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"f21168016f27145dde497a9174f0cda4","time":{"start":1695154079069,"stop":1695154211325,"duration":132256},"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f6c1fa3f820>\nchain = <scripts.utils.chain_model.Chain object at 0x7f6c1fbd9270>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n        chain.init_properties()\n        symbols = chain.substrate.token_symbol if isinstance(chain.substrate.token_symbol, list) else [\n            chain.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n.venv/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f6c1fa3f820>\nchain = <scripts.utils.chain_model.Chain object at 0x7f6c1fbd9270>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n        chain.init_properties()\n        symbols = chain.substrate.token_symbol if isinstance(chain.substrate.token_symbol, list) else [\n            chain.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n.venv/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","steps":[],"attachments":[{"uid":"2e55579d746e3bc6","name":"stdout","source":"2e55579d746e3bc6.txt","type":"text/plain","size":420}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az1131-378"},{"name":"thread","value":"2059-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f6c1fbd9270>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2e5a493a7fbd7cdd","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1695153931558,"stop":1695154064044,"duration":132486}},{"uid":"d4b2402dedb21462","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: TOKEN\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1695153780556,"stop":1695153916533,"duration":135977}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":158,"unknown":0,"total":159},"items":[{"uid":"613c8b983a0a3967","reportUrl":"https://novasamatech.github.io/test-runner/3798//#testresult/613c8b983a0a3967","status":"passed","time":{"start":1695139388153,"stop":1695139394354,"duration":6201}},{"uid":"a96b7c664f2b6d0","reportUrl":"https://novasamatech.github.io/test-runner/3797//#testresult/a96b7c664f2b6d0","status":"passed","time":{"start":1695124963452,"stop":1695124967504,"duration":4052}},{"uid":"dc99a9bff0acc6f2","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/dc99a9bff0acc6f2","status":"passed","time":{"start":1695110565251,"stop":1695110569921,"duration":4670}},{"uid":"d955d84a786e9075","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/d955d84a786e9075","status":"passed","time":{"start":1695096152495,"stop":1695096157685,"duration":5190}},{"uid":"821386d513f4e61d","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/821386d513f4e61d","status":"passed","time":{"start":1695081824645,"stop":1695081834553,"duration":9908}},{"uid":"b778ba1e3e34585","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/b778ba1e3e34585","status":"passed","time":{"start":1695052952577,"stop":1695052956508,"duration":3931}},{"uid":"7c152465153a0246","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/7c152465153a0246","status":"passed","time":{"start":1695067387202,"stop":1695067393729,"duration":6527}},{"uid":"6f50c19f829f0a01","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/6f50c19f829f0a01","status":"passed","time":{"start":1695038577904,"stop":1695038583614,"duration":5710}},{"uid":"8ba74d7851f68027","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/8ba74d7851f68027","status":"passed","time":{"start":1695024167904,"stop":1695024172976,"duration":5072}},{"uid":"de7855bce7851f","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/de7855bce7851f","status":"passed","time":{"start":1695009784870,"stop":1695009794385,"duration":9515}},{"uid":"54e058feb189233e","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/54e058feb189233e","status":"passed","time":{"start":1694995446959,"stop":1694995459050,"duration":12091}},{"uid":"d4376eb6c88b8fd8","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/d4376eb6c88b8fd8","status":"passed","time":{"start":1694980980187,"stop":1694980985443,"duration":5256}},{"uid":"d9fe7343959c0aa2","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/d9fe7343959c0aa2","status":"passed","time":{"start":1694966547335,"stop":1694966551979,"duration":4644}},{"uid":"d5c2ec57ed51deb5","reportUrl":"https://novasamatech.github.io/test-runner/3785//#testresult/d5c2ec57ed51deb5","status":"passed","time":{"start":1694952203546,"stop":1694952208938,"duration":5392}},{"uid":"a4156cbebe36887","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/a4156cbebe36887","status":"passed","time":{"start":1694937752101,"stop":1694937757838,"duration":5737}},{"uid":"8fff9d654124fc05","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/8fff9d654124fc05","status":"passed","time":{"start":1694923394857,"stop":1694923401852,"duration":6995}},{"uid":"15c8f5788d75e3c3","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/15c8f5788d75e3c3","status":"passed","time":{"start":1694909048606,"stop":1694909055205,"duration":6599}},{"uid":"53b9c2f4e522f433","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/53b9c2f4e522f433","status":"passed","time":{"start":1694894564542,"stop":1694894573693,"duration":9151}},{"uid":"2d9e39b0193da019","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/2d9e39b0193da019","status":"passed","time":{"start":1694880156017,"stop":1694880160023,"duration":4006}},{"uid":"11b0954d67153892","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/11b0954d67153892","status":"passed","time":{"start":1694865756893,"stop":1694865760911,"duration":4018}}]},"tags":[]},"source":"5a904a177bf6491d.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f6c1fbd9270>"]}