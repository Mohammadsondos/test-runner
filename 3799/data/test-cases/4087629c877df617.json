{"uid":"4087629c877df617","name":"test_can_create_connection[Test for Equilibrium, url: wss://node.pol.equilibrium.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"aa0a741cef39a0b8ded091916ea5120b","time":{"start":1695154025012,"stop":1695154155324,"duration":130312},"status":"broken","statusMessage":"TimeoutError: [Errno 110] Connection timed out","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:129: in connect\n    sock = _open_socket(addrinfo_list, options.sockopt, options.timeout)\n.venv/lib/python3.10/site-packages/websocket/_http.py:196: in _open_socket\n    raise error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddrinfo_list = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('135.181.22.36', 443))]\nsockopt = [], timeout = None\n\n    def _open_socket(addrinfo_list, sockopt, timeout):\n        err = None\n        for addrinfo in addrinfo_list:\n            family, socktype, proto = addrinfo[:3]\n            sock = socket.socket(family, socktype, proto)\n            sock.settimeout(timeout)\n            for opts in DEFAULT_SOCKET_OPTION:\n                sock.setsockopt(*opts)\n            for opts in sockopt:\n                sock.setsockopt(*opts)\n    \n            address = addrinfo[4]\n            err = None\n            while not err:\n                try:\n>                   sock.connect(address)\nE                   TimeoutError: [Errno 110] Connection timed out\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:184: TimeoutError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"TimeoutError: [Errno 110] Connection timed out","statusTrace":"data = {'name': 'Equilibrium', 'url': 'wss://node.pol.equilibrium.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:129: in connect\n    sock = _open_socket(addrinfo_list, options.sockopt, options.timeout)\n.venv/lib/python3.10/site-packages/websocket/_http.py:196: in _open_socket\n    raise error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddrinfo_list = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('135.181.22.36', 443))]\nsockopt = [], timeout = None\n\n    def _open_socket(addrinfo_list, sockopt, timeout):\n        err = None\n        for addrinfo in addrinfo_list:\n            family, socktype, proto = addrinfo[:3]\n            sock = socket.socket(family, socktype, proto)\n            sock.settimeout(timeout)\n            for opts in DEFAULT_SOCKET_OPTION:\n                sock.setsockopt(*opts)\n            for opts in sockopt:\n                sock.setsockopt(*opts)\n    \n            address = addrinfo[4]\n            err = None\n            while not err:\n                try:\n>                   sock.connect(address)\nE                   TimeoutError: [Errno 110] Connection timed out\n\n.venv/lib/python3.10/site-packages/websocket/_http.py:184: TimeoutError","steps":[],"attachments":[{"uid":"7d2ca6c2418b07f4","name":"stdout","source":"7d2ca6c2418b07f4.txt","type":"text/plain","size":339}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az796-815"},{"name":"thread","value":"2160-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d9e50ff95df9f7ea","status":"broken","statusDetails":"TimeoutError: [Errno 110] Connection timed out","time":{"start":1695153879596,"stop":1695154009916,"duration":130320}},{"uid":"8b8395a37ea8f6e5","status":"broken","statusDetails":"TimeoutError: [Errno 110] Connection timed out","time":{"start":1695153734865,"stop":1695153864508,"duration":129643}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":159,"unknown":0,"total":160},"items":[{"uid":"f9d797d085b878fe","reportUrl":"https://novasamatech.github.io/test-runner/3798//#testresult/f9d797d085b878fe","status":"passed","time":{"start":1695139386016,"stop":1695139386873,"duration":857}},{"uid":"c3feb52b8056e3fc","reportUrl":"https://novasamatech.github.io/test-runner/3797//#testresult/c3feb52b8056e3fc","status":"passed","time":{"start":1695124987341,"stop":1695124988111,"duration":770}},{"uid":"9fadc4580483d2e","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/9fadc4580483d2e","status":"passed","time":{"start":1695110571916,"stop":1695110572677,"duration":761}},{"uid":"1527babe1d5d5ad0","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/1527babe1d5d5ad0","status":"passed","time":{"start":1695096144183,"stop":1695096144877,"duration":694}},{"uid":"f6f78614187bb179","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/f6f78614187bb179","status":"passed","time":{"start":1695081779614,"stop":1695081780170,"duration":556}},{"uid":"31aafdf19a742252","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/31aafdf19a742252","status":"passed","time":{"start":1695052949090,"stop":1695052949649,"duration":559}},{"uid":"b2a928122802b37","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/b2a928122802b37","status":"passed","time":{"start":1695067350503,"stop":1695067351422,"duration":919}},{"uid":"aa66ff5ba49b714e","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/aa66ff5ba49b714e","status":"passed","time":{"start":1695038576158,"stop":1695038576926,"duration":768}},{"uid":"e6ffcce8c49fb45d","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/e6ffcce8c49fb45d","status":"passed","time":{"start":1695024175995,"stop":1695024176684,"duration":689}},{"uid":"9485cc40d4357b1b","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/9485cc40d4357b1b","status":"passed","time":{"start":1695009751785,"stop":1695009752842,"duration":1057}},{"uid":"d39cdf0c8680a361","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/d39cdf0c8680a361","status":"passed","time":{"start":1694995386460,"stop":1694995387513,"duration":1053}},{"uid":"a5c6a72e84a33f52","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/a5c6a72e84a33f52","status":"passed","time":{"start":1694980961468,"stop":1694980962334,"duration":866}},{"uid":"b2bf605948fa4be9","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/b2bf605948fa4be9","status":"passed","time":{"start":1694966548427,"stop":1694966548987,"duration":560}},{"uid":"269367ee1a83f989","reportUrl":"https://novasamatech.github.io/test-runner/3785//#testresult/269367ee1a83f989","status":"passed","time":{"start":1694952138065,"stop":1694952138617,"duration":552}},{"uid":"ddfd409576eb3990","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/ddfd409576eb3990","status":"passed","time":{"start":1694937753958,"stop":1694937754859,"duration":901}},{"uid":"faf7beacf061cbcf","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/faf7beacf061cbcf","status":"passed","time":{"start":1694923326821,"stop":1694923327584,"duration":763}},{"uid":"36fc00fc25193af3","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/36fc00fc25193af3","status":"passed","time":{"start":1694908991036,"stop":1694908991968,"duration":932}},{"uid":"5b85a9692a14ea29","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/5b85a9692a14ea29","status":"passed","time":{"start":1694894529979,"stop":1694894530854,"duration":875}},{"uid":"270c1ff2ef52919e","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/270c1ff2ef52919e","status":"passed","time":{"start":1694880132113,"stop":1694880132780,"duration":667}},{"uid":"eb2a9828ff13a98b","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/eb2a9828ff13a98b","status":"passed","time":{"start":1694865768818,"stop":1694865769874,"duration":1056}}]},"tags":[]},"source":"4087629c877df617.json","parameterValues":["{'url': 'wss://node.pol.equilibrium.io', 'name': 'Equilibrium'}"]}