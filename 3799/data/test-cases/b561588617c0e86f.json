{"uid":"b561588617c0e86f","name":"test_can_create_connection[Test for Karura, url: wss://karura-rpc-3.aca-api.network/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9924fd062719dddab41b666be49e86a5","time":{"start":1695154868200,"stop":1695154928454,"duration":60254},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-3.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-3.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"bd59bddea56153af","name":"stdout","source":"bd59bddea56153af.txt","type":"text/plain","size":372}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az796-815"},{"name":"thread","value":"2163-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://karura-rpc-3.aca-api.network/ws', 'name': 'Karura'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3d0521255b2049b7","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1695154792776,"stop":1695154853048,"duration":60272}},{"uid":"e1b97218ada4fa48","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1695154717358,"stop":1695154777599,"duration":60241}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":159,"unknown":0,"total":160},"items":[{"uid":"55793b08a9eda0fa","reportUrl":"https://novasamatech.github.io/test-runner/3798//#testresult/55793b08a9eda0fa","status":"passed","time":{"start":1695140440671,"stop":1695140440989,"duration":318}},{"uid":"eb37a0b4a3863f95","reportUrl":"https://novasamatech.github.io/test-runner/3797//#testresult/eb37a0b4a3863f95","status":"passed","time":{"start":1695125809255,"stop":1695125809477,"duration":222}},{"uid":"e53d9f5368a654ac","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/e53d9f5368a654ac","status":"passed","time":{"start":1695110544705,"stop":1695110544982,"duration":277}},{"uid":"89940442bcda6f76","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/89940442bcda6f76","status":"passed","time":{"start":1695096126454,"stop":1695096126592,"duration":138}},{"uid":"fc9f770d9fe5eef4","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/fc9f770d9fe5eef4","status":"passed","time":{"start":1695081770013,"stop":1695081770092,"duration":79}},{"uid":"1a4b294da8c2b5df","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/1a4b294da8c2b5df","status":"passed","time":{"start":1695052922376,"stop":1695052922473,"duration":97}},{"uid":"c040547913e7de03","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/c040547913e7de03","status":"passed","time":{"start":1695067329964,"stop":1695067330396,"duration":432}},{"uid":"820a54c7e65fb5c6","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/820a54c7e65fb5c6","status":"passed","time":{"start":1695038546534,"stop":1695038546814,"duration":280}},{"uid":"9a6f7dc1ba0c05a0","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/9a6f7dc1ba0c05a0","status":"passed","time":{"start":1695024140355,"stop":1695024140482,"duration":127}},{"uid":"245b061a751d8bc0","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/245b061a751d8bc0","status":"passed","time":{"start":1695009728175,"stop":1695009728575,"duration":400}},{"uid":"1f0174b51569f6a3","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/1f0174b51569f6a3","status":"passed","time":{"start":1694995372427,"stop":1694995372802,"duration":375}},{"uid":"c958ea68a3ef3588","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/c958ea68a3ef3588","status":"passed","time":{"start":1694980924023,"stop":1694980924401,"duration":378}},{"uid":"71b393e6864d27a0","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/71b393e6864d27a0","status":"passed","time":{"start":1694966513966,"stop":1694966514060,"duration":94}},{"uid":"fa3aecbee17ba12f","reportUrl":"https://novasamatech.github.io/test-runner/3785//#testresult/fa3aecbee17ba12f","status":"passed","time":{"start":1694952119945,"stop":1694952120166,"duration":221}},{"uid":"4dc900f6ca37eb76","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/4dc900f6ca37eb76","status":"passed","time":{"start":1694937726642,"stop":1694937727062,"duration":420}},{"uid":"57d86896b9fc3182","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/57d86896b9fc3182","status":"passed","time":{"start":1694923312987,"stop":1694923313250,"duration":263}},{"uid":"52f18ce256d70b97","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/52f18ce256d70b97","status":"passed","time":{"start":1694908977779,"stop":1694908978185,"duration":406}},{"uid":"c3c448ef0920602f","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/c3c448ef0920602f","status":"passed","time":{"start":1694894521245,"stop":1694894521588,"duration":343}},{"uid":"1f6a18385fcd5360","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/1f6a18385fcd5360","status":"passed","time":{"start":1694880113389,"stop":1694880113470,"duration":81}},{"uid":"6ae6d99d7c5ccd8b","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/6ae6d99d7c5ccd8b","status":"passed","time":{"start":1694865732022,"stop":1694865732415,"duration":393}}]},"tags":[]},"source":"b561588617c0e86f.json","parameterValues":["{'url': 'wss://karura-rpc-3.aca-api.network/ws', 'name': 'Karura'}"]}