{"uid":"a57c38368d210a2f","name":"test_can_create_connection[Test for Karura, url: wss://karura-rpc-1.aca-api.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1e9e7a74f12b7ce492708745e5aab6c0","time":{"start":1695154656336,"stop":1695154716596,"duration":60260},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-1.aca-api.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-1.aca-api.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"3f75419e58babbbd","name":"stdout","source":"3f75419e58babbbd.txt","type":"text/plain","size":363}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az796-815"},{"name":"thread","value":"2163-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://karura-rpc-1.aca-api.network', 'name': 'Karura'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"21e82f29c1e3fecf","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1695154580916,"stop":1695154641189,"duration":60273}},{"uid":"a68f0a9466d26c2f","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1695154505447,"stop":1695154565725,"duration":60278}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":159,"unknown":0,"total":160},"items":[{"uid":"1a8e9283e26f3779","reportUrl":"https://novasamatech.github.io/test-runner/3798//#testresult/1a8e9283e26f3779","status":"passed","time":{"start":1695140439689,"stop":1695140440026,"duration":337}},{"uid":"4f8d1d7a7dae8b53","reportUrl":"https://novasamatech.github.io/test-runner/3797//#testresult/4f8d1d7a7dae8b53","status":"passed","time":{"start":1695125808428,"stop":1695125808706,"duration":278}},{"uid":"291c913352e878ab","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/291c913352e878ab","status":"passed","time":{"start":1695110543846,"stop":1695110544137,"duration":291}},{"uid":"ffea53a147507caf","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/ffea53a147507caf","status":"passed","time":{"start":1695096125933,"stop":1695096126046,"duration":113}},{"uid":"e21a6983561ae6ff","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/e21a6983561ae6ff","status":"passed","time":{"start":1695081769528,"stop":1695081769625,"duration":97}},{"uid":"5b7a756b4fa5a2df","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/5b7a756b4fa5a2df","status":"passed","time":{"start":1695052921898,"stop":1695052921992,"duration":94}},{"uid":"77ff49057bc050cd","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/77ff49057bc050cd","status":"passed","time":{"start":1695067328817,"stop":1695067329240,"duration":423}},{"uid":"8d2217dc645e502c","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/8d2217dc645e502c","status":"passed","time":{"start":1695038545676,"stop":1695038545969,"duration":293}},{"uid":"4fadb5a87f22bd99","reportUrl":"https://novasamatech.github.io/test-runner/3790//#testresult/4fadb5a87f22bd99","status":"passed","time":{"start":1695024139552,"stop":1695024139829,"duration":277}},{"uid":"79ee54f75e486a54","reportUrl":"https://novasamatech.github.io/test-runner/3789//#testresult/79ee54f75e486a54","status":"passed","time":{"start":1695009727048,"stop":1695009727445,"duration":397}},{"uid":"fb1e92704a0bec26","reportUrl":"https://novasamatech.github.io/test-runner/3788//#testresult/fb1e92704a0bec26","status":"passed","time":{"start":1694995371271,"stop":1694995371696,"duration":425}},{"uid":"a611001f43658ac8","reportUrl":"https://novasamatech.github.io/test-runner/3787//#testresult/a611001f43658ac8","status":"passed","time":{"start":1694980923172,"stop":1694980923445,"duration":273}},{"uid":"6523a650c16545ac","reportUrl":"https://novasamatech.github.io/test-runner/3786//#testresult/6523a650c16545ac","status":"passed","time":{"start":1694966513392,"stop":1694966513477,"duration":85}},{"uid":"f12123feb1212cb9","reportUrl":"https://novasamatech.github.io/test-runner/3785//#testresult/f12123feb1212cb9","status":"passed","time":{"start":1694952119149,"stop":1694952119570,"duration":421}},{"uid":"c42e136627931b40","reportUrl":"https://novasamatech.github.io/test-runner/3784//#testresult/c42e136627931b40","status":"passed","time":{"start":1694937725505,"stop":1694937725906,"duration":401}},{"uid":"bc12780f083228d9","reportUrl":"https://novasamatech.github.io/test-runner/3783//#testresult/bc12780f083228d9","status":"passed","time":{"start":1694923312281,"stop":1694923312573,"duration":292}},{"uid":"97c2f2a2be7e50e7","reportUrl":"https://novasamatech.github.io/test-runner/3782//#testresult/97c2f2a2be7e50e7","status":"passed","time":{"start":1694908976685,"stop":1694908977054,"duration":369}},{"uid":"2d0ece2df5b9bbcd","reportUrl":"https://novasamatech.github.io/test-runner/3781//#testresult/2d0ece2df5b9bbcd","status":"passed","time":{"start":1694894520281,"stop":1694894520595,"duration":314}},{"uid":"c706cd97aa09bc0a","reportUrl":"https://novasamatech.github.io/test-runner/3780//#testresult/c706cd97aa09bc0a","status":"passed","time":{"start":1694880112891,"stop":1694880113026,"duration":135}},{"uid":"d770ad69e000b390","reportUrl":"https://novasamatech.github.io/test-runner/3779//#testresult/d770ad69e000b390","status":"passed","time":{"start":1694865730902,"stop":1694865731299,"duration":397}}]},"tags":[]},"source":"a57c38368d210a2f.json","parameterValues":["{'url': 'wss://karura-rpc-1.aca-api.network', 'name': 'Karura'}"]}