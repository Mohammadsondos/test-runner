{"uid":"57f9674ca2264a7d","name":"test_can_create_connection[Test for Tinkernet, url: wss://invarch-tinkernet.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"fa04c589555648ef054595cb3e43047c","time":{"start":1670990886446,"stop":1670990946079,"duration":59633},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:145: in _get_resp_headers\n    status, resp_headers, status_message = read_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:312: in read_headers\n    line = recv_line(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:131: in recv_line\n    c = recv(sock, 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 1\n\n    def recv(sock, bufsize):\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:145: in _get_resp_headers\n    status, resp_headers, status_message = read_headers(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:312: in read_headers\n    line = recv_line(sock)\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:131: in recv_line\n    c = recv(sock, 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 1\n\n    def recv(sock, bufsize):\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"d3db2fa0130fdd32","name":"stdout","source":"d3db2fa0130fdd32.txt","type":"text/plain","size":276}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az576-818"},{"name":"thread","value":"1668-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws', 'name': 'Tinkernet'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ed438dcb125d35f0","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1670990816572,"stop":1670990876289,"duration":59717}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":58,"skipped":0,"passed":235,"unknown":0,"total":293},"items":[{"uid":"ace1bafb7758770e","reportUrl":"https://nova-wallet.github.io/test-runner/2080//#testresult/ace1bafb7758770e","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1670977058568,"stop":1670977118254,"duration":59686}},{"uid":"d6dd291705629126","reportUrl":"https://nova-wallet.github.io/test-runner/2079//#testresult/d6dd291705629126","status":"passed","time":{"start":1670961983603,"stop":1670961984100,"duration":497}},{"uid":"b30852c785787d2c","reportUrl":"https://nova-wallet.github.io/test-runner/2078//#testresult/b30852c785787d2c","status":"passed","time":{"start":1670947615957,"stop":1670947616257,"duration":300}},{"uid":"7c7c93331c77327e","reportUrl":"https://nova-wallet.github.io/test-runner/2077//#testresult/7c7c93331c77327e","status":"passed","time":{"start":1670933261935,"stop":1670933262410,"duration":475}},{"uid":"7ef037d51fa2c87b","reportUrl":"https://nova-wallet.github.io/test-runner/2076//#testresult/7ef037d51fa2c87b","status":"passed","time":{"start":1670918811853,"stop":1670918812374,"duration":521}},{"uid":"b2ec4583f26e4258","reportUrl":"https://nova-wallet.github.io/test-runner/2075//#testresult/b2ec4583f26e4258","status":"passed","time":{"start":1670904330693,"stop":1670904331052,"duration":359}},{"uid":"8ebdf598f2b0cbb0","reportUrl":"https://nova-wallet.github.io/test-runner/2074//#testresult/8ebdf598f2b0cbb0","status":"passed","time":{"start":1670890520913,"stop":1670890521401,"duration":488}},{"uid":"5e78da9e6bc28844","reportUrl":"https://nova-wallet.github.io/test-runner/2073//#testresult/5e78da9e6bc28844","status":"passed","time":{"start":1670875505274,"stop":1670875505635,"duration":361}},{"uid":"ddd3ff8f7e09ef8b","reportUrl":"https://nova-wallet.github.io/test-runner/2072//#testresult/ddd3ff8f7e09ef8b","status":"passed","time":{"start":1670861142857,"stop":1670861143534,"duration":677}},{"uid":"f81cd8b654bff0e8","reportUrl":"https://nova-wallet.github.io/test-runner/2071//#testresult/f81cd8b654bff0e8","status":"passed","time":{"start":1670846810482,"stop":1670846811091,"duration":609}},{"uid":"1bb2af6d40062889","reportUrl":"https://nova-wallet.github.io/test-runner/2070//#testresult/1bb2af6d40062889","status":"passed","time":{"start":1670832375491,"stop":1670832375812,"duration":321}},{"uid":"ba56a90efe298a69","reportUrl":"https://nova-wallet.github.io/test-runner/2069//#testresult/ba56a90efe298a69","status":"passed","time":{"start":1670817949320,"stop":1670817949756,"duration":436}},{"uid":"750fbc81a515092d","reportUrl":"https://nova-wallet.github.io/test-runner/2068//#testresult/750fbc81a515092d","status":"passed","time":{"start":1670804133894,"stop":1670804134353,"duration":459}},{"uid":"123d0b57132e110c","reportUrl":"https://nova-wallet.github.io/test-runner/2067//#testresult/123d0b57132e110c","status":"passed","time":{"start":1670789130830,"stop":1670789131166,"duration":336}},{"uid":"d0a454d2642d915","reportUrl":"https://nova-wallet.github.io/test-runner/2066//#testresult/d0a454d2642d915","status":"passed","time":{"start":1670774734082,"stop":1670774734404,"duration":322}},{"uid":"b3e78ad65e3e2264","reportUrl":"https://nova-wallet.github.io/test-runner/2065//#testresult/b3e78ad65e3e2264","status":"passed","time":{"start":1670760393264,"stop":1670760393945,"duration":681}},{"uid":"9bfdc4f47a78c5a1","reportUrl":"https://nova-wallet.github.io/test-runner/2064//#testresult/9bfdc4f47a78c5a1","status":"passed","time":{"start":1670746019205,"stop":1670746019533,"duration":328}},{"uid":"21f8c08370c2c42b","reportUrl":"https://nova-wallet.github.io/test-runner/2063//#testresult/21f8c08370c2c42b","status":"passed","time":{"start":1670731615069,"stop":1670731615393,"duration":324}},{"uid":"316f9e7f0441a0e4","reportUrl":"https://nova-wallet.github.io/test-runner/2062//#testresult/316f9e7f0441a0e4","status":"passed","time":{"start":1670717794462,"stop":1670717794789,"duration":327}},{"uid":"5ce03fd055dde837","reportUrl":"https://nova-wallet.github.io/test-runner/2061//#testresult/5ce03fd055dde837","status":"passed","time":{"start":1670702722698,"stop":1670702723020,"duration":322}}]},"tags":[]},"source":"57f9674ca2264a7d.json","parameterValues":["{'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws', 'name': 'Tinkernet'}"]}