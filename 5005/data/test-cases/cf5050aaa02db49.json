{"uid":"cf5050aaa02db49","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1712260878873,"stop":1712260879031,"duration":158},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f7dc41015d0>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f7dbff65c00>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f7dbff65930>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1487-409"},{"name":"thread","value":"2116-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d3037a73666e6ea2","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712260873694,"stop":1712260873838,"duration":144}},{"uid":"af46985335475fa8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712260868501,"stop":1712260868660,"duration":159}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":44,"skipped":0,"passed":583,"unknown":0,"total":629},"items":[{"uid":"485f16e56c553c1d","reportUrl":"https://novasamatech.github.io/test-runner/5004//#testresult/485f16e56c553c1d","status":"passed","time":{"start":1712246483882,"stop":1712246484037,"duration":155}},{"uid":"c23567bca025a31a","reportUrl":"https://novasamatech.github.io/test-runner/5003//#testresult/c23567bca025a31a","status":"passed","time":{"start":1712232068532,"stop":1712232068738,"duration":206}},{"uid":"e286cbb4d612cdcc","reportUrl":"https://novasamatech.github.io/test-runner/5002//#testresult/e286cbb4d612cdcc","status":"passed","time":{"start":1712217675250,"stop":1712217675996,"duration":746}},{"uid":"d7d8fcc5504dd3d6","reportUrl":"https://novasamatech.github.io/test-runner/5001//#testresult/d7d8fcc5504dd3d6","status":"passed","time":{"start":1712203269958,"stop":1712203270869,"duration":911}},{"uid":"503154d424dfbea8","reportUrl":"https://novasamatech.github.io/test-runner/5000//#testresult/503154d424dfbea8","status":"passed","time":{"start":1712188906474,"stop":1712188906798,"duration":324}},{"uid":"f5e2bf1ae09c0578","reportUrl":"https://novasamatech.github.io/test-runner/4999//#testresult/f5e2bf1ae09c0578","status":"passed","time":{"start":1712174459193,"stop":1712174459521,"duration":328}},{"uid":"6de49d61920ddd5b","reportUrl":"https://novasamatech.github.io/test-runner/4998//#testresult/6de49d61920ddd5b","status":"failed","statusDetails":"AssertionError: Difference in block numbers is greater than 3:            wss_block_number=19576302, rpc_block_number=19576298\nassert 4 <= 3\n +  where 4 = abs((19576302 - 19576298))","time":{"start":1712160087626,"stop":1712160088375,"duration":749}},{"uid":"bce86515404c6c4c","reportUrl":"https://novasamatech.github.io/test-runner/4997//#testresult/bce86515404c6c4c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712145672329,"stop":1712145672724,"duration":395}},{"uid":"bef35955d5cd9b1e","reportUrl":"https://novasamatech.github.io/test-runner/4996//#testresult/bef35955d5cd9b1e","status":"passed","time":{"start":1712131273251,"stop":1712131273571,"duration":320}},{"uid":"574f84fea73fa390","reportUrl":"https://novasamatech.github.io/test-runner/4995//#testresult/574f84fea73fa390","status":"passed","time":{"start":1712116863425,"stop":1712116864047,"duration":622}},{"uid":"e719254eec5ad878","reportUrl":"https://novasamatech.github.io/test-runner/4994//#testresult/e719254eec5ad878","status":"passed","time":{"start":1712102504065,"stop":1712102504252,"duration":187}},{"uid":"7a9fd13fe706891a","reportUrl":"https://novasamatech.github.io/test-runner/4993//#testresult/7a9fd13fe706891a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712088080109,"stop":1712088080414,"duration":305}},{"uid":"60b4ddc24e75bbb","reportUrl":"https://novasamatech.github.io/test-runner/4992//#testresult/60b4ddc24e75bbb","status":"passed","time":{"start":1712073677265,"stop":1712073677683,"duration":418}},{"uid":"272cc565e36433b6","reportUrl":"https://novasamatech.github.io/test-runner/4991//#testresult/272cc565e36433b6","status":"passed","time":{"start":1712059269707,"stop":1712059270041,"duration":334}},{"uid":"ead2d1a5336ecd13","reportUrl":"https://novasamatech.github.io/test-runner/4990//#testresult/ead2d1a5336ecd13","status":"passed","time":{"start":1712048231315,"stop":1712048231588,"duration":273}},{"uid":"98dac0ea062c730a","reportUrl":"https://novasamatech.github.io/test-runner/4954//#testresult/98dac0ea062c730a","status":"passed","time":{"start":1711540871426,"stop":1711540872015,"duration":589}},{"uid":"d066ef65c9a45773","reportUrl":"https://novasamatech.github.io/test-runner/4953//#testresult/d066ef65c9a45773","status":"passed","time":{"start":1711526458390,"stop":1711526458585,"duration":195}},{"uid":"2fc174401b2cd7c3","reportUrl":"https://novasamatech.github.io/test-runner/4952//#testresult/2fc174401b2cd7c3","status":"passed","time":{"start":1711512061706,"stop":1711512062418,"duration":712}},{"uid":"12a3c0912806201e","reportUrl":"https://novasamatech.github.io/test-runner/4951//#testresult/12a3c0912806201e","status":"passed","time":{"start":1711497695761,"stop":1711497695932,"duration":171}},{"uid":"917082de53d5fa7f","reportUrl":"https://novasamatech.github.io/test-runner/4950//#testresult/917082de53d5fa7f","status":"passed","time":{"start":1711483267013,"stop":1711483267313,"duration":300}}]},"tags":[]},"source":"cf5050aaa02db49.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}