{"uid":"159eb72ba29d3fe7","name":"test_can_create_connection[Test for Polkadex, url: wss://mainnet.polkadex.trade]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"2a5bd149bcde3907cf110ee466ecf630","time":{"start":1695672162438,"stop":1695672162986,"duration":548},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 25 Sep 2023 20:02:42 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 25 Sep 2023 20:02:42 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 25 Sep 2023 20:02:42 GMT'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Polkadex', 'url': 'wss://mainnet.polkadex.trade'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 25 Sep 2023 20:02:42 GMT'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"8d89a57afbd1fbe2","name":"stdout","source":"8d89a57afbd1fbe2.txt","type":"text/plain","size":825}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az244-805"},{"name":"thread","value":"2073-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d5df3822b892c5db","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 25 Sep 2023 20:02:26 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695672146802,"stop":1695672147352,"duration":550}},{"uid":"9dac4827da42b276","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 25 Sep 2023 20:02:11 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695672131026,"stop":1695672131715,"duration":689}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":10,"skipped":0,"passed":185,"unknown":0,"total":195},"items":[{"uid":"4454fd932b66cada","reportUrl":"https://novasamatech.github.io/test-runner/3834//#testresult/4454fd932b66cada","status":"passed","time":{"start":1695657717854,"stop":1695657718671,"duration":817}},{"uid":"4648cc925c352c1e","reportUrl":"https://novasamatech.github.io/test-runner/3833//#testresult/4648cc925c352c1e","status":"passed","time":{"start":1695643319752,"stop":1695643320667,"duration":915}},{"uid":"235f4f09a05131b1","reportUrl":"https://novasamatech.github.io/test-runner/3832//#testresult/235f4f09a05131b1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Mon, 25 Sep 2023 08:02:45 GMT'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1695628966009,"stop":1695628966411,"duration":402}},{"uid":"2e09906895d4e557","reportUrl":"https://novasamatech.github.io/test-runner/3831//#testresult/2e09906895d4e557","status":"passed","time":{"start":1695614508434,"stop":1695614509286,"duration":852}},{"uid":"4a09440647b940fe","reportUrl":"https://novasamatech.github.io/test-runner/3830//#testresult/4a09440647b940fe","status":"passed","time":{"start":1695600151710,"stop":1695600153018,"duration":1308}},{"uid":"7c4b2a519dd40ec6","reportUrl":"https://novasamatech.github.io/test-runner/3829//#testresult/7c4b2a519dd40ec6","status":"passed","time":{"start":1695585707807,"stop":1695585708498,"duration":691}},{"uid":"dfeb90c5da366ad6","reportUrl":"https://novasamatech.github.io/test-runner/3828//#testresult/dfeb90c5da366ad6","status":"passed","time":{"start":1695571317864,"stop":1695571318638,"duration":774}},{"uid":"96aa9d6bffbe290f","reportUrl":"https://novasamatech.github.io/test-runner/3827//#testresult/96aa9d6bffbe290f","status":"passed","time":{"start":1695556903103,"stop":1695556903987,"duration":884}},{"uid":"131cdeea7069f882","reportUrl":"https://novasamatech.github.io/test-runner/3826//#testresult/131cdeea7069f882","status":"passed","time":{"start":1695542521175,"stop":1695542522311,"duration":1136}},{"uid":"f387a2575340a45a","reportUrl":"https://novasamatech.github.io/test-runner/3825//#testresult/f387a2575340a45a","status":"passed","time":{"start":1695528103364,"stop":1695528103837,"duration":473}},{"uid":"16a068b475a36bf0","reportUrl":"https://novasamatech.github.io/test-runner/3824//#testresult/16a068b475a36bf0","status":"passed","time":{"start":1695513742609,"stop":1695513743559,"duration":950}},{"uid":"b6510fd408ac4e82","reportUrl":"https://novasamatech.github.io/test-runner/3823//#testresult/b6510fd408ac4e82","status":"passed","time":{"start":1695499309442,"stop":1695499309935,"duration":493}},{"uid":"46614d38d5cb1f71","reportUrl":"https://novasamatech.github.io/test-runner/3822//#testresult/46614d38d5cb1f71","status":"passed","time":{"start":1695484909918,"stop":1695484910548,"duration":630}},{"uid":"de395efd4f9f3ee8","reportUrl":"https://novasamatech.github.io/test-runner/3821//#testresult/de395efd4f9f3ee8","status":"passed","time":{"start":1695470540980,"stop":1695470541627,"duration":647}},{"uid":"44f6afe2599d0c85","reportUrl":"https://novasamatech.github.io/test-runner/3820//#testresult/44f6afe2599d0c85","status":"passed","time":{"start":1695456093599,"stop":1695456094328,"duration":729}},{"uid":"cd130233e1f5a04d","reportUrl":"https://novasamatech.github.io/test-runner/3819//#testresult/cd130233e1f5a04d","status":"passed","time":{"start":1695441705553,"stop":1695441706235,"duration":682}},{"uid":"488bf88e31a0f860","reportUrl":"https://novasamatech.github.io/test-runner/3818//#testresult/488bf88e31a0f860","status":"passed","time":{"start":1695427349603,"stop":1695427350458,"duration":855}},{"uid":"cb4e989c39b4f424","reportUrl":"https://novasamatech.github.io/test-runner/3817//#testresult/cb4e989c39b4f424","status":"passed","time":{"start":1695412907020,"stop":1695412908071,"duration":1051}},{"uid":"df0a25b894554fca","reportUrl":"https://novasamatech.github.io/test-runner/3816//#testresult/df0a25b894554fca","status":"passed","time":{"start":1695398498942,"stop":1695398499721,"duration":779}},{"uid":"d9d46243ce6d6f34","reportUrl":"https://novasamatech.github.io/test-runner/3815//#testresult/d9d46243ce6d6f34","status":"passed","time":{"start":1695384119708,"stop":1695384120519,"duration":811}}]},"tags":[]},"source":"159eb72ba29d3fe7.json","parameterValues":["{'url': 'wss://mainnet.polkadex.trade', 'name': 'Polkadex'}"]}