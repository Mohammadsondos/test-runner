{"uid":"e2850c508333f77f","name":"test_can_create_connection[Test for Westend, url: wss://westend.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"069699d857f75062eec2c2e7a6900f83","time":{"start":1700266013410,"stop":1700266013410,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Westend, url: wss://westend.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n        connection = create_connection_by_url(data[\"url\"])\n>       get_properties(connection)\n\ntests/conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:667: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:571: in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fc70f910c10>\nmethod = 'state_getRuntimeVersion'\nparams = ['0xeaad931fda0648d114f95c7262ec2c32d7d5b7788a1455fd5b64704d2ac3d135']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1700266013410,"stop":1700266013522,"duration":112},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 24, in connection_by_url\n    get_properties(connection)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 667, in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 571, in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az885-747"},{"name":"thread","value":"2225-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4a9084176fb403f8","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700265997715,"stop":1700265997715,"duration":0}},{"uid":"9a5e5c4b038e403a","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700265982446,"stop":1700265982446,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":26,"skipped":0,"passed":480,"unknown":0,"total":506},"items":[{"uid":"9415ef73ce0019a5","reportUrl":"https://novasamatech.github.io/test-runner/4155//#testresult/9415ef73ce0019a5","status":"passed","time":{"start":1700251541535,"stop":1700251541535,"duration":0}},{"uid":"7a807f67fa552c60","reportUrl":"https://novasamatech.github.io/test-runner/4154//#testresult/7a807f67fa552c60","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 504 Gateway Time-out -+-+- {'date': 'Fri, 17 Nov 2023 16:23:19 GMT', 'content-type': 'text/plain; charset=utf-8', 'connection': 'keep-alive', 'content-length': '34', 'x-continent': 'NA', 'x-cluster': 'dc', 'x-kong-upstream-latency': '60064', 'x-kong-proxy-latency': '300389', 'via': 'kong/2.5.2'} -+-+- b'The upstream server is timing out\\n'","time":{"start":1700237839219,"stop":1700237839219,"duration":0}},{"uid":"49caeb6f570446b6","reportUrl":"https://novasamatech.github.io/test-runner/4153//#testresult/49caeb6f570446b6","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700222773696,"stop":1700222773696,"duration":0}},{"uid":"371a26bdfb93ba40","reportUrl":"https://novasamatech.github.io/test-runner/4152//#testresult/371a26bdfb93ba40","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700208368135,"stop":1700208368135,"duration":0}},{"uid":"1095a556bd7321fb","reportUrl":"https://novasamatech.github.io/test-runner/4151//#testresult/1095a556bd7321fb","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700193957137,"stop":1700193957137,"duration":0}},{"uid":"672b161ade359a9","reportUrl":"https://novasamatech.github.io/test-runner/4150//#testresult/672b161ade359a9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700179606762,"stop":1700179606762,"duration":0}},{"uid":"d7e8575b2bc010c5","reportUrl":"https://novasamatech.github.io/test-runner/4149//#testresult/d7e8575b2bc010c5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700165164658,"stop":1700165164658,"duration":0}},{"uid":"2395197cb755f899","reportUrl":"https://novasamatech.github.io/test-runner/4148//#testresult/2395197cb755f899","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700150777856,"stop":1700150777856,"duration":0}},{"uid":"8d7e1b7ed9a121ad","reportUrl":"https://novasamatech.github.io/test-runner/4147//#testresult/8d7e1b7ed9a121ad","status":"passed","time":{"start":1700136355950,"stop":1700136355950,"duration":0}},{"uid":"f620a11ea918ffce","reportUrl":"https://novasamatech.github.io/test-runner/4146//#testresult/f620a11ea918ffce","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700121959433,"stop":1700121959433,"duration":0}},{"uid":"98f17482b10c6ef2","reportUrl":"https://novasamatech.github.io/test-runner/4145//#testresult/98f17482b10c6ef2","status":"passed","time":{"start":1700107521446,"stop":1700107521446,"duration":0}},{"uid":"f120375f74b453d4","reportUrl":"https://novasamatech.github.io/test-runner/4144//#testresult/f120375f74b453d4","status":"passed","time":{"start":1700093162771,"stop":1700093162771,"duration":0}},{"uid":"d331d1c1e292ae70","reportUrl":"https://novasamatech.github.io/test-runner/4143//#testresult/d331d1c1e292ae70","status":"passed","time":{"start":1700078704362,"stop":1700078704362,"duration":0}},{"uid":"8b786b3c47177aff","reportUrl":"https://novasamatech.github.io/test-runner/4142//#testresult/8b786b3c47177aff","status":"passed","time":{"start":1700064334348,"stop":1700064334348,"duration":0}},{"uid":"437a7533e05ba2e5","reportUrl":"https://novasamatech.github.io/test-runner/4141//#testresult/437a7533e05ba2e5","status":"passed","time":{"start":1700049914609,"stop":1700049914609,"duration":0}},{"uid":"f6671baa88d5a0fa","reportUrl":"https://novasamatech.github.io/test-runner/4130//#testresult/f6671baa88d5a0fa","status":"passed","time":{"start":1699891566877,"stop":1699891566877,"duration":0}},{"uid":"5cff652b57516a0c","reportUrl":"https://novasamatech.github.io/test-runner/4129//#testresult/5cff652b57516a0c","status":"passed","time":{"start":1699877138364,"stop":1699877138364,"duration":0}},{"uid":"aaf23842ff529e39","reportUrl":"https://novasamatech.github.io/test-runner/4128//#testresult/aaf23842ff529e39","status":"passed","time":{"start":1699862473100,"stop":1699862485573,"duration":12473}},{"uid":"cd62fe5637f5d17f","reportUrl":"https://novasamatech.github.io/test-runner/4127//#testresult/cd62fe5637f5d17f","status":"passed","time":{"start":1699848081382,"stop":1699848086426,"duration":5044}},{"uid":"71bfe05358ccec2a","reportUrl":"https://novasamatech.github.io/test-runner/4126//#testresult/71bfe05358ccec2a","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1699833754700,"stop":1699833754743,"duration":43}}]},"tags":[]},"source":"e2850c508333f77f.json","parameterValues":["{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"]}