{"uid":"4a53e4c086db21ac","name":"test_can_create_connection[Test for Moonbeam, url: wss://public-rpc.pinknode.io/moonbeam]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"130d43785c780bb8bdf9ec4dd0880b0b","time":{"start":1673064303145,"stop":1673064363217,"duration":60072},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Moonbeam', 'url': 'wss://public-rpc.pinknode.io/moonbeam'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock, bufsize):\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Moonbeam', 'url': 'wss://public-rpc.pinknode.io/moonbeam'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n../../../../.local/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock, bufsize):\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n../../../../.local/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"1a0dc1ae75cfd458","name":"stdout","source":"1a0dc1ae75cfd458.txt","type":"text/plain","size":248}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az183-71"},{"name":"thread","value":"1901-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://public-rpc.pinknode.io/moonbeam', 'name': 'Moonbeam'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b68d0494092606f0","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1673064232923,"stop":1673064292973,"duration":60050}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":57,"skipped":0,"passed":330,"unknown":0,"total":387},"items":[{"uid":"1f167ea4e3afd743","reportUrl":"https://nova-wallet.github.io/test-runner/2226//#testresult/1f167ea4e3afd743","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1673050437424,"stop":1673050497691,"duration":60267}},{"uid":"bad37e7e26328ed7","reportUrl":"https://nova-wallet.github.io/test-runner/2225//#testresult/bad37e7e26328ed7","status":"passed","time":{"start":1673035425318,"stop":1673035425379,"duration":61}},{"uid":"f2eeecb386ee1876","reportUrl":"https://nova-wallet.github.io/test-runner/2224//#testresult/f2eeecb386ee1876","status":"passed","time":{"start":1673021042748,"stop":1673021043019,"duration":271}},{"uid":"ee2ab3fbc8cdb246","reportUrl":"https://nova-wallet.github.io/test-runner/2223//#testresult/ee2ab3fbc8cdb246","status":"passed","time":{"start":1673006680404,"stop":1673006680478,"duration":74}},{"uid":"1af356e4f97f3154","reportUrl":"https://nova-wallet.github.io/test-runner/2222//#testresult/1af356e4f97f3154","status":"passed","time":{"start":1672992239019,"stop":1672992239100,"duration":81}},{"uid":"a70d600a12e55b82","reportUrl":"https://nova-wallet.github.io/test-runner/2221//#testresult/a70d600a12e55b82","status":"passed","time":{"start":1672977843337,"stop":1672977843396,"duration":59}},{"uid":"b1b57a0830ed784","reportUrl":"https://nova-wallet.github.io/test-runner/2220//#testresult/b1b57a0830ed784","status":"passed","time":{"start":1672963989476,"stop":1672963989711,"duration":235}},{"uid":"528be9ba4ae3a24c","reportUrl":"https://nova-wallet.github.io/test-runner/2219//#testresult/528be9ba4ae3a24c","status":"passed","time":{"start":1672949014222,"stop":1672949014295,"duration":73}},{"uid":"833f3dac43de1c2e","reportUrl":"https://nova-wallet.github.io/test-runner/2218//#testresult/833f3dac43de1c2e","status":"passed","time":{"start":1672934652189,"stop":1672934652255,"duration":66}},{"uid":"4eeb6b88f3043136","reportUrl":"https://nova-wallet.github.io/test-runner/2217//#testresult/4eeb6b88f3043136","status":"passed","time":{"start":1672920292667,"stop":1672920292900,"duration":233}},{"uid":"f244c9e142310b36","reportUrl":"https://nova-wallet.github.io/test-runner/2216//#testresult/f244c9e142310b36","status":"passed","time":{"start":1672905858705,"stop":1672905858815,"duration":110}},{"uid":"8fe670c0f12b3f4","reportUrl":"https://nova-wallet.github.io/test-runner/2215//#testresult/8fe670c0f12b3f4","status":"passed","time":{"start":1672891419158,"stop":1672891419219,"duration":61}},{"uid":"e305dca3a07b5fc4","reportUrl":"https://nova-wallet.github.io/test-runner/2214//#testresult/e305dca3a07b5fc4","status":"passed","time":{"start":1672877606313,"stop":1672877606727,"duration":414}},{"uid":"334cf856ea42ea79","reportUrl":"https://nova-wallet.github.io/test-runner/2213//#testresult/334cf856ea42ea79","status":"passed","time":{"start":1672862615303,"stop":1672862615370,"duration":67}},{"uid":"1f30e9d0fed3e1f5","reportUrl":"https://nova-wallet.github.io/test-runner/2212//#testresult/1f30e9d0fed3e1f5","status":"passed","time":{"start":1672848278268,"stop":1672848278605,"duration":337}},{"uid":"d8e2bc1c12e8ebc8","reportUrl":"https://nova-wallet.github.io/test-runner/2211//#testresult/d8e2bc1c12e8ebc8","status":"passed","time":{"start":1672833891648,"stop":1672833891894,"duration":246}},{"uid":"aeeecaecb1d24457","reportUrl":"https://nova-wallet.github.io/test-runner/2210//#testresult/aeeecaecb1d24457","status":"passed","time":{"start":1672819462725,"stop":1672819462777,"duration":52}},{"uid":"2527dc03360e95ba","reportUrl":"https://nova-wallet.github.io/test-runner/2209//#testresult/2527dc03360e95ba","status":"passed","time":{"start":1672805174733,"stop":1672805174815,"duration":82}},{"uid":"f72d73da42bf6ef4","reportUrl":"https://nova-wallet.github.io/test-runner/2208//#testresult/f72d73da42bf6ef4","status":"passed","time":{"start":1672791189213,"stop":1672791189539,"duration":326}},{"uid":"3cbdfbd31d5ebe55","reportUrl":"https://nova-wallet.github.io/test-runner/2207//#testresult/3cbdfbd31d5ebe55","status":"passed","time":{"start":1672776213716,"stop":1672776213818,"duration":102}}]},"tags":[]},"source":"4a53e4c086db21ac.json","parameterValues":["{'url': 'wss://public-rpc.pinknode.io/moonbeam', 'name': 'Moonbeam'}"]}