{"uid":"674441d7d683ba3a","name":"test_can_create_connection[Test for Westend, url: wss://westend.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"069699d857f75062eec2c2e7a6900f83","time":{"start":1701072366480,"stop":1701072366480,"duration":0},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"request = <SubRequest 'connection_by_url' for <Function test_can_create_connection[Test for Westend, url: wss://westend.api.onfinality.io/public-ws]>>\n\n    @pytest.fixture(scope=\"module\", params=collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def connection_by_url(request):\n        data = request.param\n        connection = create_connection_by_url(data[\"url\"])\n>       get_properties(connection)\n\ntests/conftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2133: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2107: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:667: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:571: in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fadee42e440>\nmethod = 'state_getRuntimeVersion'\nparams = ['0xac984fa69e65105f2304f8e768d2b6150f38e0d704d1d9641ec1066ea12e19ad']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n                # Search for subscriptions\n                for message, remove_message in list_remove_iter(self.__rpc_message_queue):\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        remove_message()\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:293: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"connection_by_url","time":{"start":1701072366480,"stop":1701072366786,"duration":306},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n","statusTrace":"  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/tests/conftest.py\", line 24, in connection_by_url\n    get_properties(connection)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/scripts/utils/metadata_interaction.py\", line 68, in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2133, in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 2107, in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 667, in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 571, in get_block_runtime_version\n    response = self.rpc_request(\"state_getRuntimeVersion\", [block_hash])\n  File \"/home/runner/work/test-runner/test-runner/nova-utils/.venv/lib/python3.10/site-packages/substrateinterface/base.py\", line 293, in rpc_request\n    raise SubstrateRequestException(message['error'])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az566-6"},{"name":"thread","value":"2165-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"connection_by_url","value":"{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"eab11fe39d370d35","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701072350773,"stop":1701072350773,"duration":0}},{"uid":"ae5c2e4644fa9a5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701072335393,"stop":1701072335393,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":64,"skipped":0,"passed":503,"unknown":0,"total":567},"items":[{"uid":"2e71209dc9756769","reportUrl":"https://novasamatech.github.io/test-runner/4216//#testresult/2e71209dc9756769","status":"passed","time":{"start":1701067719238,"stop":1701067719238,"duration":0}},{"uid":"a19f6dfc9c077d03","reportUrl":"https://novasamatech.github.io/test-runner/4215//#testresult/a19f6dfc9c077d03","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701057960329,"stop":1701057960329,"duration":0}},{"uid":"c15bb1a17cf4deed","reportUrl":"https://novasamatech.github.io/test-runner/4214//#testresult/c15bb1a17cf4deed","status":"passed","time":{"start":1701043586007,"stop":1701043586007,"duration":0}},{"uid":"d42b9afd7b828684","reportUrl":"https://novasamatech.github.io/test-runner/4213//#testresult/d42b9afd7b828684","status":"passed","time":{"start":1701034223108,"stop":1701034223108,"duration":0}},{"uid":"b675f8ec903ef056","reportUrl":"https://novasamatech.github.io/test-runner/4212//#testresult/b675f8ec903ef056","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701032226377,"stop":1701032226377,"duration":0}},{"uid":"83a27b1d5ed3c5c3","reportUrl":"https://novasamatech.github.io/test-runner/4210//#testresult/83a27b1d5ed3c5c3","status":"passed","time":{"start":1701022541406,"stop":1701022541406,"duration":0}},{"uid":"864a30576f425224","reportUrl":"https://novasamatech.github.io/test-runner/4211//#testresult/864a30576f425224","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701029159748,"stop":1701029159748,"duration":0}},{"uid":"74b5d137b34bb422","reportUrl":"https://novasamatech.github.io/test-runner/4209//#testresult/74b5d137b34bb422","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1701019893243,"stop":1701019893243,"duration":0}},{"uid":"dc129ffd6ec8f2ca","reportUrl":"https://novasamatech.github.io/test-runner/4208//#testresult/dc129ffd6ec8f2ca","status":"passed","time":{"start":1701014745884,"stop":1701014745884,"duration":0}},{"uid":"655e91c12cfea062","reportUrl":"https://novasamatech.github.io/test-runner/4207//#testresult/655e91c12cfea062","status":"passed","time":{"start":1701000342649,"stop":1701000342649,"duration":0}},{"uid":"4d9fd36ad684262d","reportUrl":"https://novasamatech.github.io/test-runner/4205//#testresult/4d9fd36ad684262d","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700971560339,"stop":1700971560339,"duration":0}},{"uid":"f63389c80647249b","reportUrl":"https://novasamatech.github.io/test-runner/4206//#testresult/f63389c80647249b","status":"passed","time":{"start":1700985958639,"stop":1700985958639,"duration":0}},{"uid":"67c91a9d6cf5ae5e","reportUrl":"https://novasamatech.github.io/test-runner/4204//#testresult/67c91a9d6cf5ae5e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700957222007,"stop":1700957222007,"duration":0}},{"uid":"46cd991ef0c75c28","reportUrl":"https://novasamatech.github.io/test-runner/4203//#testresult/46cd991ef0c75c28","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700942761052,"stop":1700942761052,"duration":0}},{"uid":"72072520adb5ec99","reportUrl":"https://novasamatech.github.io/test-runner/4202//#testresult/72072520adb5ec99","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700928360030,"stop":1700928360030,"duration":0}},{"uid":"d3fcb81496c0ca60","reportUrl":"https://novasamatech.github.io/test-runner/4201//#testresult/d3fcb81496c0ca60","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700913962561,"stop":1700913962561,"duration":0}},{"uid":"9c3a50c593355636","reportUrl":"https://novasamatech.github.io/test-runner/4200//#testresult/9c3a50c593355636","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700899559103,"stop":1700899559103,"duration":0}},{"uid":"e37e629aec2c9990","reportUrl":"https://novasamatech.github.io/test-runner/4199//#testresult/e37e629aec2c9990","status":"passed","time":{"start":1700885152094,"stop":1700885152094,"duration":0}},{"uid":"721951ea448b8edc","reportUrl":"https://novasamatech.github.io/test-runner/4198//#testresult/721951ea448b8edc","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700870801016,"stop":1700870801016,"duration":0}},{"uid":"52a479dd2ca4b4de","reportUrl":"https://novasamatech.github.io/test-runner/4197//#testresult/52a479dd2ca4b4de","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1700856355298,"stop":1700856355298,"duration":0}}]},"tags":[]},"source":"674441d7d683ba3a.json","parameterValues":["{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"]}