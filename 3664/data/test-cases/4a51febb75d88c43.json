{"uid":"4a51febb75d88c43","name":"test_can_create_connection[Test for krest, url: wss://wss-krest.peaq.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"bbac28ac5bc0cf35cd76b95eee77383a","time":{"start":1693224169849,"stop":1693224170387,"duration":538},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 12:02:50 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None","statusTrace":"data = {'name': 'krest', 'url': 'wss://wss-krest.peaq.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 12:02:50 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 12:02:50 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None","statusTrace":"data = {'name': 'krest', 'url': 'wss://wss-krest.peaq.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 12:02:50 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"580d3a3c57970b51","name":"stdout","source":"580d3a3c57970b51.txt","type":"text/plain","size":816}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az613-728"},{"name":"thread","value":"2033-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://wss-krest.peaq.network', 'name': 'krest'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"884c6d8aac63923e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 12:02:34 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None","time":{"start":1693224154365,"stop":1693224154767,"duration":402}},{"uid":"abf52f95567048c6","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 28 Aug 2023 12:02:19 GMT', 'transfer-encoding': 'chunked', 'connection': 'keep-alive'} -+-+- None","time":{"start":1693224138870,"stop":1693224139269,"duration":399}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":25,"unknown":0,"total":26},"items":[{"uid":"e2b6ce05f22c736a","reportUrl":"https://novasamatech.github.io/test-runner/3663//#testresult/e2b6ce05f22c736a","status":"passed","time":{"start":1693209734781,"stop":1693209735505,"duration":724}},{"uid":"ea05751640bf653b","reportUrl":"https://novasamatech.github.io/test-runner/3662//#testresult/ea05751640bf653b","status":"passed","time":{"start":1693195311503,"stop":1693195312088,"duration":585}},{"uid":"894388dbb8b1e8f8","reportUrl":"https://novasamatech.github.io/test-runner/3661//#testresult/894388dbb8b1e8f8","status":"passed","time":{"start":1693180983780,"stop":1693180984497,"duration":717}},{"uid":"91187824c2eb8624","reportUrl":"https://novasamatech.github.io/test-runner/3660//#testresult/91187824c2eb8624","status":"passed","time":{"start":1693166503572,"stop":1693166504079,"duration":507}},{"uid":"ad82fb8c3865a841","reportUrl":"https://novasamatech.github.io/test-runner/3659//#testresult/ad82fb8c3865a841","status":"passed","time":{"start":1693152146782,"stop":1693152147715,"duration":933}},{"uid":"5f8954d4126dce00","reportUrl":"https://novasamatech.github.io/test-runner/3658//#testresult/5f8954d4126dce00","status":"passed","time":{"start":1693137715557,"stop":1693137716052,"duration":495}},{"uid":"5a6e2c15d998ace6","reportUrl":"https://novasamatech.github.io/test-runner/3657//#testresult/5a6e2c15d998ace6","status":"passed","time":{"start":1693123322336,"stop":1693123322879,"duration":543}},{"uid":"93b793d83d1b145d","reportUrl":"https://novasamatech.github.io/test-runner/3656//#testresult/93b793d83d1b145d","status":"passed","time":{"start":1693108921917,"stop":1693108922618,"duration":701}},{"uid":"398423651b7de194","reportUrl":"https://novasamatech.github.io/test-runner/3655//#testresult/398423651b7de194","status":"passed","time":{"start":1693094592892,"stop":1693094593563,"duration":671}},{"uid":"8b330a574705a9c3","reportUrl":"https://novasamatech.github.io/test-runner/3654//#testresult/8b330a574705a9c3","status":"passed","time":{"start":1693080127796,"stop":1693080128301,"duration":505}},{"uid":"3569c3204858d745","reportUrl":"https://novasamatech.github.io/test-runner/3653//#testresult/3569c3204858d745","status":"passed","time":{"start":1693065731463,"stop":1693065732133,"duration":670}},{"uid":"4a8adb2178a8824c","reportUrl":"https://novasamatech.github.io/test-runner/3652//#testresult/4a8adb2178a8824c","status":"passed","time":{"start":1693051323172,"stop":1693051323840,"duration":668}},{"uid":"e6eaff4bb06cc780","reportUrl":"https://novasamatech.github.io/test-runner/3651//#testresult/e6eaff4bb06cc780","status":"passed","time":{"start":1693036913897,"stop":1693036914556,"duration":659}},{"uid":"ebf3f95d152bf116","reportUrl":"https://novasamatech.github.io/test-runner/3650//#testresult/ebf3f95d152bf116","status":"passed","time":{"start":1693022510595,"stop":1693022511269,"duration":674}},{"uid":"b0f6f712ff0dd8f9","reportUrl":"https://novasamatech.github.io/test-runner/3649//#testresult/b0f6f712ff0dd8f9","status":"passed","time":{"start":1693008165454,"stop":1693008166099,"duration":645}},{"uid":"2b8d64d7f4a2013e","reportUrl":"https://novasamatech.github.io/test-runner/3648//#testresult/2b8d64d7f4a2013e","status":"passed","time":{"start":1692993712990,"stop":1692993713501,"duration":511}},{"uid":"6f33f3f774bbf03f","reportUrl":"https://novasamatech.github.io/test-runner/3647//#testresult/6f33f3f774bbf03f","status":"passed","time":{"start":1692979336714,"stop":1692979337236,"duration":522}},{"uid":"382692bfd506763c","reportUrl":"https://novasamatech.github.io/test-runner/3646//#testresult/382692bfd506763c","status":"passed","time":{"start":1692964976137,"stop":1692964976995,"duration":858}},{"uid":"45f17cddc24bd857","reportUrl":"https://novasamatech.github.io/test-runner/3645//#testresult/45f17cddc24bd857","status":"passed","time":{"start":1692950528024,"stop":1692950528709,"duration":685}},{"uid":"932d0c031f2c9c43","reportUrl":"https://novasamatech.github.io/test-runner/3644//#testresult/932d0c031f2c9c43","status":"passed","time":{"start":1692936118445,"stop":1692936119149,"duration":704}}]},"tags":[]},"source":"4a51febb75d88c43.json","parameterValues":["{'url': 'wss://wss-krest.peaq.network', 'name': 'krest'}"]}