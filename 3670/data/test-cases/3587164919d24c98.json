{"uid":"3587164919d24c98","name":"test_can_create_connection[Test for Kusama, url: wss://kusama-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"92b55e3f9d727df3bbb4f299d432f444","time":{"start":1693310518297,"stop":1693310518633,"duration":336},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 29 Aug 2023 12:01:58 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 29 Aug 2023 12:01:58 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 29 Aug 2023 12:01:58 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 29 Aug 2023 12:01:58 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"c60f0ace9db6f2fb","name":"stdout","source":"c60f0ace9db6f2fb.txt","type":"text/plain","size":1059}],"parameters":[],"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1028-2"},{"name":"thread","value":"2016-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama-rpc.dwellir.com', 'name': 'Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6c0393b098bc4b8c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 29 Aug 2023 12:01:43 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693310502844,"stop":1693310503209,"duration":365}},{"uid":"8c5463827d154050","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'content-type': 'text/plain', 'content-length': '45', 'date': 'Tue, 29 Aug 2023 12:01:27 GMT', 'strict-transport-security': 'max-age=16000000; includeSubDomains; preload;'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1693310487296,"stop":1693310487672,"duration":376}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":31,"unknown":0,"total":32},"items":[{"uid":"cf6aa5848ef05c69","reportUrl":"https://novasamatech.github.io/test-runner/3669//#testresult/cf6aa5848ef05c69","status":"passed","time":{"start":1693296077105,"stop":1693296077579,"duration":474}},{"uid":"271eaa60d77b660d","reportUrl":"https://novasamatech.github.io/test-runner/3668//#testresult/271eaa60d77b660d","status":"passed","time":{"start":1693281675944,"stop":1693281676553,"duration":609}},{"uid":"2cd424be614871dc","reportUrl":"https://novasamatech.github.io/test-runner/3667//#testresult/2cd424be614871dc","status":"passed","time":{"start":1693267329292,"stop":1693267329916,"duration":624}},{"uid":"7142adf7ae6eb8ea","reportUrl":"https://novasamatech.github.io/test-runner/3666//#testresult/7142adf7ae6eb8ea","status":"passed","time":{"start":1693252883962,"stop":1693252884763,"duration":801}},{"uid":"426a41adbeb2ea1e","reportUrl":"https://novasamatech.github.io/test-runner/3665//#testresult/426a41adbeb2ea1e","status":"passed","time":{"start":1693238476599,"stop":1693238477099,"duration":500}},{"uid":"6dd197647cf3b284","reportUrl":"https://novasamatech.github.io/test-runner/3664//#testresult/6dd197647cf3b284","status":"passed","time":{"start":1693224085693,"stop":1693224086163,"duration":470}},{"uid":"d90e70859885dcc5","reportUrl":"https://novasamatech.github.io/test-runner/3663//#testresult/d90e70859885dcc5","status":"passed","time":{"start":1693209679701,"stop":1693209680193,"duration":492}},{"uid":"b9200b9bc06226a6","reportUrl":"https://novasamatech.github.io/test-runner/3662//#testresult/b9200b9bc06226a6","status":"passed","time":{"start":1693195279395,"stop":1693195279854,"duration":459}},{"uid":"5a4d92afaddc966c","reportUrl":"https://novasamatech.github.io/test-runner/3661//#testresult/5a4d92afaddc966c","status":"passed","time":{"start":1693180943528,"stop":1693180944174,"duration":646}},{"uid":"4a9a4d468d664ff3","reportUrl":"https://novasamatech.github.io/test-runner/3660//#testresult/4a9a4d468d664ff3","status":"passed","time":{"start":1693166471000,"stop":1693166471507,"duration":507}},{"uid":"dab5f6dc1e5dda6c","reportUrl":"https://novasamatech.github.io/test-runner/3659//#testresult/dab5f6dc1e5dda6c","status":"passed","time":{"start":1693152081033,"stop":1693152081785,"duration":752}},{"uid":"498d1700d46a3052","reportUrl":"https://novasamatech.github.io/test-runner/3658//#testresult/498d1700d46a3052","status":"passed","time":{"start":1693137678642,"stop":1693137679129,"duration":487}},{"uid":"981ff0b4f393b085","reportUrl":"https://novasamatech.github.io/test-runner/3657//#testresult/981ff0b4f393b085","status":"passed","time":{"start":1693123276249,"stop":1693123276779,"duration":530}},{"uid":"c54281274109f3a4","reportUrl":"https://novasamatech.github.io/test-runner/3656//#testresult/c54281274109f3a4","status":"passed","time":{"start":1693108882950,"stop":1693108883569,"duration":619}},{"uid":"4def337a17b0b88c","reportUrl":"https://novasamatech.github.io/test-runner/3655//#testresult/4def337a17b0b88c","status":"passed","time":{"start":1693094538954,"stop":1693094539608,"duration":654}},{"uid":"ca6cc9014bf76a72","reportUrl":"https://novasamatech.github.io/test-runner/3654//#testresult/ca6cc9014bf76a72","status":"passed","time":{"start":1693080076165,"stop":1693080076627,"duration":462}},{"uid":"3bd15f54fa28a96b","reportUrl":"https://novasamatech.github.io/test-runner/3653//#testresult/3bd15f54fa28a96b","status":"passed","time":{"start":1693065681884,"stop":1693065682511,"duration":627}},{"uid":"16376fe7ee6dd30d","reportUrl":"https://novasamatech.github.io/test-runner/3652//#testresult/16376fe7ee6dd30d","status":"passed","time":{"start":1693051278095,"stop":1693051278830,"duration":735}},{"uid":"29a09a3246c690c6","reportUrl":"https://novasamatech.github.io/test-runner/3651//#testresult/29a09a3246c690c6","status":"passed","time":{"start":1693036875071,"stop":1693036875693,"duration":622}},{"uid":"e1f46c6e1e9c69c7","reportUrl":"https://novasamatech.github.io/test-runner/3650//#testresult/e1f46c6e1e9c69c7","status":"passed","time":{"start":1693022472278,"stop":1693022473052,"duration":774}}]},"tags":[]},"source":"3587164919d24c98.json","parameterValues":["{'url': 'wss://kusama-rpc.dwellir.com', 'name': 'Kusama'}"]}