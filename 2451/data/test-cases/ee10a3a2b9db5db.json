{"uid":"ee10a3a2b9db5db","name":"test_can_create_connection[Test for Karura, url: wss://karura-rpc-3.aca-api.network/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"9924fd062719dddab41b666be49e86a5","time":{"start":1676261823852,"stop":1676261824169,"duration":317},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-3.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","statusTrace":"data = {'name': 'Karura', 'url': 'wss://karura-rpc-3.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b67aeda460f1c500","name":"stdout","source":"b67aeda460f1c500.txt","type":"text/plain","size":282}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az206-303"},{"name":"thread","value":"1630-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://karura-rpc-3.aca-api.network/ws', 'name': 'Karura'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"89c63e071e79b82d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable","time":{"start":1676261813525,"stop":1676261813742,"duration":217}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":55,"skipped":0,"passed":647,"unknown":0,"total":702},"items":[{"uid":"286bbea8d40abb14","reportUrl":"https://nova-wallet.github.io/test-runner/2450//#testresult/286bbea8d40abb14","status":"passed","time":{"start":1676250642734,"stop":1676250642854,"duration":120}},{"uid":"7e951668dbba1c15","reportUrl":"https://nova-wallet.github.io/test-runner/2449//#testresult/7e951668dbba1c15","status":"passed","time":{"start":1676232804392,"stop":1676232804510,"duration":118}},{"uid":"e2b9f51b23659fef","reportUrl":"https://nova-wallet.github.io/test-runner/2448//#testresult/e2b9f51b23659fef","status":"passed","time":{"start":1676218610684,"stop":1676218610774,"duration":90}},{"uid":"f4876e73d94b391b","reportUrl":"https://nova-wallet.github.io/test-runner/2447//#testresult/f4876e73d94b391b","status":"passed","time":{"start":1676204656344,"stop":1676204656729,"duration":385}},{"uid":"c1b43247a90fc3b","reportUrl":"https://nova-wallet.github.io/test-runner/2446//#testresult/c1b43247a90fc3b","status":"passed","time":{"start":1676189772108,"stop":1676189772431,"duration":323}},{"uid":"2712116483a90ddb","reportUrl":"https://nova-wallet.github.io/test-runner/2445//#testresult/2712116483a90ddb","status":"passed","time":{"start":1676175358353,"stop":1676175358458,"duration":105}},{"uid":"4b6d124d02a95190","reportUrl":"https://nova-wallet.github.io/test-runner/2444//#testresult/4b6d124d02a95190","status":"passed","time":{"start":1676164392112,"stop":1676164392195,"duration":83}},{"uid":"22b802d38cc9f4d5","reportUrl":"https://nova-wallet.github.io/test-runner/2443//#testresult/22b802d38cc9f4d5","status":"passed","time":{"start":1676146388566,"stop":1676146388885,"duration":319}},{"uid":"da9fad8bd6a18d3a","reportUrl":"https://nova-wallet.github.io/test-runner/2442//#testresult/da9fad8bd6a18d3a","status":"passed","time":{"start":1676132210469,"stop":1676132210566,"duration":97}},{"uid":"57e3bfab9b907488","reportUrl":"https://nova-wallet.github.io/test-runner/2441//#testresult/57e3bfab9b907488","status":"passed","time":{"start":1676118219863,"stop":1676118220247,"duration":384}},{"uid":"b845118c0f54c77f","reportUrl":"https://nova-wallet.github.io/test-runner/2440//#testresult/b845118c0f54c77f","status":"passed","time":{"start":1676103389379,"stop":1676103389759,"duration":380}},{"uid":"c47d01310b40f34","reportUrl":"https://nova-wallet.github.io/test-runner/2439//#testresult/c47d01310b40f34","status":"passed","time":{"start":1676088973825,"stop":1676088974205,"duration":380}},{"uid":"85b4de31161c1f46","reportUrl":"https://nova-wallet.github.io/test-runner/2438//#testresult/85b4de31161c1f46","status":"passed","time":{"start":1676077406401,"stop":1676077406497,"duration":96}},{"uid":"3d8cbffa2a9b4bf7","reportUrl":"https://nova-wallet.github.io/test-runner/2437//#testresult/3d8cbffa2a9b4bf7","status":"passed","time":{"start":1676060053130,"stop":1676060053384,"duration":254}},{"uid":"d0f2b33b3e390787","reportUrl":"https://nova-wallet.github.io/test-runner/2435//#testresult/d0f2b33b3e390787","status":"passed","time":{"start":1676031953084,"stop":1676031953425,"duration":341}},{"uid":"8d79be6175dbe7e7","reportUrl":"https://nova-wallet.github.io/test-runner/2433//#testresult/8d79be6175dbe7e7","status":"passed","time":{"start":1676002609236,"stop":1676002609646,"duration":410}},{"uid":"eb4b264093e06d00","reportUrl":"https://nova-wallet.github.io/test-runner/2432//#testresult/eb4b264093e06d00","status":"passed","time":{"start":1675991528735,"stop":1675991528825,"duration":90}},{"uid":"7932081dae3f5497","reportUrl":"https://nova-wallet.github.io/test-runner/2431//#testresult/7932081dae3f5497","status":"passed","time":{"start":1675973674294,"stop":1675973674606,"duration":312}},{"uid":"769c83417637567c","reportUrl":"https://nova-wallet.github.io/test-runner/2430//#testresult/769c83417637567c","status":"passed","time":{"start":1675959545754,"stop":1675959546163,"duration":409}},{"uid":"e38359d5e276c45b","reportUrl":"https://nova-wallet.github.io/test-runner/2429//#testresult/e38359d5e276c45b","status":"passed","time":{"start":1675945699975,"stop":1675945700391,"duration":416}}]},"tags":[]},"source":"ee10a3a2b9db5db.json","parameterValues":["{'url': 'wss://karura-rpc-3.aca-api.network/ws', 'name': 'Karura'}"]}