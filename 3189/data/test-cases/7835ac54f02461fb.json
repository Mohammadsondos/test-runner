{"uid":"7835ac54f02461fb","name":"test_can_create_connection[Test for Acala, url: wss://acala-rpc-2.aca-api.network/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"27cececd4a2d1bb98a4885dc7b61b765","time":{"start":1686499472876,"stop":1686499473312,"duration":436},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 11 Jun 2023 16:04:33 GMT', 'content-type': 'text/html', 'content-length': '162', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc-2.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 11 Jun 2023 16:04:33 GMT', 'content-type': 'text/html', 'content-length': '162', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 11 Jun 2023 16:04:33 GMT', 'content-type': 'text/html', 'content-length': '162', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Acala', 'url': 'wss://acala-rpc-2.aca-api.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 11 Jun 2023 16:04:33 GMT', 'content-type': 'text/html', 'content-length': '162', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"87411ba878079d32","name":"stdout","source":"87411ba878079d32.txt","type":"text/plain","size":1434}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1102-585"},{"name":"thread","value":"1947-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://acala-rpc-2.aca-api.network/ws', 'name': 'Acala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2d86f9f93b0d6e3e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 11 Jun 2023 16:04:17 GMT', 'content-type': 'text/html', 'content-length': '162', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1686499457355,"stop":1686499457772,"duration":417}},{"uid":"d7d924ee6f7ec1e0","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'server': 'awselb/2.0', 'date': 'Sun, 11 Jun 2023 16:04:02 GMT', 'content-type': 'text/html', 'content-length': '162', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>503 Service Temporarily Unavailable</title></head>\\r\\n<body>\\r\\n<center><h1>503 Service Temporarily Unavailable</h1></center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1686499441671,"stop":1686499442122,"duration":451}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":228,"unknown":0,"total":230},"items":[{"uid":"28a4053b63d24f6f","reportUrl":"https://novasamatech.github.io/test-runner/3188//#testresult/28a4053b63d24f6f","status":"passed","time":{"start":1686485090215,"stop":1686485090964,"duration":749}},{"uid":"4e42d90553e8b079","reportUrl":"https://novasamatech.github.io/test-runner/3187//#testresult/4e42d90553e8b079","status":"passed","time":{"start":1686470638399,"stop":1686470638793,"duration":394}},{"uid":"19fe12c778173157","reportUrl":"https://novasamatech.github.io/test-runner/3186//#testresult/19fe12c778173157","status":"passed","time":{"start":1686456221293,"stop":1686456221659,"duration":366}},{"uid":"7185d623ce9bcc8b","reportUrl":"https://novasamatech.github.io/test-runner/3185//#testresult/7185d623ce9bcc8b","status":"passed","time":{"start":1686442516493,"stop":1686442517232,"duration":739}},{"uid":"410be39daa5fc18b","reportUrl":"https://novasamatech.github.io/test-runner/3184//#testresult/410be39daa5fc18b","status":"passed","time":{"start":1686427467722,"stop":1686427468453,"duration":731}},{"uid":"998275a728fe5753","reportUrl":"https://novasamatech.github.io/test-runner/3183//#testresult/998275a728fe5753","status":"passed","time":{"start":1686413063756,"stop":1686413064515,"duration":759}},{"uid":"1a0f5a1789405f9b","reportUrl":"https://novasamatech.github.io/test-runner/3182//#testresult/1a0f5a1789405f9b","status":"passed","time":{"start":1686398700071,"stop":1686398700774,"duration":703}},{"uid":"e6d14ed34ca4235a","reportUrl":"https://novasamatech.github.io/test-runner/3181//#testresult/e6d14ed34ca4235a","status":"passed","time":{"start":1686384236971,"stop":1686384237490,"duration":519}},{"uid":"7f38567dff047428","reportUrl":"https://novasamatech.github.io/test-runner/3180//#testresult/7f38567dff047428","status":"passed","time":{"start":1686369846255,"stop":1686369846651,"duration":396}},{"uid":"95e749f2cefe52f","reportUrl":"https://novasamatech.github.io/test-runner/3179//#testresult/95e749f2cefe52f","status":"passed","time":{"start":1686355986840,"stop":1686355987248,"duration":408}},{"uid":"eec955efa680c877","reportUrl":"https://novasamatech.github.io/test-runner/3178//#testresult/eec955efa680c877","status":"passed","time":{"start":1686341034494,"stop":1686341035307,"duration":813}},{"uid":"87f641dc030a9f5b","reportUrl":"https://novasamatech.github.io/test-runner/3177//#testresult/87f641dc030a9f5b","status":"passed","time":{"start":1686326639197,"stop":1686326639594,"duration":397}},{"uid":"11c6ae29e1eb7dab","reportUrl":"https://novasamatech.github.io/test-runner/3176//#testresult/11c6ae29e1eb7dab","status":"passed","time":{"start":1686312299563,"stop":1686312300396,"duration":833}},{"uid":"445995abe6350c9c","reportUrl":"https://novasamatech.github.io/test-runner/3175//#testresult/445995abe6350c9c","status":"passed","time":{"start":1686297838149,"stop":1686297838675,"duration":526}},{"uid":"54cf69257d902b7f","reportUrl":"https://novasamatech.github.io/test-runner/3174//#testresult/54cf69257d902b7f","status":"passed","time":{"start":1686283446735,"stop":1686283447433,"duration":698}},{"uid":"902fa203441d53c4","reportUrl":"https://novasamatech.github.io/test-runner/3173//#testresult/902fa203441d53c4","status":"passed","time":{"start":1686269687001,"stop":1686269687395,"duration":394}},{"uid":"91f75b4567c1cf79","reportUrl":"https://novasamatech.github.io/test-runner/3172//#testresult/91f75b4567c1cf79","status":"passed","time":{"start":1686254639099,"stop":1686254639624,"duration":525}},{"uid":"caaccc06e741e849","reportUrl":"https://novasamatech.github.io/test-runner/3171//#testresult/caaccc06e741e849","status":"passed","time":{"start":1686240247459,"stop":1686240248774,"duration":1315}},{"uid":"e525a4cf7cbcd0fe","reportUrl":"https://novasamatech.github.io/test-runner/3170//#testresult/e525a4cf7cbcd0fe","status":"passed","time":{"start":1686225900608,"stop":1686225901260,"duration":652}},{"uid":"28c78c39ee917e0","reportUrl":"https://novasamatech.github.io/test-runner/3169//#testresult/28c78c39ee917e0","status":"passed","time":{"start":1686211447341,"stop":1686211447732,"duration":391}}]},"tags":[]},"source":"7835ac54f02461fb.json","parameterValues":["{'url': 'wss://acala-rpc-2.aca-api.network/ws', 'name': 'Acala'}"]}