{"uid":"59adbea077beae54","name":"test_has_new_assets[Test for Efinity]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"d3b82156e67e0ae25497e2fe84c6c461","time":{"start":1695341023901,"stop":1695341026590,"duration":2689},"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: ENJ\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f273153f280>\nchain = <scripts.utils.chain_model.Chain object at 0x7f273153db70>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n        chain.init_properties()\n        symbols = chain.substrate.token_symbol if isinstance(chain.substrate.token_symbol, list) else [\n            chain.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: ENJ\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n.venv/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: ENJ\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f273153f280>\nchain = <scripts.utils.chain_model.Chain object at 0x7f273153db70>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n        chain.init_properties()\n        symbols = chain.substrate.token_symbol if isinstance(chain.substrate.token_symbol, list) else [\n            chain.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: ENJ\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n.venv/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","steps":[],"attachments":[{"uid":"5f60d6fc4517f82f","name":"stdout","source":"5f60d6fc4517f82f.txt","type":"text/plain","size":819}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az575-835"},{"name":"thread","value":"2177-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f273153db70>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4815da40d5a7ad85","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: ENJ\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1695341006597,"stop":1695341008860,"duration":2263}},{"uid":"f7d9722a566abf51","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:39\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:36\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: ENJ\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1695340983363,"stop":1695340991558,"duration":8195}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":7,"skipped":0,"passed":163,"unknown":0,"total":171},"items":[{"uid":"33f2679d75c34e21","reportUrl":"https://novasamatech.github.io/test-runner/3810//#testresult/33f2679d75c34e21","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1695312208336,"stop":1695312225524,"duration":17188}},{"uid":"2d60553a7902a04d","reportUrl":"https://novasamatech.github.io/test-runner/3809//#testresult/2d60553a7902a04d","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1695297791931,"stop":1695297808426,"duration":16495}},{"uid":"2865cec19ce8bf39","reportUrl":"https://novasamatech.github.io/test-runner/3808//#testresult/2865cec19ce8bf39","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1695283391588,"stop":1695283408069,"duration":16481}},{"uid":"a72866d95b855580","reportUrl":"https://novasamatech.github.io/test-runner/3807//#testresult/a72866d95b855580","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1695268977945,"stop":1695268994512,"duration":16567}},{"uid":"4678f8afc73adc57","reportUrl":"https://novasamatech.github.io/test-runner/3806//#testresult/4678f8afc73adc57","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1695254661211,"stop":1695254677896,"duration":16685}},{"uid":"f17f947853d7e12","reportUrl":"https://novasamatech.github.io/test-runner/3805//#testresult/f17f947853d7e12","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1695240190171,"stop":1695240206556,"duration":16385}},{"uid":"53a4db2c5a421c20","reportUrl":"https://novasamatech.github.io/test-runner/3804//#testresult/53a4db2c5a421c20","status":"broken","statusDetails":"AttributeError: 'NoneType' object has no attribute 'get_constant'","time":{"start":1695225779714,"stop":1695225796132,"duration":16418}},{"uid":"e1ca7a5e0d53b57b","reportUrl":"https://novasamatech.github.io/test-runner/3803//#testresult/e1ca7a5e0d53b57b","status":"passed","time":{"start":1695211319192,"stop":1695211321927,"duration":2735}},{"uid":"3328de9b83e9d88a","reportUrl":"https://novasamatech.github.io/test-runner/3802//#testresult/3328de9b83e9d88a","status":"passed","time":{"start":1695196920615,"stop":1695196923854,"duration":3239}},{"uid":"9d5c16750c5772b","reportUrl":"https://novasamatech.github.io/test-runner/3801//#testresult/9d5c16750c5772b","status":"passed","time":{"start":1695182527071,"stop":1695182530869,"duration":3798}},{"uid":"653d3eb1647523ba","reportUrl":"https://novasamatech.github.io/test-runner/3800//#testresult/653d3eb1647523ba","status":"passed","time":{"start":1695168178926,"stop":1695168184022,"duration":5096}},{"uid":"87980e70fd8a0399","reportUrl":"https://novasamatech.github.io/test-runner/3799//#testresult/87980e70fd8a0399","status":"passed","time":{"start":1695153732702,"stop":1695153737431,"duration":4729}},{"uid":"ab366a682912ea3e","reportUrl":"https://novasamatech.github.io/test-runner/3798//#testresult/ab366a682912ea3e","status":"passed","time":{"start":1695139329777,"stop":1695139333489,"duration":3712}},{"uid":"4b1580aecc4d8ee","reportUrl":"https://novasamatech.github.io/test-runner/3797//#testresult/4b1580aecc4d8ee","status":"passed","time":{"start":1695124924240,"stop":1695124928361,"duration":4121}},{"uid":"f5885efc510ff20a","reportUrl":"https://novasamatech.github.io/test-runner/3796//#testresult/f5885efc510ff20a","status":"passed","time":{"start":1695110521304,"stop":1695110524458,"duration":3154}},{"uid":"224995e0a780e74a","reportUrl":"https://novasamatech.github.io/test-runner/3795//#testresult/224995e0a780e74a","status":"passed","time":{"start":1695096121699,"stop":1695096124748,"duration":3049}},{"uid":"406e257cce5d4525","reportUrl":"https://novasamatech.github.io/test-runner/3794//#testresult/406e257cce5d4525","status":"passed","time":{"start":1695081777212,"stop":1695081781064,"duration":3852}},{"uid":"fc6a3b05ba9cf43","reportUrl":"https://novasamatech.github.io/test-runner/3792//#testresult/fc6a3b05ba9cf43","status":"passed","time":{"start":1695052918335,"stop":1695052921023,"duration":2688}},{"uid":"ce9af1c4a8c027e8","reportUrl":"https://novasamatech.github.io/test-runner/3793//#testresult/ce9af1c4a8c027e8","status":"passed","time":{"start":1695067328067,"stop":1695067331663,"duration":3596}},{"uid":"b9acc9fc6ac55ab9","reportUrl":"https://novasamatech.github.io/test-runner/3791//#testresult/b9acc9fc6ac55ab9","status":"passed","time":{"start":1695038525659,"stop":1695038527973,"duration":2314}}]},"tags":[]},"source":"59adbea077beae54.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f273153db70>"]}