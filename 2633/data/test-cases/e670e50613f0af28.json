{"uid":"e670e50613f0af28","name":"test_can_create_connection[Test for UNIQUE, url: wss://us-ws.unique.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"aed298dd4949a65b501aa652affb6654","time":{"start":1678795581406,"stop":1678795581474,"duration":68},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://us-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://us-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"dbade6cba28ba479","name":"stdout","source":"dbade6cba28ba479.txt","type":"text/plain","size":222}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az413-412"},{"name":"thread","value":"1788-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://us-ws.unique.network/', 'name': 'UNIQUE'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"851451fc22f87c03","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1678795571217,"stop":1678795571293,"duration":76}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":57,"skipped":0,"passed":811,"unknown":0,"total":868},"items":[{"uid":"9b72bcb6b13f89eb","reportUrl":"https://nova-wallet.github.io/test-runner/2632//#testresult/9b72bcb6b13f89eb","status":"passed","time":{"start":1678781112125,"stop":1678781112228,"duration":103}},{"uid":"ad2453c68d19fb66","reportUrl":"https://nova-wallet.github.io/test-runner/2631//#testresult/ad2453c68d19fb66","status":"passed","time":{"start":1678766674506,"stop":1678766674829,"duration":323}},{"uid":"34efb2ea5ea83e59","reportUrl":"https://nova-wallet.github.io/test-runner/2630//#testresult/34efb2ea5ea83e59","status":"passed","time":{"start":1678752818577,"stop":1678752818796,"duration":219}},{"uid":"511bceb0eca62bda","reportUrl":"https://nova-wallet.github.io/test-runner/2629//#testresult/511bceb0eca62bda","status":"passed","time":{"start":1678737882841,"stop":1678737883173,"duration":332}},{"uid":"910e2f08063b2e8d","reportUrl":"https://nova-wallet.github.io/test-runner/2628//#testresult/910e2f08063b2e8d","status":"passed","time":{"start":1678723468455,"stop":1678723468548,"duration":93}},{"uid":"8c07836cd08067a0","reportUrl":"https://nova-wallet.github.io/test-runner/2627//#testresult/8c07836cd08067a0","status":"passed","time":{"start":1678709151280,"stop":1678709151501,"duration":221}},{"uid":"abf541f28fe4a096","reportUrl":"https://nova-wallet.github.io/test-runner/2626//#testresult/abf541f28fe4a096","status":"passed","time":{"start":1678694714816,"stop":1678694715043,"duration":227}},{"uid":"99c500c3c618312c","reportUrl":"https://nova-wallet.github.io/test-runner/2625//#testresult/99c500c3c618312c","status":"passed","time":{"start":1678680281432,"stop":1678680281797,"duration":365}},{"uid":"2c10e402646d6a7a","reportUrl":"https://nova-wallet.github.io/test-runner/2624//#testresult/2c10e402646d6a7a","status":"passed","time":{"start":1678666462845,"stop":1678666463202,"duration":357}},{"uid":"d818e5fc4a911e36","reportUrl":"https://nova-wallet.github.io/test-runner/2623//#testresult/d818e5fc4a911e36","status":"passed","time":{"start":1678651460636,"stop":1678651460901,"duration":265}},{"uid":"becc98962f9147c4","reportUrl":"https://nova-wallet.github.io/test-runner/2621//#testresult/becc98962f9147c4","status":"passed","time":{"start":1678622707108,"stop":1678622707349,"duration":241}},{"uid":"ef041757d82dd1fd","reportUrl":"https://nova-wallet.github.io/test-runner/2620//#testresult/ef041757d82dd1fd","status":"passed","time":{"start":1678608291541,"stop":1678608291775,"duration":234}},{"uid":"d30dd854efeab881","reportUrl":"https://nova-wallet.github.io/test-runner/2619//#testresult/d30dd854efeab881","status":"passed","time":{"start":1678593895363,"stop":1678593895692,"duration":329}},{"uid":"5074ea172da3039","reportUrl":"https://nova-wallet.github.io/test-runner/2618//#testresult/5074ea172da3039","status":"passed","time":{"start":1678580094590,"stop":1678580094704,"duration":114}},{"uid":"d5c0baeaa38ac8b6","reportUrl":"https://nova-wallet.github.io/test-runner/2617//#testresult/d5c0baeaa38ac8b6","status":"passed","time":{"start":1678565044314,"stop":1678565044453,"duration":139}},{"uid":"22c389830c0d8253","reportUrl":"https://nova-wallet.github.io/test-runner/2616//#testresult/22c389830c0d8253","status":"passed","time":{"start":1678550663490,"stop":1678550663824,"duration":334}},{"uid":"a6e3e4fa5fb5cba4","reportUrl":"https://nova-wallet.github.io/test-runner/2615//#testresult/a6e3e4fa5fb5cba4","status":"passed","time":{"start":1678536294142,"stop":1678536294461,"duration":319}},{"uid":"a85c6f28c0bfbb90","reportUrl":"https://nova-wallet.github.io/test-runner/2614//#testresult/a85c6f28c0bfbb90","status":"passed","time":{"start":1678521876210,"stop":1678521876338,"duration":128}},{"uid":"470b066cad75923c","reportUrl":"https://nova-wallet.github.io/test-runner/2613//#testresult/470b066cad75923c","status":"passed","time":{"start":1678507478996,"stop":1678507479315,"duration":319}},{"uid":"28ad22b5dbc0e193","reportUrl":"https://nova-wallet.github.io/test-runner/2612//#testresult/28ad22b5dbc0e193","status":"passed","time":{"start":1678493618017,"stop":1678493618335,"duration":318}}]},"tags":[]},"source":"e670e50613f0af28.json","parameterValues":["{'url': 'wss://us-ws.unique.network/', 'name': 'UNIQUE'}"]}