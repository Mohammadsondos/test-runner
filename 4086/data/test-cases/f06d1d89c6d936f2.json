{"uid":"f06d1d89c6d936f2","name":"test_chainId[Test for Karura]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"ce6132ea886b2cc89553dba0912710dd","time":{"start":1699257713091,"stop":1699257713253,"duration":162},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7f24d014a5f0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f24d0148040>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f24cbf1a1a0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0xf818336b2d5da12ef39cdd088a8901e3d86bbabf386c89736db892b6f11002b2']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az736-321"},{"name":"thread","value":"2092-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f24d0148040>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a02dc5fb0ec9d136","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699257697582,"stop":1699257697770,"duration":188}},{"uid":"caff0f4b1d223fd3","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699257682090,"stop":1699257682310,"duration":220}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":443,"unknown":0,"total":446},"items":[{"uid":"a0d24b6e7ec54eed","reportUrl":"https://novasamatech.github.io/test-runner/4085//#testresult/a0d24b6e7ec54eed","status":"passed","time":{"start":1699243265131,"stop":1699243274898,"duration":9767}},{"uid":"8e23773f3ce00db2","reportUrl":"https://novasamatech.github.io/test-runner/4084//#testresult/8e23773f3ce00db2","status":"passed","time":{"start":1699228924372,"stop":1699228932842,"duration":8470}},{"uid":"6701bc93554d7fdb","reportUrl":"https://novasamatech.github.io/test-runner/4083//#testresult/6701bc93554d7fdb","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699214488208,"stop":1699214488438,"duration":230}},{"uid":"c962f2d9b6ba9a46","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/c962f2d9b6ba9a46","status":"passed","time":{"start":1699200066289,"stop":1699200076155,"duration":9866}},{"uid":"c72619235cde1b3","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/c72619235cde1b3","status":"passed","time":{"start":1699185662218,"stop":1699185670050,"duration":7832}},{"uid":"c1027bddc9737315","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/c1027bddc9737315","status":"passed","time":{"start":1699171276388,"stop":1699171286528,"duration":10140}},{"uid":"67948ffc32c721a3","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/67948ffc32c721a3","status":"passed","time":{"start":1699156874682,"stop":1699156885163,"duration":10481}},{"uid":"e36a01a0e4f5ac95","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/e36a01a0e4f5ac95","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1699142569029,"stop":1699142569625,"duration":596}},{"uid":"77ae432da5cff840","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/77ae432da5cff840","status":"passed","time":{"start":1699128070835,"stop":1699128085936,"duration":15101}},{"uid":"80630c322148e444","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/80630c322148e444","status":"passed","time":{"start":1699113679541,"stop":1699113694586,"duration":15045}},{"uid":"1e1aa5ee25da058","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/1e1aa5ee25da058","status":"passed","time":{"start":1699099278209,"stop":1699099285203,"duration":6994}},{"uid":"f5ca5af2494ae7ee","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/f5ca5af2494ae7ee","status":"passed","time":{"start":1699084875581,"stop":1699084880656,"duration":5075}},{"uid":"9c76cd095d4c1f3b","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/9c76cd095d4c1f3b","status":"passed","time":{"start":1699070472064,"stop":1699070485610,"duration":13546}},{"uid":"14603790bd833358","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/14603790bd833358","status":"passed","time":{"start":1699041683270,"stop":1699041689967,"duration":6697}},{"uid":"50496c90b874d3fc","reportUrl":"https://novasamatech.github.io/test-runner/4072//#testresult/50496c90b874d3fc","status":"passed","time":{"start":1699056126907,"stop":1699056134518,"duration":7611}},{"uid":"37eb61df07f4cfb8","reportUrl":"https://novasamatech.github.io/test-runner/4070//#testresult/37eb61df07f4cfb8","status":"passed","time":{"start":1699027276422,"stop":1699027280761,"duration":4339}},{"uid":"c2806892d5773a40","reportUrl":"https://novasamatech.github.io/test-runner/4069//#testresult/c2806892d5773a40","status":"passed","time":{"start":1699012879452,"stop":1699012883918,"duration":4466}},{"uid":"e8e98a4e8fd371ca","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/e8e98a4e8fd371ca","status":"passed","time":{"start":1698998462008,"stop":1698998475424,"duration":13416}},{"uid":"55604d504f575232","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/55604d504f575232","status":"passed","time":{"start":1698984067724,"stop":1698984071541,"duration":3817}},{"uid":"48e51be45bce9517","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/48e51be45bce9517","status":"passed","time":{"start":1698969725275,"stop":1698969731934,"duration":6659}}]},"tags":[]},"source":"f06d1d89c6d936f2.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f24d0148040>"]}