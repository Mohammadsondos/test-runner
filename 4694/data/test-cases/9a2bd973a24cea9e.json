{"uid":"9a2bd973a24cea9e","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1707854484604,"stop":1707854484683,"duration":79},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fc223659c00>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fc221448220>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fc221449210>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1391-893"},{"name":"thread","value":"2078-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"47b99a0e012a379c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707854479499,"stop":1707854479568,"duration":69}},{"uid":"197275982213b3e4","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.2}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1707854472962,"stop":1707854474400,"duration":1438}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":7,"skipped":0,"passed":876,"unknown":0,"total":885},"items":[{"uid":"730b8072498395cd","reportUrl":"https://novasamatech.github.io/test-runner/4693//#testresult/730b8072498395cd","status":"passed","time":{"start":1707840080002,"stop":1707840081026,"duration":1024}},{"uid":"cdbecf9fc2af0df9","reportUrl":"https://novasamatech.github.io/test-runner/4692//#testresult/cdbecf9fc2af0df9","status":"passed","time":{"start":1707825672857,"stop":1707825674700,"duration":1843}},{"uid":"e4dbaca194a558a6","reportUrl":"https://novasamatech.github.io/test-runner/4691//#testresult/e4dbaca194a558a6","status":"passed","time":{"start":1707811265507,"stop":1707811266918,"duration":1411}},{"uid":"e22c5b41193a42d6","reportUrl":"https://novasamatech.github.io/test-runner/4690//#testresult/e22c5b41193a42d6","status":"passed","time":{"start":1707796863934,"stop":1707796865074,"duration":1140}},{"uid":"21b9f8e382f6317a","reportUrl":"https://novasamatech.github.io/test-runner/4689//#testresult/21b9f8e382f6317a","status":"passed","time":{"start":1707782500389,"stop":1707782501598,"duration":1209}},{"uid":"65ed25c556a1de19","reportUrl":"https://novasamatech.github.io/test-runner/4688//#testresult/65ed25c556a1de19","status":"passed","time":{"start":1707768056198,"stop":1707768057199,"duration":1001}},{"uid":"6af4961091a53b25","reportUrl":"https://novasamatech.github.io/test-runner/4687//#testresult/6af4961091a53b25","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707753674291,"stop":1707753674612,"duration":321}},{"uid":"7c62b033bebbe057","reportUrl":"https://novasamatech.github.io/test-runner/4686//#testresult/7c62b033bebbe057","status":"passed","time":{"start":1707739261587,"stop":1707739262548,"duration":961}},{"uid":"a60c1a5afd359d50","reportUrl":"https://novasamatech.github.io/test-runner/4685//#testresult/a60c1a5afd359d50","status":"passed","time":{"start":1707724866499,"stop":1707724867432,"duration":933}},{"uid":"fe11733e9246b2a2","reportUrl":"https://novasamatech.github.io/test-runner/4684//#testresult/fe11733e9246b2a2","status":"passed","time":{"start":1707710469249,"stop":1707710470218,"duration":969}},{"uid":"cf5a006c21170568","reportUrl":"https://novasamatech.github.io/test-runner/4683//#testresult/cf5a006c21170568","status":"passed","time":{"start":1707696114268,"stop":1707696115153,"duration":885}},{"uid":"60067d2bc2430517","reportUrl":"https://novasamatech.github.io/test-runner/4682//#testresult/60067d2bc2430517","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707681667371,"stop":1707681667501,"duration":130}},{"uid":"7399faa47c53cff7","reportUrl":"https://novasamatech.github.io/test-runner/4681//#testresult/7399faa47c53cff7","status":"passed","time":{"start":1707667257685,"stop":1707667258421,"duration":736}},{"uid":"c8111c861c8e079e","reportUrl":"https://novasamatech.github.io/test-runner/4680//#testresult/c8111c861c8e079e","status":"passed","time":{"start":1707652859526,"stop":1707652860977,"duration":1451}},{"uid":"91686873c0be742f","reportUrl":"https://novasamatech.github.io/test-runner/4678//#testresult/91686873c0be742f","status":"passed","time":{"start":1707624069866,"stop":1707624070722,"duration":856}},{"uid":"f1cd2e1e3329b46f","reportUrl":"https://novasamatech.github.io/test-runner/4679//#testresult/f1cd2e1e3329b46f","status":"passed","time":{"start":1707638461046,"stop":1707638462409,"duration":1363}},{"uid":"34079542a9afc8b","reportUrl":"https://novasamatech.github.io/test-runner/4677//#testresult/34079542a9afc8b","status":"passed","time":{"start":1707609708910,"stop":1707609710102,"duration":1192}},{"uid":"ba4533be3e2dad2d","reportUrl":"https://novasamatech.github.io/test-runner/4676//#testresult/ba4533be3e2dad2d","status":"passed","time":{"start":1707595270829,"stop":1707595271593,"duration":764}},{"uid":"afc7e1bbee24677c","reportUrl":"https://novasamatech.github.io/test-runner/4675//#testresult/afc7e1bbee24677c","status":"passed","time":{"start":1707580863148,"stop":1707580864080,"duration":932}},{"uid":"4c353ce5ae91e41a","reportUrl":"https://novasamatech.github.io/test-runner/4674//#testresult/4c353ce5ae91e41a","status":"passed","time":{"start":1707566466526,"stop":1707566467086,"duration":560}}]},"tags":[]},"source":"9a2bd973a24cea9e.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}