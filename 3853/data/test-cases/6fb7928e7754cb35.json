{"uid":"6fb7928e7754cb35","name":"test_has_new_assets[Test for Acala]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"811bc5c930abadf9421eacf26316cc27","time":{"start":1695931330634,"stop":1695931331537,"duration":903},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f4a8409d930>\nchain = <scripts.utils.chain_model.Chain object at 0x7f4a7ff75e10>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f4a730e6a70>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x2852aa897f735ddf613bf4c6fee458de5933119ff923d79302d9476a0a1fd80e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f4a8409d930>\nchain = <scripts.utils.chain_model.Chain object at 0x7f4a7ff75e10>\n\n    def test_has_new_assets(self, chain: Chain):\n    \n        chain_assets = {asset['symbol'].upper(): '' for asset in chain.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain.name in self.exclusions:\n            chain_assets.update({ex_asset: '' for ex_asset in self.exclusions[chain.name]})\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_check_new_assets.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f4a730e6a70>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x2852aa897f735ddf613bf4c6fee458de5933119ff923d79302d9476a0a1fd80e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"e9dfb6ef458b2062","name":"stdout","source":"e9dfb6ef458b2062.txt","type":"text/plain","size":1137}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az749-765"},{"name":"thread","value":"2187-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f4a7ff75e10>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f78263147a04bdba","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1695931314512,"stop":1695931315435,"duration":923}},{"uid":"3dbcfe6c3644b29c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1695931297928,"stop":1695931299293,"duration":1365}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":205,"unknown":0,"total":212},"items":[{"uid":"978bc49788d8f365","reportUrl":"https://novasamatech.github.io/test-runner/3852//#testresult/978bc49788d8f365","status":"passed","time":{"start":1695916902282,"stop":1695916907873,"duration":5591}},{"uid":"8c7a7b72df398a2b","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/8c7a7b72df398a2b","status":"passed","time":{"start":1695902525234,"stop":1695902531316,"duration":6082}},{"uid":"f9ee397ca9d7c2e5","reportUrl":"https://novasamatech.github.io/test-runner/3850//#testresult/f9ee397ca9d7c2e5","status":"passed","time":{"start":1695888107252,"stop":1695888113656,"duration":6404}},{"uid":"5781fddd007bf906","reportUrl":"https://novasamatech.github.io/test-runner/3849//#testresult/5781fddd007bf906","status":"passed","time":{"start":1695873707391,"stop":1695873713338,"duration":5947}},{"uid":"1dcb7900ff4fd1f","reportUrl":"https://novasamatech.github.io/test-runner/3848//#testresult/1dcb7900ff4fd1f","status":"passed","time":{"start":1695859341457,"stop":1695859346616,"duration":5159}},{"uid":"b84a816dee56d1a0","reportUrl":"https://novasamatech.github.io/test-runner/3847//#testresult/b84a816dee56d1a0","status":"passed","time":{"start":1695844919389,"stop":1695844926263,"duration":6874}},{"uid":"42141be47be484f","reportUrl":"https://novasamatech.github.io/test-runner/3846//#testresult/42141be47be484f","status":"passed","time":{"start":1695830501720,"stop":1695830506438,"duration":4718}},{"uid":"d2d3e72293fe2b3c","reportUrl":"https://novasamatech.github.io/test-runner/3845//#testresult/d2d3e72293fe2b3c","status":"passed","time":{"start":1695816102091,"stop":1695816107404,"duration":5313}},{"uid":"369c4e0affe7a442","reportUrl":"https://novasamatech.github.io/test-runner/3844//#testresult/369c4e0affe7a442","status":"passed","time":{"start":1695801698805,"stop":1695801704415,"duration":5610}},{"uid":"e2b6d7e508dadc79","reportUrl":"https://novasamatech.github.io/test-runner/3843//#testresult/e2b6d7e508dadc79","status":"passed","time":{"start":1695787312408,"stop":1695787319627,"duration":7219}},{"uid":"13a8ad872cb3ace3","reportUrl":"https://novasamatech.github.io/test-runner/3842//#testresult/13a8ad872cb3ace3","status":"passed","time":{"start":1695772948368,"stop":1695772954160,"duration":5792}},{"uid":"b1aa663b034d35a1","reportUrl":"https://novasamatech.github.io/test-runner/3841//#testresult/b1aa663b034d35a1","status":"passed","time":{"start":1695758495257,"stop":1695758500525,"duration":5268}},{"uid":"76c73189ab0e4098","reportUrl":"https://novasamatech.github.io/test-runner/3840//#testresult/76c73189ab0e4098","status":"passed","time":{"start":1695744093649,"stop":1695744099392,"duration":5743}},{"uid":"a94f2e20521e16b1","reportUrl":"https://novasamatech.github.io/test-runner/3839//#testresult/a94f2e20521e16b1","status":"passed","time":{"start":1695729698421,"stop":1695729703127,"duration":4706}},{"uid":"f86c083dd80c7e95","reportUrl":"https://novasamatech.github.io/test-runner/3838//#testresult/f86c083dd80c7e95","status":"passed","time":{"start":1695715320480,"stop":1695715327767,"duration":7287}},{"uid":"45667479a671bed7","reportUrl":"https://novasamatech.github.io/test-runner/3837//#testresult/45667479a671bed7","status":"passed","time":{"start":1695700892139,"stop":1695700896573,"duration":4434}},{"uid":"8198aae41fd768e2","reportUrl":"https://novasamatech.github.io/test-runner/3836//#testresult/8198aae41fd768e2","status":"passed","time":{"start":1695686548797,"stop":1695686554654,"duration":5857}},{"uid":"aed5b620628bad82","reportUrl":"https://novasamatech.github.io/test-runner/3835//#testresult/aed5b620628bad82","status":"passed","time":{"start":1695672115760,"stop":1695672122796,"duration":7036}},{"uid":"47306b5f9f87ef6b","reportUrl":"https://novasamatech.github.io/test-runner/3834//#testresult/47306b5f9f87ef6b","status":"passed","time":{"start":1695657702431,"stop":1695657708226,"duration":5795}},{"uid":"5a6724a8d6ad4097","reportUrl":"https://novasamatech.github.io/test-runner/3833//#testresult/5a6724a8d6ad4097","status":"passed","time":{"start":1695643318389,"stop":1695643324720,"duration":6331}}]},"tags":[]},"source":"6fb7928e7754cb35.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f4a7ff75e10>"]}