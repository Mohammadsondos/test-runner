{"uid":"40238f2a787328c","name":"test_address_prefix[Test for Acala]","fullName":"tests.test_network_parameters.TestNetworkPrefix#test_address_prefix","historyId":"dfa1b9d6c2975e1a61d31d78750331a3","time":{"start":1695931332154,"stop":1695931333275,"duration":1121},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f4c93b5d9c0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f4c93c8c3a0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f4c86d71780>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x2852aa897f735ddf613bf4c6fee458de5933119ff923d79302d9476a0a1fd80e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestNetworkPrefix object at 0x7f4c93b5d9c0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f4c93c8c3a0>\n\n    def test_address_prefix(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f4c86d71780>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x2852aa897f735ddf613bf4c6fee458de5933119ff923d79302d9476a0a1fd80e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"9c80597c4cf2f08e","name":"stdout","source":"9c80597c4cf2f08e.txt","type":"text/plain","size":1137}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestNetworkPrefix"},{"name":"host","value":"fv-az396-347"},{"name":"thread","value":"2055-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f4c93c8c3a0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7ee26ec44dac0474","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1695931315503,"stop":1695931316956,"duration":1453}},{"uid":"bfe60e3256a03b28","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1695931298888,"stop":1695931300182,"duration":1294}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":206,"unknown":0,"total":213},"items":[{"uid":"824249e1e3638e11","reportUrl":"https://novasamatech.github.io/test-runner/3852//#testresult/824249e1e3638e11","status":"passed","time":{"start":1695916908797,"stop":1695916913984,"duration":5187}},{"uid":"c2fd7c86044dda55","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/c2fd7c86044dda55","status":"passed","time":{"start":1695902504919,"stop":1695902509270,"duration":4351}},{"uid":"3ea3fb665b2b276e","reportUrl":"https://novasamatech.github.io/test-runner/3850//#testresult/3ea3fb665b2b276e","status":"passed","time":{"start":1695888096524,"stop":1695888102635,"duration":6111}},{"uid":"393826f8d9274df5","reportUrl":"https://novasamatech.github.io/test-runner/3849//#testresult/393826f8d9274df5","status":"passed","time":{"start":1695873696586,"stop":1695873701750,"duration":5164}},{"uid":"a1da7ca90c210024","reportUrl":"https://novasamatech.github.io/test-runner/3848//#testresult/a1da7ca90c210024","status":"passed","time":{"start":1695859348823,"stop":1695859354291,"duration":5468}},{"uid":"50fe2b43d3b6fc02","reportUrl":"https://novasamatech.github.io/test-runner/3847//#testresult/50fe2b43d3b6fc02","status":"passed","time":{"start":1695844911687,"stop":1695844918267,"duration":6580}},{"uid":"757b43660492bd2d","reportUrl":"https://novasamatech.github.io/test-runner/3846//#testresult/757b43660492bd2d","status":"passed","time":{"start":1695830501273,"stop":1695830506728,"duration":5455}},{"uid":"752367db88bb3ba9","reportUrl":"https://novasamatech.github.io/test-runner/3845//#testresult/752367db88bb3ba9","status":"passed","time":{"start":1695816125607,"stop":1695816132757,"duration":7150}},{"uid":"f738a94b39f417f4","reportUrl":"https://novasamatech.github.io/test-runner/3844//#testresult/f738a94b39f417f4","status":"passed","time":{"start":1695801708408,"stop":1695801714455,"duration":6047}},{"uid":"10f0fdd4b493afda","reportUrl":"https://novasamatech.github.io/test-runner/3843//#testresult/10f0fdd4b493afda","status":"passed","time":{"start":1695787309758,"stop":1695787316172,"duration":6414}},{"uid":"59532e56ee362d2a","reportUrl":"https://novasamatech.github.io/test-runner/3842//#testresult/59532e56ee362d2a","status":"passed","time":{"start":1695772948906,"stop":1695772954944,"duration":6038}},{"uid":"44da83186ebdda80","reportUrl":"https://novasamatech.github.io/test-runner/3841//#testresult/44da83186ebdda80","status":"passed","time":{"start":1695758506567,"stop":1695758512141,"duration":5574}},{"uid":"a82f2316ce1e016a","reportUrl":"https://novasamatech.github.io/test-runner/3840//#testresult/a82f2316ce1e016a","status":"passed","time":{"start":1695744100793,"stop":1695744106718,"duration":5925}},{"uid":"a7d2b5f644f7844d","reportUrl":"https://novasamatech.github.io/test-runner/3839//#testresult/a7d2b5f644f7844d","status":"passed","time":{"start":1695729716990,"stop":1695729723166,"duration":6176}},{"uid":"81fb350a4ed89473","reportUrl":"https://novasamatech.github.io/test-runner/3838//#testresult/81fb350a4ed89473","status":"passed","time":{"start":1695715301220,"stop":1695715305648,"duration":4428}},{"uid":"27735f814a9d22e8","reportUrl":"https://novasamatech.github.io/test-runner/3837//#testresult/27735f814a9d22e8","status":"passed","time":{"start":1695700895227,"stop":1695700900200,"duration":4973}},{"uid":"f43014675c7bad45","reportUrl":"https://novasamatech.github.io/test-runner/3836//#testresult/f43014675c7bad45","status":"passed","time":{"start":1695686551753,"stop":1695686556417,"duration":4664}},{"uid":"3cda61042029a1f7","reportUrl":"https://novasamatech.github.io/test-runner/3835//#testresult/3cda61042029a1f7","status":"passed","time":{"start":1695672115903,"stop":1695672122322,"duration":6419}},{"uid":"d900f6a24baa5ef0","reportUrl":"https://novasamatech.github.io/test-runner/3834//#testresult/d900f6a24baa5ef0","status":"passed","time":{"start":1695657697609,"stop":1695657701970,"duration":4361}},{"uid":"9fb1df6948106320","reportUrl":"https://novasamatech.github.io/test-runner/3833//#testresult/9fb1df6948106320","status":"passed","time":{"start":1695643299964,"stop":1695643305141,"duration":5177}}]},"tags":[]},"source":"40238f2a787328c.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f4c93c8c3a0>"]}