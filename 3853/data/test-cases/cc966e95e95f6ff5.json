{"uid":"cc966e95e95f6ff5","name":"test_chainId[Test for Acala]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"7c84c7c55e19eabda7c2b151a24639b0","time":{"start":1695931329653,"stop":1695931330734,"duration":1081},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7f434c2e5d50>\nchain = <scripts.utils.chain_model.Chain object at 0x7f434c2b06a0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f433b561690>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x2852aa897f735ddf613bf4c6fee458de5933119ff923d79302d9476a0a1fd80e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7f434c2e5d50>\nchain = <scripts.utils.chain_model.Chain object at 0x7f434c2b06a0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f433b561690>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x2852aa897f735ddf613bf4c6fee458de5933119ff923d79302d9476a0a1fd80e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"8a96c4e85152c6b8","name":"stdout","source":"8a96c4e85152c6b8.txt","type":"text/plain","size":1137}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az1135-349"},{"name":"thread","value":"2202-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f434c2b06a0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"48fec03827cdd69d","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1695931313522,"stop":1695931314507,"duration":985}},{"uid":"a677c272e630dce7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1695931297309,"stop":1695931298324,"duration":1015}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":209,"unknown":0,"total":213},"items":[{"uid":"30ac233ec467f7fe","reportUrl":"https://novasamatech.github.io/test-runner/3852//#testresult/30ac233ec467f7fe","status":"passed","time":{"start":1695916899327,"stop":1695916904881,"duration":5554}},{"uid":"c724f0867f001eb7","reportUrl":"https://novasamatech.github.io/test-runner/3851//#testresult/c724f0867f001eb7","status":"passed","time":{"start":1695902506569,"stop":1695902510849,"duration":4280}},{"uid":"4c6ab55d546e2f0e","reportUrl":"https://novasamatech.github.io/test-runner/3850//#testresult/4c6ab55d546e2f0e","status":"passed","time":{"start":1695888095582,"stop":1695888099939,"duration":4357}},{"uid":"5cb1db7186902937","reportUrl":"https://novasamatech.github.io/test-runner/3849//#testresult/5cb1db7186902937","status":"passed","time":{"start":1695873703314,"stop":1695873709289,"duration":5975}},{"uid":"f07e10182a1ea8da","reportUrl":"https://novasamatech.github.io/test-runner/3848//#testresult/f07e10182a1ea8da","status":"passed","time":{"start":1695859367806,"stop":1695859374655,"duration":6849}},{"uid":"7c3f3b321f0a160f","reportUrl":"https://novasamatech.github.io/test-runner/3847//#testresult/7c3f3b321f0a160f","status":"passed","time":{"start":1695844908428,"stop":1695844914952,"duration":6524}},{"uid":"1b9d7dc2aad13a6e","reportUrl":"https://novasamatech.github.io/test-runner/3846//#testresult/1b9d7dc2aad13a6e","status":"passed","time":{"start":1695830501342,"stop":1695830508130,"duration":6788}},{"uid":"f7df2bff0c6ccb54","reportUrl":"https://novasamatech.github.io/test-runner/3845//#testresult/f7df2bff0c6ccb54","status":"passed","time":{"start":1695816118387,"stop":1695816125835,"duration":7448}},{"uid":"420db7219bcb8331","reportUrl":"https://novasamatech.github.io/test-runner/3844//#testresult/420db7219bcb8331","status":"passed","time":{"start":1695801701404,"stop":1695801707358,"duration":5954}},{"uid":"87c0c5efc82e0f7f","reportUrl":"https://novasamatech.github.io/test-runner/3843//#testresult/87c0c5efc82e0f7f","status":"passed","time":{"start":1695787303687,"stop":1695787309440,"duration":5753}},{"uid":"48ed19ed06c6d48c","reportUrl":"https://novasamatech.github.io/test-runner/3842//#testresult/48ed19ed06c6d48c","status":"passed","time":{"start":1695772959144,"stop":1695772965066,"duration":5922}},{"uid":"4ba6318f942bd8f6","reportUrl":"https://novasamatech.github.io/test-runner/3841//#testresult/4ba6318f942bd8f6","status":"passed","time":{"start":1695758497014,"stop":1695758503007,"duration":5993}},{"uid":"1c9c3e6b65f71bdc","reportUrl":"https://novasamatech.github.io/test-runner/3840//#testresult/1c9c3e6b65f71bdc","status":"passed","time":{"start":1695744106114,"stop":1695744112131,"duration":6017}},{"uid":"8c2a74f0544ebe32","reportUrl":"https://novasamatech.github.io/test-runner/3839//#testresult/8c2a74f0544ebe32","status":"passed","time":{"start":1695729707610,"stop":1695729714121,"duration":6511}},{"uid":"bd0fe9c712c3bf4a","reportUrl":"https://novasamatech.github.io/test-runner/3838//#testresult/bd0fe9c712c3bf4a","status":"passed","time":{"start":1695715295534,"stop":1695715300054,"duration":4520}},{"uid":"eb9e5e5c765c0da2","reportUrl":"https://novasamatech.github.io/test-runner/3837//#testresult/eb9e5e5c765c0da2","status":"passed","time":{"start":1695700887507,"stop":1695700891197,"duration":3690}},{"uid":"843502d8d6b87d62","reportUrl":"https://novasamatech.github.io/test-runner/3836//#testresult/843502d8d6b87d62","status":"passed","time":{"start":1695686552140,"stop":1695686558184,"duration":6044}},{"uid":"f0c2d4a2e573fe7","reportUrl":"https://novasamatech.github.io/test-runner/3835//#testresult/f0c2d4a2e573fe7","status":"passed","time":{"start":1695672100697,"stop":1695672106349,"duration":5652}},{"uid":"3327850dcbc722a9","reportUrl":"https://novasamatech.github.io/test-runner/3834//#testresult/3327850dcbc722a9","status":"passed","time":{"start":1695657717683,"stop":1695657724776,"duration":7093}},{"uid":"ba617de4934a215e","reportUrl":"https://novasamatech.github.io/test-runner/3833//#testresult/ba617de4934a215e","status":"passed","time":{"start":1695643298930,"stop":1695643303421,"duration":4491}}]},"tags":[]},"source":"cc966e95e95f6ff5.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f434c2b06a0>"]}