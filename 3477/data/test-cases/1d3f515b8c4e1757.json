{"uid":"1d3f515b8c4e1757","name":"test_can_create_connection[Test for Hashed Network, url: wss://c2.hashed.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c89828a53a64d5be0404b3846fb6bd54","time":{"start":1690646675295,"stop":1690646675321,"duration":26},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 29 Jul 2023 16:04:35 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 29 Jul 2023 16:04:35 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 29 Jul 2023 16:04:35 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","statusTrace":"data = {'name': 'Hashed Network', 'url': 'wss://c2.hashed.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 29 Jul 2023 16:04:35 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"51d2d2ed0705313b","name":"stdout","source":"51d2d2ed0705313b.txt","type":"text/plain","size":1098}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az566-320"},{"name":"thread","value":"1956-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"17da9e775b21fef0","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 29 Jul 2023 16:04:20 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1690646660180,"stop":1690646660205,"duration":25}},{"uid":"f2fb591a7c328da1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Sat, 29 Jul 2023 16:04:05 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1690646645018,"stop":1690646645042,"duration":24}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":118,"skipped":0,"passed":364,"unknown":0,"total":482},"items":[{"uid":"2c19277bb62b1109","reportUrl":"https://novasamatech.github.io/test-runner/3476//#testresult/2c19277bb62b1109","status":"passed","time":{"start":1690632274871,"stop":1690632274950,"duration":79}},{"uid":"b98a193cb18f60b0","reportUrl":"https://novasamatech.github.io/test-runner/3475//#testresult/b98a193cb18f60b0","status":"passed","time":{"start":1690617869995,"stop":1690617870155,"duration":160}},{"uid":"d897add2ebf49e43","reportUrl":"https://novasamatech.github.io/test-runner/3474//#testresult/d897add2ebf49e43","status":"passed","time":{"start":1690603439487,"stop":1690603439544,"duration":57}},{"uid":"dd58478a1aeb8040","reportUrl":"https://novasamatech.github.io/test-runner/3473//#testresult/dd58478a1aeb8040","status":"passed","time":{"start":1690589631694,"stop":1690589632004,"duration":310}},{"uid":"8dc6b508cf3e9f4","reportUrl":"https://novasamatech.github.io/test-runner/3472//#testresult/8dc6b508cf3e9f4","status":"passed","time":{"start":1690574645781,"stop":1690574645843,"duration":62}},{"uid":"6fc48db32773e803","reportUrl":"https://novasamatech.github.io/test-runner/3471//#testresult/6fc48db32773e803","status":"passed","time":{"start":1690560263826,"stop":1690560263908,"duration":82}},{"uid":"ea7b9624837ac08e","reportUrl":"https://novasamatech.github.io/test-runner/3470//#testresult/ea7b9624837ac08e","status":"passed","time":{"start":1690545908894,"stop":1690545909211,"duration":317}},{"uid":"b0f907f57818ec53","reportUrl":"https://novasamatech.github.io/test-runner/3469//#testresult/b0f907f57818ec53","status":"passed","time":{"start":1690531464689,"stop":1690531464767,"duration":78}},{"uid":"3765fd1a90dda05","reportUrl":"https://novasamatech.github.io/test-runner/3468//#testresult/3765fd1a90dda05","status":"passed","time":{"start":1690517052597,"stop":1690517052676,"duration":79}},{"uid":"ab2a1b5ee4e70680","reportUrl":"https://novasamatech.github.io/test-runner/3467//#testresult/ab2a1b5ee4e70680","status":"passed","time":{"start":1690503210913,"stop":1690503211203,"duration":290}},{"uid":"6fde3f1de87fe1b","reportUrl":"https://novasamatech.github.io/test-runner/3466//#testresult/6fde3f1de87fe1b","status":"passed","time":{"start":1690488258912,"stop":1690488258971,"duration":59}},{"uid":"72ae46c754b5703","reportUrl":"https://novasamatech.github.io/test-runner/3465//#testresult/72ae46c754b5703","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests -+-+- {'date': 'Thu, 27 Jul 2023 16:05:14 GMT', 'content-type': 'text/plain', 'content-length': '45', 'connection': 'keep-alive', 'strict-transport-security': 'max-age=15724800; includeSubDomains'} -+-+- b'Too many connections. Please try again later.'","time":{"start":1690473914478,"stop":1690473914799,"duration":321}},{"uid":"74b9b31ecedfe347","reportUrl":"https://novasamatech.github.io/test-runner/3464//#testresult/74b9b31ecedfe347","status":"passed","time":{"start":1690459522499,"stop":1690459522792,"duration":293}},{"uid":"f3677cd09938cb0c","reportUrl":"https://novasamatech.github.io/test-runner/3463//#testresult/f3677cd09938cb0c","status":"passed","time":{"start":1690445068782,"stop":1690445069022,"duration":240}},{"uid":"fa1780bf702f8c40","reportUrl":"https://novasamatech.github.io/test-runner/3461//#testresult/fa1780bf702f8c40","status":"passed","time":{"start":1690416799625,"stop":1690416799656,"duration":31}},{"uid":"c35749dd9539cf2d","reportUrl":"https://novasamatech.github.io/test-runner/3462//#testresult/c35749dd9539cf2d","status":"passed","time":{"start":1690430660614,"stop":1690430661010,"duration":396}},{"uid":"3d2ceffed4dc476d","reportUrl":"https://novasamatech.github.io/test-runner/3460//#testresult/3d2ceffed4dc476d","status":"passed","time":{"start":1690401834333,"stop":1690401834389,"duration":56}},{"uid":"dcc8c4f85e3db37b","reportUrl":"https://novasamatech.github.io/test-runner/3459//#testresult/dcc8c4f85e3db37b","status":"passed","time":{"start":1690387466568,"stop":1690387466861,"duration":293}},{"uid":"cc33b90b2f7df5e5","reportUrl":"https://novasamatech.github.io/test-runner/3458//#testresult/cc33b90b2f7df5e5","status":"passed","time":{"start":1690373112499,"stop":1690373112888,"duration":389}},{"uid":"5cfb7836a89900ec","reportUrl":"https://novasamatech.github.io/test-runner/3457//#testresult/5cfb7836a89900ec","status":"passed","time":{"start":1690358701148,"stop":1690358701228,"duration":80}}]},"tags":[]},"source":"1d3f515b8c4e1757.json","parameterValues":["{'url': 'wss://c2.hashed.network', 'name': 'Hashed Network'}"]}