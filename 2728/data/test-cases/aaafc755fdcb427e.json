{"uid":"aaafc755fdcb427e","name":"test_can_create_connection[Test for Integritee Parachain, url: wss://integritee-kusama.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"326bea541bc487a2f647b5a8f020251e","time":{"start":1680135266354,"stop":1680135266740,"duration":386},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","statusTrace":"data = {'name': 'Integritee Parachain', 'url': 'wss://integritee-kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","statusTrace":"data = {'name': 'Integritee Parachain', 'url': 'wss://integritee-kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"2e2486bb7f53ff60","name":"stdout","source":"2e2486bb7f53ff60.txt","type":"text/plain","size":398}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az572-844"},{"name":"thread","value":"1823-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://integritee-kusama.api.onfinality.io/public-ws', 'name': 'Integritee Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6c81503123af9b4a","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:997)","time":{"start":1680135255820,"stop":1680135256206,"duration":386}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":56,"skipped":0,"passed":853,"unknown":0,"total":909},"items":[{"uid":"5aca238c795f5ff0","reportUrl":"https://nova-wallet.github.io/test-runner/2727//#testresult/5aca238c795f5ff0","status":"passed","time":{"start":1680120266924,"stop":1680120267638,"duration":714}},{"uid":"175f2354b6471f5e","reportUrl":"https://nova-wallet.github.io/test-runner/2726//#testresult/175f2354b6471f5e","status":"passed","time":{"start":1680109580052,"stop":1680109580803,"duration":751}},{"uid":"6ac84e5d9413b074","reportUrl":"https://nova-wallet.github.io/test-runner/2725//#testresult/6ac84e5d9413b074","status":"passed","time":{"start":1680091536900,"stop":1680091537645,"duration":745}},{"uid":"e52d3f0d6f12b5e6","reportUrl":"https://nova-wallet.github.io/test-runner/2724//#testresult/e52d3f0d6f12b5e6","status":"passed","time":{"start":1680077104916,"stop":1680077105835,"duration":919}},{"uid":"d480530d023cc114","reportUrl":"https://nova-wallet.github.io/test-runner/2723//#testresult/d480530d023cc114","status":"passed","time":{"start":1680062675589,"stop":1680062676342,"duration":753}},{"uid":"32c5f9ec46bff5ee","reportUrl":"https://nova-wallet.github.io/test-runner/2722//#testresult/32c5f9ec46bff5ee","status":"passed","time":{"start":1680052285660,"stop":1680052286783,"duration":1123}},{"uid":"fb548afc2c74db72","reportUrl":"https://nova-wallet.github.io/test-runner/2721//#testresult/fb548afc2c74db72","status":"passed","time":{"start":1680034456603,"stop":1680034457567,"duration":964}},{"uid":"e0b4fe9734112bf4","reportUrl":"https://nova-wallet.github.io/test-runner/2720//#testresult/e0b4fe9734112bf4","status":"passed","time":{"start":1680020717879,"stop":1680020718853,"duration":974}},{"uid":"2c7b97ba96666c1d","reportUrl":"https://nova-wallet.github.io/test-runner/2718//#testresult/2c7b97ba96666c1d","status":"passed","time":{"start":1679991490286,"stop":1679991491240,"duration":954}},{"uid":"d7c6fc6b813ff261","reportUrl":"https://nova-wallet.github.io/test-runner/2717//#testresult/d7c6fc6b813ff261","status":"passed","time":{"start":1679976963569,"stop":1679976964523,"duration":954}},{"uid":"e357ab6a5bd3eb6f","reportUrl":"https://nova-wallet.github.io/test-runner/2716//#testresult/e357ab6a5bd3eb6f","status":"passed","time":{"start":1679965625079,"stop":1679965626009,"duration":930}},{"uid":"8a04a83a077403a8","reportUrl":"https://nova-wallet.github.io/test-runner/2715//#testresult/8a04a83a077403a8","status":"passed","time":{"start":1679948137137,"stop":1679948138114,"duration":977}},{"uid":"50b66da70bdd8b44","reportUrl":"https://nova-wallet.github.io/test-runner/2714//#testresult/50b66da70bdd8b44","status":"passed","time":{"start":1679933857116,"stop":1679933858081,"duration":965}},{"uid":"f4fe21df85d46611","reportUrl":"https://nova-wallet.github.io/test-runner/2713//#testresult/f4fe21df85d46611","status":"passed","time":{"start":1679923526070,"stop":1679923526973,"duration":903}},{"uid":"5a6a3239feb467c9","reportUrl":"https://nova-wallet.github.io/test-runner/2712//#testresult/5a6a3239feb467c9","status":"passed","time":{"start":1679905081622,"stop":1679905082361,"duration":739}},{"uid":"ee2b6caacb70ad55","reportUrl":"https://nova-wallet.github.io/test-runner/2710//#testresult/ee2b6caacb70ad55","status":"passed","time":{"start":1679879029933,"stop":1679879030693,"duration":760}},{"uid":"bced27ab5fa89956","reportUrl":"https://nova-wallet.github.io/test-runner/2709//#testresult/bced27ab5fa89956","status":"passed","time":{"start":1679861580895,"stop":1679861581875,"duration":980}},{"uid":"4fa673dcf466c95b","reportUrl":"https://nova-wallet.github.io/test-runner/2708//#testresult/4fa673dcf466c95b","status":"passed","time":{"start":1679847361079,"stop":1679847361796,"duration":717}},{"uid":"4f924738ede2994b","reportUrl":"https://nova-wallet.github.io/test-runner/2707//#testresult/4f924738ede2994b","status":"passed","time":{"start":1679833399013,"stop":1679833399748,"duration":735}},{"uid":"8fcf27cbd78816b","reportUrl":"https://nova-wallet.github.io/test-runner/2706//#testresult/8fcf27cbd78816b","status":"passed","time":{"start":1679818517179,"stop":1679818517929,"duration":750}}]},"tags":[]},"source":"aaafc755fdcb427e.json","parameterValues":["{'url': 'wss://integritee-kusama.api.onfinality.io/public-ws', 'name': 'Integritee Parachain'}"]}