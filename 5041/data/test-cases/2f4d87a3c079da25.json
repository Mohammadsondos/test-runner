{"uid":"2f4d87a3c079da25","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth.llamarpc.com]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"3f32f3f9affb5ea13b781953ebf105f9","time":{"start":1712779288404,"stop":1712779288469,"duration":65},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fa510685300>\ndata = {'name': 'Ethereum', 'url': 'https://eth.llamarpc.com'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fa5105b4df0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fa5105b50c0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1543-129"},{"name":"thread","value":"2082-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"52c7e375a12cbbf4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712779283297,"stop":1712779283349,"duration":52}},{"uid":"8cf503fa2c7866c7","status":"failed","statusDetails":"AssertionError: Failed to connect to Ethereum RPC node\nassert False\n +  where False = <bound method Web3.is_connected of <web3.main.Web3 object at 0x7fa510686860>>()\n +    where <bound method Web3.is_connected of <web3.main.Web3 object at 0x7fa510686860>> = <web3.main.Web3 object at 0x7fa510686860>.is_connected","time":{"start":1712779268078,"stop":1712779278230,"duration":10152}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":53,"skipped":0,"passed":1062,"unknown":0,"total":1116},"items":[{"uid":"c33cf6bc050ca58b","reportUrl":"https://novasamatech.github.io/test-runner/5040//#testresult/c33cf6bc050ca58b","status":"passed","time":{"start":1712764866824,"stop":1712764867122,"duration":298}},{"uid":"730958234ac0ee98","reportUrl":"https://novasamatech.github.io/test-runner/5039//#testresult/730958234ac0ee98","status":"passed","time":{"start":1712750461397,"stop":1712750461806,"duration":409}},{"uid":"de0de039a922c69a","reportUrl":"https://novasamatech.github.io/test-runner/5038//#testresult/de0de039a922c69a","status":"passed","time":{"start":1712736064146,"stop":1712736065014,"duration":868}},{"uid":"dddfa58ae30403fb","reportUrl":"https://novasamatech.github.io/test-runner/5037//#testresult/dddfa58ae30403fb","status":"passed","time":{"start":1712721663877,"stop":1712721664738,"duration":861}},{"uid":"ef2231113689764d","reportUrl":"https://novasamatech.github.io/test-runner/5036//#testresult/ef2231113689764d","status":"passed","time":{"start":1712707302005,"stop":1712707302232,"duration":227}},{"uid":"ebe41dfa09e337fd","reportUrl":"https://novasamatech.github.io/test-runner/5035//#testresult/ebe41dfa09e337fd","status":"passed","time":{"start":1712692865309,"stop":1712692866925,"duration":1616}},{"uid":"2977a1503d12d477","reportUrl":"https://novasamatech.github.io/test-runner/5034//#testresult/2977a1503d12d477","status":"passed","time":{"start":1712678461057,"stop":1712678461898,"duration":841}},{"uid":"e8db86d7aac2ee26","reportUrl":"https://novasamatech.github.io/test-runner/5033//#testresult/e8db86d7aac2ee26","status":"passed","time":{"start":1712664086307,"stop":1712664086723,"duration":416}},{"uid":"cd60696fff575d5b","reportUrl":"https://novasamatech.github.io/test-runner/5032//#testresult/cd60696fff575d5b","status":"passed","time":{"start":1712649670118,"stop":1712649670324,"duration":206}},{"uid":"f1080871ca888704","reportUrl":"https://novasamatech.github.io/test-runner/5031//#testresult/f1080871ca888704","status":"passed","time":{"start":1712635262594,"stop":1712635263352,"duration":758}},{"uid":"d553c1c44f4eec45","reportUrl":"https://novasamatech.github.io/test-runner/5030//#testresult/d553c1c44f4eec45","status":"passed","time":{"start":1712620903994,"stop":1712620904385,"duration":391}},{"uid":"c9b621f0c59fd833","reportUrl":"https://novasamatech.github.io/test-runner/5029//#testresult/c9b621f0c59fd833","status":"passed","time":{"start":1712606453944,"stop":1712606454174,"duration":230}},{"uid":"de7541220c979ed4","reportUrl":"https://novasamatech.github.io/test-runner/5028//#testresult/de7541220c979ed4","status":"passed","time":{"start":1712592062075,"stop":1712592063179,"duration":1104}},{"uid":"5117f467b6f98001","reportUrl":"https://novasamatech.github.io/test-runner/5027//#testresult/5117f467b6f98001","status":"passed","time":{"start":1712577668845,"stop":1712577669245,"duration":400}},{"uid":"224a80ca8019dfce","reportUrl":"https://novasamatech.github.io/test-runner/5026//#testresult/224a80ca8019dfce","status":"passed","time":{"start":1712563272650,"stop":1712563273020,"duration":370}},{"uid":"49c187f956bd192d","reportUrl":"https://novasamatech.github.io/test-runner/5025//#testresult/49c187f956bd192d","status":"passed","time":{"start":1712548859775,"stop":1712548860490,"duration":715}},{"uid":"908a5992038a683a","reportUrl":"https://novasamatech.github.io/test-runner/5024//#testresult/908a5992038a683a","status":"passed","time":{"start":1712534526473,"stop":1712534527511,"duration":1038}},{"uid":"e9ef73265ee1cebb","reportUrl":"https://novasamatech.github.io/test-runner/5023//#testresult/e9ef73265ee1cebb","status":"passed","time":{"start":1712520083455,"stop":1712520084178,"duration":723}},{"uid":"fa377023c1cb193d","reportUrl":"https://novasamatech.github.io/test-runner/5022//#testresult/fa377023c1cb193d","status":"passed","time":{"start":1712505663857,"stop":1712505664482,"duration":625}},{"uid":"4215e79007845969","reportUrl":"https://novasamatech.github.io/test-runner/5021//#testresult/4215e79007845969","status":"passed","time":{"start":1712491264376,"stop":1712491264837,"duration":461}}]},"tags":[]},"source":"2f4d87a3c079da25.json","parameterValues":["{'url': 'https://eth.llamarpc.com', 'name': 'Ethereum'}"]}