{"uid":"e73a60abae4c990c","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://api.securerpc.com/v1]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"5f51e5f09562d64cd0497442c6c29430","time":{"start":1711137674237,"stop":1711137674271,"duration":34},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fc19a58f6a0>\ndata = {'name': 'Ethereum', 'url': 'https://api.securerpc.com/v1'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fc1982d9210>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fc1982da3e0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1542-632"},{"name":"thread","value":"2076-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4afe207e6fdb7d89","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711137669180,"stop":1711137669206,"duration":26}},{"uid":"f3ee76df6c0d788","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711137664116,"stop":1711137664147,"duration":31}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":43,"skipped":0,"passed":993,"unknown":0,"total":1037},"items":[{"uid":"e195096d4949104","reportUrl":"https://novasamatech.github.io/test-runner/4925//#testresult/e195096d4949104","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711123285644,"stop":1711123286015,"duration":371}},{"uid":"cfeb05102424ade2","reportUrl":"https://novasamatech.github.io/test-runner/4924//#testresult/cfeb05102424ade2","status":"passed","time":{"start":1711108877823,"stop":1711108878184,"duration":361}},{"uid":"900b795ecf1ec178","reportUrl":"https://novasamatech.github.io/test-runner/4923//#testresult/900b795ecf1ec178","status":"passed","time":{"start":1711096479897,"stop":1711096480728,"duration":831}},{"uid":"5fac7065e8828f4b","reportUrl":"https://novasamatech.github.io/test-runner/4922//#testresult/5fac7065e8828f4b","status":"passed","time":{"start":1711094461532,"stop":1711094461733,"duration":201}},{"uid":"106638190f806087","reportUrl":"https://novasamatech.github.io/test-runner/4921//#testresult/106638190f806087","status":"passed","time":{"start":1711080069138,"stop":1711080069711,"duration":573}},{"uid":"b0c01bd94d89ce34","reportUrl":"https://novasamatech.github.io/test-runner/4920//#testresult/b0c01bd94d89ce34","status":"passed","time":{"start":1711065709200,"stop":1711065709467,"duration":267}},{"uid":"5e1109827a6bc250","reportUrl":"https://novasamatech.github.io/test-runner/4919//#testresult/5e1109827a6bc250","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711051269359,"stop":1711051269402,"duration":43}},{"uid":"c64b22d8f5812a01","reportUrl":"https://novasamatech.github.io/test-runner/4918//#testresult/c64b22d8f5812a01","status":"passed","time":{"start":1711036867855,"stop":1711036868652,"duration":797}},{"uid":"66c4040bb1ef8b22","reportUrl":"https://novasamatech.github.io/test-runner/4917//#testresult/66c4040bb1ef8b22","status":"passed","time":{"start":1711022473287,"stop":1711022473632,"duration":345}},{"uid":"99b06df4521e40af","reportUrl":"https://novasamatech.github.io/test-runner/4916//#testresult/99b06df4521e40af","status":"passed","time":{"start":1711008063543,"stop":1711008064145,"duration":602}},{"uid":"9d104efb954fd8ef","reportUrl":"https://novasamatech.github.io/test-runner/4915//#testresult/9d104efb954fd8ef","status":"passed","time":{"start":1710993663283,"stop":1710993663545,"duration":262}},{"uid":"56b8695f5a7737f5","reportUrl":"https://novasamatech.github.io/test-runner/4914//#testresult/56b8695f5a7737f5","status":"passed","time":{"start":1710979307341,"stop":1710979307738,"duration":397}},{"uid":"80e96bc114a5f920","reportUrl":"https://novasamatech.github.io/test-runner/4913//#testresult/80e96bc114a5f920","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710964873341,"stop":1710964873389,"duration":48}},{"uid":"3755b85119381aa7","reportUrl":"https://novasamatech.github.io/test-runner/4912//#testresult/3755b85119381aa7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710950468040,"stop":1710950468080,"duration":40}},{"uid":"59dc33522dd60ba9","reportUrl":"https://novasamatech.github.io/test-runner/4911//#testresult/59dc33522dd60ba9","status":"passed","time":{"start":1710936069667,"stop":1710936070092,"duration":425}},{"uid":"2540aa514e045a1","reportUrl":"https://novasamatech.github.io/test-runner/4910//#testresult/2540aa514e045a1","status":"passed","time":{"start":1710921667095,"stop":1710921667502,"duration":407}},{"uid":"e0766f75ccde3f41","reportUrl":"https://novasamatech.github.io/test-runner/4909//#testresult/e0766f75ccde3f41","status":"passed","time":{"start":1710907266646,"stop":1710907267155,"duration":509}},{"uid":"ea9a478111870892","reportUrl":"https://novasamatech.github.io/test-runner/4908//#testresult/ea9a478111870892","status":"passed","time":{"start":1710892899365,"stop":1710892899968,"duration":603}},{"uid":"6ef6fb79b76fa988","reportUrl":"https://novasamatech.github.io/test-runner/4907//#testresult/6ef6fb79b76fa988","status":"passed","time":{"start":1710878474185,"stop":1710878475023,"duration":838}},{"uid":"4f07efef4b102ed0","reportUrl":"https://novasamatech.github.io/test-runner/4906//#testresult/4f07efef4b102ed0","status":"passed","time":{"start":1710864068910,"stop":1710864069188,"duration":278}}]},"tags":[]},"source":"e73a60abae4c990c.json","parameterValues":["{'url': 'https://api.securerpc.com/v1', 'name': 'Ethereum'}"]}