{"uid":"213c7f4c249a5d06","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://eth-pokt.nodies.app]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"89d6cea260706b52bb89f57219e8d6e6","time":{"start":1711137674087,"stop":1711137674110,"duration":23},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f8b13385480>\ndata = {'name': 'Ethereum', 'url': 'https://eth-pokt.nodies.app'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f8b11103220>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f8b111016f0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az1542-632"},{"name":"thread","value":"2085-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a9bf4609371eae96","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711137669028,"stop":1711137669052,"duration":24}},{"uid":"4f0ebfa1e243f3f0","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711137663953,"stop":1711137663994,"duration":41}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":34,"skipped":0,"passed":550,"unknown":0,"total":585},"items":[{"uid":"7395e6d8b12882e8","reportUrl":"https://novasamatech.github.io/test-runner/4925//#testresult/7395e6d8b12882e8","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711123285077,"stop":1711123285455,"duration":378}},{"uid":"9e7db573fc130abd","reportUrl":"https://novasamatech.github.io/test-runner/4924//#testresult/9e7db573fc130abd","status":"passed","time":{"start":1711108877361,"stop":1711108877525,"duration":164}},{"uid":"952e45bc6c3dbe87","reportUrl":"https://novasamatech.github.io/test-runner/4923//#testresult/952e45bc6c3dbe87","status":"passed","time":{"start":1711096479776,"stop":1711096480453,"duration":677}},{"uid":"45a781cede0508a2","reportUrl":"https://novasamatech.github.io/test-runner/4922//#testresult/45a781cede0508a2","status":"passed","time":{"start":1711094460621,"stop":1711094460783,"duration":162}},{"uid":"e4574c8004ddb6ce","reportUrl":"https://novasamatech.github.io/test-runner/4921//#testresult/e4574c8004ddb6ce","status":"passed","time":{"start":1711080069560,"stop":1711080069937,"duration":377}},{"uid":"421dba71b062ee44","reportUrl":"https://novasamatech.github.io/test-runner/4920//#testresult/421dba71b062ee44","status":"passed","time":{"start":1711065709033,"stop":1711065709243,"duration":210}},{"uid":"864e7333590518bb","reportUrl":"https://novasamatech.github.io/test-runner/4919//#testresult/864e7333590518bb","status":"passed","time":{"start":1711051273941,"stop":1711051274089,"duration":148}},{"uid":"3d580c6d6fbc23f0","reportUrl":"https://novasamatech.github.io/test-runner/4918//#testresult/3d580c6d6fbc23f0","status":"passed","time":{"start":1711036898766,"stop":1711036899449,"duration":683}},{"uid":"b585d55cd7b846e4","reportUrl":"https://novasamatech.github.io/test-runner/4917//#testresult/b585d55cd7b846e4","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1711022483613,"stop":1711022483729,"duration":116}},{"uid":"70675e1f36e8cc66","reportUrl":"https://novasamatech.github.io/test-runner/4916//#testresult/70675e1f36e8cc66","status":"passed","time":{"start":1711008078553,"stop":1711008079138,"duration":585}},{"uid":"c07f9a6daba1addd","reportUrl":"https://novasamatech.github.io/test-runner/4915//#testresult/c07f9a6daba1addd","status":"passed","time":{"start":1710993662465,"stop":1710993662631,"duration":166}},{"uid":"7ba92714b130e28b","reportUrl":"https://novasamatech.github.io/test-runner/4914//#testresult/7ba92714b130e28b","status":"passed","time":{"start":1710979307088,"stop":1710979307404,"duration":316}},{"uid":"a9faa9f69ca4a3f3","reportUrl":"https://novasamatech.github.io/test-runner/4913//#testresult/a9faa9f69ca4a3f3","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1710964872845,"stop":1710964872913,"duration":68}},{"uid":"e79f2bddf7b5c77d","reportUrl":"https://novasamatech.github.io/test-runner/4912//#testresult/e79f2bddf7b5c77d","status":"passed","time":{"start":1710950461943,"stop":1710950462191,"duration":248}},{"uid":"3845f56569bf429","reportUrl":"https://novasamatech.github.io/test-runner/4911//#testresult/3845f56569bf429","status":"passed","time":{"start":1710936069482,"stop":1710936069788,"duration":306}},{"uid":"2fc166c7ce911539","reportUrl":"https://novasamatech.github.io/test-runner/4910//#testresult/2fc166c7ce911539","status":"passed","time":{"start":1710921666981,"stop":1710921667265,"duration":284}},{"uid":"4e17763a33e81acd","reportUrl":"https://novasamatech.github.io/test-runner/4909//#testresult/4e17763a33e81acd","status":"passed","time":{"start":1710907265938,"stop":1710907266211,"duration":273}},{"uid":"489b059646eeae1f","reportUrl":"https://novasamatech.github.io/test-runner/4908//#testresult/489b059646eeae1f","status":"passed","time":{"start":1710892898850,"stop":1710892899557,"duration":707}},{"uid":"90377a0b5ae20e02","reportUrl":"https://novasamatech.github.io/test-runner/4907//#testresult/90377a0b5ae20e02","status":"passed","time":{"start":1710878473988,"stop":1710878474709,"duration":721}},{"uid":"abbd0acf9aec3263","reportUrl":"https://novasamatech.github.io/test-runner/4906//#testresult/abbd0acf9aec3263","status":"passed","time":{"start":1710864068672,"stop":1710864068955,"duration":283}}]},"tags":[]},"source":"213c7f4c249a5d06.json","parameterValues":["{'url': 'https://eth-pokt.nodies.app', 'name': 'Ethereum'}"]}