{"uid":"e988dbfed6f991e1","name":"test_can_create_connection[Test for UNIQUE, url: wss://asia-ws.unique.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"7aada6e7d9f483907a85d962126aab77","time":{"start":1698393801343,"stop":1698393832014,"duration":30671},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 522 Origin Connection Time-out -+-+- {'date': 'Fri, 27 Oct 2023 08:03:52 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-store, no-cache', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '81c96c0a8da7fb50-SJC'} -+-+- None","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://asia-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 522 Origin Connection Time-out -+-+- {'date': 'Fri, 27 Oct 2023 08:03:52 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-store, no-cache', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '81c96c0a8da7fb50-SJC'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 522 Origin Connection Time-out -+-+- {'date': 'Fri, 27 Oct 2023 08:03:52 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-store, no-cache', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '81c96c0a8da7fb50-SJC'} -+-+- None","statusTrace":"data = {'name': 'UNIQUE', 'url': 'wss://asia-ws.unique.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 522 Origin Connection Time-out -+-+- {'date': 'Fri, 27 Oct 2023 08:03:52 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-store, no-cache', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '81c96c0a8da7fb50-SJC'} -+-+- None\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"5a094de70f3634b8","name":"stdout","source":"5a094de70f3634b8.txt","type":"text/plain","size":1409}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az255-686"},{"name":"thread","value":"2122-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://asia-ws.unique.network/', 'name': 'UNIQUE'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c0540b093f0235d1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 522 None -+-+- {'date': 'Fri, 27 Oct 2023 08:03:06 GMT', 'content-length': '0', 'connection': 'keep-alive', 'cache-control': 'no-store, no-cache', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '81c96aec1a7f67a2-SJC'} -+-+- b''","time":{"start":1698393755516,"stop":1698393786180,"duration":30664}},{"uid":"434e8f6346e63f3b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 522 Origin Connection Time-out -+-+- {'date': 'Fri, 27 Oct 2023 08:02:20 GMT', 'content-type': 'text/html', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-store, no-cache', 'strict-transport-security': 'max-age=0; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '81c969cd4c4e15e7-SJC'} -+-+- None","time":{"start":1698393709611,"stop":1698393740329,"duration":30718}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":385,"unknown":0,"total":386},"items":[{"uid":"c0ecfb4e5b382c81","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/c0ecfb4e5b382c81","status":"passed","time":{"start":1698379294341,"stop":1698379295254,"duration":913}},{"uid":"101eceded8866696","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/101eceded8866696","status":"passed","time":{"start":1698364942449,"stop":1698364943474,"duration":1025}},{"uid":"8285d11211e62b57","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/8285d11211e62b57","status":"passed","time":{"start":1698350500574,"stop":1698350501525,"duration":951}},{"uid":"46b051d228c8a2a6","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/46b051d228c8a2a6","status":"passed","time":{"start":1698336092888,"stop":1698336093894,"duration":1006}},{"uid":"6f739d1e41aca9ae","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/6f739d1e41aca9ae","status":"passed","time":{"start":1698321705093,"stop":1698321707182,"duration":2089}},{"uid":"87970ec0f22013f8","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/87970ec0f22013f8","status":"passed","time":{"start":1698307306580,"stop":1698307307469,"duration":889}},{"uid":"b6201ff56f3e6eec","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/b6201ff56f3e6eec","status":"passed","time":{"start":1698292893724,"stop":1698292894745,"duration":1021}},{"uid":"ebffdf292f86d8f4","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/ebffdf292f86d8f4","status":"passed","time":{"start":1698278530176,"stop":1698278531186,"duration":1010}},{"uid":"b1d84b60013d655e","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/b1d84b60013d655e","status":"passed","time":{"start":1698264095668,"stop":1698264096788,"duration":1120}},{"uid":"2b463a40e83a74c","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/2b463a40e83a74c","status":"passed","time":{"start":1698249700984,"stop":1698249701980,"duration":996}},{"uid":"1a146b81f409f2f3","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/1a146b81f409f2f3","status":"passed","time":{"start":1698235301505,"stop":1698235302458,"duration":953}},{"uid":"905614796b356ff9","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/905614796b356ff9","status":"passed","time":{"start":1698220908398,"stop":1698220909408,"duration":1010}},{"uid":"d065a12ee4e97d2b","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/d065a12ee4e97d2b","status":"passed","time":{"start":1698206492545,"stop":1698206493558,"duration":1013}},{"uid":"b5dd224900168aff","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/b5dd224900168aff","status":"passed","time":{"start":1698192144573,"stop":1698192145481,"duration":908}},{"uid":"8f8d402f5af0e354","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/8f8d402f5af0e354","status":"passed","time":{"start":1698177693731,"stop":1698177694637,"duration":906}},{"uid":"412d707e95658e36","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/412d707e95658e36","status":"passed","time":{"start":1698163306628,"stop":1698163307627,"duration":999}},{"uid":"3e4725028d8b89cd","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/3e4725028d8b89cd","status":"passed","time":{"start":1698148900939,"stop":1698148901898,"duration":959}},{"uid":"e4bc100451adaf68","reportUrl":"https://novasamatech.github.io/test-runner/4007//#testresult/e4bc100451adaf68","status":"passed","time":{"start":1698120098464,"stop":1698120099487,"duration":1023}},{"uid":"8113f5cea231e4b3","reportUrl":"https://novasamatech.github.io/test-runner/4008//#testresult/8113f5cea231e4b3","status":"passed","time":{"start":1698134892865,"stop":1698134893852,"duration":987}},{"uid":"37566c36edc7e61f","reportUrl":"https://novasamatech.github.io/test-runner/4006//#testresult/37566c36edc7e61f","status":"passed","time":{"start":1698105752257,"stop":1698105753136,"duration":879}}]},"tags":[]},"source":"e988dbfed6f991e1.json","parameterValues":["{'url': 'wss://asia-ws.unique.network/', 'name': 'UNIQUE'}"]}