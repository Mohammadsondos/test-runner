{"uid":"8726f1bd6147f821","name":"test_can_create_connection[Test for Kapex, url: wss://k-ui.kapex.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"b53b69a73f8d35a0c27b49a5f165b0c9","time":{"start":1694232142653,"stop":1694232142982,"duration":329},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.22.0 (Ubuntu)', 'date': 'Sat, 09 Sep 2023 04:02:22 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.22.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kapex', 'url': 'wss://k-ui.kapex.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.22.0 (Ubuntu)', 'date': 'Sat, 09 Sep 2023 04:02:22 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.22.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.22.0 (Ubuntu)', 'date': 'Sat, 09 Sep 2023 04:02:22 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.22.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Kapex', 'url': 'wss://k-ui.kapex.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.22.0 (Ubuntu)', 'date': 'Sat, 09 Sep 2023 04:02:22 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.22.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b9545a196cac06a0","name":"stdout","source":"b9545a196cac06a0.txt","type":"text/plain","size":1389}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az934-274"},{"name":"thread","value":"2067-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://k-ui.kapex.network', 'name': 'Kapex'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f96d3470034c4a30","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.22.0 (Ubuntu)', 'date': 'Sat, 09 Sep 2023 04:02:07 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.22.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694232127305,"stop":1694232127573,"duration":268}},{"uid":"eeefa4334dfd9fc3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.22.0 (Ubuntu)', 'date': 'Sat, 09 Sep 2023 04:01:52 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.22.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694232111941,"stop":1694232112208,"duration":267}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":93,"unknown":0,"total":95},"items":[{"uid":"3eb4ba64376d1e7d","reportUrl":"https://novasamatech.github.io/test-runner/3733//#testresult/3eb4ba64376d1e7d","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.22.0 (Ubuntu)', 'date': 'Sat, 09 Sep 2023 00:03:36 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.22.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694217815761,"stop":1694217816056,"duration":295}},{"uid":"25b41168aba9a51d","reportUrl":"https://novasamatech.github.io/test-runner/3732//#testresult/25b41168aba9a51d","status":"passed","time":{"start":1694203337442,"stop":1694203338003,"duration":561}},{"uid":"7041b2627d39e643","reportUrl":"https://novasamatech.github.io/test-runner/3731//#testresult/7041b2627d39e643","status":"passed","time":{"start":1694188983215,"stop":1694188983866,"duration":651}},{"uid":"2252d9ac75a432c9","reportUrl":"https://novasamatech.github.io/test-runner/3730//#testresult/2252d9ac75a432c9","status":"passed","time":{"start":1694174542717,"stop":1694174543101,"duration":384}},{"uid":"cc44633f894e0381","reportUrl":"https://novasamatech.github.io/test-runner/3729//#testresult/cc44633f894e0381","status":"passed","time":{"start":1694160113122,"stop":1694160113488,"duration":366}},{"uid":"6dc8c48c06d7c689","reportUrl":"https://novasamatech.github.io/test-runner/3728//#testresult/6dc8c48c06d7c689","status":"passed","time":{"start":1694145724023,"stop":1694145724497,"duration":474}},{"uid":"8b261bc7e1944bb0","reportUrl":"https://novasamatech.github.io/test-runner/3727//#testresult/8b261bc7e1944bb0","status":"passed","time":{"start":1694131373785,"stop":1694131374420,"duration":635}},{"uid":"3f2707456908dde8","reportUrl":"https://novasamatech.github.io/test-runner/3726//#testresult/3f2707456908dde8","status":"passed","time":{"start":1694116905698,"stop":1694116906158,"duration":460}},{"uid":"8bde6c485b449e40","reportUrl":"https://novasamatech.github.io/test-runner/3725//#testresult/8bde6c485b449e40","status":"passed","time":{"start":1694102564417,"stop":1694102564804,"duration":387}},{"uid":"bca3c972d7c34c62","reportUrl":"https://novasamatech.github.io/test-runner/3724//#testresult/bca3c972d7c34c62","status":"passed","time":{"start":1694088208279,"stop":1694088208840,"duration":561}},{"uid":"7d94109c7e583fe8","reportUrl":"https://novasamatech.github.io/test-runner/3723//#testresult/7d94109c7e583fe8","status":"passed","time":{"start":1694073789117,"stop":1694073789675,"duration":558}},{"uid":"3837f69e618371d2","reportUrl":"https://novasamatech.github.io/test-runner/3722//#testresult/3837f69e618371d2","status":"passed","time":{"start":1694059352140,"stop":1694059352692,"duration":552}},{"uid":"7ee8a540d0244f04","reportUrl":"https://novasamatech.github.io/test-runner/3721//#testresult/7ee8a540d0244f04","status":"passed","time":{"start":1694044967532,"stop":1694044968071,"duration":539}},{"uid":"c6ff83943e901f1b","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/c6ff83943e901f1b","status":"passed","time":{"start":1694030520154,"stop":1694030520593,"duration":439}},{"uid":"41a17acdc02bc5d9","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/41a17acdc02bc5d9","status":"passed","time":{"start":1694016168398,"stop":1694016168939,"duration":541}},{"uid":"386203de7ebb1146","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/386203de7ebb1146","status":"passed","time":{"start":1694001744200,"stop":1694001744791,"duration":591}},{"uid":"930d6feb3be1dbf7","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/930d6feb3be1dbf7","status":"passed","time":{"start":1693987331542,"stop":1693987332097,"duration":555}},{"uid":"66f475a38032cf2c","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/66f475a38032cf2c","status":"passed","time":{"start":1693972936646,"stop":1693972937004,"duration":358}},{"uid":"6caf91531aa9370","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/6caf91531aa9370","status":"passed","time":{"start":1693958592722,"stop":1693958593219,"duration":497}},{"uid":"cee77a555abb42e2","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/cee77a555abb42e2","status":"passed","time":{"start":1693944131805,"stop":1693944132303,"duration":498}}]},"tags":[]},"source":"8726f1bd6147f821.json","parameterValues":["{'url': 'wss://k-ui.kapex.network', 'name': 'Kapex'}"]}