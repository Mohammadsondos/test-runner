{"uid":"414f4afe5ee58265","name":"test_can_create_connection[Test for Phala, url: wss://api.phala.network/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"db9f156d5a7a09a53633b370d0c7986e","time":{"start":1671437127042,"stop":1671437127350,"duration":308},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Phala', 'url': 'wss://api.phala.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Phala', 'url': 'wss://api.phala.network/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"d4d08dfbfe7c6953","name":"stdout","source":"d4d08dfbfe7c6953.txt","type":"text/plain","size":232}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az735-384"},{"name":"thread","value":"1776-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://api.phala.network/ws', 'name': 'Phala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ecf47ebc47fe50f2","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1671437116668,"stop":1671437116959,"duration":291}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":56,"skipped":0,"passed":325,"unknown":0,"total":381},"items":[{"uid":"d60ca59874d52e21","reportUrl":"https://nova-wallet.github.io/test-runner/2111//#testresult/d60ca59874d52e21","status":"passed","time":{"start":1671422729778,"stop":1671422730134,"duration":356}},{"uid":"50cde79cff7af6a8","reportUrl":"https://nova-wallet.github.io/test-runner/2110//#testresult/50cde79cff7af6a8","status":"passed","time":{"start":1671408815411,"stop":1671408816057,"duration":646}},{"uid":"9620bda93edc018b","reportUrl":"https://nova-wallet.github.io/test-runner/2109//#testresult/9620bda93edc018b","status":"passed","time":{"start":1671393883483,"stop":1671393883875,"duration":392}},{"uid":"16a73bfe2dc0d","reportUrl":"https://nova-wallet.github.io/test-runner/2108//#testresult/16a73bfe2dc0d","status":"passed","time":{"start":1671379513272,"stop":1671379514198,"duration":926}},{"uid":"6991fc155b281cb8","reportUrl":"https://nova-wallet.github.io/test-runner/2107//#testresult/6991fc155b281cb8","status":"passed","time":{"start":1671365282675,"stop":1671365283693,"duration":1018}},{"uid":"9b548c542261427c","reportUrl":"https://nova-wallet.github.io/test-runner/2106//#testresult/9b548c542261427c","status":"passed","time":{"start":1671350829767,"stop":1671350830663,"duration":896}},{"uid":"adff28dbb502c90d","reportUrl":"https://nova-wallet.github.io/test-runner/2105//#testresult/adff28dbb502c90d","status":"passed","time":{"start":1671336326163,"stop":1671336327103,"duration":940}},{"uid":"ddee0fec955cf5e2","reportUrl":"https://nova-wallet.github.io/test-runner/2104//#testresult/ddee0fec955cf5e2","status":"passed","time":{"start":1671322452796,"stop":1671322453718,"duration":922}},{"uid":"e1a2c3618e473931","reportUrl":"https://nova-wallet.github.io/test-runner/2103//#testresult/e1a2c3618e473931","status":"passed","time":{"start":1671307480994,"stop":1671307481873,"duration":879}},{"uid":"9f2de1f930559134","reportUrl":"https://nova-wallet.github.io/test-runner/2102//#testresult/9f2de1f930559134","status":"passed","time":{"start":1671293100061,"stop":1671293100991,"duration":930}},{"uid":"3e9d30d29c7922e","reportUrl":"https://nova-wallet.github.io/test-runner/2101//#testresult/3e9d30d29c7922e","status":"passed","time":{"start":1671278722632,"stop":1671278723552,"duration":920}},{"uid":"f284f53c50f9abae","reportUrl":"https://nova-wallet.github.io/test-runner/2100//#testresult/f284f53c50f9abae","status":"passed","time":{"start":1671264422156,"stop":1671264423023,"duration":867}},{"uid":"d822dcb52ea0b29c","reportUrl":"https://nova-wallet.github.io/test-runner/2099//#testresult/d822dcb52ea0b29c","status":"passed","time":{"start":1671249965340,"stop":1671249966342,"duration":1002}},{"uid":"7bc09fab6ada6ee1","reportUrl":"https://nova-wallet.github.io/test-runner/2098//#testresult/7bc09fab6ada6ee1","status":"passed","time":{"start":1671236051887,"stop":1671236052808,"duration":921}},{"uid":"ac822ddef32e5232","reportUrl":"https://nova-wallet.github.io/test-runner/2097//#testresult/ac822ddef32e5232","status":"passed","time":{"start":1671221156474,"stop":1671221157469,"duration":995}},{"uid":"893a173117e2938f","reportUrl":"https://nova-wallet.github.io/test-runner/2096//#testresult/893a173117e2938f","status":"passed","time":{"start":1671206763617,"stop":1671206764508,"duration":891}},{"uid":"461bff40cfbe5b57","reportUrl":"https://nova-wallet.github.io/test-runner/2095//#testresult/461bff40cfbe5b57","status":"passed","time":{"start":1671192391296,"stop":1671192392210,"duration":914}},{"uid":"4c9dd3f6a2d5262","reportUrl":"https://nova-wallet.github.io/test-runner/2094//#testresult/4c9dd3f6a2d5262","status":"passed","time":{"start":1671177973138,"stop":1671177974049,"duration":911}},{"uid":"9cfe162c1f5c978e","reportUrl":"https://nova-wallet.github.io/test-runner/2093//#testresult/9cfe162c1f5c978e","status":"passed","time":{"start":1671163574074,"stop":1671163575006,"duration":932}},{"uid":"fbf19b94afc275b0","reportUrl":"https://nova-wallet.github.io/test-runner/2092//#testresult/fbf19b94afc275b0","status":"passed","time":{"start":1671149718092,"stop":1671149719004,"duration":912}}]},"tags":[]},"source":"414f4afe5ee58265.json","parameterValues":["{'url': 'wss://api.phala.network/ws', 'name': 'Phala'}"]}