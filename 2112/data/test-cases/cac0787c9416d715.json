{"uid":"cac0787c9416d715","name":"test_can_create_connection[Test for Tinkernet, url: wss://tinker.invarch.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"d05bfdf1289b5d816007efa824eb7e47","time":{"start":1671437159949,"stop":1671437159996,"duration":47},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://tinker.invarch.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://tinker.invarch.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"95196b10c91e880e","name":"stdout","source":"95196b10c91e880e.txt","type":"text/plain","size":236}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az735-384"},{"name":"thread","value":"1776-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://tinker.invarch.network', 'name': 'Tinkernet'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c0d7bf686bf45f8e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1671437149782,"stop":1671437149845,"duration":63}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":108,"skipped":0,"passed":273,"unknown":0,"total":381},"items":[{"uid":"92b1feafb81570aa","reportUrl":"https://nova-wallet.github.io/test-runner/2111//#testresult/92b1feafb81570aa","status":"passed","time":{"start":1671422742419,"stop":1671422742477,"duration":58}},{"uid":"f1417b2633febfe1","reportUrl":"https://nova-wallet.github.io/test-runner/2110//#testresult/f1417b2633febfe1","status":"passed","time":{"start":1671408832535,"stop":1671408832914,"duration":379}},{"uid":"3a68055d5fa8842b","reportUrl":"https://nova-wallet.github.io/test-runner/2109//#testresult/3a68055d5fa8842b","status":"passed","time":{"start":1671393895583,"stop":1671393895649,"duration":66}},{"uid":"73473059fb7123e5","reportUrl":"https://nova-wallet.github.io/test-runner/2108//#testresult/73473059fb7123e5","status":"passed","time":{"start":1671379540591,"stop":1671379540996,"duration":405}},{"uid":"f3f37a5f9a09b60d","reportUrl":"https://nova-wallet.github.io/test-runner/2107//#testresult/f3f37a5f9a09b60d","status":"passed","time":{"start":1671365297760,"stop":1671365298043,"duration":283}},{"uid":"c562fb24cbb3b9f5","reportUrl":"https://nova-wallet.github.io/test-runner/2106//#testresult/c562fb24cbb3b9f5","status":"passed","time":{"start":1671350843272,"stop":1671350843328,"duration":56}},{"uid":"4383bb438c4d12da","reportUrl":"https://nova-wallet.github.io/test-runner/2105//#testresult/4383bb438c4d12da","status":"passed","time":{"start":1671336343386,"stop":1671336343731,"duration":345}},{"uid":"391595b8c5966c5a","reportUrl":"https://nova-wallet.github.io/test-runner/2104//#testresult/391595b8c5966c5a","status":"passed","time":{"start":1671322468990,"stop":1671322469317,"duration":327}},{"uid":"a32cf4843b493006","reportUrl":"https://nova-wallet.github.io/test-runner/2103//#testresult/a32cf4843b493006","status":"passed","time":{"start":1671307494227,"stop":1671307494289,"duration":62}},{"uid":"a79f1a73a60655bc","reportUrl":"https://nova-wallet.github.io/test-runner/2102//#testresult/a79f1a73a60655bc","status":"passed","time":{"start":1671293127037,"stop":1671293127406,"duration":369}},{"uid":"a1fd1060a65e61bb","reportUrl":"https://nova-wallet.github.io/test-runner/2101//#testresult/a1fd1060a65e61bb","status":"passed","time":{"start":1671278746162,"stop":1671278746254,"duration":92}},{"uid":"519e9d6b3a798454","reportUrl":"https://nova-wallet.github.io/test-runner/2100//#testresult/519e9d6b3a798454","status":"passed","time":{"start":1671264447526,"stop":1671264447829,"duration":303}},{"uid":"f80662c6ae755bfe","reportUrl":"https://nova-wallet.github.io/test-runner/2099//#testresult/f80662c6ae755bfe","status":"passed","time":{"start":1671249982980,"stop":1671249983405,"duration":425}},{"uid":"f0eb1c2503a14ba2","reportUrl":"https://nova-wallet.github.io/test-runner/2098//#testresult/f0eb1c2503a14ba2","status":"passed","time":{"start":1671236066174,"stop":1671236066284,"duration":110}},{"uid":"952b1837a216c7","reportUrl":"https://nova-wallet.github.io/test-runner/2097//#testresult/952b1837a216c7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 429 Too Many Requests","time":{"start":1671221190382,"stop":1671221190429,"duration":47}},{"uid":"1814a276cda1c92c","reportUrl":"https://nova-wallet.github.io/test-runner/2096//#testresult/1814a276cda1c92c","status":"passed","time":{"start":1671206779494,"stop":1671206779768,"duration":274}},{"uid":"e5615104b4e32366","reportUrl":"https://nova-wallet.github.io/test-runner/2095//#testresult/e5615104b4e32366","status":"passed","time":{"start":1671192415086,"stop":1671192415171,"duration":85}},{"uid":"755878754a6fd5db","reportUrl":"https://nova-wallet.github.io/test-runner/2094//#testresult/755878754a6fd5db","status":"passed","time":{"start":1671177987041,"stop":1671177987129,"duration":88}},{"uid":"31b2d93a7f82d4d2","reportUrl":"https://nova-wallet.github.io/test-runner/2093//#testresult/31b2d93a7f82d4d2","status":"passed","time":{"start":1671163598338,"stop":1671163598431,"duration":93}},{"uid":"ce583c14c8e25dac","reportUrl":"https://nova-wallet.github.io/test-runner/2092//#testresult/ce583c14c8e25dac","status":"passed","time":{"start":1671149741932,"stop":1671149742019,"duration":87}}]},"tags":[]},"source":"cac0787c9416d715.json","parameterValues":["{'url': 'wss://tinker.invarch.network', 'name': 'Tinkernet'}"]}