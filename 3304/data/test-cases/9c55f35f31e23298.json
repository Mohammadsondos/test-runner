{"uid":"9c55f35f31e23298","name":"test_can_create_connection[Test for Calamari, url: wss://calamari.systems]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1f97e1b2aa75f736283999eef96b536b","time":{"start":1688155474171,"stop":1688155474534,"duration":363},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://calamari.systems'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://calamari.systems'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:136: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:271: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:247: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"40c5baebf0c6e190","name":"stdout","source":"40c5baebf0c6e190.txt","type":"text/plain","size":642}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az627-701"},{"name":"thread","value":"1926-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://calamari.systems', 'name': 'Calamari'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"416d5b35bfe9b9ce","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)","time":{"start":1688155458871,"stop":1688155459049,"duration":178}},{"uid":"77b2dace833b1d5","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'calamari.systems'. (_ssl.c:997)","time":{"start":1688155443496,"stop":1688155443674,"duration":178}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":270,"unknown":0,"total":273},"items":[{"uid":"4ba535ef6edb5436","reportUrl":"https://novasamatech.github.io/test-runner/3303//#testresult/4ba535ef6edb5436","status":"passed","time":{"start":1688141067441,"stop":1688141068372,"duration":931}},{"uid":"cfd832cc38ad7cb","reportUrl":"https://novasamatech.github.io/test-runner/3302//#testresult/cfd832cc38ad7cb","status":"passed","time":{"start":1688126705511,"stop":1688126706009,"duration":498}},{"uid":"c71c5a4f66c2215a","reportUrl":"https://novasamatech.github.io/test-runner/3301//#testresult/c71c5a4f66c2215a","status":"passed","time":{"start":1688112261868,"stop":1688112262429,"duration":561}},{"uid":"33fb148d9dfa7083","reportUrl":"https://novasamatech.github.io/test-runner/3300//#testresult/33fb148d9dfa7083","status":"passed","time":{"start":1688097847655,"stop":1688097848244,"duration":589}},{"uid":"28a2d81ba3c0e085","reportUrl":"https://novasamatech.github.io/test-runner/3299//#testresult/28a2d81ba3c0e085","status":"passed","time":{"start":1688084090252,"stop":1688084090609,"duration":357}},{"uid":"cbb150ee429d569a","reportUrl":"https://novasamatech.github.io/test-runner/3298//#testresult/cbb150ee429d569a","status":"passed","time":{"start":1688069041900,"stop":1688069042561,"duration":661}},{"uid":"bc68ed07872fbcf1","reportUrl":"https://novasamatech.github.io/test-runner/3297//#testresult/bc68ed07872fbcf1","status":"passed","time":{"start":1688054650841,"stop":1688054651433,"duration":592}},{"uid":"7580254b2787f3a6","reportUrl":"https://novasamatech.github.io/test-runner/3296//#testresult/7580254b2787f3a6","status":"passed","time":{"start":1688040321909,"stop":1688040322264,"duration":355}},{"uid":"1f87600089754509","reportUrl":"https://novasamatech.github.io/test-runner/3295//#testresult/1f87600089754509","status":"passed","time":{"start":1688025879640,"stop":1688025880408,"duration":768}},{"uid":"94e9d89a73b6b692","reportUrl":"https://novasamatech.github.io/test-runner/3294//#testresult/94e9d89a73b6b692","status":"passed","time":{"start":1688011458181,"stop":1688011459039,"duration":858}},{"uid":"66efa5288283d75e","reportUrl":"https://novasamatech.github.io/test-runner/3293//#testresult/66efa5288283d75e","status":"passed","time":{"start":1687997738362,"stop":1687997739481,"duration":1119}},{"uid":"f32f80b60462eb5a","reportUrl":"https://novasamatech.github.io/test-runner/3292//#testresult/f32f80b60462eb5a","status":"passed","time":{"start":1687982661647,"stop":1687982662456,"duration":809}},{"uid":"2adbacef42964389","reportUrl":"https://novasamatech.github.io/test-runner/3291//#testresult/2adbacef42964389","status":"passed","time":{"start":1687968255507,"stop":1687968255722,"duration":215}},{"uid":"9034eb4d933f1ad0","reportUrl":"https://novasamatech.github.io/test-runner/3290//#testresult/9034eb4d933f1ad0","status":"passed","time":{"start":1687953916941,"stop":1687953917855,"duration":914}},{"uid":"c4f313684a2a6c74","reportUrl":"https://novasamatech.github.io/test-runner/3289//#testresult/c4f313684a2a6c74","status":"passed","time":{"start":1687939466236,"stop":1687939467232,"duration":996}},{"uid":"6fa0445eacbfd37c","reportUrl":"https://novasamatech.github.io/test-runner/3288//#testresult/6fa0445eacbfd37c","status":"passed","time":{"start":1687925231685,"stop":1687925232313,"duration":628}},{"uid":"29ad4564aeb4ae13","reportUrl":"https://novasamatech.github.io/test-runner/3287//#testresult/29ad4564aeb4ae13","status":"passed","time":{"start":1687911385774,"stop":1687911386773,"duration":999}},{"uid":"c343946049f9542f","reportUrl":"https://novasamatech.github.io/test-runner/3286//#testresult/c343946049f9542f","status":"passed","time":{"start":1687896242182,"stop":1687896242848,"duration":666}},{"uid":"d49652671c1f0f1a","reportUrl":"https://novasamatech.github.io/test-runner/3285//#testresult/d49652671c1f0f1a","status":"passed","time":{"start":1687881856978,"stop":1687881857759,"duration":781}},{"uid":"3bbbb1bd22d06a8a","reportUrl":"https://novasamatech.github.io/test-runner/3284//#testresult/3bbbb1bd22d06a8a","status":"passed","time":{"start":1687867518740,"stop":1687867519696,"duration":956}}]},"tags":[]},"source":"9c55f35f31e23298.json","parameterValues":["{'url': 'wss://calamari.systems', 'name': 'Calamari'}"]}