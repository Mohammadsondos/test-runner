{"uid":"4b7ffca65642353d","name":"test_can_create_connection[Test for Bifrost Kusama, url: wss://bifrost-parachain.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"da0d60f78cc9d831d0acf2220df35d10","time":{"start":1693497713405,"stop":1693497713605,"duration":200},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'Bifrost Kusama', 'url': 'wss://bifrost-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'Bifrost Kusama', 'url': 'wss://bifrost-parachain.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"82db720b67eebbe0","name":"stdout","source":"82db720b67eebbe0.txt","type":"text/plain","size":600}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az305-745"},{"name":"thread","value":"2057-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://bifrost-parachain.api.onfinality.io/public-ws', 'name': 'Bifrost Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e929f981acbc86ff","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1693497698086,"stop":1693497698286,"duration":200}},{"uid":"e82f99647694fbc8","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1693497682562,"stop":1693497682912,"duration":350}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":44,"unknown":0,"total":45},"items":[{"uid":"f7ab428e7c39e659","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/f7ab428e7c39e659","status":"passed","time":{"start":1693483291505,"stop":1693483292086,"duration":581}},{"uid":"dd38137e0a332c68","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/dd38137e0a332c68","status":"passed","time":{"start":1693468884336,"stop":1693468884874,"duration":538}},{"uid":"aea8e3fbf8f2fc5","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/aea8e3fbf8f2fc5","status":"passed","time":{"start":1693454492355,"stop":1693454493021,"duration":666}},{"uid":"8221b057a478e224","reportUrl":"https://novasamatech.github.io/test-runner/3679//#testresult/8221b057a478e224","status":"passed","time":{"start":1693440137117,"stop":1693440137837,"duration":720}},{"uid":"b99d092088408cc6","reportUrl":"https://novasamatech.github.io/test-runner/3678//#testresult/b99d092088408cc6","status":"passed","time":{"start":1693425683020,"stop":1693425683481,"duration":461}},{"uid":"c99b3d35fcc35af8","reportUrl":"https://novasamatech.github.io/test-runner/3677//#testresult/c99b3d35fcc35af8","status":"passed","time":{"start":1693411301638,"stop":1693411302427,"duration":789}},{"uid":"6e1a21b98602e42e","reportUrl":"https://novasamatech.github.io/test-runner/3676//#testresult/6e1a21b98602e42e","status":"passed","time":{"start":1693396890496,"stop":1693396891204,"duration":708}},{"uid":"6bdadfbc5bb73c5e","reportUrl":"https://novasamatech.github.io/test-runner/3675//#testresult/6bdadfbc5bb73c5e","status":"passed","time":{"start":1693382482708,"stop":1693382483274,"duration":566}},{"uid":"737506ba455de9fc","reportUrl":"https://novasamatech.github.io/test-runner/3674//#testresult/737506ba455de9fc","status":"passed","time":{"start":1693368081352,"stop":1693368081791,"duration":439}},{"uid":"7b1788df3a88cf97","reportUrl":"https://novasamatech.github.io/test-runner/3673//#testresult/7b1788df3a88cf97","status":"passed","time":{"start":1693353731199,"stop":1693353731829,"duration":630}},{"uid":"c7759a056a4b053d","reportUrl":"https://novasamatech.github.io/test-runner/3672//#testresult/c7759a056a4b053d","status":"passed","time":{"start":1693339282552,"stop":1693339283209,"duration":657}},{"uid":"90e35b2efd5ff507","reportUrl":"https://novasamatech.github.io/test-runner/3671//#testresult/90e35b2efd5ff507","status":"passed","time":{"start":1693324892694,"stop":1693324893175,"duration":481}},{"uid":"ea30b2816634b14","reportUrl":"https://novasamatech.github.io/test-runner/3670//#testresult/ea30b2816634b14","status":"passed","time":{"start":1693310491938,"stop":1693310492532,"duration":594}},{"uid":"3ea92f7ed436b292","reportUrl":"https://novasamatech.github.io/test-runner/3669//#testresult/3ea92f7ed436b292","status":"passed","time":{"start":1693296081720,"stop":1693296082328,"duration":608}},{"uid":"136cc7c0a5f988ae","reportUrl":"https://novasamatech.github.io/test-runner/3668//#testresult/136cc7c0a5f988ae","status":"passed","time":{"start":1693281680815,"stop":1693281681436,"duration":621}},{"uid":"49ab2dedffbc60aa","reportUrl":"https://novasamatech.github.io/test-runner/3667//#testresult/49ab2dedffbc60aa","status":"passed","time":{"start":1693267334162,"stop":1693267334760,"duration":598}},{"uid":"373a323de8a9f1c2","reportUrl":"https://novasamatech.github.io/test-runner/3666//#testresult/373a323de8a9f1c2","status":"passed","time":{"start":1693252888928,"stop":1693252889737,"duration":809}},{"uid":"3d517b77f6dae26d","reportUrl":"https://novasamatech.github.io/test-runner/3665//#testresult/3d517b77f6dae26d","status":"passed","time":{"start":1693238481492,"stop":1693238481948,"duration":456}},{"uid":"be49f0767bdca9a8","reportUrl":"https://novasamatech.github.io/test-runner/3664//#testresult/be49f0767bdca9a8","status":"passed","time":{"start":1693224090789,"stop":1693224091211,"duration":422}},{"uid":"c231792a626332e7","reportUrl":"https://novasamatech.github.io/test-runner/3663//#testresult/c231792a626332e7","status":"passed","time":{"start":1693209685119,"stop":1693209685622,"duration":503}}]},"tags":[]},"source":"4b7ffca65642353d.json","parameterValues":["{'url': 'wss://bifrost-parachain.api.onfinality.io/public-ws', 'name': 'Bifrost Kusama'}"]}