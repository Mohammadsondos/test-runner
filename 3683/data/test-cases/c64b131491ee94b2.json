{"uid":"c64b131491ee94b2","name":"test_can_create_connection[Test for XX network, url: wss://xx.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"643e2d77317b267e8bdfba8dc1397597","time":{"start":1693497757530,"stop":1693497757739,"duration":209},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'XX network', 'url': 'wss://xx.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'XX network', 'url': 'wss://xx.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"744d3dd30ef71abe","name":"stdout","source":"744d3dd30ef71abe.txt","type":"text/plain","size":555}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az305-745"},{"name":"thread","value":"2063-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://xx.api.onfinality.io/public-ws', 'name': 'XX network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"272e00565b04c945","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1693497742213,"stop":1693497742409,"duration":196}},{"uid":"e6571c4f40bcfef2","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1693497726810,"stop":1693497727050,"duration":240}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":44,"unknown":0,"total":45},"items":[{"uid":"69d6655aab8164c5","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/69d6655aab8164c5","status":"passed","time":{"start":1693483332597,"stop":1693483333283,"duration":686}},{"uid":"9854b1ea8059005c","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/9854b1ea8059005c","status":"passed","time":{"start":1693468914554,"stop":1693468914985,"duration":431}},{"uid":"97df095241c1f52c","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/97df095241c1f52c","status":"passed","time":{"start":1693454527579,"stop":1693454528234,"duration":655}},{"uid":"4619daedb95fcb6d","reportUrl":"https://novasamatech.github.io/test-runner/3679//#testresult/4619daedb95fcb6d","status":"passed","time":{"start":1693440177999,"stop":1693440178716,"duration":717}},{"uid":"d96d35948c6bf3a8","reportUrl":"https://novasamatech.github.io/test-runner/3678//#testresult/d96d35948c6bf3a8","status":"passed","time":{"start":1693425708134,"stop":1693425708671,"duration":537}},{"uid":"58ec7397e79ce14e","reportUrl":"https://novasamatech.github.io/test-runner/3677//#testresult/58ec7397e79ce14e","status":"passed","time":{"start":1693411338590,"stop":1693411339454,"duration":864}},{"uid":"1222d5396d6afb76","reportUrl":"https://novasamatech.github.io/test-runner/3676//#testresult/1222d5396d6afb76","status":"passed","time":{"start":1693396953183,"stop":1693396953922,"duration":739}},{"uid":"897cd4026c85ee44","reportUrl":"https://novasamatech.github.io/test-runner/3675//#testresult/897cd4026c85ee44","status":"passed","time":{"start":1693382514239,"stop":1693382514730,"duration":491}},{"uid":"1fd904716f3540b","reportUrl":"https://novasamatech.github.io/test-runner/3674//#testresult/1fd904716f3540b","status":"passed","time":{"start":1693368108336,"stop":1693368108854,"duration":518}},{"uid":"49a1fc2178aabdbc","reportUrl":"https://novasamatech.github.io/test-runner/3673//#testresult/49a1fc2178aabdbc","status":"passed","time":{"start":1693353777747,"stop":1693353778325,"duration":578}},{"uid":"a227e571adcdc071","reportUrl":"https://novasamatech.github.io/test-runner/3672//#testresult/a227e571adcdc071","status":"passed","time":{"start":1693339326625,"stop":1693339327150,"duration":525}},{"uid":"57c62bf7dbf0ff83","reportUrl":"https://novasamatech.github.io/test-runner/3671//#testresult/57c62bf7dbf0ff83","status":"passed","time":{"start":1693324929553,"stop":1693324930062,"duration":509}},{"uid":"643a3d0264bab52b","reportUrl":"https://novasamatech.github.io/test-runner/3670//#testresult/643a3d0264bab52b","status":"passed","time":{"start":1693310521807,"stop":1693310522248,"duration":441}},{"uid":"14b8b3ffbdf3975e","reportUrl":"https://novasamatech.github.io/test-runner/3669//#testresult/14b8b3ffbdf3975e","status":"passed","time":{"start":1693296105064,"stop":1693296105491,"duration":427}},{"uid":"6e77ff8c5890a3f6","reportUrl":"https://novasamatech.github.io/test-runner/3668//#testresult/6e77ff8c5890a3f6","status":"passed","time":{"start":1693281706432,"stop":1693281707056,"duration":624}},{"uid":"421e0ae2b5f945b5","reportUrl":"https://novasamatech.github.io/test-runner/3667//#testresult/421e0ae2b5f945b5","status":"passed","time":{"start":1693267352774,"stop":1693267353348,"duration":574}},{"uid":"2f904d3de526ca58","reportUrl":"https://novasamatech.github.io/test-runner/3666//#testresult/2f904d3de526ca58","status":"passed","time":{"start":1693252911808,"stop":1693252912503,"duration":695}},{"uid":"dd725c7040c6eabf","reportUrl":"https://novasamatech.github.io/test-runner/3665//#testresult/dd725c7040c6eabf","status":"passed","time":{"start":1693238508874,"stop":1693238509300,"duration":426}},{"uid":"cd6a0dbaebd9b919","reportUrl":"https://novasamatech.github.io/test-runner/3664//#testresult/cd6a0dbaebd9b919","status":"passed","time":{"start":1693224132661,"stop":1693224133075,"duration":414}},{"uid":"1ffc2216e09125e6","reportUrl":"https://novasamatech.github.io/test-runner/3663//#testresult/1ffc2216e09125e6","status":"passed","time":{"start":1693209731504,"stop":1693209732012,"duration":508}}]},"tags":[]},"source":"c64b131491ee94b2.json","parameterValues":["{'url': 'wss://xx.api.onfinality.io/public-ws', 'name': 'XX network'}"]}