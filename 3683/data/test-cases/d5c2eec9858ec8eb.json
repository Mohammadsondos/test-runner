{"uid":"d5c2eec9858ec8eb","name":"test_can_create_connection[Test for Tinkernet, url: wss://invarch-tinkernet.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"fa04c589555648ef054595cb3e43047c","time":{"start":1693497755745,"stop":1693497755948,"duration":203},"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n.venv/lib/python3.10/site-packages/websocket/_http.py:135: in connect\n    sock = _ssl_socket(sock, options.sslopt, hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:275: in _ssl_socket\n    sock = _wrap_sni_socket(sock, sslopt, hostname, check_hostname)\n.venv/lib/python3.10/site-packages/websocket/_http.py:251: in _wrap_sni_socket\n    return context.wrap_socket(\n/usr/lib/python3.10/ssl.py:513: in wrap_socket\n    return self.sslsocket_class._create(\n/usr/lib/python3.10/ssl.py:1071: in _create\n    self.do_handshake()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nblock = False\n\n    @_sslcopydoc\n    def do_handshake(self, block=False):\n        self._check_connected()\n        timeout = self.gettimeout()\n        try:\n            if timeout == 0.0 and block:\n                self.settimeout(None)\n>           self._sslobj.do_handshake()\nE           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)\n\n/usr/lib/python3.10/ssl.py:1342: SSLCertVerificationError","steps":[],"attachments":[{"uid":"814f0bfeb757b333","name":"stdout","source":"814f0bfeb757b333.txt","type":"text/plain","size":600}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az305-745"},{"name":"thread","value":"2054-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws', 'name': 'Tinkernet'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c3cfed09d69600ea","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1693497740417,"stop":1693497740622,"duration":205}},{"uid":"1d4b5f0404e00d6d","status":"broken","statusDetails":"ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1007)","time":{"start":1693497725028,"stop":1693497725258,"duration":230}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":44,"unknown":0,"total":45},"items":[{"uid":"9edf0d25efc182be","reportUrl":"https://novasamatech.github.io/test-runner/3682//#testresult/9edf0d25efc182be","status":"passed","time":{"start":1693483351667,"stop":1693483352203,"duration":536}},{"uid":"5e7f9502c81c8a63","reportUrl":"https://novasamatech.github.io/test-runner/3681//#testresult/5e7f9502c81c8a63","status":"passed","time":{"start":1693468910444,"stop":1693468910899,"duration":455}},{"uid":"7bfd4a24f7d251d","reportUrl":"https://novasamatech.github.io/test-runner/3680//#testresult/7bfd4a24f7d251d","status":"passed","time":{"start":1693454525428,"stop":1693454526147,"duration":719}},{"uid":"e6925f8005dfbe53","reportUrl":"https://novasamatech.github.io/test-runner/3679//#testresult/e6925f8005dfbe53","status":"passed","time":{"start":1693440168571,"stop":1693440174503,"duration":5932}},{"uid":"cfb1049100190f","reportUrl":"https://novasamatech.github.io/test-runner/3678//#testresult/cfb1049100190f","status":"passed","time":{"start":1693425703732,"stop":1693425704204,"duration":472}},{"uid":"7145f1fcb48e5f1e","reportUrl":"https://novasamatech.github.io/test-runner/3677//#testresult/7145f1fcb48e5f1e","status":"passed","time":{"start":1693411333452,"stop":1693411334494,"duration":1042}},{"uid":"70ec0574313f5cb8","reportUrl":"https://novasamatech.github.io/test-runner/3676//#testresult/70ec0574313f5cb8","status":"passed","time":{"start":1693396918279,"stop":1693396919007,"duration":728}},{"uid":"9ab70a8bcb97881a","reportUrl":"https://novasamatech.github.io/test-runner/3675//#testresult/9ab70a8bcb97881a","status":"passed","time":{"start":1693382509832,"stop":1693382510371,"duration":539}},{"uid":"f71bb96c9bb37442","reportUrl":"https://novasamatech.github.io/test-runner/3674//#testresult/f71bb96c9bb37442","status":"passed","time":{"start":1693368103447,"stop":1693368103924,"duration":477}},{"uid":"97ffc78c776b32e6","reportUrl":"https://novasamatech.github.io/test-runner/3673//#testresult/97ffc78c776b32e6","status":"passed","time":{"start":1693353789624,"stop":1693353790279,"duration":655}},{"uid":"eeed80e4522b1e3b","reportUrl":"https://novasamatech.github.io/test-runner/3672//#testresult/eeed80e4522b1e3b","status":"passed","time":{"start":1693339320662,"stop":1693339322211,"duration":1549}},{"uid":"b31387ea7f76b769","reportUrl":"https://novasamatech.github.io/test-runner/3671//#testresult/b31387ea7f76b769","status":"passed","time":{"start":1693324922461,"stop":1693324922959,"duration":498}},{"uid":"2dfc53b24076852c","reportUrl":"https://novasamatech.github.io/test-runner/3670//#testresult/2dfc53b24076852c","status":"passed","time":{"start":1693310517401,"stop":1693310517825,"duration":424}},{"uid":"a6408e38d6bcea39","reportUrl":"https://novasamatech.github.io/test-runner/3669//#testresult/a6408e38d6bcea39","status":"passed","time":{"start":1693296103144,"stop":1693296103580,"duration":436}},{"uid":"c35d74668bae28c8","reportUrl":"https://novasamatech.github.io/test-runner/3668//#testresult/c35d74668bae28c8","status":"passed","time":{"start":1693281737098,"stop":1693281737680,"duration":582}},{"uid":"7344c2bf98171f15","reportUrl":"https://novasamatech.github.io/test-runner/3667//#testresult/7344c2bf98171f15","status":"passed","time":{"start":1693267352695,"stop":1693267353240,"duration":545}},{"uid":"43ffdf73a4131724","reportUrl":"https://novasamatech.github.io/test-runner/3666//#testresult/43ffdf73a4131724","status":"passed","time":{"start":1693252909632,"stop":1693252910334,"duration":702}},{"uid":"f3b65572fee55b15","reportUrl":"https://novasamatech.github.io/test-runner/3665//#testresult/f3b65572fee55b15","status":"passed","time":{"start":1693238504092,"stop":1693238504524,"duration":432}},{"uid":"1818db2436a8b691","reportUrl":"https://novasamatech.github.io/test-runner/3664//#testresult/1818db2436a8b691","status":"passed","time":{"start":1693224129780,"stop":1693224130182,"duration":402}},{"uid":"17a4b09d4d76e2d5","reportUrl":"https://novasamatech.github.io/test-runner/3663//#testresult/17a4b09d4d76e2d5","status":"passed","time":{"start":1693209726966,"stop":1693209727614,"duration":648}}]},"tags":[]},"source":"d5c2eec9858ec8eb.json","parameterValues":["{'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws', 'name': 'Tinkernet'}"]}