{"uid":"b3902680ddf59566","name":"test_chainId[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"772a904a7b84e5177692678e454acb91","time":{"start":1696608185870,"stop":1696608187900,"duration":2030},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7fa2a2d785e0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fa2a2ed1ba0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fa28c3cf340>\nmethod = 'state_getMetadata'\nparams = ['0x952b863a6cfc63357722dcb2e02f5b0f4ebb23f34f4f8e2d1ce46b3792b5908c']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az256-300"},{"name":"thread","value":"2082-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fa2a2ed1ba0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6ea8ed3240714d90","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696608168917,"stop":1696608170704,"duration":1787}},{"uid":"a4811a316a5ea059","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696608151281,"stop":1696608153425,"duration":2144}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":257,"unknown":0,"total":261},"items":[{"uid":"80c83871e431a1ac","reportUrl":"https://novasamatech.github.io/test-runner/3900//#testresult/80c83871e431a1ac","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696593838302,"stop":1696593840171,"duration":1869}},{"uid":"a4697ae0b03f8e69","reportUrl":"https://novasamatech.github.io/test-runner/3899//#testresult/a4697ae0b03f8e69","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696579375251,"stop":1696579377017,"duration":1766}},{"uid":"354934f6ec96d3d6","reportUrl":"https://novasamatech.github.io/test-runner/3898//#testresult/354934f6ec96d3d6","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696564952530,"stop":1696564954372,"duration":1842}},{"uid":"4f8c7960fc9970df","reportUrl":"https://novasamatech.github.io/test-runner/3897//#testresult/4f8c7960fc9970df","status":"passed","time":{"start":1696550558418,"stop":1696550563800,"duration":5382}},{"uid":"c1a281d6dcc6ffb2","reportUrl":"https://novasamatech.github.io/test-runner/3896//#testresult/c1a281d6dcc6ffb2","status":"passed","time":{"start":1696536110570,"stop":1696536116610,"duration":6040}},{"uid":"c058fcadfb23e88b","reportUrl":"https://novasamatech.github.io/test-runner/3895//#testresult/c058fcadfb23e88b","status":"passed","time":{"start":1696521718991,"stop":1696521724755,"duration":5764}},{"uid":"e5c37ed3eeba5c06","reportUrl":"https://novasamatech.github.io/test-runner/3894//#testresult/e5c37ed3eeba5c06","status":"passed","time":{"start":1696507320247,"stop":1696507326869,"duration":6622}},{"uid":"925410f367d1d360","reportUrl":"https://novasamatech.github.io/test-runner/3893//#testresult/925410f367d1d360","status":"passed","time":{"start":1696496662644,"stop":1696496668377,"duration":5733}},{"uid":"df4185238fbe214","reportUrl":"https://novasamatech.github.io/test-runner/3892//#testresult/df4185238fbe214","status":"passed","time":{"start":1696492952200,"stop":1696492958831,"duration":6631}},{"uid":"37fe6df564872efd","reportUrl":"https://novasamatech.github.io/test-runner/3891//#testresult/37fe6df564872efd","status":"passed","time":{"start":1696478522218,"stop":1696478530543,"duration":8325}},{"uid":"188f2b4b50dbebf3","reportUrl":"https://novasamatech.github.io/test-runner/3890//#testresult/188f2b4b50dbebf3","status":"passed","time":{"start":1696464177205,"stop":1696464184486,"duration":7281}},{"uid":"d61795f9fc7c3d0b","reportUrl":"https://novasamatech.github.io/test-runner/3889//#testresult/d61795f9fc7c3d0b","status":"passed","time":{"start":1696449745957,"stop":1696449753129,"duration":7172}},{"uid":"8a1d79c50269ecb0","reportUrl":"https://novasamatech.github.io/test-runner/3888//#testresult/8a1d79c50269ecb0","status":"passed","time":{"start":1696435321124,"stop":1696435327752,"duration":6628}},{"uid":"780b8401fd9811a1","reportUrl":"https://novasamatech.github.io/test-runner/3887//#testresult/780b8401fd9811a1","status":"passed","time":{"start":1696420921683,"stop":1696420930235,"duration":8552}},{"uid":"236fde72b66a9945","reportUrl":"https://novasamatech.github.io/test-runner/3886//#testresult/236fde72b66a9945","status":"passed","time":{"start":1696406547145,"stop":1696406553918,"duration":6773}},{"uid":"10c178ae0aabb630","reportUrl":"https://novasamatech.github.io/test-runner/3885//#testresult/10c178ae0aabb630","status":"passed","time":{"start":1696392120416,"stop":1696392126130,"duration":5714}},{"uid":"2d9a81234014360b","reportUrl":"https://novasamatech.github.io/test-runner/3884//#testresult/2d9a81234014360b","status":"passed","time":{"start":1696377768357,"stop":1696377774411,"duration":6054}},{"uid":"9cd182500e960823","reportUrl":"https://novasamatech.github.io/test-runner/3883//#testresult/9cd182500e960823","status":"passed","time":{"start":1696363322971,"stop":1696363327462,"duration":4491}},{"uid":"e18f3c8cf29a2aef","reportUrl":"https://novasamatech.github.io/test-runner/3882//#testresult/e18f3c8cf29a2aef","status":"passed","time":{"start":1696348937823,"stop":1696348943911,"duration":6088}},{"uid":"da764bf700a862ab","reportUrl":"https://novasamatech.github.io/test-runner/3881//#testresult/da764bf700a862ab","status":"passed","time":{"start":1696334547899,"stop":1696334553695,"duration":5796}}]},"tags":[]},"source":"b3902680ddf59566.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fa2a2ed1ba0>"]}