{"uid":"1938e858073f61dd","name":"test_precision[Test for Composable Finance]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"d509d66f8aae8d37ee667169b62aafd3","time":{"start":1696824169837,"stop":1696824171605,"duration":1768},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7f94edacf4f0>\nchain = <scripts.utils.chain_model.Chain object at 0x7f94edacc9d0>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:1160: in init_runtime\n    self.metadata = self.get_block_metadata(block_hash=runtime_block_hash, decode=True)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:955: in get_block_metadata\n    response = self.rpc_request(\"state_getMetadata\", params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f94d80b6380>\nmethod = 'state_getMetadata'\nparams = ['0x4318cc4303aa06b6aa7d26b8a6eb93924788db80a5c0da9eaa96f78c3b7a7c3e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}\n\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az1131-450"},{"name":"thread","value":"2086-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f94edacc9d0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e4ff98f3d7bb4365","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696824152847,"stop":1696824154650,"duration":1803}},{"uid":"87b371c8f7c2660e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696824135403,"stop":1696824137599,"duration":2196}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":273,"unknown":0,"total":276},"items":[{"uid":"9e8c96a87cfca8ed","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/9e8c96a87cfca8ed","status":"passed","time":{"start":1696809785677,"stop":1696809792398,"duration":6721}},{"uid":"3d2f3cc24754779f","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/3d2f3cc24754779f","status":"passed","time":{"start":1696795330094,"stop":1696795335400,"duration":5306}},{"uid":"787afae7019653a8","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/787afae7019653a8","status":"passed","time":{"start":1696780918461,"stop":1696780926888,"duration":8427}},{"uid":"26b861b7f2c96cef","reportUrl":"https://novasamatech.github.io/test-runner/3912//#testresult/26b861b7f2c96cef","status":"passed","time":{"start":1696766505921,"stop":1696766511231,"duration":5310}},{"uid":"41287cf75b21fddb","reportUrl":"https://novasamatech.github.io/test-runner/3911//#testresult/41287cf75b21fddb","status":"passed","time":{"start":1696752150081,"stop":1696752155758,"duration":5677}},{"uid":"312e12d1916e859","reportUrl":"https://novasamatech.github.io/test-runner/3910//#testresult/312e12d1916e859","status":"passed","time":{"start":1696737735930,"stop":1696737741447,"duration":5517}},{"uid":"672644fcdb3fb048","reportUrl":"https://novasamatech.github.io/test-runner/3909//#testresult/672644fcdb3fb048","status":"passed","time":{"start":1696723381098,"stop":1696723387701,"duration":6603}},{"uid":"f5aae220cc94b38b","reportUrl":"https://novasamatech.github.io/test-runner/3908//#testresult/f5aae220cc94b38b","status":"passed","time":{"start":1696708912388,"stop":1696708918846,"duration":6458}},{"uid":"d9fb5b9d3d75f76","reportUrl":"https://novasamatech.github.io/test-runner/3907//#testresult/d9fb5b9d3d75f76","status":"passed","time":{"start":1696694514078,"stop":1696694521088,"duration":7010}},{"uid":"dcbed82acd866b16","reportUrl":"https://novasamatech.github.io/test-runner/3906//#testresult/dcbed82acd866b16","status":"passed","time":{"start":1696680115024,"stop":1696680120969,"duration":5945}},{"uid":"a9c4daace97e976","reportUrl":"https://novasamatech.github.io/test-runner/3905//#testresult/a9c4daace97e976","status":"passed","time":{"start":1696665714387,"stop":1696665722240,"duration":7853}},{"uid":"87d55dfa774156ef","reportUrl":"https://novasamatech.github.io/test-runner/3904//#testresult/87d55dfa774156ef","status":"passed","time":{"start":1696651319175,"stop":1696651327460,"duration":8285}},{"uid":"5fc07e90ed7ff6e3","reportUrl":"https://novasamatech.github.io/test-runner/3903//#testresult/5fc07e90ed7ff6e3","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696637014000,"stop":1696637015863,"duration":1863}},{"uid":"d0a750621ac1f719","reportUrl":"https://novasamatech.github.io/test-runner/3902//#testresult/d0a750621ac1f719","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32029, 'message': 'Too Many Requests, Please apply an OnFinality API key or contact us to receive a higher rate limit'}","time":{"start":1696622574190,"stop":1696622576100,"duration":1910}},{"uid":"c9d7ae7dae2342f2","reportUrl":"https://novasamatech.github.io/test-runner/3901//#testresult/c9d7ae7dae2342f2","status":"passed","time":{"start":1696608145713,"stop":1696608153807,"duration":8094}},{"uid":"25ae147fae372460","reportUrl":"https://novasamatech.github.io/test-runner/3900//#testresult/25ae147fae372460","status":"passed","time":{"start":1696593735292,"stop":1696593740523,"duration":5231}},{"uid":"297ccd05a8f8a8db","reportUrl":"https://novasamatech.github.io/test-runner/3899//#testresult/297ccd05a8f8a8db","status":"passed","time":{"start":1696579324235,"stop":1696579331154,"duration":6919}},{"uid":"f6d773737bde7b28","reportUrl":"https://novasamatech.github.io/test-runner/3898//#testresult/f6d773737bde7b28","status":"passed","time":{"start":1696564957966,"stop":1696564964524,"duration":6558}},{"uid":"bed2922d6816c6c6","reportUrl":"https://novasamatech.github.io/test-runner/3897//#testresult/bed2922d6816c6c6","status":"passed","time":{"start":1696550565854,"stop":1696550570994,"duration":5140}},{"uid":"18b4f822e80e4f31","reportUrl":"https://novasamatech.github.io/test-runner/3896//#testresult/18b4f822e80e4f31","status":"passed","time":{"start":1696536145022,"stop":1696536151639,"duration":6617}}]},"tags":[]},"source":"1938e858073f61dd.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f94edacc9d0>"]}