{"uid":"1b17d7e285614e17","name":"test_can_create_connection[Test for Moonbeam, url: wss://1rpc.io/glmr]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"fa8c3605e2f5b4f16369f446caef3de6","time":{"start":1696824105777,"stop":1696824106315,"duration":538},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Moonbeam', 'url': 'wss://1rpc.io/glmr'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Moonbeam', 'url': 'wss://1rpc.io/glmr'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"50653bd730b807c5","name":"stdout","source":"50653bd730b807c5.txt","type":"text/plain","size":315}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az560-827"},{"name":"thread","value":"2148-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://1rpc.io/glmr', 'name': 'Moonbeam'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e02683320e2fb39a","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1696824090285,"stop":1696824090612,"duration":327}},{"uid":"248ef0c5ac33a0ce","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1696824074581,"stop":1696824075028,"duration":447}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":275,"unknown":0,"total":276},"items":[{"uid":"7349ee92766b5cf1","reportUrl":"https://novasamatech.github.io/test-runner/3915//#testresult/7349ee92766b5cf1","status":"passed","time":{"start":1696809724096,"stop":1696809724966,"duration":870}},{"uid":"6bc60c421e560511","reportUrl":"https://novasamatech.github.io/test-runner/3914//#testresult/6bc60c421e560511","status":"passed","time":{"start":1696795274911,"stop":1696795275647,"duration":736}},{"uid":"b36f709a93347828","reportUrl":"https://novasamatech.github.io/test-runner/3913//#testresult/b36f709a93347828","status":"passed","time":{"start":1696780875561,"stop":1696780876278,"duration":717}},{"uid":"c80bd4c1e21d4c45","reportUrl":"https://novasamatech.github.io/test-runner/3912//#testresult/c80bd4c1e21d4c45","status":"passed","time":{"start":1696766475497,"stop":1696766476363,"duration":866}},{"uid":"f738959ddd87244f","reportUrl":"https://novasamatech.github.io/test-runner/3911//#testresult/f738959ddd87244f","status":"passed","time":{"start":1696752093828,"stop":1696752094457,"duration":629}},{"uid":"b2ba85b1d2c0aa69","reportUrl":"https://novasamatech.github.io/test-runner/3910//#testresult/b2ba85b1d2c0aa69","status":"passed","time":{"start":1696737677960,"stop":1696737678834,"duration":874}},{"uid":"45108eb8509b9e6e","reportUrl":"https://novasamatech.github.io/test-runner/3909//#testresult/45108eb8509b9e6e","status":"passed","time":{"start":1696723332330,"stop":1696723333049,"duration":719}},{"uid":"322e6882d3604d39","reportUrl":"https://novasamatech.github.io/test-runner/3908//#testresult/322e6882d3604d39","status":"passed","time":{"start":1696708875249,"stop":1696708876012,"duration":763}},{"uid":"b678ae0cb6a62d9b","reportUrl":"https://novasamatech.github.io/test-runner/3907//#testresult/b678ae0cb6a62d9b","status":"passed","time":{"start":1696694474728,"stop":1696694475491,"duration":763}},{"uid":"3c230cac534e6b3b","reportUrl":"https://novasamatech.github.io/test-runner/3906//#testresult/3c230cac534e6b3b","status":"passed","time":{"start":1696680079641,"stop":1696680080483,"duration":842}},{"uid":"45d96a016b48b7f8","reportUrl":"https://novasamatech.github.io/test-runner/3905//#testresult/45d96a016b48b7f8","status":"passed","time":{"start":1696665679401,"stop":1696665680040,"duration":639}},{"uid":"5eb94a19d7c3eafc","reportUrl":"https://novasamatech.github.io/test-runner/3904//#testresult/5eb94a19d7c3eafc","status":"passed","time":{"start":1696651275072,"stop":1696651275801,"duration":729}},{"uid":"96ddb4122682a2ef","reportUrl":"https://novasamatech.github.io/test-runner/3903//#testresult/96ddb4122682a2ef","status":"passed","time":{"start":1696636921180,"stop":1696636921906,"duration":726}},{"uid":"2d5b2a0d6506e7ea","reportUrl":"https://novasamatech.github.io/test-runner/3902//#testresult/2d5b2a0d6506e7ea","status":"passed","time":{"start":1696622473910,"stop":1696622474701,"duration":791}},{"uid":"33be68afb2885fe0","reportUrl":"https://novasamatech.github.io/test-runner/3901//#testresult/33be68afb2885fe0","status":"passed","time":{"start":1696608079937,"stop":1696608080747,"duration":810}},{"uid":"d2d323b284dd6a70","reportUrl":"https://novasamatech.github.io/test-runner/3900//#testresult/d2d323b284dd6a70","status":"passed","time":{"start":1696593687239,"stop":1696593687898,"duration":659}},{"uid":"f8531b45aae0d637","reportUrl":"https://novasamatech.github.io/test-runner/3899//#testresult/f8531b45aae0d637","status":"passed","time":{"start":1696579282988,"stop":1696579283836,"duration":848}},{"uid":"fdd4a72138d9a918","reportUrl":"https://novasamatech.github.io/test-runner/3898//#testresult/fdd4a72138d9a918","status":"passed","time":{"start":1696564875190,"stop":1696564876101,"duration":911}},{"uid":"d9dd7b56c90fa48f","reportUrl":"https://novasamatech.github.io/test-runner/3897//#testresult/d9dd7b56c90fa48f","status":"passed","time":{"start":1696550520928,"stop":1696550521849,"duration":921}},{"uid":"5a5a6e29c06abc05","reportUrl":"https://novasamatech.github.io/test-runner/3896//#testresult/5a5a6e29c06abc05","status":"passed","time":{"start":1696536079988,"stop":1696536080783,"duration":795}}]},"tags":[]},"source":"1b17d7e285614e17.json","parameterValues":["{'url': 'wss://1rpc.io/glmr', 'name': 'Moonbeam'}"]}