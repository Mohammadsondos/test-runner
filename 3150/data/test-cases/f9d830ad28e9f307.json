{"uid":"f9d830ad28e9f307","name":"test_chainId[Test for Acala]","fullName":"tests.test_network_parameters.TestChainId#test_chainId","historyId":"7c84c7c55e19eabda7c2b151a24639b0","time":{"start":1685937889022,"stop":1685937890258,"duration":1236},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7f6bc1df4550>\nchain = <scripts.utils.chain_model.Chain object at 0x7f6bc23bd2a0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f6bbf8cca90>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x1e06c6de6c416631545bca3bd54b93e60ac350e7736477de1979dcf685b6954e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestChainId object at 0x7f6bc1df4550>\nchain = <scripts.utils.chain_model.Chain object at 0x7f6bc23bd2a0>\n\n    def test_chainId(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f6bbf8cca90>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x1e06c6de6c416631545bca3bd54b93e60ac350e7736477de1979dcf685b6954e']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"3c2aa07685acb5b8","name":"stdout","source":"3c2aa07685acb5b8.txt","type":"text/plain","size":1137}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestChainId"},{"name":"host","value":"fv-az166-780"},{"name":"thread","value":"1925-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7f6bc23bd2a0>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"972f96bed8a2c0b9","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1685937872337,"stop":1685937873469,"duration":1132}},{"uid":"3ebdaa0414c449bb","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1685937855592,"stop":1685937856660,"duration":1068}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":190,"unknown":0,"total":191},"items":[{"uid":"88f8b8e4c26e04fd","reportUrl":"https://novasamatech.github.io/test-runner/3149//#testresult/88f8b8e4c26e04fd","status":"passed","time":{"start":1685924072988,"stop":1685924081614,"duration":8626}},{"uid":"ef98892fa31c5494","reportUrl":"https://novasamatech.github.io/test-runner/3148//#testresult/ef98892fa31c5494","status":"passed","time":{"start":1685909060235,"stop":1685909075042,"duration":14807}},{"uid":"4e68a7c027bcbd50","reportUrl":"https://novasamatech.github.io/test-runner/3147//#testresult/4e68a7c027bcbd50","status":"passed","time":{"start":1685894674245,"stop":1685894682751,"duration":8506}},{"uid":"e6fedb6760fc6df8","reportUrl":"https://novasamatech.github.io/test-runner/3146//#testresult/e6fedb6760fc6df8","status":"passed","time":{"start":1685880275761,"stop":1685880284011,"duration":8250}},{"uid":"61722c6a808e6db2","reportUrl":"https://novasamatech.github.io/test-runner/3145//#testresult/61722c6a808e6db2","status":"passed","time":{"start":1685865839961,"stop":1685865847543,"duration":7582}},{"uid":"e66aac001b16e2b2","reportUrl":"https://novasamatech.github.io/test-runner/3144//#testresult/e66aac001b16e2b2","status":"passed","time":{"start":1685851451028,"stop":1685851463302,"duration":12274}},{"uid":"fa0669f7bd133a9e","reportUrl":"https://novasamatech.github.io/test-runner/3143//#testresult/fa0669f7bd133a9e","status":"passed","time":{"start":1685837742607,"stop":1685837750277,"duration":7670}},{"uid":"361c0f4a0093c6a","reportUrl":"https://novasamatech.github.io/test-runner/3142//#testresult/361c0f4a0093c6a","status":"passed","time":{"start":1685822682162,"stop":1685822690791,"duration":8629}},{"uid":"c94ea9e5077192f","reportUrl":"https://novasamatech.github.io/test-runner/3141//#testresult/c94ea9e5077192f","status":"passed","time":{"start":1685808260278,"stop":1685808269304,"duration":9026}},{"uid":"2a6b9a586b1732bd","reportUrl":"https://novasamatech.github.io/test-runner/3140//#testresult/2a6b9a586b1732bd","status":"passed","time":{"start":1685793887353,"stop":1685793895489,"duration":8136}},{"uid":"da3030b1aaeb3833","reportUrl":"https://novasamatech.github.io/test-runner/3139//#testresult/da3030b1aaeb3833","status":"passed","time":{"start":1685779457345,"stop":1685779469454,"duration":12109}},{"uid":"3d60e314dff67030","reportUrl":"https://novasamatech.github.io/test-runner/3138//#testresult/3d60e314dff67030","status":"passed","time":{"start":1685765051441,"stop":1685765059849,"duration":8408}},{"uid":"1d6dc7572f598d67","reportUrl":"https://novasamatech.github.io/test-runner/3137//#testresult/1d6dc7572f598d67","status":"passed","time":{"start":1685751238483,"stop":1685751245474,"duration":6991}},{"uid":"bb165adcf836a3e4","reportUrl":"https://novasamatech.github.io/test-runner/3136//#testresult/bb165adcf836a3e4","status":"passed","time":{"start":1685736235545,"stop":1685736246451,"duration":10906}},{"uid":"81e4ae11ade05c8b","reportUrl":"https://novasamatech.github.io/test-runner/3135//#testresult/81e4ae11ade05c8b","status":"passed","time":{"start":1685721858006,"stop":1685721867942,"duration":9936}},{"uid":"b2b9cb72d2faaa75","reportUrl":"https://novasamatech.github.io/test-runner/3134//#testresult/b2b9cb72d2faaa75","status":"passed","time":{"start":1685707494312,"stop":1685707502833,"duration":8521}},{"uid":"660aceda16400aeb","reportUrl":"https://novasamatech.github.io/test-runner/3133//#testresult/660aceda16400aeb","status":"passed","time":{"start":1685693040187,"stop":1685693048095,"duration":7908}},{"uid":"e95e485a10fd0f72","reportUrl":"https://novasamatech.github.io/test-runner/3132//#testresult/e95e485a10fd0f72","status":"passed","time":{"start":1685678644912,"stop":1685678652898,"duration":7986}},{"uid":"8889c9128d5bdd9d","reportUrl":"https://novasamatech.github.io/test-runner/3131//#testresult/8889c9128d5bdd9d","status":"passed","time":{"start":1685664865561,"stop":1685664876882,"duration":11321}},{"uid":"199469b3f8c39f88","reportUrl":"https://novasamatech.github.io/test-runner/3130//#testresult/199469b3f8c39f88","status":"passed","time":{"start":1685649831710,"stop":1685649839902,"duration":8192}}]},"tags":[]},"source":"f9d830ad28e9f307.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f6bc23bd2a0>"]}