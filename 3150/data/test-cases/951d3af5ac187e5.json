{"uid":"951d3af5ac187e5","name":"test_can_create_connection[Test for Crab, url: wss://crab-rpc.darwinia.network/]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"ae3c62215c32eca769411c39859d64a9","time":{"start":1685937881849,"stop":1685937882589,"duration":740},"status":"broken","statusMessage":"KeyError: 'content-length'","statusTrace":"data = {'name': 'Crab', 'url': 'wss://crab-rpc.darwinia.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\nE           KeyError: 'content-length'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: KeyError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"KeyError: 'content-length'","statusTrace":"data = {'name': 'Crab', 'url': 'wss://crab-rpc.darwinia.network/'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           response_body = sock.recv(int(resp_headers['content-length']))  # read the body of the HTTP error message response and include it in the exception\nE           KeyError: 'content-length'\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: KeyError","steps":[],"attachments":[{"uid":"54b50c09993d7ed","name":"stdout","source":"54b50c09993d7ed.txt","type":"text/plain","size":300}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az1028-527"},{"name":"thread","value":"1872-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://crab-rpc.darwinia.network/', 'name': 'Crab'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bbddbdab07cf9d81","status":"broken","statusDetails":"KeyError: 'content-length'","time":{"start":1685937866021,"stop":1685937866762,"duration":741}},{"uid":"71112722c38b2e35","status":"broken","statusDetails":"KeyError: 'content-length'","time":{"start":1685937850150,"stop":1685937850901,"duration":751}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":124,"unknown":0,"total":129},"items":[{"uid":"e76bc9f3dfdac3cb","reportUrl":"https://novasamatech.github.io/test-runner/3149//#testresult/e76bc9f3dfdac3cb","status":"passed","time":{"start":1685924077420,"stop":1685924078408,"duration":988}},{"uid":"72641081b4fb7b81","reportUrl":"https://novasamatech.github.io/test-runner/3148//#testresult/72641081b4fb7b81","status":"passed","time":{"start":1685909029662,"stop":1685909030772,"duration":1110}},{"uid":"76f595a01fc1b122","reportUrl":"https://novasamatech.github.io/test-runner/3147//#testresult/76f595a01fc1b122","status":"passed","time":{"start":1685894650112,"stop":1685894651120,"duration":1008}},{"uid":"c22fc2fb6b7eb1aa","reportUrl":"https://novasamatech.github.io/test-runner/3146//#testresult/c22fc2fb6b7eb1aa","status":"passed","time":{"start":1685880282066,"stop":1685880283028,"duration":962}},{"uid":"d459f1fb0c2bf440","reportUrl":"https://novasamatech.github.io/test-runner/3145//#testresult/d459f1fb0c2bf440","status":"passed","time":{"start":1685865837237,"stop":1685865838303,"duration":1066}},{"uid":"84a26aed19d5afec","reportUrl":"https://novasamatech.github.io/test-runner/3144//#testresult/84a26aed19d5afec","status":"passed","time":{"start":1685851435538,"stop":1685851436610,"duration":1072}},{"uid":"aeaac7ec081d8a5e","reportUrl":"https://novasamatech.github.io/test-runner/3143//#testresult/aeaac7ec081d8a5e","status":"passed","time":{"start":1685837743363,"stop":1685837744371,"duration":1008}},{"uid":"701fe227b34dbd47","reportUrl":"https://novasamatech.github.io/test-runner/3142//#testresult/701fe227b34dbd47","status":"passed","time":{"start":1685822678399,"stop":1685822679338,"duration":939}},{"uid":"4ef45abeb141d0fd","reportUrl":"https://novasamatech.github.io/test-runner/3141//#testresult/4ef45abeb141d0fd","status":"passed","time":{"start":1685808264718,"stop":1685808265670,"duration":952}},{"uid":"92995113b1d9c635","reportUrl":"https://novasamatech.github.io/test-runner/3140//#testresult/92995113b1d9c635","status":"passed","time":{"start":1685793894901,"stop":1685793895837,"duration":936}},{"uid":"771d234367ee8253","reportUrl":"https://novasamatech.github.io/test-runner/3139//#testresult/771d234367ee8253","status":"passed","time":{"start":1685779433645,"stop":1685779434614,"duration":969}},{"uid":"201512c80ba6535c","reportUrl":"https://novasamatech.github.io/test-runner/3138//#testresult/201512c80ba6535c","status":"passed","time":{"start":1685765061506,"stop":1685765062450,"duration":944}},{"uid":"e761762193da4dcf","reportUrl":"https://novasamatech.github.io/test-runner/3137//#testresult/e761762193da4dcf","status":"passed","time":{"start":1685751241748,"stop":1685751242723,"duration":975}},{"uid":"e3a6d550b3b88b8e","reportUrl":"https://novasamatech.github.io/test-runner/3136//#testresult/e3a6d550b3b88b8e","status":"passed","time":{"start":1685736226090,"stop":1685736227137,"duration":1047}},{"uid":"29c4a737a2db5873","reportUrl":"https://novasamatech.github.io/test-runner/3135//#testresult/29c4a737a2db5873","status":"passed","time":{"start":1685721858910,"stop":1685721859859,"duration":949}},{"uid":"8eb1343fecb0038e","reportUrl":"https://novasamatech.github.io/test-runner/3134//#testresult/8eb1343fecb0038e","status":"passed","time":{"start":1685707500770,"stop":1685707501665,"duration":895}},{"uid":"b960c910359fb08e","reportUrl":"https://novasamatech.github.io/test-runner/3133//#testresult/b960c910359fb08e","status":"passed","time":{"start":1685693075730,"stop":1685693076729,"duration":999}},{"uid":"e07de4a7ec89061d","reportUrl":"https://novasamatech.github.io/test-runner/3132//#testresult/e07de4a7ec89061d","status":"passed","time":{"start":1685678652025,"stop":1685678652929,"duration":904}},{"uid":"489832a1bf107fff","reportUrl":"https://novasamatech.github.io/test-runner/3131//#testresult/489832a1bf107fff","status":"passed","time":{"start":1685664855822,"stop":1685664856841,"duration":1019}},{"uid":"c00f8e313fc34bdb","reportUrl":"https://novasamatech.github.io/test-runner/3130//#testresult/c00f8e313fc34bdb","status":"passed","time":{"start":1685649833119,"stop":1685649834064,"duration":945}}]},"tags":[]},"source":"951d3af5ac187e5.json","parameterValues":["{'url': 'wss://crab-rpc.darwinia.network/', 'name': 'Crab'}"]}