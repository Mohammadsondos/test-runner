{"uid":"4e9c03ae31fffd76","name":"test_has_new_assets[Test for Acala]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"811bc5c930abadf9421eacf26316cc27","time":{"start":1709290002428,"stop":1709290002472,"duration":44},"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: AUSD\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f6b1658afb0>\nchain_model = <scripts.utils.chain_model.Chain object at 0x7f6b16776d70>\n\n    def test_has_new_assets(self, chain_model: Chain):\n    \n        chain_assets = {asset['symbol'].upper(\n        ): '' for asset in chain_model.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain_model.name in self.exclusions:\n            chain_assets.update(\n                {ex_asset: '' for ex_asset in self.exclusions[chain_model.name]})\n        symbols = chain_model.substrate.token_symbol if isinstance(chain_model.substrate.token_symbol, list) else [\n            chain_model.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: AUSD\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n.venv/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"chain_model","time":{"start":1709289990203,"stop":1709289992319,"duration":2116},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az1200-26"},{"name":"thread","value":"2396-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain_model","value":"<scripts.utils.chain_model.Chain object at 0x7f6b16776d70>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cf9b6bdadd569316","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: AUSD\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1709289997367,"stop":1709289997416,"duration":49}},{"uid":"aa2d4c1f109eb67d","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: AUSD\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1709289992320,"stop":1709289992354,"duration":34}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":7,"skipped":0,"passed":899,"unknown":0,"total":907},"items":[{"uid":"f3c7a6b5d6ffde33","reportUrl":"https://novasamatech.github.io/test-runner/4789//#testresult/f3c7a6b5d6ffde33","status":"passed","time":{"start":1709193673228,"stop":1709193673248,"duration":20}},{"uid":"4ab69d8f5c9e0e6","reportUrl":"https://novasamatech.github.io/test-runner/4788//#testresult/4ab69d8f5c9e0e6","status":"passed","time":{"start":1709179274987,"stop":1709179275006,"duration":19}},{"uid":"7cb0739c8a8d901","reportUrl":"https://novasamatech.github.io/test-runner/4787//#testresult/7cb0739c8a8d901","status":"passed","time":{"start":1709164913277,"stop":1709164913298,"duration":21}},{"uid":"e872605cb9c392c6","reportUrl":"https://novasamatech.github.io/test-runner/4786//#testresult/e872605cb9c392c6","status":"passed","time":{"start":1709150478113,"stop":1709150478132,"duration":19}},{"uid":"b1433b70942b33d7","reportUrl":"https://novasamatech.github.io/test-runner/4785//#testresult/b1433b70942b33d7","status":"passed","time":{"start":1709136075977,"stop":1709136076012,"duration":35}},{"uid":"784ba8b106949dff","reportUrl":"https://novasamatech.github.io/test-runner/4784//#testresult/784ba8b106949dff","status":"passed","time":{"start":1709121686799,"stop":1709121686818,"duration":19}},{"uid":"ac448ae1714aa750","reportUrl":"https://novasamatech.github.io/test-runner/4783//#testresult/ac448ae1714aa750","status":"passed","time":{"start":1709107280328,"stop":1709107280355,"duration":27}},{"uid":"587fda570dd1d8b7","reportUrl":"https://novasamatech.github.io/test-runner/4782//#testresult/587fda570dd1d8b7","status":"passed","time":{"start":1709092866100,"stop":1709092866120,"duration":20}},{"uid":"180c8cf68ad0c215","reportUrl":"https://novasamatech.github.io/test-runner/4781//#testresult/180c8cf68ad0c215","status":"passed","time":{"start":1709078501272,"stop":1709078501291,"duration":19}},{"uid":"7e7ebe9238b326c6","reportUrl":"https://novasamatech.github.io/test-runner/4780//#testresult/7e7ebe9238b326c6","status":"passed","time":{"start":1709064081659,"stop":1709064081689,"duration":30}},{"uid":"e647101817d6ef6","reportUrl":"https://novasamatech.github.io/test-runner/4779//#testresult/e647101817d6ef6","status":"passed","time":{"start":1709049673870,"stop":1709049673890,"duration":20}},{"uid":"c496f43fe0e8c9d3","reportUrl":"https://novasamatech.github.io/test-runner/4778//#testresult/c496f43fe0e8c9d3","status":"passed","time":{"start":1709035283552,"stop":1709035283571,"duration":19}},{"uid":"1af5ebf5203f4a42","reportUrl":"https://novasamatech.github.io/test-runner/4776//#testresult/1af5ebf5203f4a42","status":"passed","time":{"start":1709032484305,"stop":1709032484325,"duration":20}},{"uid":"33cdae2e9a0013ff","reportUrl":"https://novasamatech.github.io/test-runner/4703//#testresult/33cdae2e9a0013ff","status":"passed","time":{"start":1707984068763,"stop":1707984068798,"duration":35}},{"uid":"bd0f7fbbe500d4fa","reportUrl":"https://novasamatech.github.io/test-runner/4702//#testresult/bd0f7fbbe500d4fa","status":"passed","time":{"start":1707969675914,"stop":1707969675942,"duration":28}},{"uid":"6376ace14025df21","reportUrl":"https://novasamatech.github.io/test-runner/4701//#testresult/6376ace14025df21","status":"passed","time":{"start":1707955320417,"stop":1707955320446,"duration":29}},{"uid":"ef50b6b66d8d1be9","reportUrl":"https://novasamatech.github.io/test-runner/4700//#testresult/ef50b6b66d8d1be9","status":"passed","time":{"start":1707940880435,"stop":1707940880455,"duration":20}},{"uid":"1e338caa591c3246","reportUrl":"https://novasamatech.github.io/test-runner/4699//#testresult/1e338caa591c3246","status":"passed","time":{"start":1707926472953,"stop":1707926472985,"duration":32}},{"uid":"3bd61f8efa17de79","reportUrl":"https://novasamatech.github.io/test-runner/4698//#testresult/3bd61f8efa17de79","status":"passed","time":{"start":1707912081471,"stop":1707912081500,"duration":29}},{"uid":"c7a5004a474b817","reportUrl":"https://novasamatech.github.io/test-runner/4697//#testresult/c7a5004a474b817","status":"passed","time":{"start":1707897677619,"stop":1707897677649,"duration":30}}]},"tags":[]},"source":"4e9c03ae31fffd76.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f6b16776d70>"]}