{"uid":"d9a8b3a7e790caf7","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1709289992374,"stop":1709289992533,"duration":159},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7fd4431e9d80>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7fd440f831f0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7fd440f82aa0>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az651-899"},{"name":"thread","value":"2085-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"29ab4e43893be6ba","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709289987159,"stop":1709289987342,"duration":183}},{"uid":"ec6d0d407c908ea","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709289981892,"stop":1709289982053,"duration":161}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":15,"skipped":0,"passed":891,"unknown":0,"total":908},"items":[{"uid":"9a332e9433ad3c38","reportUrl":"https://novasamatech.github.io/test-runner/4789//#testresult/9a332e9433ad3c38","status":"passed","time":{"start":1709193661412,"stop":1709193662638,"duration":1226}},{"uid":"1240291e7a49a447","reportUrl":"https://novasamatech.github.io/test-runner/4788//#testresult/1240291e7a49a447","status":"passed","time":{"start":1709179266864,"stop":1709179268145,"duration":1281}},{"uid":"ae1bb214a12bc38f","reportUrl":"https://novasamatech.github.io/test-runner/4787//#testresult/ae1bb214a12bc38f","status":"passed","time":{"start":1709164905069,"stop":1709164906729,"duration":1660}},{"uid":"6fc84c38362ad725","reportUrl":"https://novasamatech.github.io/test-runner/4786//#testresult/6fc84c38362ad725","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709150491274,"stop":1709150491315,"duration":41}},{"uid":"a449e90d6c0bef3a","reportUrl":"https://novasamatech.github.io/test-runner/4785//#testresult/a449e90d6c0bef3a","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709136088237,"stop":1709136088292,"duration":55}},{"uid":"cd895a6680ba97d6","reportUrl":"https://novasamatech.github.io/test-runner/4784//#testresult/cd895a6680ba97d6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709121691361,"stop":1709121691522,"duration":161}},{"uid":"a74e39d18d77f662","reportUrl":"https://novasamatech.github.io/test-runner/4783//#testresult/a74e39d18d77f662","status":"passed","time":{"start":1709107267206,"stop":1709107268141,"duration":935}},{"uid":"b8d3b073d856eb31","reportUrl":"https://novasamatech.github.io/test-runner/4782//#testresult/b8d3b073d856eb31","status":"passed","time":{"start":1709092860794,"stop":1709092861843,"duration":1049}},{"uid":"560f7287c4f7fc6e","reportUrl":"https://novasamatech.github.io/test-runner/4781//#testresult/560f7287c4f7fc6e","status":"passed","time":{"start":1709078494156,"stop":1709078494862,"duration":706}},{"uid":"70add08db43097a7","reportUrl":"https://novasamatech.github.io/test-runner/4780//#testresult/70add08db43097a7","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709064076939,"stop":1709064077294,"duration":355}},{"uid":"fe1fa13638738bed","reportUrl":"https://novasamatech.github.io/test-runner/4779//#testresult/fe1fa13638738bed","status":"passed","time":{"start":1709049669302,"stop":1709049670084,"duration":782}},{"uid":"37edaf4af8151ad6","reportUrl":"https://novasamatech.github.io/test-runner/4778//#testresult/37edaf4af8151ad6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1709035295994,"stop":1709035296046,"duration":52}},{"uid":"8ebd97ff9ffdaa0","reportUrl":"https://novasamatech.github.io/test-runner/4776//#testresult/8ebd97ff9ffdaa0","status":"passed","time":{"start":1709032476556,"stop":1709032477513,"duration":957}},{"uid":"3aa11f24843a590","reportUrl":"https://novasamatech.github.io/test-runner/4703//#testresult/3aa11f24843a590","status":"passed","time":{"start":1707984058311,"stop":1707984059492,"duration":1181}},{"uid":"1841ffc8e4253d56","reportUrl":"https://novasamatech.github.io/test-runner/4702//#testresult/1841ffc8e4253d56","status":"passed","time":{"start":1707969666051,"stop":1707969667447,"duration":1396}},{"uid":"4a827131c723ff0a","reportUrl":"https://novasamatech.github.io/test-runner/4701//#testresult/4a827131c723ff0a","status":"passed","time":{"start":1707955311652,"stop":1707955312849,"duration":1197}},{"uid":"8209e450cae1d145","reportUrl":"https://novasamatech.github.io/test-runner/4700//#testresult/8209e450cae1d145","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707940871277,"stop":1707940871324,"duration":47}},{"uid":"61e2c0bd6411912e","reportUrl":"https://novasamatech.github.io/test-runner/4699//#testresult/61e2c0bd6411912e","status":"passed","time":{"start":1707926463688,"stop":1707926465947,"duration":2259}},{"uid":"389782810d18ff44","reportUrl":"https://novasamatech.github.io/test-runner/4698//#testresult/389782810d18ff44","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1707912089840,"stop":1707912089956,"duration":116}},{"uid":"c7401f5b609cc947","reportUrl":"https://novasamatech.github.io/test-runner/4697//#testresult/c7401f5b609cc947","status":"passed","time":{"start":1707897671407,"stop":1707897672187,"duration":780}}]},"tags":[]},"source":"d9a8b3a7e790caf7.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}