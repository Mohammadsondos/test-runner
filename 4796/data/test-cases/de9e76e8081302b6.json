{"uid":"de9e76e8081302b6","name":"test_has_new_assets[Test for Karura]","fullName":"tests.test_check_new_assets.TestAssets#test_has_new_assets","historyId":"542add1edc8e11ecaf0268a3083bd9e1","time":{"start":1709290063698,"stop":1709290063774,"duration":76},"status":"failed","statusMessage":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: KUSD\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","statusTrace":"self = <tests.test_check_new_assets.TestAssets object at 0x7f995ed737c0>\nchain_model = <scripts.utils.chain_model.Chain object at 0x7f995ef5aa70>\n\n    def test_has_new_assets(self, chain_model: Chain):\n    \n        chain_assets = {asset['symbol'].upper(\n        ): '' for asset in chain_model.assets}\n        chain_assets.update(self.asset_mapping)\n    \n        if chain_model.name in self.exclusions:\n            chain_assets.update(\n                {ex_asset: '' for ex_asset in self.exclusions[chain_model.name]})\n        symbols = chain_model.substrate.token_symbol if isinstance(chain_model.substrate.token_symbol, list) else [\n            chain_model.properties.symbol]\n    \n        for symbol in symbols:\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n                                  \"new token to add: \" + symbol)\n    \n>       delayed_assert.assert_expectations()\n\ntests/test_check_new_assets.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001B[93m\nE           \nE           assert_expectations() called at\u001B[0m\nE           \u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\nE           \nE           \u001B[91m\u001B[4mFailed Expectations : 1\nE           \u001B[0m\nE           1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\nE           \t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: KUSD\u001B[0m\nE                       delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),\n\n.venv/lib/python3.10/site-packages/delayed_assert/delayed_assert.py:74: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"chain_model","time":{"start":1709290050838,"stop":1709290053533,"duration":2695},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_check_new_assets"},{"name":"subSuite","value":"TestAssets"},{"name":"host","value":"fv-az1200-26"},{"name":"thread","value":"2387-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_check_new_assets"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain_model","value":"<scripts.utils.chain_model.Chain object at 0x7f995ef5aa70>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8f1f6b11058095fe","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: KUSD\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1709290058602,"stop":1709290058685,"duration":83}},{"uid":"bc374c26fea8a71a","status":"failed","statusDetails":"AssertionError: \u001B[93m\n\nassert_expectations() called at\u001B[0m\n\u001B[4m\u001B[94m\"/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:33\"\u001B[0m\u001B[93m in test_has_new_assets()\n\n\u001B[91m\u001B[4mFailed Expectations : 1\n\u001B[0m\n1: \u001B[91mFailed at \"\u001B[0m\u001B[94m\u001B[4m/home/runner/work/test-runner/test-runner/nova-utils/tests/test_check_new_assets.py:30\u001B[0m\u001B[91m\", in test_has_new_assets()\n\t\u001B[1m\u001B[4mErrorMessage:\u001B[0m\u001B[91m\tnew token to add: KUSD\u001B[0m\n            delayed_assert.expect(symbol.upper() in chain_assets.keys() or symbol.upper() in chain_assets.values(),","time":{"start":1709290053534,"stop":1709290053592,"duration":58}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":21,"skipped":0,"passed":885,"unknown":0,"total":907},"items":[{"uid":"2e08adda0495dd58","reportUrl":"https://novasamatech.github.io/test-runner/4789//#testresult/2e08adda0495dd58","status":"passed","time":{"start":1709193680255,"stop":1709193680317,"duration":62}},{"uid":"b7871c3071deca85","reportUrl":"https://novasamatech.github.io/test-runner/4788//#testresult/b7871c3071deca85","status":"passed","time":{"start":1709179286939,"stop":1709179287004,"duration":65}},{"uid":"9e6db2a37c52903f","reportUrl":"https://novasamatech.github.io/test-runner/4787//#testresult/9e6db2a37c52903f","status":"passed","time":{"start":1709164932181,"stop":1709164932235,"duration":54}},{"uid":"82471e52a5d57f39","reportUrl":"https://novasamatech.github.io/test-runner/4786//#testresult/82471e52a5d57f39","status":"passed","time":{"start":1709150495902,"stop":1709150495950,"duration":48}},{"uid":"bfb7fd8db639d589","reportUrl":"https://novasamatech.github.io/test-runner/4785//#testresult/bfb7fd8db639d589","status":"passed","time":{"start":1709136092935,"stop":1709136092984,"duration":49}},{"uid":"b3f9d5df47f7ed23","reportUrl":"https://novasamatech.github.io/test-runner/4784//#testresult/b3f9d5df47f7ed23","status":"passed","time":{"start":1709121702244,"stop":1709121702329,"duration":85}},{"uid":"d8eee554bc1b76a2","reportUrl":"https://novasamatech.github.io/test-runner/4783//#testresult/d8eee554bc1b76a2","status":"passed","time":{"start":1709107296480,"stop":1709107296565,"duration":85}},{"uid":"bfa9a4f5473680eb","reportUrl":"https://novasamatech.github.io/test-runner/4782//#testresult/bfa9a4f5473680eb","status":"passed","time":{"start":1709092875302,"stop":1709092875385,"duration":83}},{"uid":"69a051eb61de07c4","reportUrl":"https://novasamatech.github.io/test-runner/4781//#testresult/69a051eb61de07c4","status":"passed","time":{"start":1709078510007,"stop":1709078510061,"duration":54}},{"uid":"3e51286e01414abf","reportUrl":"https://novasamatech.github.io/test-runner/4780//#testresult/3e51286e01414abf","status":"passed","time":{"start":1709064101418,"stop":1709064101492,"duration":74}},{"uid":"87188e334eca3b45","reportUrl":"https://novasamatech.github.io/test-runner/4779//#testresult/87188e334eca3b45","status":"passed","time":{"start":1709049696222,"stop":1709049696323,"duration":101}},{"uid":"4e07b1df14ad279f","reportUrl":"https://novasamatech.github.io/test-runner/4778//#testresult/4e07b1df14ad279f","status":"passed","time":{"start":1709035293692,"stop":1709035293741,"duration":49}},{"uid":"b33806b945a9c21f","reportUrl":"https://novasamatech.github.io/test-runner/4776//#testresult/b33806b945a9c21f","status":"passed","time":{"start":1709032496370,"stop":1709032496420,"duration":50}},{"uid":"37c7290dffa87c47","reportUrl":"https://novasamatech.github.io/test-runner/4703//#testresult/37c7290dffa87c47","status":"passed","time":{"start":1707984075811,"stop":1707984075883,"duration":72}},{"uid":"3e20f352cc72ef28","reportUrl":"https://novasamatech.github.io/test-runner/4702//#testresult/3e20f352cc72ef28","status":"passed","time":{"start":1707969722556,"stop":1707969722605,"duration":49}},{"uid":"649c4d0311147f6f","reportUrl":"https://novasamatech.github.io/test-runner/4701//#testresult/649c4d0311147f6f","status":"passed","time":{"start":1707955329329,"stop":1707955329413,"duration":84}},{"uid":"8ebcf778dda880b2","reportUrl":"https://novasamatech.github.io/test-runner/4700//#testresult/8ebcf778dda880b2","status":"passed","time":{"start":1707940887907,"stop":1707940887972,"duration":65}},{"uid":"5cb98001107a7aaa","reportUrl":"https://novasamatech.github.io/test-runner/4699//#testresult/5cb98001107a7aaa","status":"passed","time":{"start":1707926479032,"stop":1707926479086,"duration":54}},{"uid":"1467ffa768f80d0b","reportUrl":"https://novasamatech.github.io/test-runner/4698//#testresult/1467ffa768f80d0b","status":"passed","time":{"start":1707912089333,"stop":1707912089382,"duration":49}},{"uid":"82c1b039e2bcbe3c","reportUrl":"https://novasamatech.github.io/test-runner/4697//#testresult/82c1b039e2bcbe3c","status":"passed","time":{"start":1707897688256,"stop":1707897688345,"duration":89}}]},"tags":[]},"source":"de9e76e8081302b6.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7f995ef5aa70>"]}