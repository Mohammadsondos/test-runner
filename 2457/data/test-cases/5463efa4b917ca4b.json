{"uid":"5463efa4b917ca4b","name":"test_can_create_connection[Test for XX network, url: wss://rpc.xx.network]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a8e1ede01a7872066249898c0020cb55","time":{"start":1676348302622,"stop":1676348303265,"duration":643},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'XX network', 'url': 'wss://rpc.xx.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'XX network', 'url': 'wss://rpc.xx.network'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"608ebc22e6f55073","name":"stdout","source":"608ebc22e6f55073.txt","type":"text/plain","size":208}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az432-683"},{"name":"thread","value":"1682-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.xx.network', 'name': 'XX network'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e56d8ec14ccb75bd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676348291856,"stop":1676348292549,"duration":693}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":57,"skipped":0,"passed":401,"unknown":0,"total":458},"items":[{"uid":"fd218acb896c71ec","reportUrl":"https://nova-wallet.github.io/test-runner/2456//#testresult/fd218acb896c71ec","status":"passed","time":{"start":1676337107756,"stop":1676337108546,"duration":790}},{"uid":"8a33580015a194cf","reportUrl":"https://nova-wallet.github.io/test-runner/2455//#testresult/8a33580015a194cf","status":"passed","time":{"start":1676319365956,"stop":1676319366468,"duration":512}},{"uid":"2f96f0108cef6edb","reportUrl":"https://nova-wallet.github.io/test-runner/2454//#testresult/2f96f0108cef6edb","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676305255529,"stop":1676305256270,"duration":741}},{"uid":"6f028f5e83d8c153","reportUrl":"https://nova-wallet.github.io/test-runner/2453//#testresult/6f028f5e83d8c153","status":"passed","time":{"start":1676291324531,"stop":1676291325454,"duration":923}},{"uid":"58602184e58abac7","reportUrl":"https://nova-wallet.github.io/test-runner/2452//#testresult/58602184e58abac7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1676276389374,"stop":1676276390057,"duration":683}},{"uid":"8cdd8345f6d29737","reportUrl":"https://nova-wallet.github.io/test-runner/2451//#testresult/8cdd8345f6d29737","status":"passed","time":{"start":1676261887776,"stop":1676261888307,"duration":531}},{"uid":"2f5834e52ade6cc0","reportUrl":"https://nova-wallet.github.io/test-runner/2450//#testresult/2f5834e52ade6cc0","status":"passed","time":{"start":1676250688715,"stop":1676250689321,"duration":606}},{"uid":"ed8755a9aa59a2a4","reportUrl":"https://nova-wallet.github.io/test-runner/2449//#testresult/ed8755a9aa59a2a4","status":"passed","time":{"start":1676232888082,"stop":1676232888810,"duration":728}},{"uid":"5587b62ed9af6109","reportUrl":"https://nova-wallet.github.io/test-runner/2448//#testresult/5587b62ed9af6109","status":"passed","time":{"start":1676218671879,"stop":1676218673177,"duration":1298}},{"uid":"64c3942f9679c7e0","reportUrl":"https://nova-wallet.github.io/test-runner/2447//#testresult/64c3942f9679c7e0","status":"passed","time":{"start":1676204739046,"stop":1676204739524,"duration":478}},{"uid":"675aa148110c4df0","reportUrl":"https://nova-wallet.github.io/test-runner/2446//#testresult/675aa148110c4df0","status":"passed","time":{"start":1676189841484,"stop":1676189842297,"duration":813}},{"uid":"b7e6c7bfda9c0cc2","reportUrl":"https://nova-wallet.github.io/test-runner/2445//#testresult/b7e6c7bfda9c0cc2","status":"passed","time":{"start":1676175408762,"stop":1676175409294,"duration":532}},{"uid":"49b9fc3e0edd5903","reportUrl":"https://nova-wallet.github.io/test-runner/2444//#testresult/49b9fc3e0edd5903","status":"passed","time":{"start":1676164436966,"stop":1676164437643,"duration":677}},{"uid":"27d4cc4fb2971040","reportUrl":"https://nova-wallet.github.io/test-runner/2443//#testresult/27d4cc4fb2971040","status":"passed","time":{"start":1676146473490,"stop":1676146474608,"duration":1118}},{"uid":"37dbc374d53c8054","reportUrl":"https://nova-wallet.github.io/test-runner/2442//#testresult/37dbc374d53c8054","status":"passed","time":{"start":1676132283675,"stop":1676132285098,"duration":1423}},{"uid":"f2cfa23d3ec128dd","reportUrl":"https://nova-wallet.github.io/test-runner/2441//#testresult/f2cfa23d3ec128dd","status":"passed","time":{"start":1676118283655,"stop":1676118285919,"duration":2264}},{"uid":"584da54c4f7b0ecd","reportUrl":"https://nova-wallet.github.io/test-runner/2440//#testresult/584da54c4f7b0ecd","status":"passed","time":{"start":1676103479039,"stop":1676103479659,"duration":620}},{"uid":"108931e411ca0794","reportUrl":"https://nova-wallet.github.io/test-runner/2439//#testresult/108931e411ca0794","status":"passed","time":{"start":1676089041448,"stop":1676089044507,"duration":3059}},{"uid":"6a9807dbd064d4a3","reportUrl":"https://nova-wallet.github.io/test-runner/2438//#testresult/6a9807dbd064d4a3","status":"passed","time":{"start":1676077446401,"stop":1676077446958,"duration":557}},{"uid":"55300f4cfea79fba","reportUrl":"https://nova-wallet.github.io/test-runner/2437//#testresult/55300f4cfea79fba","status":"passed","time":{"start":1676060141253,"stop":1676060141827,"duration":574}}]},"tags":[]},"source":"5463efa4b917ca4b.json","parameterValues":["{'url': 'wss://rpc.xx.network', 'name': 'XX network'}"]}