{"uid":"e2d84ead88642704","name":"test_can_create_connection[Test for Kusama, url: wss://rpc.dotters.network/kusama]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"0a4dd30550ca0bf9ff1d585c69bb9df5","time":{"start":1694073790345,"stop":1694073815494,"duration":25149},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://rpc.dotters.network/kusama'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://rpc.dotters.network/kusama'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"e72a1272ef8811fe","name":"stdout","source":"e72a1272ef8811fe.txt","type":"text/plain","size":1002}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az247-115"},{"name":"thread","value":"2052-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.dotters.network/kusama', 'name': 'Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"dcbd14baa3332436","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694073750006,"stop":1694073775230,"duration":25224}},{"uid":"10dd464309c6f2c9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Unavailable -+-+- {'content-length': '107', 'cache-control': 'no-cache', 'content-type': 'text/html'} -+-+- b'<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'","time":{"start":1694073709668,"stop":1694073734830,"duration":25162}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":83,"unknown":0,"total":84},"items":[{"uid":"249473672dc03473","reportUrl":"https://novasamatech.github.io/test-runner/3722//#testresult/249473672dc03473","status":"passed","time":{"start":1694059292290,"stop":1694059292537,"duration":247}},{"uid":"4714a84f6294debf","reportUrl":"https://novasamatech.github.io/test-runner/3721//#testresult/4714a84f6294debf","status":"passed","time":{"start":1694044921103,"stop":1694044921429,"duration":326}},{"uid":"3788704e7617a6f8","reportUrl":"https://novasamatech.github.io/test-runner/3720//#testresult/3788704e7617a6f8","status":"passed","time":{"start":1694030474039,"stop":1694030474692,"duration":653}},{"uid":"176866858792f3af","reportUrl":"https://novasamatech.github.io/test-runner/3719//#testresult/176866858792f3af","status":"passed","time":{"start":1694016083104,"stop":1694016083490,"duration":386}},{"uid":"1d1837eddcafb5b3","reportUrl":"https://novasamatech.github.io/test-runner/3718//#testresult/1d1837eddcafb5b3","status":"passed","time":{"start":1694001693574,"stop":1694001693855,"duration":281}},{"uid":"d32b74a2646027df","reportUrl":"https://novasamatech.github.io/test-runner/3717//#testresult/d32b74a2646027df","status":"passed","time":{"start":1693987284898,"stop":1693987285070,"duration":172}},{"uid":"ac6be8f22c740ed8","reportUrl":"https://novasamatech.github.io/test-runner/3716//#testresult/ac6be8f22c740ed8","status":"passed","time":{"start":1693972877483,"stop":1693972877918,"duration":435}},{"uid":"32caabcb27462369","reportUrl":"https://novasamatech.github.io/test-runner/3715//#testresult/32caabcb27462369","status":"passed","time":{"start":1693958536215,"stop":1693958536422,"duration":207}},{"uid":"328b50c05806cc7f","reportUrl":"https://novasamatech.github.io/test-runner/3714//#testresult/328b50c05806cc7f","status":"passed","time":{"start":1693944085336,"stop":1693944085389,"duration":53}},{"uid":"ac954776262f93a3","reportUrl":"https://novasamatech.github.io/test-runner/3713//#testresult/ac954776262f93a3","status":"passed","time":{"start":1693929679065,"stop":1693929679180,"duration":115}},{"uid":"2a1bc51fa02e07d6","reportUrl":"https://novasamatech.github.io/test-runner/3712//#testresult/2a1bc51fa02e07d6","status":"passed","time":{"start":1693915297213,"stop":1693915297549,"duration":336}},{"uid":"56740ae054c9a002","reportUrl":"https://novasamatech.github.io/test-runner/3711//#testresult/56740ae054c9a002","status":"passed","time":{"start":1693900896026,"stop":1693900896365,"duration":339}},{"uid":"f1b2e631030f79d5","reportUrl":"https://novasamatech.github.io/test-runner/3709//#testresult/f1b2e631030f79d5","status":"passed","time":{"start":1693872127278,"stop":1693872127481,"duration":203}},{"uid":"959a1971708094c4","reportUrl":"https://novasamatech.github.io/test-runner/3708//#testresult/959a1971708094c4","status":"passed","time":{"start":1693857681884,"stop":1693857682001,"duration":117}},{"uid":"b26454d060921830","reportUrl":"https://novasamatech.github.io/test-runner/3707//#testresult/b26454d060921830","status":"passed","time":{"start":1693843282371,"stop":1693843282594,"duration":223}},{"uid":"32941fd6995c381d","reportUrl":"https://novasamatech.github.io/test-runner/3706//#testresult/32941fd6995c381d","status":"passed","time":{"start":1693828886066,"stop":1693828886300,"duration":234}},{"uid":"5a3b5c7055d62cc9","reportUrl":"https://novasamatech.github.io/test-runner/3705//#testresult/5a3b5c7055d62cc9","status":"passed","time":{"start":1693814496281,"stop":1693814496587,"duration":306}},{"uid":"6589c124f1b34958","reportUrl":"https://novasamatech.github.io/test-runner/3704//#testresult/6589c124f1b34958","status":"passed","time":{"start":1693800080079,"stop":1693800080405,"duration":326}},{"uid":"68af6b122cd50b03","reportUrl":"https://novasamatech.github.io/test-runner/3703//#testresult/68af6b122cd50b03","status":"passed","time":{"start":1693785734210,"stop":1693785734623,"duration":413}},{"uid":"fd317adf60187eab","reportUrl":"https://novasamatech.github.io/test-runner/3702//#testresult/fd317adf60187eab","status":"passed","time":{"start":1693771289627,"stop":1693771290009,"duration":382}}]},"tags":[]},"source":"e2d84ead88642704.json","parameterValues":["{'url': 'wss://rpc.dotters.network/kusama', 'name': 'Kusama'}"]}