{"uid":"1cb93defc2bab87e","name":"test_can_create_connection[Test for Bajun, url: wss://bajun-rpc.dwellir.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a5cb130d4855955de1f8471d809aaa41","time":{"start":1677528303262,"stop":1677528303331,"duration":69},"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'bajun-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7effbf445750>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'bajun-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Bajun', 'url': 'wss://bajun-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'bajun-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7effbf445750>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","statusTrace":"hostname = 'bajun-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7effbf445750>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n>               addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhost = 'bajun-rpc.dwellir.com', port = 443, family = 0\ntype = <SocketKind.SOCK_STREAM: 1>, proto = 6, flags = 0\n\n    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n        \"\"\"Resolve host and port into list of address info entries.\n    \n        Translate the host/port argument into a sequence of 5-tuples that contain\n        all the necessary arguments for creating a socket connected to that service.\n        host is a domain name, a string representation of an IPv4/v6 address or\n        None. port is a string service name such as 'http', a numeric port number or\n        None. By passing None as the value of host and port, you can pass NULL to\n        the underlying C API.\n    \n        The family, type and proto arguments can be optionally specified in order to\n        narrow the list of addresses returned. Passing zero as a value for each of\n        these arguments selects the full range of results.\n        \"\"\"\n        # We override this function since we want to translate the numeric family\n        # and socket type values to enum constants.\n        addrlist = []\n>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE       socket.gaierror: [Errno -2] Name or service not known\n\n/usr/lib/python3.10/socket.py:955: gaierror\n\nDuring handling of the above exception, another exception occurred:\n\ndata = {'name': 'Bajun', 'url': 'wss://bajun-rpc.dwellir.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:249: in connect\n    self.sock, addrs = connect(url, self.sock_opt, proxy_info(**options),\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:122: in connect\n    addrinfo_list, need_tunnel, auth = _get_addrinfo_list(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhostname = 'bajun-rpc.dwellir.com', port = 443, is_secure = True\nproxy = <websocket._http.proxy_info object at 0x7effbf445750>\n\n    def _get_addrinfo_list(hostname, port, is_secure, proxy):\n        phost, pport, pauth = get_proxy_info(\n            hostname, is_secure, proxy.proxy_host, proxy.proxy_port, proxy.auth, proxy.no_proxy)\n        try:\n            # when running on windows 10, getaddrinfo without socktype returns a socktype 0.\n            # This generates an error exception: `_on_error: exception Socket type must be stream or datagram, not 0`\n            # or `OSError: [Errno 22] Invalid argument` when creating socket. Force the socket type to SOCK_STREAM.\n            if not phost:\n                addrinfo_list = socket.getaddrinfo(\n                    hostname, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, False, None\n            else:\n                pport = pport and pport or 80\n                # when running on windows 10, the getaddrinfo used above\n                # returns a socktype 0. This generates an error exception:\n                # _on_error: exception Socket type must be stream or datagram, not 0\n                # Force the socket type to SOCK_STREAM\n                addrinfo_list = socket.getaddrinfo(phost, pport, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n                return addrinfo_list, True, pauth\n        except socket.gaierror as e:\n>           raise WebSocketAddressException(e)\nE           websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known\n\n../../../../.local/lib/python3.10/site-packages/websocket/_http.py:167: WebSocketAddressException","steps":[],"attachments":[{"uid":"f24c343cac4e56a7","name":"stdout","source":"f24c343cac4e56a7.txt","type":"text/plain","size":230}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az267-724"},{"name":"thread","value":"1758-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://bajun-rpc.dwellir.com', 'name': 'Bajun'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"25d366ecd03eb320","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677528293023,"stop":1677528293111,"duration":88}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":123,"skipped":0,"passed":659,"unknown":0,"total":782},"items":[{"uid":"dba23accbb2db9b8","reportUrl":"https://nova-wallet.github.io/test-runner/2544//#testresult/dba23accbb2db9b8","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677513892749,"stop":1677513892793,"duration":44}},{"uid":"22b200a87937b044","reportUrl":"https://nova-wallet.github.io/test-runner/2543//#testresult/22b200a87937b044","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677499601392,"stop":1677499601404,"duration":12}},{"uid":"e529c45c11fe0265","reportUrl":"https://nova-wallet.github.io/test-runner/2542//#testresult/e529c45c11fe0265","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677485128930,"stop":1677485128977,"duration":47}},{"uid":"f793a4c40acc6ddc","reportUrl":"https://nova-wallet.github.io/test-runner/2541//#testresult/f793a4c40acc6ddc","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677470713514,"stop":1677470713589,"duration":75}},{"uid":"41a419e373f6b756","reportUrl":"https://nova-wallet.github.io/test-runner/2540//#testresult/41a419e373f6b756","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677456916933,"stop":1677456916995,"duration":62}},{"uid":"bbc555c3d75c8435","reportUrl":"https://nova-wallet.github.io/test-runner/2539//#testresult/bbc555c3d75c8435","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677441894484,"stop":1677441894521,"duration":37}},{"uid":"b3002e5d3e86584a","reportUrl":"https://nova-wallet.github.io/test-runner/2538//#testresult/b3002e5d3e86584a","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677427489858,"stop":1677427489960,"duration":102}},{"uid":"6a7ba287828bd302","reportUrl":"https://nova-wallet.github.io/test-runner/2537//#testresult/6a7ba287828bd302","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677413141868,"stop":1677413141950,"duration":82}},{"uid":"2d8a4e64188fbf1c","reportUrl":"https://nova-wallet.github.io/test-runner/2536//#testresult/2d8a4e64188fbf1c","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677398709642,"stop":1677398709702,"duration":60}},{"uid":"f1550a66fa6b1782","reportUrl":"https://nova-wallet.github.io/test-runner/2535//#testresult/f1550a66fa6b1782","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677384292550,"stop":1677384292612,"duration":62}},{"uid":"994badeb4d386d0e","reportUrl":"https://nova-wallet.github.io/test-runner/2534//#testresult/994badeb4d386d0e","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677370593403,"stop":1677370593436,"duration":33}},{"uid":"3a68e759e290eaf1","reportUrl":"https://nova-wallet.github.io/test-runner/2533//#testresult/3a68e759e290eaf1","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677355466841,"stop":1677355466934,"duration":93}},{"uid":"ee5f74ad7769bf15","reportUrl":"https://nova-wallet.github.io/test-runner/2532//#testresult/ee5f74ad7769bf15","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677341069379,"stop":1677341069454,"duration":75}},{"uid":"208a58e1d7f169af","reportUrl":"https://nova-wallet.github.io/test-runner/2531//#testresult/208a58e1d7f169af","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677326733544,"stop":1677326733590,"duration":46}},{"uid":"9559a62aad33d086","reportUrl":"https://nova-wallet.github.io/test-runner/2530//#testresult/9559a62aad33d086","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677312314524,"stop":1677312314600,"duration":76}},{"uid":"78da7bfda5420649","reportUrl":"https://nova-wallet.github.io/test-runner/2529//#testresult/78da7bfda5420649","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677297880997,"stop":1677297881091,"duration":94}},{"uid":"653aa12e73135329","reportUrl":"https://nova-wallet.github.io/test-runner/2528//#testresult/653aa12e73135329","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677284111466,"stop":1677284111526,"duration":60}},{"uid":"10571ed1074bc1a7","reportUrl":"https://nova-wallet.github.io/test-runner/2527//#testresult/10571ed1074bc1a7","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677269093339,"stop":1677269093350,"duration":11}},{"uid":"77ba5dc74210f817","reportUrl":"https://nova-wallet.github.io/test-runner/2526//#testresult/77ba5dc74210f817","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677254691748,"stop":1677254691826,"duration":78}},{"uid":"499829aa008f8c5","reportUrl":"https://nova-wallet.github.io/test-runner/2525//#testresult/499829aa008f8c5","status":"broken","statusDetails":"websocket._exceptions.WebSocketAddressException: [Errno -2] Name or service not known","time":{"start":1677240374358,"stop":1677240374406,"duration":48}}]},"tags":[]},"source":"1cb93defc2bab87e.json","parameterValues":["{'url': 'wss://bajun-rpc.dwellir.com', 'name': 'Bajun'}"]}