{"uid":"376abb820c9cdb6a","name":"test_can_create_connection[Test for Altair, url: wss://altair.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"21accf31cfdd1e2d64086949e5ee4c2e","time":{"start":1698436956198,"stop":1698436956897,"duration":699},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:36 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Altair', 'url': 'wss://altair.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:36 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:36 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Altair', 'url': 'wss://altair.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:36 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b70153d909813427","name":"stdout","source":"b70153d909813427.txt","type":"text/plain","size":1377}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2104-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://altair.api.onfinality.io/public-ws', 'name': 'Altair'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2fb49bfec8c57db1","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:20 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436940403,"stop":1698436941100,"duration":697}},{"uid":"cde18302ed5376dd","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:05 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436924591,"stop":1698436925318,"duration":727}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":387,"unknown":0,"total":389},"items":[{"uid":"7df3921cec453962","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/7df3921cec453962","status":"passed","time":{"start":1698422489936,"stop":1698422490665,"duration":729}},{"uid":"9a52e65cb9424fed","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/9a52e65cb9424fed","status":"passed","time":{"start":1698408098214,"stop":1698408098966,"duration":752}},{"uid":"d6d7d97bd2363fca","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/d6d7d97bd2363fca","status":"passed","time":{"start":1698393722697,"stop":1698393723421,"duration":724}},{"uid":"8334135c205ac96f","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/8334135c205ac96f","status":"passed","time":{"start":1698379280419,"stop":1698379281166,"duration":747}},{"uid":"fb8cada5949f82f0","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/fb8cada5949f82f0","status":"passed","time":{"start":1698364930590,"stop":1698364931504,"duration":914}},{"uid":"37c81ec88cd5f112","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/37c81ec88cd5f112","status":"passed","time":{"start":1698350488821,"stop":1698350489651,"duration":830}},{"uid":"f858d1d0e36de13b","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/f858d1d0e36de13b","status":"passed","time":{"start":1698336084958,"stop":1698336085911,"duration":953}},{"uid":"ad4bfa3e62caa1a1","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/ad4bfa3e62caa1a1","status":"passed","time":{"start":1698321720080,"stop":1698321720927,"duration":847}},{"uid":"928832cc39512837","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/928832cc39512837","status":"passed","time":{"start":1698307287961,"stop":1698307288702,"duration":741}},{"uid":"cbc5c4a3591454ad","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/cbc5c4a3591454ad","status":"passed","time":{"start":1698292894209,"stop":1698292895119,"duration":910}},{"uid":"47cab8babc9a493e","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/47cab8babc9a493e","status":"passed","time":{"start":1698278519689,"stop":1698278520592,"duration":903}},{"uid":"2c83dd3a4b16de5e","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/2c83dd3a4b16de5e","status":"passed","time":{"start":1698264086044,"stop":1698264086973,"duration":929}},{"uid":"c953022b7a656f14","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/c953022b7a656f14","status":"passed","time":{"start":1698249689621,"stop":1698249690564,"duration":943}},{"uid":"a134840bb3ba3ff0","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/a134840bb3ba3ff0","status":"passed","time":{"start":1698235289267,"stop":1698235290204,"duration":937}},{"uid":"fd2ae34352d6544d","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/fd2ae34352d6544d","status":"passed","time":{"start":1698220895627,"stop":1698220896496,"duration":869}},{"uid":"4d4a5242382220dc","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/4d4a5242382220dc","status":"passed","time":{"start":1698206551757,"stop":1698206552689,"duration":932}},{"uid":"68dad362549d103b","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/68dad362549d103b","status":"passed","time":{"start":1698192140561,"stop":1698192141312,"duration":751}},{"uid":"8c0a56ddfc00ff9d","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/8c0a56ddfc00ff9d","status":"passed","time":{"start":1698177680058,"stop":1698177680794,"duration":736}},{"uid":"3490675361f89102","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/3490675361f89102","status":"passed","time":{"start":1698163293799,"stop":1698163294739,"duration":940}},{"uid":"a591b1ff81b502ee","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/a591b1ff81b502ee","status":"passed","time":{"start":1698149066063,"stop":1698149067044,"duration":981}}]},"tags":[]},"source":"376abb820c9cdb6a.json","parameterValues":["{'url': 'wss://altair.api.onfinality.io/public-ws', 'name': 'Altair'}"]}