{"uid":"194d9c3e52075e74","name":"test_can_create_connection[Test for Moonriver, url: wss://moonriver.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"90ea9856c4c0a688d86ac22df2f1ecd3","time":{"start":1698436905130,"stop":1698436905827,"duration":697},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:45 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Moonriver', 'url': 'wss://moonriver.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:45 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:45 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Moonriver', 'url': 'wss://moonriver.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:45 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"eacd8937d553951b","name":"stdout","source":"eacd8937d553951b.txt","type":"text/plain","size":1386}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2110-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://moonriver.api.onfinality.io/public-ws', 'name': 'Moonriver'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a8bafca69197c90c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:29 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436889341,"stop":1698436890043,"duration":702}},{"uid":"50ae61abb57ba651","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:14 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436873410,"stop":1698436874129,"duration":719}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":388,"unknown":0,"total":389},"items":[{"uid":"2f264013936019f2","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/2f264013936019f2","status":"passed","time":{"start":1698422484778,"stop":1698422485550,"duration":772}},{"uid":"59ab02ae5c38645","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/59ab02ae5c38645","status":"passed","time":{"start":1698408077127,"stop":1698408077877,"duration":750}},{"uid":"89553b307daaed15","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/89553b307daaed15","status":"passed","time":{"start":1698393685159,"stop":1698393685919,"duration":760}},{"uid":"cacb4b3bff822670","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/cacb4b3bff822670","status":"passed","time":{"start":1698379283808,"stop":1698379284566,"duration":758}},{"uid":"c74f4a3bc0b8a7a9","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/c74f4a3bc0b8a7a9","status":"passed","time":{"start":1698364927666,"stop":1698364928586,"duration":920}},{"uid":"9444c9a678f3a251","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/9444c9a678f3a251","status":"passed","time":{"start":1698350484170,"stop":1698350485130,"duration":960}},{"uid":"e2a5657149100bda","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/e2a5657149100bda","status":"passed","time":{"start":1698336076342,"stop":1698336077417,"duration":1075}},{"uid":"9ba0c3b9e18543f9","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/9ba0c3b9e18543f9","status":"passed","time":{"start":1698321684035,"stop":1698321684949,"duration":914}},{"uid":"fc3011792d1c2c2","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/fc3011792d1c2c2","status":"passed","time":{"start":1698307281501,"stop":1698307282233,"duration":732}},{"uid":"b8954ead40c9bb9f","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/b8954ead40c9bb9f","status":"passed","time":{"start":1698292874370,"stop":1698292875286,"duration":916}},{"uid":"3587a2c8f94106cc","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/3587a2c8f94106cc","status":"passed","time":{"start":1698278515578,"stop":1698278516512,"duration":934}},{"uid":"ee66bdbaad269155","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/ee66bdbaad269155","status":"passed","time":{"start":1698264078344,"stop":1698264080196,"duration":1852}},{"uid":"f72a2572fc1c102f","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/f72a2572fc1c102f","status":"passed","time":{"start":1698249684343,"stop":1698249685301,"duration":958}},{"uid":"a63bc24b88488716","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/a63bc24b88488716","status":"passed","time":{"start":1698235284916,"stop":1698235285863,"duration":947}},{"uid":"829ecc0a3adf988b","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/829ecc0a3adf988b","status":"passed","time":{"start":1698220890822,"stop":1698220891702,"duration":880}},{"uid":"9911de55d22489ad","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/9911de55d22489ad","status":"passed","time":{"start":1698206471323,"stop":1698206472559,"duration":1236}},{"uid":"f9742727b31d259c","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/f9742727b31d259c","status":"passed","time":{"start":1698192119065,"stop":1698192120507,"duration":1442}},{"uid":"b24d0bdb852b4dbd","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/b24d0bdb852b4dbd","status":"passed","time":{"start":1698177674599,"stop":1698177675365,"duration":766}},{"uid":"855444b7dab6fbe2","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/855444b7dab6fbe2","status":"passed","time":{"start":1698163289432,"stop":1698163290375,"duration":943}},{"uid":"fb14dc89d38b5bd","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/fb14dc89d38b5bd","status":"passed","time":{"start":1698148878993,"stop":1698148879971,"duration":978}}]},"tags":[]},"source":"194d9c3e52075e74.json","parameterValues":["{'url': 'wss://moonriver.api.onfinality.io/public-ws', 'name': 'Moonriver'}"]}