{"uid":"cf6f3d63afab77c8","name":"test_can_create_connection[Test for Astar, url: wss://astar.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"bd64681ddad30b47989ce70556001afb","time":{"start":1698436912678,"stop":1698436913378,"duration":700},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:53 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Astar', 'url': 'wss://astar.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:53 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:53 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Astar', 'url': 'wss://astar.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:53 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"56186ff459b5a1f4","name":"stdout","source":"56186ff459b5a1f4.txt","type":"text/plain","size":1374}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://astar.api.onfinality.io/public-ws', 'name': 'Astar'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d0f75b65f0eedf59","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:37 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436896878,"stop":1698436897585,"duration":707}},{"uid":"885119a18795ed65","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:21 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436880779,"stop":1698436881725,"duration":946}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":388,"unknown":0,"total":389},"items":[{"uid":"a7603d1a6d3ea0a2","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/a7603d1a6d3ea0a2","status":"passed","time":{"start":1698422510673,"stop":1698422511394,"duration":721}},{"uid":"330f3d992523b3e0","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/330f3d992523b3e0","status":"passed","time":{"start":1698408116047,"stop":1698408116819,"duration":772}},{"uid":"c7cee4c20ae0efa5","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/c7cee4c20ae0efa5","status":"passed","time":{"start":1698393820485,"stop":1698393821218,"duration":733}},{"uid":"be91d795fc2b1dbe","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/be91d795fc2b1dbe","status":"passed","time":{"start":1698379284272,"stop":1698379285009,"duration":737}},{"uid":"6a95f55ed6337128","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/6a95f55ed6337128","status":"passed","time":{"start":1698364936923,"stop":1698364937840,"duration":917}},{"uid":"dd5bcee25bdbbced","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/dd5bcee25bdbbced","status":"passed","time":{"start":1698350585069,"stop":1698350585886,"duration":817}},{"uid":"9415206fc8f6c144","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/9415206fc8f6c144","status":"passed","time":{"start":1698336082083,"stop":1698336083064,"duration":981}},{"uid":"df4f1f6bf3720bf9","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/df4f1f6bf3720bf9","status":"passed","time":{"start":1698321724794,"stop":1698321725627,"duration":833}},{"uid":"9b89d693180218e0","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/9b89d693180218e0","status":"passed","time":{"start":1698307308947,"stop":1698307309909,"duration":962}},{"uid":"1248555274252634","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/1248555274252634","status":"passed","time":{"start":1698292896767,"stop":1698292897730,"duration":963}},{"uid":"b3689e1227e5d671","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/b3689e1227e5d671","status":"passed","time":{"start":1698278535827,"stop":1698278536749,"duration":922}},{"uid":"2b661ef91e6d02b6","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/2b661ef91e6d02b6","status":"passed","time":{"start":1698264082941,"stop":1698264083902,"duration":961}},{"uid":"9b11e4736340fe43","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/9b11e4736340fe43","status":"passed","time":{"start":1698249737505,"stop":1698249738539,"duration":1034}},{"uid":"e1d49bf59d43ab3b","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/e1d49bf59d43ab3b","status":"passed","time":{"start":1698235336930,"stop":1698235337890,"duration":960}},{"uid":"9df0a76eeb3abab7","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/9df0a76eeb3abab7","status":"passed","time":{"start":1698220919267,"stop":1698220920157,"duration":890}},{"uid":"df1e53abefb40cd","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/df1e53abefb40cd","status":"passed","time":{"start":1698206475929,"stop":1698206476854,"duration":925}},{"uid":"5ff36060f660efdc","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/5ff36060f660efdc","status":"passed","time":{"start":1698192312870,"stop":1698192313704,"duration":834}},{"uid":"afeecbcc32fff54e","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/afeecbcc32fff54e","status":"passed","time":{"start":1698177700184,"stop":1698177700936,"duration":752}},{"uid":"2864f4c2a85c2ec5","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/2864f4c2a85c2ec5","status":"passed","time":{"start":1698163324916,"stop":1698163325901,"duration":985}},{"uid":"495972f5b5839c60","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/495972f5b5839c60","status":"passed","time":{"start":1698148882715,"stop":1698148886693,"duration":3978}}]},"tags":[]},"source":"cf6f3d63afab77c8.json","parameterValues":["{'url': 'wss://astar.api.onfinality.io/public-ws', 'name': 'Astar'}"]}