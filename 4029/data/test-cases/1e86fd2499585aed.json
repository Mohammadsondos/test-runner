{"uid":"1e86fd2499585aed","name":"test_can_create_connection[Test for Westend, url: wss://westend.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"069699d857f75062eec2c2e7a6900f83","time":{"start":1698436938014,"stop":1698436938714,"duration":700},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:18 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Westend', 'url': 'wss://westend.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:18 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:18 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Westend', 'url': 'wss://westend.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:18 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"207cae5a38932470","name":"stdout","source":"207cae5a38932470.txt","type":"text/plain","size":1380}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2101-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"eafbcd75b06ab421","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:02 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436922215,"stop":1698436922919,"duration":704}},{"uid":"fa3cc90c99896056","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:46 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436906366,"stop":1698436907073,"duration":707}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":388,"unknown":0,"total":389},"items":[{"uid":"d3b319cd5e3f429e","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/d3b319cd5e3f429e","status":"passed","time":{"start":1698422486967,"stop":1698422487713,"duration":746}},{"uid":"7658e6ff58c36fb3","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/7658e6ff58c36fb3","status":"passed","time":{"start":1698408078954,"stop":1698408079725,"duration":771}},{"uid":"b62e7eb059e52d3a","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/b62e7eb059e52d3a","status":"passed","time":{"start":1698393687823,"stop":1698393688547,"duration":724}},{"uid":"221accc9ec94600b","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/221accc9ec94600b","status":"passed","time":{"start":1698379276878,"stop":1698379277648,"duration":770}},{"uid":"a0df11fd5077597","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/a0df11fd5077597","status":"passed","time":{"start":1698364929376,"stop":1698364930276,"duration":900}},{"uid":"e8b0d43cb9d81239","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/e8b0d43cb9d81239","status":"passed","time":{"start":1698350486032,"stop":1698350486864,"duration":832}},{"uid":"e7836a35c81e6243","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/e7836a35c81e6243","status":"passed","time":{"start":1698336082677,"stop":1698336083606,"duration":929}},{"uid":"d41ceffc28d323fa","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/d41ceffc28d323fa","status":"passed","time":{"start":1698321685592,"stop":1698321686476,"duration":884}},{"uid":"bd3962fdbc6f7e2a","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/bd3962fdbc6f7e2a","status":"passed","time":{"start":1698307299707,"stop":1698307300428,"duration":721}},{"uid":"19b56ced2b66e045","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/19b56ced2b66e045","status":"passed","time":{"start":1698292875809,"stop":1698292876738,"duration":929}},{"uid":"cecce87709aafe65","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/cecce87709aafe65","status":"passed","time":{"start":1698278517341,"stop":1698278518252,"duration":911}},{"uid":"831b47c96bbed306","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/831b47c96bbed306","status":"passed","time":{"start":1698264083866,"stop":1698264084822,"duration":956}},{"uid":"d3685dfa2ac0b1e2","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/d3685dfa2ac0b1e2","status":"passed","time":{"start":1698249685886,"stop":1698249686836,"duration":950}},{"uid":"411a2be459e4b722","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/411a2be459e4b722","status":"passed","time":{"start":1698235286268,"stop":1698235287386,"duration":1118}},{"uid":"efd70c8828b7e99","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/efd70c8828b7e99","status":"passed","time":{"start":1698220892668,"stop":1698220893535,"duration":867}},{"uid":"1ac7fd908d0190eb","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/1ac7fd908d0190eb","status":"passed","time":{"start":1698206473912,"stop":1698206475052,"duration":1140}},{"uid":"a8676133cd3ebe06","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/a8676133cd3ebe06","status":"passed","time":{"start":1698192272764,"stop":1698192273512,"duration":748}},{"uid":"fd75cf099ec33a7","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/fd75cf099ec33a7","status":"passed","time":{"start":1698177676549,"stop":1698177677296,"duration":747}},{"uid":"8357938f37772587","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/8357938f37772587","status":"passed","time":{"start":1698163292041,"stop":1698163292994,"duration":953}},{"uid":"342580d3b3107efd","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/342580d3b3107efd","status":"passed","time":{"start":1698148880208,"stop":1698148881137,"duration":929}}]},"tags":[]},"source":"1e86fd2499585aed.json","parameterValues":["{'url': 'wss://westend.api.onfinality.io/public-ws', 'name': 'Westend'}"]}