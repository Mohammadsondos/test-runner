{"uid":"52c2e965423859c","name":"test_can_create_connection[Test for Kusama, url: wss://kusama.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"04d2da413eab4f2e9d3d030b6cb0949b","time":{"start":1698436904272,"stop":1698436904969,"duration":697},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:44 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:44 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:44 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Kusama', 'url': 'wss://kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:44 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"68f4b4c4f71c9baa","name":"stdout","source":"68f4b4c4f71c9baa.txt","type":"text/plain","size":1377}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2101-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.api.onfinality.io/public-ws', 'name': 'Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"985c0711fa7da3c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:29 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436888477,"stop":1698436889177,"duration":700}},{"uid":"44ea80259cd6557f","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:13 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436872454,"stop":1698436873271,"duration":817}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":387,"unknown":0,"total":389},"items":[{"uid":"b491fa2ce1d3a716","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/b491fa2ce1d3a716","status":"passed","time":{"start":1698422483992,"stop":1698422484768,"duration":776}},{"uid":"779f5cec11371bce","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/779f5cec11371bce","status":"passed","time":{"start":1698408076315,"stop":1698408077081,"duration":766}},{"uid":"4225a1d7f0295a23","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/4225a1d7f0295a23","status":"passed","time":{"start":1698393684539,"stop":1698393685329,"duration":790}},{"uid":"21cab5d5d6aa344e","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/21cab5d5d6aa344e","status":"passed","time":{"start":1698379274098,"stop":1698379274843,"duration":745}},{"uid":"f0964f70c703123e","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/f0964f70c703123e","status":"passed","time":{"start":1698364927004,"stop":1698364927952,"duration":948}},{"uid":"638e2646db534a94","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/638e2646db534a94","status":"passed","time":{"start":1698350483328,"stop":1698350484220,"duration":892}},{"uid":"7fd9e0282d22611a","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/7fd9e0282d22611a","status":"passed","time":{"start":1698336080512,"stop":1698336081454,"duration":942}},{"uid":"3a42c1c52906f60c","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/3a42c1c52906f60c","status":"passed","time":{"start":1698321682978,"stop":1698321683871,"duration":893}},{"uid":"f07deaca50b28a15","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/f07deaca50b28a15","status":"passed","time":{"start":1698307296017,"stop":1698307296751,"duration":734}},{"uid":"10d2fbb758f7261e","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/10d2fbb758f7261e","status":"passed","time":{"start":1698292873698,"stop":1698292874648,"duration":950}},{"uid":"7d33d2a3c1a204eb","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/7d33d2a3c1a204eb","status":"passed","time":{"start":1698278515055,"stop":1698278516125,"duration":1070}},{"uid":"734c3eafb6b837cb","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/734c3eafb6b837cb","status":"passed","time":{"start":1698264081692,"stop":1698264082662,"duration":970}},{"uid":"3087f4c8ed93b16","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/3087f4c8ed93b16","status":"passed","time":{"start":1698249683741,"stop":1698249684696,"duration":955}},{"uid":"142db41ba172848f","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/142db41ba172848f","status":"passed","time":{"start":1698235284177,"stop":1698235285121,"duration":944}},{"uid":"5470883d5491d5a1","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/5470883d5491d5a1","status":"passed","time":{"start":1698220889907,"stop":1698220890844,"duration":937}},{"uid":"63a85ceb673d0d88","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/63a85ceb673d0d88","status":"passed","time":{"start":1698206471144,"stop":1698206472261,"duration":1117}},{"uid":"bb87f6027e99e350","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/bb87f6027e99e350","status":"passed","time":{"start":1698192118269,"stop":1698192119038,"duration":769}},{"uid":"471a34549ea567ec","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/471a34549ea567ec","status":"passed","time":{"start":1698177673747,"stop":1698177674501,"duration":754}},{"uid":"f4a543a5a60764b3","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/f4a543a5a60764b3","status":"passed","time":{"start":1698163289284,"stop":1698163290267,"duration":983}},{"uid":"79838cdda207fe5b","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/79838cdda207fe5b","status":"passed","time":{"start":1698148878054,"stop":1698148879067,"duration":1013}}]},"tags":[]},"source":"52c2e965423859c.json","parameterValues":["{'url': 'wss://kusama.api.onfinality.io/public-ws', 'name': 'Kusama'}"]}