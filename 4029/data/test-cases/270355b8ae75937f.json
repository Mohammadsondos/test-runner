{"uid":"270355b8ae75937f","name":"test_can_create_connection[Test for Polkadot Collectives, url: wss://collectives.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"6b2d505052053a5da93000b537edc6f1","time":{"start":1698437051857,"stop":1698437052559,"duration":702},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:04:12 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Polkadot Collectives', 'url': 'wss://collectives.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:04:12 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:04:12 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Polkadot Collectives', 'url': 'wss://collectives.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:04:12 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"58fb082aacaa4464","name":"stdout","source":"58fb082aacaa4464.txt","type":"text/plain","size":1392}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ffceaf934ad40e89","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:56 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698437036050,"stop":1698437036761,"duration":711}},{"uid":"5b565b02e34a838","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:40 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698437020238,"stop":1698437020950,"duration":712}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":388,"unknown":0,"total":389},"items":[{"uid":"828a478079e43b67","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/828a478079e43b67","status":"passed","time":{"start":1698422529504,"stop":1698422530240,"duration":736}},{"uid":"ac0ae9a9e4dd0040","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/ac0ae9a9e4dd0040","status":"passed","time":{"start":1698408121077,"stop":1698408121871,"duration":794}},{"uid":"a6333b366fee82dd","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/a6333b366fee82dd","status":"passed","time":{"start":1698393750024,"stop":1698393750762,"duration":738}},{"uid":"2f926605e15bf71a","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/2f926605e15bf71a","status":"passed","time":{"start":1698379305648,"stop":1698379306396,"duration":748}},{"uid":"4fd6e63f2aa7d877","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/4fd6e63f2aa7d877","status":"passed","time":{"start":1698364950669,"stop":1698364951599,"duration":930}},{"uid":"23048d820b47c3d8","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/23048d820b47c3d8","status":"passed","time":{"start":1698350514319,"stop":1698350515136,"duration":817}},{"uid":"261df9abb4a5b138","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/261df9abb4a5b138","status":"passed","time":{"start":1698336105309,"stop":1698336106257,"duration":948}},{"uid":"edce09c0a75e3c0c","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/edce09c0a75e3c0c","status":"passed","time":{"start":1698321734979,"stop":1698321735844,"duration":865}},{"uid":"9c7aadc6a569932f","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/9c7aadc6a569932f","status":"passed","time":{"start":1698307330890,"stop":1698307331629,"duration":739}},{"uid":"342d4a9fed01ec4","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/342d4a9fed01ec4","status":"passed","time":{"start":1698292903830,"stop":1698292904818,"duration":988}},{"uid":"338aa26342c2a346","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/338aa26342c2a346","status":"passed","time":{"start":1698278538562,"stop":1698278539508,"duration":946}},{"uid":"8af232229916f2c4","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/8af232229916f2c4","status":"passed","time":{"start":1698264106878,"stop":1698264107857,"duration":979}},{"uid":"9b1f76cda17d742c","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/9b1f76cda17d742c","status":"passed","time":{"start":1698249709863,"stop":1698249710778,"duration":915}},{"uid":"9f8fd23e4d6a931c","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/9f8fd23e4d6a931c","status":"passed","time":{"start":1698235310506,"stop":1698235311481,"duration":975}},{"uid":"432db2d42e927eeb","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/432db2d42e927eeb","status":"passed","time":{"start":1698220940214,"stop":1698220941077,"duration":863}},{"uid":"593a68111c26df19","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/593a68111c26df19","status":"passed","time":{"start":1698206512459,"stop":1698206513386,"duration":927}},{"uid":"794d8fc9b2e4b556","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/794d8fc9b2e4b556","status":"passed","time":{"start":1698192162868,"stop":1698192163858,"duration":990}},{"uid":"44ed9214c7c3b71","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/44ed9214c7c3b71","status":"passed","time":{"start":1698177741041,"stop":1698177741840,"duration":799}},{"uid":"f46dc122ef17a1f2","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/f46dc122ef17a1f2","status":"passed","time":{"start":1698163365798,"stop":1698163366763,"duration":965}},{"uid":"35a2dded6bdc271","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/35a2dded6bdc271","status":"passed","time":{"start":1698148948096,"stop":1698148949085,"duration":989}}]},"tags":[]},"source":"270355b8ae75937f.json","parameterValues":["{'url': 'wss://collectives.api.onfinality.io/public-ws', 'name': 'Polkadot Collectives'}"]}