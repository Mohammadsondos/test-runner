{"uid":"b18f7e3be64048cb","name":"test_can_create_connection[Test for Khala, url: wss://khala.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"c77a3f91088c1c6601fcbdb29ee4c9ec","time":{"start":1698436990275,"stop":1698436990981,"duration":706},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:10 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Khala', 'url': 'wss://khala.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:10 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:10 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Khala', 'url': 'wss://khala.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:10 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"44152cb091e46929","name":"stdout","source":"44152cb091e46929.txt","type":"text/plain","size":1374}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2104-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://khala.api.onfinality.io/public-ws', 'name': 'Khala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"67eac4b446995d37","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:55 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436974278,"stop":1698436975181,"duration":903}},{"uid":"85d22b278d6d2d7e","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:39 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436958473,"stop":1698436959194,"duration":721}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":387,"unknown":0,"total":389},"items":[{"uid":"2701a8938f5de61d","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/2701a8938f5de61d","status":"passed","time":{"start":1698422493099,"stop":1698422493814,"duration":715}},{"uid":"295642373522ce53","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/295642373522ce53","status":"passed","time":{"start":1698408101186,"stop":1698408105729,"duration":4543}},{"uid":"94598228169f862e","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/94598228169f862e","status":"passed","time":{"start":1698393725702,"stop":1698393726453,"duration":751}},{"uid":"be882417a9b3cd8c","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/be882417a9b3cd8c","status":"passed","time":{"start":1698379283658,"stop":1698379284407,"duration":749}},{"uid":"31fd6aa22c98c3a0","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/31fd6aa22c98c3a0","status":"passed","time":{"start":1698364932961,"stop":1698364933899,"duration":938}},{"uid":"5113dde2d2c401b","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/5113dde2d2c401b","status":"passed","time":{"start":1698350491611,"stop":1698350492431,"duration":820}},{"uid":"1821a7f06ea336e3","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/1821a7f06ea336e3","status":"passed","time":{"start":1698336087308,"stop":1698336088260,"duration":952}},{"uid":"3daf71c1d7fd6bb7","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/3daf71c1d7fd6bb7","status":"passed","time":{"start":1698321722912,"stop":1698321723775,"duration":863}},{"uid":"e51d83eeb7580b4a","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/e51d83eeb7580b4a","status":"passed","time":{"start":1698307291311,"stop":1698307292032,"duration":721}},{"uid":"dbba5280816c0107","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/dbba5280816c0107","status":"passed","time":{"start":1698292896779,"stop":1698292897767,"duration":988}},{"uid":"92dd7abd946692ab","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/92dd7abd946692ab","status":"passed","time":{"start":1698278521966,"stop":1698278522887,"duration":921}},{"uid":"4540c353bfefdbba","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/4540c353bfefdbba","status":"passed","time":{"start":1698264088404,"stop":1698264089368,"duration":964}},{"uid":"c5248f5b024dbc9","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/c5248f5b024dbc9","status":"passed","time":{"start":1698249692121,"stop":1698249693035,"duration":914}},{"uid":"e26a0561ef683afc","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/e26a0561ef683afc","status":"passed","time":{"start":1698235291852,"stop":1698235292785,"duration":933}},{"uid":"5488bbbfc2581ea4","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/5488bbbfc2581ea4","status":"passed","time":{"start":1698220898752,"stop":1698220899631,"duration":879}},{"uid":"f80139eac2f671e9","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/f80139eac2f671e9","status":"passed","time":{"start":1698206554388,"stop":1698206555288,"duration":900}},{"uid":"e49ccfbd658e58b9","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/e49ccfbd658e58b9","status":"passed","time":{"start":1698192143535,"stop":1698192144284,"duration":749}},{"uid":"489a9413c88babe4","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/489a9413c88babe4","status":"passed","time":{"start":1698177682971,"stop":1698177683708,"duration":737}},{"uid":"188e8aa47b8cdc5f","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/188e8aa47b8cdc5f","status":"passed","time":{"start":1698163296175,"stop":1698163297150,"duration":975}},{"uid":"dcb7def98e994c77","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/dcb7def98e994c77","status":"passed","time":{"start":1698149068641,"stop":1698149069582,"duration":941}}]},"tags":[]},"source":"b18f7e3be64048cb.json","parameterValues":["{'url': 'wss://khala.api.onfinality.io/public-ws', 'name': 'Khala'}"]}