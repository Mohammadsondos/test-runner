{"uid":"c025c513ab8f50cc","name":"test_can_create_connection[Test for Polkadot, url: wss://polkadot.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"3d6e4d900ee752640ae09aecc5be71f8","time":{"start":1698436905048,"stop":1698436905748,"duration":700},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:45 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Polkadot', 'url': 'wss://polkadot.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:45 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:45 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Polkadot', 'url': 'wss://polkadot.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:45 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"29ad66a98eaa309d","name":"stdout","source":"29ad66a98eaa309d.txt","type":"text/plain","size":1383}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2104-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://polkadot.api.onfinality.io/public-ws', 'name': 'Polkadot'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e5cb2bc733ead609","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:29 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436889255,"stop":1698436889951,"duration":696}},{"uid":"311b4f7872a64a30","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:13 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436872984,"stop":1698436874053,"duration":1069}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":387,"unknown":0,"total":389},"items":[{"uid":"fabe01e9ea88044","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/fabe01e9ea88044","status":"passed","time":{"start":1698422484491,"stop":1698422485243,"duration":752}},{"uid":"97f328070e71ca19","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/97f328070e71ca19","status":"passed","time":{"start":1698408076654,"stop":1698408077403,"duration":749}},{"uid":"6a21625c1dfedbd5","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/6a21625c1dfedbd5","status":"passed","time":{"start":1698393686414,"stop":1698393687198,"duration":784}},{"uid":"e971b06ad3ba1849","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/e971b06ad3ba1849","status":"passed","time":{"start":1698379274650,"stop":1698379275431,"duration":781}},{"uid":"de231c66b0f34996","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/de231c66b0f34996","status":"passed","time":{"start":1698364927457,"stop":1698364928371,"duration":914}},{"uid":"2470c1446de9f9e3","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/2470c1446de9f9e3","status":"passed","time":{"start":1698350483466,"stop":1698350484290,"duration":824}},{"uid":"e882d49aa0394e60","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/e882d49aa0394e60","status":"passed","time":{"start":1698336080312,"stop":1698336081406,"duration":1094}},{"uid":"53c7ce8e839f3e19","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/53c7ce8e839f3e19","status":"passed","time":{"start":1698321683929,"stop":1698321684930,"duration":1001}},{"uid":"8e551c00b3127d","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/8e551c00b3127d","status":"passed","time":{"start":1698307282755,"stop":1698307283496,"duration":741}},{"uid":"2efb2a858530913e","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/2efb2a858530913e","status":"passed","time":{"start":1698292874129,"stop":1698292875035,"duration":906}},{"uid":"98280f46cd1f0556","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/98280f46cd1f0556","status":"passed","time":{"start":1698278515121,"stop":1698278516135,"duration":1014}},{"uid":"11098da96563b6a8","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/11098da96563b6a8","status":"passed","time":{"start":1698264081695,"stop":1698264082618,"duration":923}},{"uid":"768111a6a5e650f7","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/768111a6a5e650f7","status":"passed","time":{"start":1698249683879,"stop":1698249684830,"duration":951}},{"uid":"e28c2b05b4605122","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/e28c2b05b4605122","status":"passed","time":{"start":1698235285701,"stop":1698235286680,"duration":979}},{"uid":"e0ca1cd3ac5708ca","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/e0ca1cd3ac5708ca","status":"passed","time":{"start":1698220890815,"stop":1698220891771,"duration":956}},{"uid":"fd920ce5024dc2c","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/fd920ce5024dc2c","status":"passed","time":{"start":1698206547129,"stop":1698206548067,"duration":938}},{"uid":"9a7f7d325a414d84","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/9a7f7d325a414d84","status":"passed","time":{"start":1698192118659,"stop":1698192119479,"duration":820}},{"uid":"d7381f509e38bfee","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/d7381f509e38bfee","status":"passed","time":{"start":1698177674212,"stop":1698177674985,"duration":773}},{"uid":"8fe8afdc90fae7d6","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/8fe8afdc90fae7d6","status":"passed","time":{"start":1698163289280,"stop":1698163290252,"duration":972}},{"uid":"5d700aba1e04a81c","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/5d700aba1e04a81c","status":"passed","time":{"start":1698149030736,"stop":1698149031701,"duration":965}}]},"tags":[]},"source":"c025c513ab8f50cc.json","parameterValues":["{'url': 'wss://polkadot.api.onfinality.io/public-ws', 'name': 'Polkadot'}"]}