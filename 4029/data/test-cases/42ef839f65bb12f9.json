{"uid":"42ef839f65bb12f9","name":"test_can_create_connection[Test for Phala, url: wss://phala.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a8b9112000f3298ff2c2d7c2207b4770","time":{"start":1698436979506,"stop":1698436980249,"duration":743},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:00 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Phala', 'url': 'wss://phala.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:00 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:00 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Phala', 'url': 'wss://phala.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:03:00 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b2588421f823221d","name":"stdout","source":"b2588421f823221d.txt","type":"text/plain","size":1374}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2101-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://phala.api.onfinality.io/public-ws', 'name': 'Phala'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"81ee699d1b4f2707","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:44 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436963715,"stop":1698436964416,"duration":701}},{"uid":"4327b12c40b3974c","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:28 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436947907,"stop":1698436948615,"duration":708}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":388,"unknown":0,"total":389},"items":[{"uid":"b5ddd0504d1af108","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/b5ddd0504d1af108","status":"passed","time":{"start":1698422500178,"stop":1698422500898,"duration":720}},{"uid":"2a43ce4c23b22aad","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/2a43ce4c23b22aad","status":"passed","time":{"start":1698408092753,"stop":1698408093574,"duration":821}},{"uid":"6cc282c4e8d0070d","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/6cc282c4e8d0070d","status":"passed","time":{"start":1698393705586,"stop":1698393706312,"duration":726}},{"uid":"bf2c0abc9ca225de","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/bf2c0abc9ca225de","status":"passed","time":{"start":1698379290265,"stop":1698379290999,"duration":734}},{"uid":"94e26c041848309a","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/94e26c041848309a","status":"passed","time":{"start":1698364938338,"stop":1698364939272,"duration":934}},{"uid":"39da227381880466","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/39da227381880466","status":"passed","time":{"start":1698350497199,"stop":1698350498024,"duration":825}},{"uid":"e163e38e5f16ea6b","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/e163e38e5f16ea6b","status":"passed","time":{"start":1698336089185,"stop":1698336090132,"duration":947}},{"uid":"f82a709e8bc52d07","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/f82a709e8bc52d07","status":"passed","time":{"start":1698321701993,"stop":1698321702852,"duration":859}},{"uid":"24b4559ec2b228c8","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/24b4559ec2b228c8","status":"passed","time":{"start":1698307303050,"stop":1698307303771,"duration":721}},{"uid":"69424738324f3d75","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/69424738324f3d75","status":"passed","time":{"start":1698292891429,"stop":1698292892347,"duration":918}},{"uid":"f9e331d7f5a393f9","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/f9e331d7f5a393f9","status":"passed","time":{"start":1698278527248,"stop":1698278528181,"duration":933}},{"uid":"44ab8d8261fd7835","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/44ab8d8261fd7835","status":"passed","time":{"start":1698264091735,"stop":1698264092715,"duration":980}},{"uid":"f70772712912552b","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/f70772712912552b","status":"passed","time":{"start":1698249698285,"stop":1698249699215,"duration":930}},{"uid":"9fbe7822b8f28e53","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/9fbe7822b8f28e53","status":"passed","time":{"start":1698235300049,"stop":1698235300990,"duration":941}},{"uid":"52b4d72b3c3866a4","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/52b4d72b3c3866a4","status":"passed","time":{"start":1698220904720,"stop":1698220905586,"duration":866}},{"uid":"fb775b225a9570bc","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/fb775b225a9570bc","status":"passed","time":{"start":1698206487228,"stop":1698206488147,"duration":919}},{"uid":"2586b943044a018f","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/2586b943044a018f","status":"passed","time":{"start":1698192138122,"stop":1698192138879,"duration":757}},{"uid":"ad9a1ec5913c4dfe","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/ad9a1ec5913c4dfe","status":"passed","time":{"start":1698177689539,"stop":1698177690277,"duration":738}},{"uid":"6237976083d17141","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/6237976083d17141","status":"passed","time":{"start":1698163302379,"stop":1698163303338,"duration":959}},{"uid":"addc91543ce114c7","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/addc91543ce114c7","status":"passed","time":{"start":1698148897073,"stop":1698148898018,"duration":945}}]},"tags":[]},"source":"42ef839f65bb12f9.json","parameterValues":["{'url': 'wss://phala.api.onfinality.io/public-ws', 'name': 'Phala'}"]}