{"uid":"e0ceed33ed43d3e1","name":"test_can_create_connection[Test for Integritee Parachain, url: wss://integritee-kusama.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"326bea541bc487a2f647b5a8f020251e","time":{"start":1698436974855,"stop":1698436975555,"duration":700},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:55 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Integritee Parachain', 'url': 'wss://integritee-kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:55 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:55 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Integritee Parachain', 'url': 'wss://integritee-kusama.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:55 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"275e596bc971b21c","name":"stdout","source":"275e596bc971b21c.txt","type":"text/plain","size":1410}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2110-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://integritee-kusama.api.onfinality.io/public-ws', 'name': 'Integritee Parachain'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4b6c0e3f4a733eeb","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:39 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436958965,"stop":1698436959758,"duration":793}},{"uid":"2df50d7a51a2bd18","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:23 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436943099,"stop":1698436943825,"duration":726}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":387,"unknown":0,"total":389},"items":[{"uid":"344641efe7c173fa","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/344641efe7c173fa","status":"passed","time":{"start":1698422502706,"stop":1698422505381,"duration":2675}},{"uid":"f74263d451fa3511","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/f74263d451fa3511","status":"passed","time":{"start":1698408088156,"stop":1698408088935,"duration":779}},{"uid":"775dbaa2879c61f3","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/775dbaa2879c61f3","status":"passed","time":{"start":1698393696860,"stop":1698393697774,"duration":914}},{"uid":"f1c060308c0800b0","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/f1c060308c0800b0","status":"passed","time":{"start":1698379287643,"stop":1698379288394,"duration":751}},{"uid":"b7610db8b28330c4","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/b7610db8b28330c4","status":"passed","time":{"start":1698364962749,"stop":1698364963674,"duration":925}},{"uid":"35d4cc9e5c52893","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/35d4cc9e5c52893","status":"passed","time":{"start":1698350493135,"stop":1698350493962,"duration":827}},{"uid":"90005e9db218f853","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/90005e9db218f853","status":"passed","time":{"start":1698336087006,"stop":1698336087968,"duration":962}},{"uid":"954048bb361d1418","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/954048bb361d1418","status":"passed","time":{"start":1698321694555,"stop":1698321695413,"duration":858}},{"uid":"95a3294cab33a70e","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/95a3294cab33a70e","status":"passed","time":{"start":1698307296279,"stop":1698307297023,"duration":744}},{"uid":"4c29ac5cc97863b3","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/4c29ac5cc97863b3","status":"passed","time":{"start":1698292885440,"stop":1698292886506,"duration":1066}},{"uid":"277265346e4359c2","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/277265346e4359c2","status":"passed","time":{"start":1698278528282,"stop":1698278529207,"duration":925}},{"uid":"7b9d12c1b7c33aef","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/7b9d12c1b7c33aef","status":"passed","time":{"start":1698264092144,"stop":1698264093090,"duration":946}},{"uid":"110116ed69cacc7b","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/110116ed69cacc7b","status":"passed","time":{"start":1698249695237,"stop":1698249696168,"duration":931}},{"uid":"eb6ab309bb214dba","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/eb6ab309bb214dba","status":"passed","time":{"start":1698235294742,"stop":1698235295671,"duration":929}},{"uid":"3fbb158a45e30272","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/3fbb158a45e30272","status":"passed","time":{"start":1698220900775,"stop":1698220906084,"duration":5309}},{"uid":"bcee19ff8b648596","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/bcee19ff8b648596","status":"passed","time":{"start":1698206486424,"stop":1698206487674,"duration":1250}},{"uid":"28c94b6f96c4f658","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/28c94b6f96c4f658","status":"passed","time":{"start":1698192130476,"stop":1698192131289,"duration":813}},{"uid":"387c8d1ebc0f4818","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/387c8d1ebc0f4818","status":"passed","time":{"start":1698177684949,"stop":1698177685681,"duration":732}},{"uid":"62bf868750d273c6","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/62bf868750d273c6","status":"passed","time":{"start":1698163297451,"stop":1698163298432,"duration":981}},{"uid":"74e2786f149cef11","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/74e2786f149cef11","status":"passed","time":{"start":1698148897752,"stop":1698148898718,"duration":966}}]},"tags":[]},"source":"e0ceed33ed43d3e1.json","parameterValues":["{'url': 'wss://integritee-kusama.api.onfinality.io/public-ws', 'name': 'Integritee Parachain'}"]}