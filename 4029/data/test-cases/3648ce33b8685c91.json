{"uid":"3648ce33b8685c91","name":"test_can_create_connection[Test for Polkadot Asset Hub, url: wss://statemint.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"7131157551c739209ed665b16e9b5869","time":{"start":1698436948794,"stop":1698436949495,"duration":701},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:29 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Polkadot Asset Hub', 'url': 'wss://statemint.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:29 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:29 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Polkadot Asset Hub', 'url': 'wss://statemint.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:29 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"b1c899426487b181","name":"stdout","source":"b1c899426487b181.txt","type":"text/plain","size":1386}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://statemint.api.onfinality.io/public-ws', 'name': 'Polkadot Asset Hub'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5fd86df2f62067b5","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:13 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436932996,"stop":1698436933696,"duration":700}},{"uid":"4442c24e5721aaf7","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:57 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436917165,"stop":1698436917898,"duration":733}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":387,"unknown":0,"total":389},"items":[{"uid":"96fd5099991bafc4","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/96fd5099991bafc4","status":"passed","time":{"start":1698422493435,"stop":1698422494171,"duration":736}},{"uid":"5b0520f1b3b03308","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/5b0520f1b3b03308","status":"passed","time":{"start":1698408083344,"stop":1698408084114,"duration":770}},{"uid":"da2e3fb2e32d3683","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/da2e3fb2e32d3683","status":"passed","time":{"start":1698393691723,"stop":1698393692477,"duration":754}},{"uid":"902563e0d5872369","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/902563e0d5872369","status":"passed","time":{"start":1698379281993,"stop":1698379282723,"duration":730}},{"uid":"7c7b668cb00570c","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/7c7b668cb00570c","status":"passed","time":{"start":1698364932847,"stop":1698364933747,"duration":900}},{"uid":"e7e787d5b3ffb900","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/e7e787d5b3ffb900","status":"passed","time":{"start":1698350489075,"stop":1698350489930,"duration":855}},{"uid":"98561ee7c1c62ca4","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/98561ee7c1c62ca4","status":"passed","time":{"start":1698336085005,"stop":1698336086030,"duration":1025}},{"uid":"f032f73e5bb19585","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/f032f73e5bb19585","status":"passed","time":{"start":1698321689586,"stop":1698321690608,"duration":1022}},{"uid":"3751ea53da03a82a","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/3751ea53da03a82a","status":"passed","time":{"start":1698307290053,"stop":1698307290786,"duration":733}},{"uid":"a44e177f29c61b30","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/a44e177f29c61b30","status":"passed","time":{"start":1698292877553,"stop":1698292878575,"duration":1022}},{"uid":"b3a0c0c02a70d976","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/b3a0c0c02a70d976","status":"passed","time":{"start":1698278520695,"stop":1698278521633,"duration":938}},{"uid":"39e4af5deb7def4","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/39e4af5deb7def4","status":"passed","time":{"start":1698264085849,"stop":1698264086794,"duration":945}},{"uid":"3f17666bf11fad08","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/3f17666bf11fad08","status":"passed","time":{"start":1698249689091,"stop":1698249690068,"duration":977}},{"uid":"d79319d51102dcaa","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/d79319d51102dcaa","status":"passed","time":{"start":1698235294707,"stop":1698235295676,"duration":969}},{"uid":"295b327ef77ae93e","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/295b327ef77ae93e","status":"passed","time":{"start":1698220896408,"stop":1698220897261,"duration":853}},{"uid":"573949f4608c2731","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/573949f4608c2731","status":"passed","time":{"start":1698206476060,"stop":1698206477000,"duration":940}},{"uid":"7147632331133acb","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/7147632331133acb","status":"passed","time":{"start":1698192125631,"stop":1698192126424,"duration":793}},{"uid":"7b1271dee7e57f8d","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/7b1271dee7e57f8d","status":"passed","time":{"start":1698177680641,"stop":1698177681422,"duration":781}},{"uid":"676a0760e9247de3","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/676a0760e9247de3","status":"passed","time":{"start":1698163293983,"stop":1698163294966,"duration":983}},{"uid":"6b05d5280d4b7162","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/6b05d5280d4b7162","status":"passed","time":{"start":1698148887792,"stop":1698148888756,"duration":964}}]},"tags":[]},"source":"3648ce33b8685c91.json","parameterValues":["{'url': 'wss://statemint.api.onfinality.io/public-ws', 'name': 'Polkadot Asset Hub'}"]}