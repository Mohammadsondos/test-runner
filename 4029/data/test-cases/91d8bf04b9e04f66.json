{"uid":"91d8bf04b9e04f66","name":"test_can_create_connection[Test for Shiden, url: wss://shiden.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"ba829bf283df63155b3acf8f5f7f68cc","time":{"start":1698436938598,"stop":1698436939313,"duration":715},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:19 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Shiden', 'url': 'wss://shiden.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:19 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:19 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","statusTrace":"data = {'name': 'Shiden', 'url': 'wss://shiden.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:19 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"247c19108b4c01ea","name":"stdout","source":"247c19108b4c01ea.txt","type":"text/plain","size":1377}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az646-232"},{"name":"thread","value":"2110-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://shiden.api.onfinality.io/public-ws', 'name': 'Shiden'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b94209867f985e17","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:02:03 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '1', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436922803,"stop":1698436923503,"duration":700}},{"uid":"d5939dae1efd1376","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 503 Service Temporarily Unavailable -+-+- {'date': 'Fri, 27 Oct 2023 20:01:47 GMT', 'content-type': 'application/json; charset=utf-8', 'connection': 'keep-alive', 'content-length': '58', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-response-latency': '0', 'server': 'kong/2.5.2'} -+-+- b'{\"message\":\"failure to get a peer from the ring-balancer\"}'","time":{"start":1698436906837,"stop":1698436907660,"duration":823}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":388,"unknown":0,"total":389},"items":[{"uid":"4613f155eca2ab40","reportUrl":"https://novasamatech.github.io/test-runner/4028//#testresult/4613f155eca2ab40","status":"passed","time":{"start":1698422487192,"stop":1698422487916,"duration":724}},{"uid":"227df2cab8380495","reportUrl":"https://novasamatech.github.io/test-runner/4027//#testresult/227df2cab8380495","status":"passed","time":{"start":1698408079473,"stop":1698408080255,"duration":782}},{"uid":"4b394e9dd4a15662","reportUrl":"https://novasamatech.github.io/test-runner/4026//#testresult/4b394e9dd4a15662","status":"passed","time":{"start":1698393687538,"stop":1698393688263,"duration":725}},{"uid":"59e74db787a0ddc3","reportUrl":"https://novasamatech.github.io/test-runner/4025//#testresult/59e74db787a0ddc3","status":"passed","time":{"start":1698379285844,"stop":1698379300772,"duration":14928}},{"uid":"ea3a6c7c6756acbd","reportUrl":"https://novasamatech.github.io/test-runner/4024//#testresult/ea3a6c7c6756acbd","status":"passed","time":{"start":1698364929531,"stop":1698364930451,"duration":920}},{"uid":"1c0940f58640ddf3","reportUrl":"https://novasamatech.github.io/test-runner/4023//#testresult/1c0940f58640ddf3","status":"passed","time":{"start":1698350487087,"stop":1698350487913,"duration":826}},{"uid":"bb1710a0c367c3f5","reportUrl":"https://novasamatech.github.io/test-runner/4022//#testresult/bb1710a0c367c3f5","status":"passed","time":{"start":1698336078411,"stop":1698336079379,"duration":968}},{"uid":"483334d490eda2e2","reportUrl":"https://novasamatech.github.io/test-runner/4021//#testresult/483334d490eda2e2","status":"passed","time":{"start":1698321686432,"stop":1698321687331,"duration":899}},{"uid":"a1474a22b2f3feb7","reportUrl":"https://novasamatech.github.io/test-runner/4020//#testresult/a1474a22b2f3feb7","status":"passed","time":{"start":1698307284539,"stop":1698307285294,"duration":755}},{"uid":"bd92b5a06d21cf38","reportUrl":"https://novasamatech.github.io/test-runner/4019//#testresult/bd92b5a06d21cf38","status":"passed","time":{"start":1698292876764,"stop":1698292877709,"duration":945}},{"uid":"7dcc146c0b5dc738","reportUrl":"https://novasamatech.github.io/test-runner/4018//#testresult/7dcc146c0b5dc738","status":"passed","time":{"start":1698278517882,"stop":1698278518816,"duration":934}},{"uid":"17746c86a6d7a4e1","reportUrl":"https://novasamatech.github.io/test-runner/4017//#testresult/17746c86a6d7a4e1","status":"passed","time":{"start":1698264082098,"stop":1698264083017,"duration":919}},{"uid":"e33b3eddf87bba96","reportUrl":"https://novasamatech.github.io/test-runner/4016//#testresult/e33b3eddf87bba96","status":"passed","time":{"start":1698249687050,"stop":1698249688174,"duration":1124}},{"uid":"6e0cc64e7983f1","reportUrl":"https://novasamatech.github.io/test-runner/4015//#testresult/6e0cc64e7983f1","status":"passed","time":{"start":1698235287042,"stop":1698235288018,"duration":976}},{"uid":"3f261bd7a56afdd8","reportUrl":"https://novasamatech.github.io/test-runner/4014//#testresult/3f261bd7a56afdd8","status":"passed","time":{"start":1698220892905,"stop":1698220893940,"duration":1035}},{"uid":"2ac50faaa42e7990","reportUrl":"https://novasamatech.github.io/test-runner/4013//#testresult/2ac50faaa42e7990","status":"passed","time":{"start":1698206473511,"stop":1698206474446,"duration":935}},{"uid":"2aa1c5501f4914a3","reportUrl":"https://novasamatech.github.io/test-runner/4012//#testresult/2aa1c5501f4914a3","status":"passed","time":{"start":1698192121918,"stop":1698192122678,"duration":760}},{"uid":"5aeb977a9632ff1c","reportUrl":"https://novasamatech.github.io/test-runner/4011//#testresult/5aeb977a9632ff1c","status":"passed","time":{"start":1698177677161,"stop":1698177677931,"duration":770}},{"uid":"7b251550dffe4ad9","reportUrl":"https://novasamatech.github.io/test-runner/4010//#testresult/7b251550dffe4ad9","status":"passed","time":{"start":1698163291279,"stop":1698163292360,"duration":1081}},{"uid":"54e29752ae1dc89e","reportUrl":"https://novasamatech.github.io/test-runner/4009//#testresult/54e29752ae1dc89e","status":"passed","time":{"start":1698148881418,"stop":1698148882493,"duration":1075}}]},"tags":[]},"source":"91d8bf04b9e04f66.json","parameterValues":["{'url': 'wss://shiden.api.onfinality.io/public-ws', 'name': 'Shiden'}"]}