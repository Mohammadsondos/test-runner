{"uid":"bb020baa791760d8","name":"test_can_create_connection[Test for Bifrost Kusama, url: wss://bifrost-rpc.liebi.com/ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"70ec85e5ca3498a04694b5036aadbb80","time":{"start":1681041867833,"stop":1681041868344,"duration":511},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'Bifrost Kusama', 'url': 'wss://bifrost-rpc.liebi.com/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","statusTrace":"data = {'name': 'Bifrost Kusama', 'url': 'wss://bifrost-rpc.liebi.com/ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses=SUCCESS_STATUSES):\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n>           raise WebSocketBadStatusException(\"Handshake status %d %s\", status, status_message, resp_headers)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway\n\n../../../../.local/lib/python3.10/site-packages/websocket/_handshake.py:147: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"fc292cdf8c0eeae1","name":"stdout","source":"fc292cdf8c0eeae1.txt","type":"text/plain","size":228}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az988-457"},{"name":"thread","value":"1763-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://bifrost-rpc.liebi.com/ws', 'name': 'Bifrost Kusama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2efed953180d7ff3","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1681041857185,"stop":1681041857723,"duration":538}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":57,"skipped":0,"passed":913,"unknown":0,"total":970},"items":[{"uid":"d4fccab41e710b4b","reportUrl":"https://nova-wallet.github.io/test-runner/2790//#testresult/d4fccab41e710b4b","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway","time":{"start":1681027451220,"stop":1681027451698,"duration":478}},{"uid":"7a934f7936b17da8","reportUrl":"https://nova-wallet.github.io/test-runner/2789//#testresult/7a934f7936b17da8","status":"passed","time":{"start":1681013032869,"stop":1681013033730,"duration":861}},{"uid":"9aa98e94a088df5c","reportUrl":"https://nova-wallet.github.io/test-runner/2788//#testresult/9aa98e94a088df5c","status":"passed","time":{"start":1680999216481,"stop":1680999217248,"duration":767}},{"uid":"30695dc268e64406","reportUrl":"https://nova-wallet.github.io/test-runner/2787//#testresult/30695dc268e64406","status":"passed","time":{"start":1680984219330,"stop":1680984220624,"duration":1294}},{"uid":"80350a7ecf53d3d9","reportUrl":"https://nova-wallet.github.io/test-runner/2786//#testresult/80350a7ecf53d3d9","status":"passed","time":{"start":1680969829953,"stop":1680969831119,"duration":1166}},{"uid":"8677516ca020845e","reportUrl":"https://nova-wallet.github.io/test-runner/2785//#testresult/8677516ca020845e","status":"passed","time":{"start":1680955441087,"stop":1680955441899,"duration":812}},{"uid":"fc7201e8346a2874","reportUrl":"https://nova-wallet.github.io/test-runner/2784//#testresult/fc7201e8346a2874","status":"passed","time":{"start":1680941042441,"stop":1680941043600,"duration":1159}},{"uid":"fad66140cc3b1d12","reportUrl":"https://nova-wallet.github.io/test-runner/2783//#testresult/fad66140cc3b1d12","status":"passed","time":{"start":1680926651967,"stop":1680926652811,"duration":844}},{"uid":"f2911ed752d9e494","reportUrl":"https://nova-wallet.github.io/test-runner/2782//#testresult/f2911ed752d9e494","status":"passed","time":{"start":1680912704609,"stop":1680912705453,"duration":844}},{"uid":"9296a4c818b05333","reportUrl":"https://nova-wallet.github.io/test-runner/2781//#testresult/9296a4c818b05333","status":"passed","time":{"start":1680897832138,"stop":1680897833041,"duration":903}},{"uid":"c4f9a0b440d4df27","reportUrl":"https://nova-wallet.github.io/test-runner/2780//#testresult/c4f9a0b440d4df27","status":"passed","time":{"start":1680883446703,"stop":1680883447572,"duration":869}},{"uid":"83c7b83162757a6c","reportUrl":"https://nova-wallet.github.io/test-runner/2779//#testresult/83c7b83162757a6c","status":"passed","time":{"start":1680869089075,"stop":1680869089964,"duration":889}},{"uid":"f9937818605b39b2","reportUrl":"https://nova-wallet.github.io/test-runner/2778//#testresult/f9937818605b39b2","status":"passed","time":{"start":1680854652794,"stop":1680854653550,"duration":756}},{"uid":"83f58bf09d0cdeea","reportUrl":"https://nova-wallet.github.io/test-runner/2777//#testresult/83f58bf09d0cdeea","status":"passed","time":{"start":1680840251351,"stop":1680840252278,"duration":927}},{"uid":"90a9076ae76e6311","reportUrl":"https://nova-wallet.github.io/test-runner/2776//#testresult/90a9076ae76e6311","status":"passed","time":{"start":1680826327647,"stop":1680826328467,"duration":820}},{"uid":"75aef52e0a29b7b","reportUrl":"https://nova-wallet.github.io/test-runner/2775//#testresult/75aef52e0a29b7b","status":"passed","time":{"start":1680811447232,"stop":1680811448082,"duration":850}},{"uid":"12446af2c727bf13","reportUrl":"https://nova-wallet.github.io/test-runner/2774//#testresult/12446af2c727bf13","status":"passed","time":{"start":1680797043000,"stop":1680797043895,"duration":895}},{"uid":"683a674923d239c1","reportUrl":"https://nova-wallet.github.io/test-runner/2773//#testresult/683a674923d239c1","status":"passed","time":{"start":1680782682973,"stop":1680782683642,"duration":669}},{"uid":"5153ea30cfc1026d","reportUrl":"https://nova-wallet.github.io/test-runner/2772//#testresult/5153ea30cfc1026d","status":"passed","time":{"start":1680768254304,"stop":1680768255210,"duration":906}},{"uid":"61cb6b3d6c9251a5","reportUrl":"https://nova-wallet.github.io/test-runner/2771//#testresult/61cb6b3d6c9251a5","status":"passed","time":{"start":1680753847485,"stop":1680753848383,"duration":898}}]},"tags":[]},"source":"bb020baa791760d8.json","parameterValues":["{'url': 'wss://bifrost-rpc.liebi.com/ws', 'name': 'Bifrost Kusama'}"]}