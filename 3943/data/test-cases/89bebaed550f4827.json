{"uid":"89bebaed550f4827","name":"test_can_create_connection[Test for Tinkernet, url: wss://invarch-tinkernet.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"fa04c589555648ef054595cb3e43047c","time":{"start":1697213121292,"stop":1697213421790,"duration":300498},"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","statusTrace":"data = {'name': 'Tinkernet', 'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:732: in rpc_request\n    self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n.venv/lib/python3.10/site-packages/websocket/_core.py:362: in recv\n    opcode, data = self.recv_data()\n.venv/lib/python3.10/site-packages/websocket/_core.py:385: in recv_data\n    opcode, frame = self.recv_data_frame(control_frame)\n.venv/lib/python3.10/site-packages/websocket/_core.py:406: in recv_data_frame\n    frame = self.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_core.py:445: in recv_frame\n    return self.frame_buffer.recv_frame()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:338: in recv_frame\n    self.recv_header()\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:294: in recv_header\n    header = self.recv_strict(2)\n.venv/lib/python3.10/site-packages/websocket/_abnf.py:373: in recv_strict\n    bytes_ = self.recv(min(16384, shortage))\n.venv/lib/python3.10/site-packages/websocket/_core.py:529: in _recv\n    return recv(self.sock, bufsize)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nbufsize = 2\n\n    def recv(sock: socket.socket, bufsize: int) -> bytes:\n        if not sock:\n            raise WebSocketConnectionClosedException(\"socket is already closed.\")\n    \n        def _recv():\n            try:\n                return sock.recv(bufsize)\n            except SSLWantReadError:\n                pass\n            except socket.error as exc:\n                error_code = extract_error_code(exc)\n                if error_code != errno.EAGAIN and error_code != errno.EWOULDBLOCK:\n                    raise\n    \n            sel = selectors.DefaultSelector()\n            sel.register(sock, selectors.EVENT_READ)\n    \n            r = sel.select(sock.gettimeout())\n            sel.close()\n    \n            if r:\n                return sock.recv(bufsize)\n    \n        try:\n            if sock.gettimeout() == 0:\n                bytes_ = sock.recv(bufsize)\n            else:\n                bytes_ = _recv()\n        except TimeoutError:\n            raise WebSocketTimeoutException(\"Connection timed out\")\n        except socket.timeout as e:\n            message = extract_err_message(e)\n            raise WebSocketTimeoutException(message)\n        except SSLError as e:\n            message = extract_err_message(e)\n            if isinstance(message, str) and 'timed out' in message:\n                raise WebSocketTimeoutException(message)\n            else:\n                raise\n    \n        if not bytes_:\n>           raise WebSocketConnectionClosedException(\n                \"Connection to remote host was lost.\")\nE           websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.\n\n.venv/lib/python3.10/site-packages/websocket/_socket.py:122: WebSocketConnectionClosedException","steps":[],"attachments":[{"uid":"899a20ee709b8e52","name":"stdout","source":"899a20ee709b8e52.txt","type":"text/plain","size":414}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az257-935"},{"name":"thread","value":"2111-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws', 'name': 'Tinkernet'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"833d445e354526ef","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697213045505,"stop":1697213106028,"duration":60523}},{"uid":"592845b60fb2482a","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697212909721,"stop":1697213030228,"duration":120507}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":298,"unknown":0,"total":303},"items":[{"uid":"fec1fbc20aeaeb64","reportUrl":"https://novasamatech.github.io/test-runner/3942//#testresult/fec1fbc20aeaeb64","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697198782594,"stop":1697198962919,"duration":180325}},{"uid":"ab71c586f025b6d0","reportUrl":"https://novasamatech.github.io/test-runner/3941//#testresult/ab71c586f025b6d0","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1697184549941,"stop":1697184730383,"duration":180442}},{"uid":"1f39f4b4bfb1e7b","reportUrl":"https://novasamatech.github.io/test-runner/3940//#testresult/1f39f4b4bfb1e7b","status":"passed","time":{"start":1697169706931,"stop":1697169707594,"duration":663}},{"uid":"b59c3f64dd6ded43","reportUrl":"https://novasamatech.github.io/test-runner/3939//#testresult/b59c3f64dd6ded43","status":"passed","time":{"start":1697155344995,"stop":1697155345407,"duration":412}},{"uid":"98acc608ab4052a4","reportUrl":"https://novasamatech.github.io/test-runner/3938//#testresult/98acc608ab4052a4","status":"passed","time":{"start":1697140889916,"stop":1697140890430,"duration":514}},{"uid":"f3a8ba770f0fb74e","reportUrl":"https://novasamatech.github.io/test-runner/3937//#testresult/f3a8ba770f0fb74e","status":"passed","time":{"start":1697126546445,"stop":1697126549016,"duration":2571}},{"uid":"527e49df47b2d663","reportUrl":"https://novasamatech.github.io/test-runner/3936//#testresult/527e49df47b2d663","status":"passed","time":{"start":1697112117045,"stop":1697112119253,"duration":2208}},{"uid":"b9cf885a194b7cc8","reportUrl":"https://novasamatech.github.io/test-runner/3935//#testresult/b9cf885a194b7cc8","status":"passed","time":{"start":1697097715009,"stop":1697097715477,"duration":468}},{"uid":"b352812dd860228e","reportUrl":"https://novasamatech.github.io/test-runner/3934//#testresult/b352812dd860228e","status":"passed","time":{"start":1697083314433,"stop":1697083314910,"duration":477}},{"uid":"e18ddd86c627fab7","reportUrl":"https://novasamatech.github.io/test-runner/3933//#testresult/e18ddd86c627fab7","status":"passed","time":{"start":1697068942944,"stop":1697068943347,"duration":403}},{"uid":"1b7e052953524421","reportUrl":"https://novasamatech.github.io/test-runner/3932//#testresult/1b7e052953524421","status":"passed","time":{"start":1697054513314,"stop":1697054513745,"duration":431}},{"uid":"344fb14c001fa853","reportUrl":"https://novasamatech.github.io/test-runner/3931//#testresult/344fb14c001fa853","status":"passed","time":{"start":1697040135067,"stop":1697040135677,"duration":610}},{"uid":"6b6f44da747ecf73","reportUrl":"https://novasamatech.github.io/test-runner/3930//#testresult/6b6f44da747ecf73","status":"passed","time":{"start":1697025714883,"stop":1697025715541,"duration":658}},{"uid":"7464ce996363ce37","reportUrl":"https://novasamatech.github.io/test-runner/3929//#testresult/7464ce996363ce37","status":"passed","time":{"start":1697011311059,"stop":1697011311645,"duration":586}},{"uid":"681e1a157a9032d0","reportUrl":"https://novasamatech.github.io/test-runner/3928//#testresult/681e1a157a9032d0","status":"passed","time":{"start":1696996895051,"stop":1696996895618,"duration":567}},{"uid":"9c81b555b2a7d447","reportUrl":"https://novasamatech.github.io/test-runner/3927//#testresult/9c81b555b2a7d447","status":"passed","time":{"start":1696982534192,"stop":1696982534654,"duration":462}},{"uid":"4355d876c622870b","reportUrl":"https://novasamatech.github.io/test-runner/3926//#testresult/4355d876c622870b","status":"passed","time":{"start":1696968107816,"stop":1696968108228,"duration":412}},{"uid":"2c0874e5e0f7b4d","reportUrl":"https://novasamatech.github.io/test-runner/3925//#testresult/2c0874e5e0f7b4d","status":"passed","time":{"start":1696953713307,"stop":1696953713969,"duration":662}},{"uid":"77210d08e776af8c","reportUrl":"https://novasamatech.github.io/test-runner/3924//#testresult/77210d08e776af8c","status":"passed","time":{"start":1696939304389,"stop":1696939304802,"duration":413}},{"uid":"fbcc21d0bcd0dec6","reportUrl":"https://novasamatech.github.io/test-runner/3923//#testresult/fbcc21d0bcd0dec6","status":"passed","time":{"start":1696924902005,"stop":1696924902459,"duration":454}}]},"tags":[]},"source":"89bebaed550f4827.json","parameterValues":["{'url': 'wss://invarch-tinkernet.api.onfinality.io/public-ws', 'name': 'Tinkernet'}"]}