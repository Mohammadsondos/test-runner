{"uid":"4b463c1b436a76bc","name":"test_precision[Test for Acala]","fullName":"tests.test_network_parameters.TestPrecision#test_precision","historyId":"5d4dc364a46a184b6df0ed015dfe9861","time":{"start":1686729883731,"stop":1686729884549,"duration":818},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7fd75982fdc0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fd75982da20>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fd7573204c0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x81c1557f3922b1d52236af0055aa7794b4b4c4d4e887e37fd399d296ba6ba644']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","statusTrace":"self = <tests.test_network_parameters.TestPrecision object at 0x7fd75982fdc0>\nchain = <scripts.utils.chain_model.Chain object at 0x7fd75982da20>\n\n    def test_precision(self, chain: Chain):\n        chain.create_connection()\n>       chain.init_properties()\n\ntests/test_network_parameters.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/chain_model.py:44: in init_properties\n    self.properties = get_properties(self.substrate)\nscripts/utils/metadata_interaction.py:68: in get_properties\n    substrate.get_constant('system', 'ss58Prefix')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2516: in get_constant\n    constant = self.get_metadata_constant(module_name, constant_name, block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:2490: in get_metadata_constant\n    self.init_runtime(block_hash=block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1136: in init_runtime\n    runtime_info = self.get_block_runtime_version(block_hash=runtime_block_hash)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:1003: in get_block_runtime_version\n    response = self.rpc_request(\"chain_getRuntimeVersion\", [block_hash])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7fd7573204c0>\nmethod = 'chain_getRuntimeVersion'\nparams = ['0x81c1557f3922b1d52236af0055aa7794b4b4c4d4e887e37fd399d296ba6ba644']\nresult_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"3d7f543a9f1b1d9c","name":"stdout","source":"3d7f543a9f1b1d9c.txt","type":"text/plain","size":1137}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_network_parameters"},{"name":"subSuite","value":"TestPrecision"},{"name":"host","value":"fv-az627-436"},{"name":"thread","value":"1977-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_network_parameters"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"chain","value":"<scripts.utils.chain_model.Chain object at 0x7fd75982da20>"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a9fcbd54187eab8b","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1686729867455,"stop":1686729868249,"duration":794}},{"uid":"cea00cd6b2d15f32","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method not found'}","time":{"start":1686729850938,"stop":1686729851702,"duration":764}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":241,"unknown":0,"total":243},"items":[{"uid":"b9516e36b6f89e85","reportUrl":"https://novasamatech.github.io/test-runner/3204//#testresult/b9516e36b6f89e85","status":"passed","time":{"start":1686715433421,"stop":1686715441890,"duration":8469}},{"uid":"cc0219a9ad46062e","reportUrl":"https://novasamatech.github.io/test-runner/3203//#testresult/cc0219a9ad46062e","status":"passed","time":{"start":1686701609194,"stop":1686701620673,"duration":11479}},{"uid":"9ee4e4e834523cfe","reportUrl":"https://novasamatech.github.io/test-runner/3202//#testresult/9ee4e4e834523cfe","status":"passed","time":{"start":1686686652409,"stop":1686686660175,"duration":7766}},{"uid":"6bdf683b70779915","reportUrl":"https://novasamatech.github.io/test-runner/3201//#testresult/6bdf683b70779915","status":"passed","time":{"start":1686672264530,"stop":1686672277429,"duration":12899}},{"uid":"f5a9ca57090cecab","reportUrl":"https://novasamatech.github.io/test-runner/3200//#testresult/f5a9ca57090cecab","status":"passed","time":{"start":1686657895721,"stop":1686657904901,"duration":9180}},{"uid":"f4d5e5d8e2a0c8ed","reportUrl":"https://novasamatech.github.io/test-runner/3199//#testresult/f4d5e5d8e2a0c8ed","status":"passed","time":{"start":1686643507203,"stop":1686643515127,"duration":7924}},{"uid":"78ee06c09046a8c3","reportUrl":"https://novasamatech.github.io/test-runner/3198//#testresult/78ee06c09046a8c3","status":"passed","time":{"start":1686629050492,"stop":1686629058125,"duration":7633}},{"uid":"b260d25f6ab127a6","reportUrl":"https://novasamatech.github.io/test-runner/3197//#testresult/b260d25f6ab127a6","status":"passed","time":{"start":1686615260876,"stop":1686615267980,"duration":7104}},{"uid":"ceffaa8f531a2136","reportUrl":"https://novasamatech.github.io/test-runner/3196//#testresult/ceffaa8f531a2136","status":"passed","time":{"start":1686600241212,"stop":1686600250346,"duration":9134}},{"uid":"fd11ed2681fad52","reportUrl":"https://novasamatech.github.io/test-runner/3195//#testresult/fd11ed2681fad52","status":"passed","time":{"start":1686585833509,"stop":1686585841305,"duration":7796}},{"uid":"1eea31c341059871","reportUrl":"https://novasamatech.github.io/test-runner/3194//#testresult/1eea31c341059871","status":"passed","time":{"start":1686571508613,"stop":1686571518536,"duration":9923}},{"uid":"150ae25ca4ed984b","reportUrl":"https://novasamatech.github.io/test-runner/3193//#testresult/150ae25ca4ed984b","status":"passed","time":{"start":1686557062343,"stop":1686557069927,"duration":7584}},{"uid":"6f3d5900cec7af6c","reportUrl":"https://novasamatech.github.io/test-runner/3192//#testresult/6f3d5900cec7af6c","status":"passed","time":{"start":1686542644320,"stop":1686542652031,"duration":7711}},{"uid":"64919a5fa380ee6f","reportUrl":"https://novasamatech.github.io/test-runner/3191//#testresult/64919a5fa380ee6f","status":"passed","time":{"start":1686528902285,"stop":1686528912474,"duration":10189}},{"uid":"3767015ffcb953d5","reportUrl":"https://novasamatech.github.io/test-runner/3190//#testresult/3767015ffcb953d5","status":"passed","time":{"start":1686513833831,"stop":1686513844340,"duration":10509}},{"uid":"4b7722077c6b2110","reportUrl":"https://novasamatech.github.io/test-runner/3189//#testresult/4b7722077c6b2110","status":"passed","time":{"start":1686499440116,"stop":1686499447791,"duration":7675}},{"uid":"2727db1d6a4b75f5","reportUrl":"https://novasamatech.github.io/test-runner/3188//#testresult/2727db1d6a4b75f5","status":"passed","time":{"start":1686485091767,"stop":1686485100367,"duration":8600}},{"uid":"b98af1f0686722e6","reportUrl":"https://novasamatech.github.io/test-runner/3187//#testresult/b98af1f0686722e6","status":"passed","time":{"start":1686470648534,"stop":1686470656727,"duration":8193}},{"uid":"9e15cecf1afd7420","reportUrl":"https://novasamatech.github.io/test-runner/3186//#testresult/9e15cecf1afd7420","status":"passed","time":{"start":1686456230739,"stop":1686456238808,"duration":8069}},{"uid":"3d18e3d7521e0815","reportUrl":"https://novasamatech.github.io/test-runner/3185//#testresult/3d18e3d7521e0815","status":"passed","time":{"start":1686442514622,"stop":1686442521329,"duration":6707}}]},"tags":[]},"source":"4b463c1b436a76bc.json","parameterValues":["<scripts.utils.chain_model.Chain object at 0x7fd75982da20>"]}