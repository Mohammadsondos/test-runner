{"uid":"876c73ae5badff93","name":"test_can_create_connection[Test for Jur, url: wss://jur-mainnet-archive-rpc-1.icebergnodes.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"dd04e52265ef77974494aaad2d4c080f","time":{"start":1695657807005,"stop":1695657807360,"duration":355},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 25 Sep 2023 16:03:27 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 25 Sep 2023 16:03:27 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 25 Sep 2023 16:03:27 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Jur', 'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 25 Sep 2023 16:03:27 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"25ee5a6a748f9219","name":"stdout","source":"25ee5a6a748f9219.txt","type":"text/plain","size":1458}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az616-804"},{"name":"thread","value":"2126-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c48063c35a796f8a","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 25 Sep 2023 16:03:11 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695657791473,"stop":1695657791884,"duration":411}},{"uid":"526fe62dae8c0b48","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Mon, 25 Sep 2023 16:02:56 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695657775816,"stop":1695657776314,"duration":498}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":8,"skipped":0,"passed":186,"unknown":0,"total":194},"items":[{"uid":"b54d14b67ccff92e","reportUrl":"https://novasamatech.github.io/test-runner/3833//#testresult/b54d14b67ccff92e","status":"passed","time":{"start":1695643347984,"stop":1695643348745,"duration":761}},{"uid":"7a479052a5114eda","reportUrl":"https://novasamatech.github.io/test-runner/3832//#testresult/7a479052a5114eda","status":"passed","time":{"start":1695628990279,"stop":1695628990831,"duration":552}},{"uid":"f3843d41962adbd3","reportUrl":"https://novasamatech.github.io/test-runner/3831//#testresult/f3843d41962adbd3","status":"passed","time":{"start":1695614537932,"stop":1695614538306,"duration":374}},{"uid":"c2b775346a96dae8","reportUrl":"https://novasamatech.github.io/test-runner/3830//#testresult/c2b775346a96dae8","status":"passed","time":{"start":1695600183894,"stop":1695600184549,"duration":655}},{"uid":"c8e32b32e32cd64a","reportUrl":"https://novasamatech.github.io/test-runner/3829//#testresult/c8e32b32e32cd64a","status":"passed","time":{"start":1695585746961,"stop":1695585747516,"duration":555}},{"uid":"ed44fa4d62f8e7b4","reportUrl":"https://novasamatech.github.io/test-runner/3828//#testresult/ed44fa4d62f8e7b4","status":"passed","time":{"start":1695571338969,"stop":1695571339519,"duration":550}},{"uid":"8225d0c07902f4","reportUrl":"https://novasamatech.github.io/test-runner/3827//#testresult/8225d0c07902f4","status":"passed","time":{"start":1695556929285,"stop":1695556929841,"duration":556}},{"uid":"b99b8a9ae45fa826","reportUrl":"https://novasamatech.github.io/test-runner/3826//#testresult/b99b8a9ae45fa826","status":"passed","time":{"start":1695542542591,"stop":1695542543207,"duration":616}},{"uid":"3716907e3ea0573e","reportUrl":"https://novasamatech.github.io/test-runner/3825//#testresult/3716907e3ea0573e","status":"passed","time":{"start":1695528122426,"stop":1695528122807,"duration":381}},{"uid":"b869e77ec5563a0c","reportUrl":"https://novasamatech.github.io/test-runner/3824//#testresult/b869e77ec5563a0c","status":"passed","time":{"start":1695513773903,"stop":1695513774407,"duration":504}},{"uid":"38e6e04b0f133c14","reportUrl":"https://novasamatech.github.io/test-runner/3823//#testresult/38e6e04b0f133c14","status":"passed","time":{"start":1695499327726,"stop":1695499328109,"duration":383}},{"uid":"d8bcb61fe6661bf3","reportUrl":"https://novasamatech.github.io/test-runner/3822//#testresult/d8bcb61fe6661bf3","status":"passed","time":{"start":1695484934979,"stop":1695484935370,"duration":391}},{"uid":"d8f6e59693153175","reportUrl":"https://novasamatech.github.io/test-runner/3821//#testresult/d8f6e59693153175","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sat, 23 Sep 2023 12:02:59 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1695470579348,"stop":1695470579784,"duration":436}},{"uid":"643fc8fef5a4f83","reportUrl":"https://novasamatech.github.io/test-runner/3820//#testresult/643fc8fef5a4f83","status":"passed","time":{"start":1695456114076,"stop":1695456114486,"duration":410}},{"uid":"b77ca9ce95564de6","reportUrl":"https://novasamatech.github.io/test-runner/3819//#testresult/b77ca9ce95564de6","status":"passed","time":{"start":1695441718336,"stop":1695441718914,"duration":578}},{"uid":"2cbee9a17ce40423","reportUrl":"https://novasamatech.github.io/test-runner/3818//#testresult/2cbee9a17ce40423","status":"passed","time":{"start":1695427372846,"stop":1695427373382,"duration":536}},{"uid":"698cf05f807af326","reportUrl":"https://novasamatech.github.io/test-runner/3817//#testresult/698cf05f807af326","status":"passed","time":{"start":1695412927116,"stop":1695412927508,"duration":392}},{"uid":"6de40bae3b8f72fc","reportUrl":"https://novasamatech.github.io/test-runner/3816//#testresult/6de40bae3b8f72fc","status":"passed","time":{"start":1695398535109,"stop":1695398535652,"duration":543}},{"uid":"48ec62ad2d409a12","reportUrl":"https://novasamatech.github.io/test-runner/3815//#testresult/48ec62ad2d409a12","status":"passed","time":{"start":1695384138285,"stop":1695384138917,"duration":632}},{"uid":"a3014d2e391a8411","reportUrl":"https://novasamatech.github.io/test-runner/3814//#testresult/a3014d2e391a8411","status":"passed","time":{"start":1695369759177,"stop":1695369759945,"duration":768}}]},"tags":[]},"source":"876c73ae5badff93.json","parameterValues":["{'url': 'wss://jur-mainnet-archive-rpc-1.icebergnodes.io', 'name': 'Jur'}"]}