{"uid":"1b960052eb1a8add","name":"test_can_create_connection[Test for DAO IPCI, url: wss://kusama.rpc.ipci.io]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"a9e2a761292e07c67736c1884dbb9915","time":{"start":1694376184204,"stop":1694376184502,"duration":298},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 10 Sep 2023 20:03:04 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 10 Sep 2023 20:03:04 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 10 Sep 2023 20:03:04 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'DAO IPCI', 'url': 'wss://kusama.rpc.ipci.io'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 10 Sep 2023 20:03:04 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"83ebcd1f038ec6f4","name":"stdout","source":"83ebcd1f038ec6f4.txt","type":"text/plain","size":1464}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az851-482"},{"name":"thread","value":"2058-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3e4316ecbb9fd6ba","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 10 Sep 2023 20:02:49 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694376168814,"stop":1694376169111,"duration":297}},{"uid":"83a8f1351a3b3b76","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 500 Internal Server Error -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 10 Sep 2023 20:02:33 GMT', 'content-type': 'text/html', 'content-length': '186', 'connection': 'close'} -+-+- b'<html>\\r\\n<head><title>500 Internal Server Error</title></head>\\r\\n<body>\\r\\n<center><h1>500 Internal Server Error</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1694376153363,"stop":1694376153675,"duration":312}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":6,"skipped":0,"passed":99,"unknown":0,"total":105},"items":[{"uid":"d0226326dc2f7f5b","reportUrl":"https://novasamatech.github.io/test-runner/3743//#testresult/d0226326dc2f7f5b","status":"passed","time":{"start":1694361742844,"stop":1694361743355,"duration":511}},{"uid":"90f02b51de2a123e","reportUrl":"https://novasamatech.github.io/test-runner/3742//#testresult/90f02b51de2a123e","status":"passed","time":{"start":1694347322535,"stop":1694347323121,"duration":586}},{"uid":"1f6871c04643009","reportUrl":"https://novasamatech.github.io/test-runner/3741//#testresult/1f6871c04643009","status":"passed","time":{"start":1694332954831,"stop":1694332955345,"duration":514}},{"uid":"c248b3fcba0c7c25","reportUrl":"https://novasamatech.github.io/test-runner/3740//#testresult/c248b3fcba0c7c25","status":"passed","time":{"start":1694318546421,"stop":1694318546981,"duration":560}},{"uid":"434ab307c191a909","reportUrl":"https://novasamatech.github.io/test-runner/3739//#testresult/434ab307c191a909","status":"passed","time":{"start":1694304169847,"stop":1694304170573,"duration":726}},{"uid":"ea0e944d2d550055","reportUrl":"https://novasamatech.github.io/test-runner/3738//#testresult/ea0e944d2d550055","status":"passed","time":{"start":1694289751870,"stop":1694289752424,"duration":554}},{"uid":"1c15682d901cd73c","reportUrl":"https://novasamatech.github.io/test-runner/3737//#testresult/1c15682d901cd73c","status":"passed","time":{"start":1694275355440,"stop":1694275355851,"duration":411}},{"uid":"95fd5d8425296ae2","reportUrl":"https://novasamatech.github.io/test-runner/3736//#testresult/95fd5d8425296ae2","status":"passed","time":{"start":1694260942113,"stop":1694260942494,"duration":381}},{"uid":"42faa4bb1b1a8a40","reportUrl":"https://novasamatech.github.io/test-runner/3735//#testresult/42faa4bb1b1a8a40","status":"passed","time":{"start":1694246575955,"stop":1694246576341,"duration":386}},{"uid":"70865bb21f38bf24","reportUrl":"https://novasamatech.github.io/test-runner/3734//#testresult/70865bb21f38bf24","status":"passed","time":{"start":1694232143499,"stop":1694232144061,"duration":562}},{"uid":"18e922c66dca13aa","reportUrl":"https://novasamatech.github.io/test-runner/3733//#testresult/18e922c66dca13aa","status":"passed","time":{"start":1694217816570,"stop":1694217816999,"duration":429}},{"uid":"6bacc5ba6113f9f5","reportUrl":"https://novasamatech.github.io/test-runner/3732//#testresult/6bacc5ba6113f9f5","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1694203369084,"stop":1694203369341,"duration":257}},{"uid":"99b7c706c300d6de","reportUrl":"https://novasamatech.github.io/test-runner/3731//#testresult/99b7c706c300d6de","status":"broken","statusDetails":"ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)","time":{"start":1694188982551,"stop":1694188982881,"duration":330}},{"uid":"334764e92b87326a","reportUrl":"https://novasamatech.github.io/test-runner/3730//#testresult/334764e92b87326a","status":"passed","time":{"start":1694174543635,"stop":1694174544136,"duration":501}},{"uid":"caec4d3e774e7601","reportUrl":"https://novasamatech.github.io/test-runner/3729//#testresult/caec4d3e774e7601","status":"passed","time":{"start":1694160113885,"stop":1694160114283,"duration":398}},{"uid":"8a3e8b0d05688ecf","reportUrl":"https://novasamatech.github.io/test-runner/3728//#testresult/8a3e8b0d05688ecf","status":"passed","time":{"start":1694145755653,"stop":1694145756035,"duration":382}},{"uid":"6a700b7c0771447b","reportUrl":"https://novasamatech.github.io/test-runner/3727//#testresult/6a700b7c0771447b","status":"passed","time":{"start":1694131374940,"stop":1694131375513,"duration":573}},{"uid":"a43c0ae5656d6869","reportUrl":"https://novasamatech.github.io/test-runner/3726//#testresult/a43c0ae5656d6869","status":"passed","time":{"start":1694116906562,"stop":1694116907126,"duration":564}},{"uid":"6c9cd6726915f3c0","reportUrl":"https://novasamatech.github.io/test-runner/3725//#testresult/6c9cd6726915f3c0","status":"passed","time":{"start":1694102565204,"stop":1694102565718,"duration":514}},{"uid":"c579ff23f98f5593","reportUrl":"https://novasamatech.github.io/test-runner/3724//#testresult/c579ff23f98f5593","status":"passed","time":{"start":1694088177765,"stop":1694088178405,"duration":640}}]},"tags":[]},"source":"1b960052eb1a8add.json","parameterValues":["{'url': 'wss://kusama.rpc.ipci.io', 'name': 'DAO IPCI'}"]}