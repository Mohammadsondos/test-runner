{"uid":"511adc5174cade40","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1712419280045,"stop":1712419280326,"duration":281},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f0b6c8896c0>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f0b6c75e230>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f0b6c75f490>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az585-190"},{"name":"thread","value":"2035-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bd8757cd0dc02603","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712419274706,"stop":1712419275010,"duration":304}},{"uid":"8974c88f53fbe254","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.1}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1712419267969,"stop":1712419269615,"duration":1646}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":62,"skipped":0,"passed":1025,"unknown":0,"total":1091},"items":[{"uid":"12905233cbf3c128","reportUrl":"https://novasamatech.github.io/test-runner/5015//#testresult/12905233cbf3c128","status":"passed","time":{"start":1712404870131,"stop":1712404871112,"duration":981}},{"uid":"b38c36726c3247a","reportUrl":"https://novasamatech.github.io/test-runner/5014//#testresult/b38c36726c3247a","status":"passed","time":{"start":1712390462278,"stop":1712390463460,"duration":1182}},{"uid":"ca74a4b2c5f31015","reportUrl":"https://novasamatech.github.io/test-runner/5013//#testresult/ca74a4b2c5f31015","status":"passed","time":{"start":1712376059570,"stop":1712376060813,"duration":1243}},{"uid":"829ff3b861f3ddab","reportUrl":"https://novasamatech.github.io/test-runner/5012//#testresult/829ff3b861f3ddab","status":"passed","time":{"start":1712361710805,"stop":1712361712305,"duration":1500}},{"uid":"656d36ec4647bc04","reportUrl":"https://novasamatech.github.io/test-runner/5011//#testresult/656d36ec4647bc04","status":"passed","time":{"start":1712347261040,"stop":1712347262276,"duration":1236}},{"uid":"3d64d2c0736112a6","reportUrl":"https://novasamatech.github.io/test-runner/5010//#testresult/3d64d2c0736112a6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712332870595,"stop":1712332870655,"duration":60}},{"uid":"ad080cef1c4a822a","reportUrl":"https://novasamatech.github.io/test-runner/5009//#testresult/ad080cef1c4a822a","status":"passed","time":{"start":1712318468070,"stop":1712318469206,"duration":1136}},{"uid":"2fed3e1cec31c464","reportUrl":"https://novasamatech.github.io/test-runner/5007//#testresult/2fed3e1cec31c464","status":"passed","time":{"start":1712289662476,"stop":1712289663471,"duration":995}},{"uid":"8da9699f94e28d2f","reportUrl":"https://novasamatech.github.io/test-runner/5006//#testresult/8da9699f94e28d2f","status":"passed","time":{"start":1712275306928,"stop":1712275307793,"duration":865}},{"uid":"faccfef8328c5738","reportUrl":"https://novasamatech.github.io/test-runner/5005//#testresult/faccfef8328c5738","status":"passed","time":{"start":1712260864418,"stop":1712260865927,"duration":1509}},{"uid":"1d0d62e7c0f18374","reportUrl":"https://novasamatech.github.io/test-runner/5004//#testresult/1d0d62e7c0f18374","status":"passed","time":{"start":1712246459423,"stop":1712246460459,"duration":1036}},{"uid":"279daa9a60843e1d","reportUrl":"https://novasamatech.github.io/test-runner/5003//#testresult/279daa9a60843e1d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712232079664,"stop":1712232079731,"duration":67}},{"uid":"e3656ae79d10dc7d","reportUrl":"https://novasamatech.github.io/test-runner/5002//#testresult/e3656ae79d10dc7d","status":"passed","time":{"start":1712217675543,"stop":1712217676399,"duration":856}},{"uid":"249512c314e33b86","reportUrl":"https://novasamatech.github.io/test-runner/5001//#testresult/249512c314e33b86","status":"passed","time":{"start":1712203270376,"stop":1712203271566,"duration":1190}},{"uid":"b36abd7f1eb85044","reportUrl":"https://novasamatech.github.io/test-runner/5000//#testresult/b36abd7f1eb85044","status":"passed","time":{"start":1712188906873,"stop":1712188907871,"duration":998}},{"uid":"1dd165fe5d5e4a42","reportUrl":"https://novasamatech.github.io/test-runner/4999//#testresult/1dd165fe5d5e4a42","status":"passed","time":{"start":1712174459582,"stop":1712174460539,"duration":957}},{"uid":"50fc75b1462624d3","reportUrl":"https://novasamatech.github.io/test-runner/4998//#testresult/50fc75b1462624d3","status":"passed","time":{"start":1712160072340,"stop":1712160073372,"duration":1032}},{"uid":"eeddaacc302a5aca","reportUrl":"https://novasamatech.github.io/test-runner/4997//#testresult/eeddaacc302a5aca","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712145672440,"stop":1712145672857,"duration":417}},{"uid":"9009a094b5d508f0","reportUrl":"https://novasamatech.github.io/test-runner/4996//#testresult/9009a094b5d508f0","status":"passed","time":{"start":1712131273908,"stop":1712131274425,"duration":517}},{"uid":"51052adc251b6ca0","reportUrl":"https://novasamatech.github.io/test-runner/4995//#testresult/51052adc251b6ca0","status":"passed","time":{"start":1712116864014,"stop":1712116864876,"duration":862}}]},"tags":[]},"source":"511adc5174cade40.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}