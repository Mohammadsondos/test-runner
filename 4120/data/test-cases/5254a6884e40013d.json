{"uid":"5254a6884e40013d","name":"test_can_create_connection[Test for Calamari, url: wss://calamari.systems]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"1f97e1b2aa75f736283999eef96b536b","time":{"start":1699747427227,"stop":1699747427807,"duration":580},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 00:03:47 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://calamari.systems'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 00:03:47 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 00:03:47 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","statusTrace":"data = {'name': 'Calamari', 'url': 'wss://calamari.systems'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 00:03:47 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"e0c71a7a635eb6cb","name":"stdout","source":"e0c71a7a635eb6cb.txt","type":"text/plain","size":1383}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az565-977"},{"name":"thread","value":"2325-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://calamari.systems', 'name': 'Calamari'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"fd5ea8c90e7ebde9","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 00:03:32 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699747411715,"stop":1699747412091,"duration":376}},{"uid":"f38f071e8472c8ef","status":"broken","statusDetails":"websocket._exceptions.WebSocketBadStatusException: Handshake status 502 Bad Gateway -+-+- {'server': 'nginx/1.18.0 (Ubuntu)', 'date': 'Sun, 12 Nov 2023 00:03:16 GMT', 'content-type': 'text/html', 'content-length': '166', 'connection': 'keep-alive'} -+-+- b'<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\\r\\n</body>\\r\\n</html>\\r\\n'","time":{"start":1699747364493,"stop":1699747396623,"duration":32130}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":478,"unknown":0,"total":480},"items":[{"uid":"3d93c59291253571","reportUrl":"https://novasamatech.github.io/test-runner/4119//#testresult/3d93c59291253571","status":"passed","time":{"start":1699732933009,"stop":1699732933620,"duration":611}},{"uid":"6b72a6be8955a27e","reportUrl":"https://novasamatech.github.io/test-runner/4118//#testresult/6b72a6be8955a27e","status":"passed","time":{"start":1699718481271,"stop":1699718481615,"duration":344}},{"uid":"6a39892e366bde05","reportUrl":"https://novasamatech.github.io/test-runner/4117//#testresult/6a39892e366bde05","status":"passed","time":{"start":1699704082290,"stop":1699704082940,"duration":650}},{"uid":"6f8dee499a9e61f9","reportUrl":"https://novasamatech.github.io/test-runner/4116//#testresult/6f8dee499a9e61f9","status":"passed","time":{"start":1699689835564,"stop":1699689835898,"duration":334}},{"uid":"701beca337ac65c1","reportUrl":"https://novasamatech.github.io/test-runner/4115//#testresult/701beca337ac65c1","status":"passed","time":{"start":1699675274414,"stop":1699675295583,"duration":21169}},{"uid":"19c989ab7f7d9fa","reportUrl":"https://novasamatech.github.io/test-runner/4114//#testresult/19c989ab7f7d9fa","status":"passed","time":{"start":1699660967369,"stop":1699660968284,"duration":915}},{"uid":"94385b0a6d371ee3","reportUrl":"https://novasamatech.github.io/test-runner/4113//#testresult/94385b0a6d371ee3","status":"passed","time":{"start":1699646643152,"stop":1699646643949,"duration":797}},{"uid":"486a0f2d15444b3c","reportUrl":"https://novasamatech.github.io/test-runner/4112//#testresult/486a0f2d15444b3c","status":"passed","time":{"start":1699632139083,"stop":1699632139377,"duration":294}},{"uid":"c87f9ef51f14065a","reportUrl":"https://novasamatech.github.io/test-runner/4111//#testresult/c87f9ef51f14065a","status":"passed","time":{"start":1699617678922,"stop":1699617679246,"duration":324}},{"uid":"7bc17b744154fdc0","reportUrl":"https://novasamatech.github.io/test-runner/4110//#testresult/7bc17b744154fdc0","status":"passed","time":{"start":1699603366476,"stop":1699603367120,"duration":644}},{"uid":"41e39af3ccedd750","reportUrl":"https://novasamatech.github.io/test-runner/4109//#testresult/41e39af3ccedd750","status":"passed","time":{"start":1699588952863,"stop":1699588953627,"duration":764}},{"uid":"817ec25f4155b49a","reportUrl":"https://novasamatech.github.io/test-runner/4108//#testresult/817ec25f4155b49a","status":"passed","time":{"start":1699574536897,"stop":1699574537898,"duration":1001}},{"uid":"77f56a7af5e66cd3","reportUrl":"https://novasamatech.github.io/test-runner/4107//#testresult/77f56a7af5e66cd3","status":"passed","time":{"start":1699560088060,"stop":1699560088603,"duration":543}},{"uid":"c901c169651797ea","reportUrl":"https://novasamatech.github.io/test-runner/4106//#testresult/c901c169651797ea","status":"passed","time":{"start":1699545684215,"stop":1699545685098,"duration":883}},{"uid":"43a1950e0718ddfd","reportUrl":"https://novasamatech.github.io/test-runner/4105//#testresult/43a1950e0718ddfd","status":"passed","time":{"start":1699531368430,"stop":1699531368952,"duration":522}},{"uid":"7d0c354d22e1c952","reportUrl":"https://novasamatech.github.io/test-runner/4104//#testresult/7d0c354d22e1c952","status":"passed","time":{"start":1699516902461,"stop":1699516903298,"duration":837}},{"uid":"e4d09457308644b5","reportUrl":"https://novasamatech.github.io/test-runner/4103//#testresult/e4d09457308644b5","status":"passed","time":{"start":1699502484640,"stop":1699502485540,"duration":900}},{"uid":"f7a781be1bdfe183","reportUrl":"https://novasamatech.github.io/test-runner/4102//#testresult/f7a781be1bdfe183","status":"passed","time":{"start":1699488140387,"stop":1699488140532,"duration":145}},{"uid":"ecdd0d72954a131a","reportUrl":"https://novasamatech.github.io/test-runner/4101//#testresult/ecdd0d72954a131a","status":"passed","time":{"start":1699473668832,"stop":1699473669722,"duration":890}},{"uid":"5fdaac20a848989e","reportUrl":"https://novasamatech.github.io/test-runner/4100//#testresult/5fdaac20a848989e","status":"passed","time":{"start":1699459275914,"stop":1699459276367,"duration":453}}]},"tags":[]},"source":"5254a6884e40013d.json","parameterValues":["{'url': 'wss://calamari.systems', 'name': 'Calamari'}"]}