{"uid":"4486efd7459fc773","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://1rpc.io/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"9e0c16e1a7876bd51b49d655a0298c26","time":{"start":1712606466280,"stop":1712606466363,"duration":83},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f52f6393790>\ndata = {'name': 'Ethereum', 'url': 'https://1rpc.io/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f52f6291b70>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f52f6292d10>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az738-215"},{"name":"thread","value":"2117-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"643963b7d7f3c786","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712606461197,"stop":1712606461245,"duration":48}},{"uid":"ba1545ab6dcd89c4","status":"broken","statusDetails":"ValueError: {'code': -32005, 'message': 'daily request count exceeded, request rate limited', 'data': {'rate': {'allowed_rps': 1, 'backoff_seconds': 30, 'current_rps': 1.2}, 'see': 'https://infura.io/dashboard'}}","time":{"start":1712606454509,"stop":1712606456101,"duration":1592}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":63,"skipped":0,"passed":1037,"unknown":0,"total":1104},"items":[{"uid":"217f33e97ba9415f","reportUrl":"https://novasamatech.github.io/test-runner/5028//#testresult/217f33e97ba9415f","status":"passed","time":{"start":1712592062659,"stop":1712592063843,"duration":1184}},{"uid":"bd3b3dae6d931c73","reportUrl":"https://novasamatech.github.io/test-runner/5027//#testresult/bd3b3dae6d931c73","status":"passed","time":{"start":1712577670187,"stop":1712577671136,"duration":949}},{"uid":"118c0d971ffb70e2","reportUrl":"https://novasamatech.github.io/test-runner/5026//#testresult/118c0d971ffb70e2","status":"passed","time":{"start":1712563273439,"stop":1712563274843,"duration":1404}},{"uid":"b82d43715d5c39c6","reportUrl":"https://novasamatech.github.io/test-runner/5025//#testresult/b82d43715d5c39c6","status":"passed","time":{"start":1712548860914,"stop":1712548861849,"duration":935}},{"uid":"f40fceb94b80a26d","reportUrl":"https://novasamatech.github.io/test-runner/5024//#testresult/f40fceb94b80a26d","status":"passed","time":{"start":1712534511955,"stop":1712534512865,"duration":910}},{"uid":"f788ffd87c174f66","reportUrl":"https://novasamatech.github.io/test-runner/5023//#testresult/f788ffd87c174f66","status":"passed","time":{"start":1712520064029,"stop":1712520064740,"duration":711}},{"uid":"7201bc28c8f6f6f3","reportUrl":"https://novasamatech.github.io/test-runner/5022//#testresult/7201bc28c8f6f6f3","status":"passed","time":{"start":1712505664775,"stop":1712505665782,"duration":1007}},{"uid":"2cfe14b9529c827a","reportUrl":"https://novasamatech.github.io/test-runner/5021//#testresult/2cfe14b9529c827a","status":"passed","time":{"start":1712491265304,"stop":1712491266820,"duration":1516}},{"uid":"db46fbfc20c106f3","reportUrl":"https://novasamatech.github.io/test-runner/5020//#testresult/db46fbfc20c106f3","status":"passed","time":{"start":1712476861954,"stop":1712476862983,"duration":1029}},{"uid":"701b55f7194d83f1","reportUrl":"https://novasamatech.github.io/test-runner/5019//#testresult/701b55f7194d83f1","status":"passed","time":{"start":1712462467523,"stop":1712462468657,"duration":1134}},{"uid":"94b63069704ac6bd","reportUrl":"https://novasamatech.github.io/test-runner/5018//#testresult/94b63069704ac6bd","status":"passed","time":{"start":1712448108035,"stop":1712448109758,"duration":1723}},{"uid":"182160de86e50691","reportUrl":"https://novasamatech.github.io/test-runner/5017//#testresult/182160de86e50691","status":"passed","time":{"start":1712433659653,"stop":1712433661110,"duration":1457}},{"uid":"511adc5174cade40","reportUrl":"https://novasamatech.github.io/test-runner/5016//#testresult/511adc5174cade40","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712419280045,"stop":1712419280326,"duration":281}},{"uid":"12905233cbf3c128","reportUrl":"https://novasamatech.github.io/test-runner/5015//#testresult/12905233cbf3c128","status":"passed","time":{"start":1712404870131,"stop":1712404871112,"duration":981}},{"uid":"b38c36726c3247a","reportUrl":"https://novasamatech.github.io/test-runner/5014//#testresult/b38c36726c3247a","status":"passed","time":{"start":1712390462278,"stop":1712390463460,"duration":1182}},{"uid":"ca74a4b2c5f31015","reportUrl":"https://novasamatech.github.io/test-runner/5013//#testresult/ca74a4b2c5f31015","status":"passed","time":{"start":1712376059570,"stop":1712376060813,"duration":1243}},{"uid":"829ff3b861f3ddab","reportUrl":"https://novasamatech.github.io/test-runner/5012//#testresult/829ff3b861f3ddab","status":"passed","time":{"start":1712361710805,"stop":1712361712305,"duration":1500}},{"uid":"656d36ec4647bc04","reportUrl":"https://novasamatech.github.io/test-runner/5011//#testresult/656d36ec4647bc04","status":"passed","time":{"start":1712347261040,"stop":1712347262276,"duration":1236}},{"uid":"3d64d2c0736112a6","reportUrl":"https://novasamatech.github.io/test-runner/5010//#testresult/3d64d2c0736112a6","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712332870595,"stop":1712332870655,"duration":60}},{"uid":"ad080cef1c4a822a","reportUrl":"https://novasamatech.github.io/test-runner/5009//#testresult/ad080cef1c4a822a","status":"passed","time":{"start":1712318468070,"stop":1712318469206,"duration":1136}}]},"tags":[]},"source":"4486efd7459fc773.json","parameterValues":["{'url': 'https://1rpc.io/eth', 'name': 'Ethereum'}"]}