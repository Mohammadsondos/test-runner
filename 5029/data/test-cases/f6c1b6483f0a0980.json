{"uid":"f6c1b6483f0a0980","name":"test_rpc_node_is_synced[Test for Ethereum, url: https://rpc.ankr.com/eth]","fullName":"tests.test_eth_nodes_availability.TestETHNodesAvailability#test_rpc_node_is_synced","historyId":"516fb730c8759321b4247b2023dc8930","time":{"start":1712606466132,"stop":1712606466183,"duration":51},"status":"broken","statusMessage":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","statusTrace":"self = <tests.test_eth_nodes_availability.TestETHNodesAvailability object at 0x7f99be6696c0>\ndata = {'name': 'Ethereum', 'url': 'https://rpc.ankr.com/eth'}\n\n    def test_rpc_node_is_synced(self, data):\n    \n        wss_w3 = Web3(Web3.WebsocketProvider('wss://mainnet.infura.io/ws/v3/32a2be59297444c9bcb2b61bb700c6fe'))\n        # Check if connected to wss node\n>       assert wss_w3.is_connected(), \"Failed to connect to Ethereum wss node\"\n\ntests/test_eth_nodes_availability.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/web3/main.py:445: in is_connected\n    return self.provider.is_connected()\n.venv/lib/python3.10/site-packages/web3/providers/base.py:110: in is_connected\n    response = self.make_request(RPCEndpoint(\"web3_clientVersion\"), [])\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:135: in make_request\n    return future.result()\n/usr/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:119: in coro_make_request\n    async with self.conn as conn:\n.venv/lib/python3.10/site-packages/web3/providers/websocket.py:68: in __aenter__\n    self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:647: in __await_impl_timeout__\n    return await self.__await_impl__()\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:654: in __await_impl__\n    await protocol.handshake(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <websockets.legacy.client.WebSocketClientProtocol object at 0x7f99bc43b5e0>\nwsuri = WebSocketURI(secure=True, host='mainnet.infura.io', port=443, path='/ws/v3/32a2be59297444c9bcb2b61bb700c6fe', query='', username=None, password=None)\norigin = None\navailable_extensions = [<websockets.extensions.permessage_deflate.ClientPerMessageDeflateFactory object at 0x7f99bc43ad10>]\navailable_subprotocols = None, extra_headers = None\n\n    async def handshake(\n        self,\n        wsuri: WebSocketURI,\n        origin: Optional[Origin] = None,\n        available_extensions: Optional[Sequence[ClientExtensionFactory]] = None,\n        available_subprotocols: Optional[Sequence[Subprotocol]] = None,\n        extra_headers: Optional[HeadersLike] = None,\n    ) -> None:\n        \"\"\"\n        Perform the client side of the opening handshake.\n    \n        Args:\n            wsuri: URI of the WebSocket server.\n            origin: Value of the ``Origin`` header.\n            extensions: List of supported extensions, in order in which they\n                should be negotiated and run.\n            subprotocols: List of supported subprotocols, in order of decreasing\n                preference.\n            extra_headers: Arbitrary HTTP headers to add to the handshake request.\n    \n        Raises:\n            InvalidHandshake: If the handshake fails.\n    \n        \"\"\"\n        request_headers = Headers()\n    \n        request_headers[\"Host\"] = build_host(wsuri.host, wsuri.port, wsuri.secure)\n    \n        if wsuri.user_info:\n            request_headers[\"Authorization\"] = build_authorization_basic(\n                *wsuri.user_info\n            )\n    \n        if origin is not None:\n            request_headers[\"Origin\"] = origin\n    \n        key = build_request(request_headers)\n    \n        if available_extensions is not None:\n            extensions_header = build_extension(\n                [\n                    (extension_factory.name, extension_factory.get_request_params())\n                    for extension_factory in available_extensions\n                ]\n            )\n            request_headers[\"Sec-WebSocket-Extensions\"] = extensions_header\n    \n        if available_subprotocols is not None:\n            protocol_header = build_subprotocol(available_subprotocols)\n            request_headers[\"Sec-WebSocket-Protocol\"] = protocol_header\n    \n        if self.extra_headers is not None:\n            request_headers.update(self.extra_headers)\n    \n        if self.user_agent_header is not None:\n            request_headers.setdefault(\"User-Agent\", self.user_agent_header)\n    \n        self.write_http_request(wsuri.resource_name, request_headers)\n    \n        status_code, response_headers = await self.read_http_response()\n        if status_code in (301, 302, 303, 307, 308):\n            if \"Location\" not in response_headers:\n                raise InvalidHeader(\"Location\")\n            raise RedirectHandshake(response_headers[\"Location\"])\n        elif status_code != 101:\n>           raise InvalidStatusCode(status_code, response_headers)\nE           websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429\n\n.venv/lib/python3.10/site-packages/websockets/legacy/client.py:325: InvalidStatusCode","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eth_nodes_availability"},{"name":"subSuite","value":"TestETHNodesAvailability"},{"name":"host","value":"fv-az738-215"},{"name":"thread","value":"2123-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eth_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"721f06e96e45ab5c","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712606460991,"stop":1712606461098,"duration":107}},{"uid":"1495aa6a10e88f31","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712606455836,"stop":1712606455881,"duration":45}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":50,"skipped":0,"passed":1051,"unknown":0,"total":1104},"items":[{"uid":"2c0ea20c924b0200","reportUrl":"https://novasamatech.github.io/test-runner/5028//#testresult/2c0ea20c924b0200","status":"passed","time":{"start":1712592063940,"stop":1712592064239,"duration":299}},{"uid":"6721690e051ce681","reportUrl":"https://novasamatech.github.io/test-runner/5027//#testresult/6721690e051ce681","status":"passed","time":{"start":1712577669210,"stop":1712577669630,"duration":420}},{"uid":"c30c7b4c730c45f1","reportUrl":"https://novasamatech.github.io/test-runner/5026//#testresult/c30c7b4c730c45f1","status":"passed","time":{"start":1712563274395,"stop":1712563274642,"duration":247}},{"uid":"47851c31d94779bd","reportUrl":"https://novasamatech.github.io/test-runner/5025//#testresult/47851c31d94779bd","status":"passed","time":{"start":1712548860303,"stop":1712548860911,"duration":608}},{"uid":"97f879745dea4a5c","reportUrl":"https://novasamatech.github.io/test-runner/5024//#testresult/97f879745dea4a5c","status":"passed","time":{"start":1712534511362,"stop":1712534511952,"duration":590}},{"uid":"25e951e264f47cf9","reportUrl":"https://novasamatech.github.io/test-runner/5023//#testresult/25e951e264f47cf9","status":"passed","time":{"start":1712520062935,"stop":1712520063653,"duration":718}},{"uid":"12b95fd025d19e","reportUrl":"https://novasamatech.github.io/test-runner/5022//#testresult/12b95fd025d19e","status":"passed","time":{"start":1712505664426,"stop":1712505664773,"duration":347}},{"uid":"fd0eaf05282c2268","reportUrl":"https://novasamatech.github.io/test-runner/5021//#testresult/fd0eaf05282c2268","status":"passed","time":{"start":1712491265931,"stop":1712491266310,"duration":379}},{"uid":"c2b1e16fde84c16","reportUrl":"https://novasamatech.github.io/test-runner/5020//#testresult/c2b1e16fde84c16","status":"passed","time":{"start":1712476861635,"stop":1712476861950,"duration":315}},{"uid":"fbd3ee9c55cd2995","reportUrl":"https://novasamatech.github.io/test-runner/5019//#testresult/fbd3ee9c55cd2995","status":"passed","time":{"start":1712462467111,"stop":1712462467697,"duration":586}},{"uid":"a51cab80cccabb3e","reportUrl":"https://novasamatech.github.io/test-runner/5018//#testresult/a51cab80cccabb3e","status":"passed","time":{"start":1712448107478,"stop":1712448108032,"duration":554}},{"uid":"a200eeb8f849288e","reportUrl":"https://novasamatech.github.io/test-runner/5017//#testresult/a200eeb8f849288e","status":"passed","time":{"start":1712433659069,"stop":1712433659649,"duration":580}},{"uid":"8693f22834c46485","reportUrl":"https://novasamatech.github.io/test-runner/5016//#testresult/8693f22834c46485","status":"passed","time":{"start":1712419267523,"stop":1712419268165,"duration":642}},{"uid":"a36a4f07e7358293","reportUrl":"https://novasamatech.github.io/test-runner/5015//#testresult/a36a4f07e7358293","status":"passed","time":{"start":1712404869896,"stop":1712404870127,"duration":231}},{"uid":"8d5bacc78c5270e6","reportUrl":"https://novasamatech.github.io/test-runner/5014//#testresult/8d5bacc78c5270e6","status":"passed","time":{"start":1712390461961,"stop":1712390462207,"duration":246}},{"uid":"bfd9ef2997b1b4c8","reportUrl":"https://novasamatech.github.io/test-runner/5013//#testresult/bfd9ef2997b1b4c8","status":"passed","time":{"start":1712376058969,"stop":1712376059567,"duration":598}},{"uid":"93077b83e3399e4e","reportUrl":"https://novasamatech.github.io/test-runner/5012//#testresult/93077b83e3399e4e","status":"passed","time":{"start":1712361710351,"stop":1712361710929,"duration":578}},{"uid":"82b79ed0c5c8e72d","reportUrl":"https://novasamatech.github.io/test-runner/5011//#testresult/82b79ed0c5c8e72d","status":"broken","statusDetails":"websockets.exceptions.InvalidStatusCode: server rejected WebSocket connection: HTTP 429","time":{"start":1712347271054,"stop":1712347271130,"duration":76}},{"uid":"6d91dd2a8202b8dd","reportUrl":"https://novasamatech.github.io/test-runner/5010//#testresult/6d91dd2a8202b8dd","status":"passed","time":{"start":1712332859106,"stop":1712332859409,"duration":303}},{"uid":"a713c296995b2533","reportUrl":"https://novasamatech.github.io/test-runner/5009//#testresult/a713c296995b2533","status":"passed","time":{"start":1712318467381,"stop":1712318467920,"duration":539}}]},"tags":[]},"source":"f6c1b6483f0a0980.json","parameterValues":["{'url': 'https://rpc.ankr.com/eth', 'name': 'Ethereum'}"]}