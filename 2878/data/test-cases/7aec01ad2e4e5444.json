{"uid":"7aec01ad2e4e5444","name":"test_can_create_connection[Test for Exosama, url: wss://rpc.exosama.com]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"e6ed7d340c7eaf9147505ae9416b61bb","time":{"start":1682265902774,"stop":1682265903363,"duration":589},"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","statusTrace":"data = {'name': 'Exosama', 'url': 'wss://rpc.exosama.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f9be849c700>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","statusTrace":"data = {'name': 'Exosama', 'url': 'wss://rpc.exosama.com'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(chains), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:659: in __init__\n    self.reload_type_registry(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3279: in reload_type_registry\n    self.apply_type_registry_presets(use_remote_preset=use_remote_preset, auto_discover=auto_discover)\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:3293: in apply_type_registry_presets\n    type_registry_name = self.chain.lower().replace(' ', '-')\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:806: in chain\n    self.__chain = self.rpc_request(\"system_chain\", []).get('result')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <substrateinterface.base.SubstrateInterface object at 0x7f9be849c700>\nmethod = 'system_chain', params = [], result_handler = None\n\n    def rpc_request(self, method, params, result_handler=None):\n        \"\"\"\n        Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually\n        use this method to perform the request.\n    \n        Parameters\n        ----------\n        result_handler: Callback function that processes the result received from the node\n        method: method of the JSONRPC request\n        params: a list containing the parameters of the JSONRPC request\n    \n        Returns\n        -------\n        a dict with the parsed result of the request.\n        \"\"\"\n    \n        request_id = self.request_id\n        self.request_id += 1\n    \n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": method,\n            \"params\": params,\n            \"id\": request_id\n        }\n    \n        self.debug_message('RPC request #{}: \"{}\"'.format(request_id, method))\n    \n        if self.websocket:\n            try:\n                self.websocket.send(json.dumps(payload))\n            except WebSocketConnectionClosedException:\n                if self.config.get('auto_reconnect') and self.url:\n                    # Try to reconnect websocket and retry rpc_request\n                    self.debug_message(\"Connection Closed; Trying to reconnecting...\")\n                    self.connect_websocket()\n    \n                    return self.rpc_request(method=method, params=params, result_handler=result_handler)\n                else:\n                    # websocket connection is externally created, re-raise exception\n                    raise\n    \n            update_nr = 0\n            json_body = None\n            subscription_id = None\n    \n            while json_body is None:\n    \n                self.__rpc_message_queue.append(json.loads(self.websocket.recv()))\n    \n                # Search for subscriptions\n                for message in self.__rpc_message_queue:\n    \n                    # Check if result message is matching request ID\n                    if 'id' in message and message['id'] == request_id:\n    \n                        self.__rpc_message_queue.remove(message)\n    \n                        # Check if response has error\n                        if 'error' in message:\n>                           raise SubstrateRequestException(message['error'])\nE                           substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}\n\n../../../../.local/lib/python3.10/site-packages/substrateinterface/base.py:744: SubstrateRequestException","steps":[],"attachments":[{"uid":"e4845b97ada16c00","name":"stdout","source":"e4845b97ada16c00.txt","type":"text/plain","size":280}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az799-417"},{"name":"thread","value":"1805-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://rpc.exosama.com', 'name': 'Exosama'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b648a505dff0766c","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682265892071,"stop":1682265892651,"duration":580}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":23,"skipped":0,"passed":0,"unknown":0,"total":23},"items":[{"uid":"ec255c193bede05","reportUrl":"https://nova-wallet.github.io/test-runner/2877//#testresult/ec255c193bede05","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682251769697,"stop":1682251770121,"duration":424}},{"uid":"4bdb7db0c95f12d0","reportUrl":"https://nova-wallet.github.io/test-runner/2876//#testresult/4bdb7db0c95f12d0","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682237364082,"stop":1682237364638,"duration":556}},{"uid":"d6595bebcc689a78","reportUrl":"https://nova-wallet.github.io/test-runner/2875//#testresult/d6595bebcc689a78","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682222975957,"stop":1682222976379,"duration":422}},{"uid":"ce317d48ef069793","reportUrl":"https://nova-wallet.github.io/test-runner/2874//#testresult/ce317d48ef069793","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682209171120,"stop":1682209171585,"duration":465}},{"uid":"d57c21c0ac9fce7e","reportUrl":"https://nova-wallet.github.io/test-runner/2873//#testresult/d57c21c0ac9fce7e","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682193897508,"stop":1682193898170,"duration":662}},{"uid":"b12ba4659565aeff","reportUrl":"https://nova-wallet.github.io/test-runner/2872//#testresult/b12ba4659565aeff","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682179486327,"stop":1682179486958,"duration":631}},{"uid":"8400021ed572ff18","reportUrl":"https://nova-wallet.github.io/test-runner/2871//#testresult/8400021ed572ff18","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682165134507,"stop":1682165135077,"duration":570}},{"uid":"66dee2fc1ecbde98","reportUrl":"https://nova-wallet.github.io/test-runner/2870//#testresult/66dee2fc1ecbde98","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682150704700,"stop":1682150705284,"duration":584}},{"uid":"8d6bcdb76217f304","reportUrl":"https://nova-wallet.github.io/test-runner/2869//#testresult/8d6bcdb76217f304","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682136316344,"stop":1682136316901,"duration":557}},{"uid":"67a5e8fc5e2c44d5","reportUrl":"https://nova-wallet.github.io/test-runner/2868//#testresult/67a5e8fc5e2c44d5","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682122427888,"stop":1682122428293,"duration":405}},{"uid":"13b0f24a185e3ba7","reportUrl":"https://nova-wallet.github.io/test-runner/2867//#testresult/13b0f24a185e3ba7","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682107478636,"stop":1682107479233,"duration":597}},{"uid":"215c4a8f85c36fca","reportUrl":"https://nova-wallet.github.io/test-runner/2866//#testresult/215c4a8f85c36fca","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682093106711,"stop":1682093107306,"duration":595}},{"uid":"b08c5356da074e08","reportUrl":"https://nova-wallet.github.io/test-runner/2865//#testresult/b08c5356da074e08","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682078743645,"stop":1682078744238,"duration":593}},{"uid":"a619957b7a8dc944","reportUrl":"https://nova-wallet.github.io/test-runner/2864//#testresult/a619957b7a8dc944","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682064287888,"stop":1682064288306,"duration":418}},{"uid":"6a9cbe32bed2524","reportUrl":"https://nova-wallet.github.io/test-runner/2863//#testresult/6a9cbe32bed2524","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682049899196,"stop":1682049899605,"duration":409}},{"uid":"c33f9cca15ffe658","reportUrl":"https://nova-wallet.github.io/test-runner/2862//#testresult/c33f9cca15ffe658","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682035988927,"stop":1682035989508,"duration":581}},{"uid":"a9c8ae56fa350292","reportUrl":"https://nova-wallet.github.io/test-runner/2861//#testresult/a9c8ae56fa350292","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682021087752,"stop":1682021088345,"duration":593}},{"uid":"3fa9e113005aae2a","reportUrl":"https://nova-wallet.github.io/test-runner/2860//#testresult/3fa9e113005aae2a","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1682006719947,"stop":1682006720532,"duration":585}},{"uid":"ad1ca794dabaab29","reportUrl":"https://nova-wallet.github.io/test-runner/2859//#testresult/ad1ca794dabaab29","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681992344571,"stop":1681992345000,"duration":429}},{"uid":"65f955781f0a9d44","reportUrl":"https://nova-wallet.github.io/test-runner/2858//#testresult/65f955781f0a9d44","status":"broken","statusDetails":"substrateinterface.exceptions.SubstrateRequestException: {'code': -32601, 'message': 'Method system_chain is not supported'}","time":{"start":1681977908458,"stop":1681977908889,"duration":431}}]},"tags":[]},"source":"7aec01ad2e4e5444.json","parameterValues":["{'url': 'wss://rpc.exosama.com', 'name': 'Exosama'}"]}