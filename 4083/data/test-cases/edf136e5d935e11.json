{"uid":"edf136e5d935e11","name":"test_can_create_connection[Test for Altair, url: wss://altair.api.onfinality.io/public-ws]","fullName":"tests.test_nodes_availability#test_can_create_connection","historyId":"21accf31cfdd1e2d64086949e5ee4c2e","time":{"start":1699214783527,"stop":1699214874286,"duration":90759},"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Sun, 05 Nov 2023 20:07:54 GMT', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '30043', 'x-kong-proxy-latency': '60002', 'via': 'kong/2.5.2'} -+-+- b''","statusTrace":"data = {'name': 'Altair', 'url': 'wss://altair.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Sun, 05 Nov 2023 20:07:54 GMT', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '30043', 'x-kong-proxy-latency': '60002', 'via': 'kong/2.5.2'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Sun, 05 Nov 2023 20:07:54 GMT', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '30043', 'x-kong-proxy-latency': '60002', 'via': 'kong/2.5.2'} -+-+- b''","statusTrace":"data = {'name': 'Altair', 'url': 'wss://altair.api.onfinality.io/public-ws'}\n\n    @pytest.mark.parametrize(\"data\", collect_nodes_for_chains(get_substrate_chains()), ids=task_ids)\n    def test_can_create_connection(data):\n    \n>       connectin = create_connection_by_url(data[\"url\"])\n\ntests/test_nodes_availability.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nscripts/utils/substrate_interface.py:30: in create_connection_by_url\n    substrate = SubstrateInterface(\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:627: in __init__\n    self.connect_websocket()\n.venv/lib/python3.10/site-packages/substrateinterface/base.py:665: in connect_websocket\n    self.websocket = create_connection(\n.venv/lib/python3.10/site-packages/websocket/_core.py:608: in create_connection\n    websock.connect(url, **options)\n.venv/lib/python3.10/site-packages/websocket/_core.py:253: in connect\n    self.handshake_response = handshake(self.sock, url, *addrs, **options)\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:57: in handshake\n    status, resp = _get_resp_headers(sock)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsock = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nsuccess_statuses = (<HTTPStatus.MOVED_PERMANENTLY: 301>, <HTTPStatus.FOUND: 302>, <HTTPStatus.SEE_OTHER: 303>, <HTTPStatus.SWITCHING_PROTOCOLS: 101>)\n\n    def _get_resp_headers(sock, success_statuses: tuple = SUCCESS_STATUSES) -> tuple:\n        status, resp_headers, status_message = read_headers(sock)\n        if status not in success_statuses:\n            content_len = resp_headers.get('content-length')\n            if content_len:\n                response_body = sock.recv(int(content_len))  # read the body of the HTTP error message response and include it in the exception\n            else:\n                response_body = None\n>           raise WebSocketBadStatusException(\"Handshake status {status} {message} -+-+- {headers} -+-+- {body}\".format(status=status, message=status_message, headers=resp_headers, body=response_body), status, status_message, resp_headers, response_body)\nE           websocket._exceptions.WebSocketBadStatusException: Handshake status 200 OK -+-+- {'content-length': '0', 'connection': 'keep-alive', 'date': 'Sun, 05 Nov 2023 20:07:54 GMT', 'x-continent': 'SA', 'x-cluster': 'sk', 'x-kong-upstream-latency': '30043', 'x-kong-proxy-latency': '60002', 'via': 'kong/2.5.2'} -+-+- b''\n\n.venv/lib/python3.10/site-packages/websocket/_handshake.py:150: WebSocketBadStatusException","steps":[],"attachments":[{"uid":"ffe5990916803f00","name":"stdout","source":"ffe5990916803f00.txt","type":"text/plain","size":608}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_nodes_availability"},{"name":"host","value":"fv-az452-277"},{"name":"thread","value":"2148-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_nodes_availability"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'url': 'wss://altair.api.onfinality.io/public-ws', 'name': 'Altair'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5fd2729855dec6f8","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699214585848,"stop":1699214768363,"duration":182515}},{"uid":"77b99ad7e913b04a","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699214510041,"stop":1699214570679,"duration":60638}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":436,"unknown":0,"total":443},"items":[{"uid":"2c335589c7cd45d0","reportUrl":"https://novasamatech.github.io/test-runner/4082//#testresult/2c335589c7cd45d0","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699200295291,"stop":1699200475958,"duration":180667}},{"uid":"7088f6039103db36","reportUrl":"https://novasamatech.github.io/test-runner/4081//#testresult/7088f6039103db36","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699185897376,"stop":1699185958095,"duration":60719}},{"uid":"ae4b875b30fe72b0","reportUrl":"https://novasamatech.github.io/test-runner/4080//#testresult/ae4b875b30fe72b0","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699171425087,"stop":1699171548924,"duration":123837}},{"uid":"b64a137442ada78a","reportUrl":"https://novasamatech.github.io/test-runner/4079//#testresult/b64a137442ada78a","status":"broken","statusDetails":"websocket._exceptions.WebSocketConnectionClosedException: Connection to remote host was lost.","time":{"start":1699157322651,"stop":1699157383440,"duration":60789}},{"uid":"717af21a40b86c4e","reportUrl":"https://novasamatech.github.io/test-runner/4078//#testresult/717af21a40b86c4e","status":"passed","time":{"start":1699142529168,"stop":1699142531486,"duration":2318}},{"uid":"809a2021d26113f2","reportUrl":"https://novasamatech.github.io/test-runner/4077//#testresult/809a2021d26113f2","status":"passed","time":{"start":1699128080083,"stop":1699128081175,"duration":1092}},{"uid":"ff9e480ce4aadc3","reportUrl":"https://novasamatech.github.io/test-runner/4076//#testresult/ff9e480ce4aadc3","status":"passed","time":{"start":1699113685612,"stop":1699113686535,"duration":923}},{"uid":"cd1a806b8de5cceb","reportUrl":"https://novasamatech.github.io/test-runner/4075//#testresult/cd1a806b8de5cceb","status":"passed","time":{"start":1699099281218,"stop":1699099282017,"duration":799}},{"uid":"53edd4dbdf52199c","reportUrl":"https://novasamatech.github.io/test-runner/4074//#testresult/53edd4dbdf52199c","status":"passed","time":{"start":1699084874629,"stop":1699084875601,"duration":972}},{"uid":"e913efc7fcf35f4e","reportUrl":"https://novasamatech.github.io/test-runner/4073//#testresult/e913efc7fcf35f4e","status":"passed","time":{"start":1699070468708,"stop":1699070469477,"duration":769}},{"uid":"2ecb9bb754541bb5","reportUrl":"https://novasamatech.github.io/test-runner/4071//#testresult/2ecb9bb754541bb5","status":"passed","time":{"start":1699041676589,"stop":1699041677549,"duration":960}},{"uid":"a973652d0fcb8342","reportUrl":"https://novasamatech.github.io/test-runner/4072//#testresult/a973652d0fcb8342","status":"passed","time":{"start":1699056121684,"stop":1699056122608,"duration":924}},{"uid":"6af79de8a907a29f","reportUrl":"https://novasamatech.github.io/test-runner/4070//#testresult/6af79de8a907a29f","status":"passed","time":{"start":1699027329026,"stop":1699027329764,"duration":738}},{"uid":"3795d1ee14b2e000","reportUrl":"https://novasamatech.github.io/test-runner/4069//#testresult/3795d1ee14b2e000","status":"passed","time":{"start":1699012879248,"stop":1699012880205,"duration":957}},{"uid":"2625700c06e51f7c","reportUrl":"https://novasamatech.github.io/test-runner/4068//#testresult/2625700c06e51f7c","status":"passed","time":{"start":1698998557291,"stop":1698998558260,"duration":969}},{"uid":"34493b486a9d7d0c","reportUrl":"https://novasamatech.github.io/test-runner/4067//#testresult/34493b486a9d7d0c","status":"passed","time":{"start":1698984077427,"stop":1698984078382,"duration":955}},{"uid":"28849d0917b2e3f1","reportUrl":"https://novasamatech.github.io/test-runner/4066//#testresult/28849d0917b2e3f1","status":"passed","time":{"start":1698969749264,"stop":1698969750218,"duration":954}},{"uid":"1966464fa8b0c7ba","reportUrl":"https://novasamatech.github.io/test-runner/4065//#testresult/1966464fa8b0c7ba","status":"passed","time":{"start":1698955283862,"stop":1698955284606,"duration":744}},{"uid":"ed7293bd3950a1e0","reportUrl":"https://novasamatech.github.io/test-runner/4064//#testresult/ed7293bd3950a1e0","status":"passed","time":{"start":1698940914181,"stop":1698940915138,"duration":957}},{"uid":"da55884e35bda56c","reportUrl":"https://novasamatech.github.io/test-runner/4063//#testresult/da55884e35bda56c","status":"passed","time":{"start":1698926517242,"stop":1698926518228,"duration":986}}]},"tags":[]},"source":"edf136e5d935e11.json","parameterValues":["{'url': 'wss://altair.api.onfinality.io/public-ws', 'name': 'Altair'}"]}